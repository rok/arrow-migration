{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13398350",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350",
    "key": "ARROW-13806",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12624265",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624265",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13405334",
                    "key": "ARROW-14250",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405334",
                    "fields": {
                        "summary": "[Python] Support other interval types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12623179",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623179",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13401719",
                    "key": "ARROW-14018",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401719",
                    "fields": {
                        "summary": "[Python] Interval types are not bound in Python",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13806/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 66,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302\n\n\n   - Refactored ObjectWriter helpers from arrow_to_pandas, so they can be\r\n     used for plain python types as well (generalized the lowest level so\r\n     it can work on both PyObject** and an adapter for PyList.\r\n   \r\n   - Add DateOffset to static pandas imports\r\n   \r\n   - Tried to start laying out code in a way to use C++ for Array.to_pylist\r\n     (feel free to comment).\r\n   \r\n   Support importing from timeinterval, relativedelta and DateOffset types\r\n   (this is actually mostly duck types, the one complication is that\r\n    relativedelta has a property weeks that is automatically calculated, so\r\n    some type checking is necessary).\r\n   \r\n   Open questions:\r\n    - Should we be more strict on duck typing imports? I chose generalism\r\n      over performance here (rechecking non-present attributes, etc)?\r\n    - Is the new arrow_to_python.h desirable (I think this can be easily\r\n      extended for other types)?\r\n    - My python is rusty and Python C-API even more so, please don't assume\r\n      I know exactly what I'm doing :)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T06:46:12.179+0000",
                    "updated": "2021-10-04T06:46:12.179+0000",
                    "started": "2021-10-04T06:46:12.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659420",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#issuecomment-933192894\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T06:46:26.344+0000",
                    "updated": "2021-10-04T06:46:26.344+0000",
                    "started": "2021-10-04T06:46:26.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659421",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#issuecomment-933193094\n\n\n   CC @tswast @jorisvandenbossche \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T06:47:01.477+0000",
                    "updated": "2021-10-04T06:47:01.477+0000",
                    "started": "2021-10-04T06:47:01.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659422",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721506360\n\n\n\n##########\nFile path: cpp/src/arrow/python/datetime.cc\n##########\n@@ -71,6 +71,19 @@ bool MatchFixedOffset(const std::string& tz, util::string_view* sign,\n   return iter == (tz.data() + tz.size());\n }\n \n+static PyTypeObject MonthDayNanoTupleType = {0, 0};\n+\n+static PyStructSequence_Field MonthDayNanoField[] = {\n+    {\"months\", \"The number of months in the interval\"},\n+    {\"days\", \"The number days in the interval\"},\n+    {\"nanoseconds\", \"The number of nanoseconds in the interval\"},\n+    {nullptr, nullptr}};\n+\n+static PyStructSequence_Desc MonthDayNanoTupleDesc = {\n+    \"MonthDayNanoTuple\", \"A interval consistent of months, days and nanoseconds.\",\n\nReview comment:\n       What does \"consistent\" mean here?\n\n##########\nFile path: cpp/src/arrow/python/datetime.cc\n##########\n@@ -270,6 +283,18 @@ static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_\n   return Status::OK();\n }\n \n+PyObject* NewMonthDayNanoTupleType() {\n+  if (MonthDayNanoTupleType.tp_name == nullptr) {\n+    if (PyStructSequence_InitType2(&MonthDayNanoTupleType, &MonthDayNanoTupleDesc) != 0) {\n+      Py_FatalError(\"Could not initialize MonthDayNanoTuple\");\n+    }\n+  }\n+  Py_INCREF(&MonthDayNanoTupleType);\n+  return (PyObject*)&MonthDayNanoTupleType;\n+}\n+\n+PyTypeObject* BorrowMonthDayNanoTupleType() { return &MonthDayNanoTupleType; }\n\nReview comment:\n       This doesn't seem used?\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n+        \"\"\"\n+        cdef PyObject* val\n+        val = GetResultValue(ARROW_TO_PYTHON.ToPrimitive(\n+            (deref(self.wrapped.get()))))\n+        return PyObject_to_object(val)\n+\n+    def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas DateOffset instance if Pandas is present\n+        otherwise as a named tuple containing months days and nanoseconds.\n\nReview comment:\n       I'm a bit concerned that this makes user code fragile: depending on whether Pandas is installed or not, you'll get an object with a different API.\r\n   \r\n   Instead, perhaps always return a `pa.MonthDayNano`, but add a `MonthDayNano.to_pandas()` method to produce a Pandas DateOffset?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n+  inline static Status Field(PyObject* obj,\n+                             typename MonthDayNanoTraits<field>::c_type* out,\n+                             bool* found_attrs) {\n+    *out = 0;\n+    for (const MonthDayNanoAttrData* attr = &Traits::attrs[0]; attr->multiplier != 0;\n+         ++attr) {\n+      if (attr->multiplier != 1 &&\n+          ::arrow::internal::MultiplyWithOverflow(\n+              static_cast<typename Traits::c_type>(attr->multiplier), *out, out)) {\n+        return Status::Invalid(\"Overflow on: \", (attr - 1)->name);\n+      }\n+      if (PyObject_HasAttrString(obj, attr->name)) {\n+        OwnedRef field_value(PyObject_GetAttrString(obj, attr->name));\n\nReview comment:\n       If you want to avoid a double hash lookup, you can simply call `PyObject_GetAttrString` and catch the `AttributeError` on failure.\n\n##########\nFile path: cpp/src/arrow/python/datetime.cc\n##########\n@@ -450,6 +475,19 @@ Result<std::string> TzinfoToString(PyObject* tzinfo) {\n   return PyTZInfo_utcoffset_hhmm(tzinfo);\n }\n \n+Result<PyObject*> MonthDayNanoIntervalToNamedTuple(\n\nReview comment:\n       Since NULL is return an error, you don't need to wrap the return value in a `Result<>`.\n\n##########\nFile path: cpp/src/arrow/python/CMakeLists.txt\n##########\n@@ -28,6 +28,7 @@ add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n \n set(ARROW_PYTHON_SRCS\n     arrow_to_pandas.cc\n+    arrow_to_python.cc\n\nReview comment:\n       Looks like you forgot to add this file?\n\n##########\nFile path: python/pyarrow/tests/test_array.py\n##########\n@@ -2162,6 +2163,101 @@ def test_array_from_numpy_ascii():\n     assert arrow_arr.equals(expected)\n \n \n+@pytest.mark.nopandas\n\nReview comment:\n       \"nopandas\" is for tests that fail if Pandas is installed, I think.\n\n##########\nFile path: python/pyarrow/array.pxi\n##########\n@@ -1508,6 +1508,30 @@ cdef class DurationArray(NumericArray):\n     Concrete class for Arrow arrays of duration data type.\n     \"\"\"\n \n+cdef class MonthDayNanoIntervalArray(Array):\n\nReview comment:\n       Nit, but please let's remain consistent about spacing between classes.\n\n##########\nFile path: python/pyarrow/lib.pyx\n##########\n@@ -37,6 +37,10 @@ arrow_init_numpy()\n # (used from some of our C++ code, see e.g. ARROW-5260)\n import_pyarrow()\n \n+cdef libarrow.ArrowToPython ARROW_TO_PYTHON\n+\n+MonthDayNanoTuple = NewMonthDayNanoTupleType()\n\nReview comment:\n       Nit, but I would simply call it `MonthDayNano`.\n\n##########\nFile path: python/pyarrow/array.pxi\n##########\n@@ -1508,6 +1508,30 @@ cdef class DurationArray(NumericArray):\n     Concrete class for Arrow arrays of duration data type.\n     \"\"\"\n \n+cdef class MonthDayNanoIntervalArray(Array):\n+    \"\"\"\n+    Concrete class for Arrow arrays of interval[MonthDayNano] type.\n+    \"\"\"\n+\n+    def to_pylist(self):\n+        \"\"\"\n+        Convert to a list of native Python objects.\n+\n+        is installed the objects will be\n+        pd.tseries.offsets.DateOffset objects.  Otherwise they are\n+        pyarrow.MonthDayNanoTuple objects.\n\nReview comment:\n       Same remark as for the corresponding scalar class. Also, it seems the docstring is a bit garbled?\n\n##########\nFile path: python/pyarrow/lib.pyx\n##########\n@@ -37,6 +37,10 @@ arrow_init_numpy()\n # (used from some of our C++ code, see e.g. ARROW-5260)\n import_pyarrow()\n \n+cdef libarrow.ArrowToPython ARROW_TO_PYTHON\n\nReview comment:\n       This seems rather cryptic. What does this do? Is this a globally defined converter?\r\n   (is initialization costly?)\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n\nReview comment:\n       Since we are at it, can you perhaps enclose all private APIs in the anonymous namespace?\n\n##########\nFile path: python/pyarrow/tests/test_array.py\n##########\n@@ -2162,6 +2163,101 @@ def test_array_from_numpy_ascii():\n     assert arrow_arr.equals(expected)\n \n \n+@pytest.mark.nopandas\n+def test_interval_array_from_timedelta():\n+    data = [\n+        None,\n+        datetime.timedelta(days=1, seconds=1, microseconds=1,\n+                           milliseconds=1, minutes=1, hours=1, weeks=1)]\n+\n+    # From timedelta (explicit type required)\n+    arr = pa.array(data, pa.month_day_nano_interval())\n+    assert isinstance(arr, pa.MonthDayNanoIntervalArray)\n+    assert arr.type == pa.month_day_nano_interval()\n+    expected_list = [\n+        None,\n+        pa.MonthDayNanoTuple([0, 8,\n\nReview comment:\n       Can you test with a non-zero number of months?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n\nReview comment:\n       Add a `using c_type = ...` as well?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n+  inline static Status Field(PyObject* obj,\n+                             typename MonthDayNanoTraits<field>::c_type* out,\n+                             bool* found_attrs) {\n+    *out = 0;\n+    for (const MonthDayNanoAttrData* attr = &Traits::attrs[0]; attr->multiplier != 0;\n+         ++attr) {\n+      if (attr->multiplier != 1 &&\n+          ::arrow::internal::MultiplyWithOverflow(\n+              static_cast<typename Traits::c_type>(attr->multiplier), *out, out)) {\n+        return Status::Invalid(\"Overflow on: \", (attr - 1)->name);\n+      }\n+      if (PyObject_HasAttrString(obj, attr->name)) {\n+        OwnedRef field_value(PyObject_GetAttrString(obj, attr->name));\n+        RETURN_IF_PYERROR();\n+        *found_attrs = true;\n+        if (field_value.obj() == Py_None) {\n\nReview comment:\n       What does `None` mean in this context?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:33:54.249+0000",
                    "updated": "2021-10-04T16:33:54.249+0000",
                    "started": "2021-10-04T16:33:54.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659694",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721534167\n\n\n\n##########\nFile path: cpp/src/arrow/python/CMakeLists.txt\n##########\n@@ -28,6 +28,7 @@ add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n \n set(ARROW_PYTHON_SRCS\n     arrow_to_pandas.cc\n+    arrow_to_python.cc\n\nReview comment:\n       added.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:38:23.288+0000",
                    "updated": "2021-10-04T16:38:23.288+0000",
                    "started": "2021-10-04T16:38:23.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659700",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721535058\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n\nReview comment:\n       i had these in an anonymous namespace originally and got obscure linking errors.  I can try it again to see if I get different results.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:39:32.428+0000",
                    "updated": "2021-10-04T16:39:32.428+0000",
                    "started": "2021-10-04T16:39:32.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659702",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721537234\n\n\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n+        \"\"\"\n+        cdef PyObject* val\n+        val = GetResultValue(ARROW_TO_PYTHON.ToPrimitive(\n+            (deref(self.wrapped.get()))))\n+        return PyObject_to_object(val)\n+\n+    def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas DateOffset instance if Pandas is present\n+        otherwise as a named tuple containing months days and nanoseconds.\n\nReview comment:\n       I kind of agree, I modeled this after  [Timestamps](https://github.com/apache/arrow/blob/master/python/pyarrow/scalar.pxi#L382)  which also changes behavior.  Happy to simplify this though if that is desired (along with corresponding to_pylist()) logic.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:42:28.491+0000",
                    "updated": "2021-10-04T16:42:28.491+0000",
                    "started": "2021-10-04T16:42:28.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659705",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#issuecomment-933662628\n\n\n   @pitrou thanks for the feedback, I'll address the ones I haven't commented on.  I think the most substantive one is whether return types should be different with or without Pandas.  Happy to go with whatever you and @jorisvandenbossche think is best.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:43:35.655+0000",
                    "updated": "2021-10-04T16:43:35.655+0000",
                    "started": "2021-10-04T16:43:35.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659707",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721539304\n\n\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n+        \"\"\"\n+        cdef PyObject* val\n+        val = GetResultValue(ARROW_TO_PYTHON.ToPrimitive(\n+            (deref(self.wrapped.get()))))\n+        return PyObject_to_object(val)\n+\n+    def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas DateOffset instance if Pandas is present\n+        otherwise as a named tuple containing months days and nanoseconds.\n\nReview comment:\n       Hmm, it's a bit unfortunate for timestamps, but the decision there is understandable: returning a `datetime.datetime` loses precision. Also, `pandas.Timestamp` is probably API-compatible with `datetime.datetime`.\r\n   \r\n   You don't lose any precision by returning a `MonthDayNano`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:45:09.430+0000",
                    "updated": "2021-10-04T16:45:09.430+0000",
                    "started": "2021-10-04T16:45:09.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659708",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721543618\n\n\n\n##########\nFile path: python/pyarrow/lib.pyx\n##########\n@@ -37,6 +37,10 @@ arrow_init_numpy()\n # (used from some of our C++ code, see e.g. ARROW-5260)\n import_pyarrow()\n \n+cdef libarrow.ArrowToPython ARROW_TO_PYTHON\n\nReview comment:\n       yes, globally defined converter.  This will likely change based on the outcome of simplying \"as_py\" but before it required getting references to Pandas types.  In the long run we likely need to import a few others (timestamp, timedelta, decimal, etc).  It seems like for Pandas we used C++ static variables.  It felt cleaner to me make it an explicit object.  Again don't feel too strongly here and if we eliminate the immediate need to share Pandas conversion logic this could go away.  Do you have a preference on the pattern here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:51:06.076+0000",
                    "updated": "2021-10-04T16:51:06.076+0000",
                    "started": "2021-10-04T16:51:06.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659713",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/659716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721545539\n\n\n\n##########\nFile path: python/pyarrow/lib.pyx\n##########\n@@ -37,6 +37,10 @@ arrow_init_numpy()\n # (used from some of our C++ code, see e.g. ARROW-5260)\n import_pyarrow()\n \n+cdef libarrow.ArrowToPython ARROW_TO_PYTHON\n\nReview comment:\n       I'm ok with having a wrapper object, however we shouldn't import Pandas unconditionally at startup as that's quite costly.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T16:53:19.126+0000",
                    "updated": "2021-10-04T16:53:19.126+0000",
                    "started": "2021-10-04T16:53:19.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659716",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721820721\n\n\n\n##########\nFile path: python/pyarrow/tests/test_array.py\n##########\n@@ -2162,6 +2163,101 @@ def test_array_from_numpy_ascii():\n     assert arrow_arr.equals(expected)\n \n \n+@pytest.mark.nopandas\n+def test_interval_array_from_timedelta():\n+    data = [\n+        None,\n+        datetime.timedelta(days=1, seconds=1, microseconds=1,\n+                           milliseconds=1, minutes=1, hours=1, weeks=1)]\n+\n+    # From timedelta (explicit type required)\n+    arr = pa.array(data, pa.month_day_nano_interval())\n+    assert isinstance(arr, pa.MonthDayNanoIntervalArray)\n+    assert arr.type == pa.month_day_nano_interval()\n+    expected_list = [\n+        None,\n+        pa.MonthDayNanoTuple([0, 8,\n+                              (datetime.timedelta(seconds=1, microseconds=1,\n+                                                  milliseconds=1, minutes=1,\n+                                                  hours=1) //\n+                               datetime.timedelta(microseconds=1)) * 1000])]\n+    expected = pa.array(expected_list)\n+    assert arr.equals(expected)\n+    assert arr.to_pylist() == expected_list\n+\n+# dateutil is dependency of pandas\n+\n+\n+@pytest.mark.pandas\n+def test_interval_array_from_relativedelta():\n+    from dateutil.relativedelta import relativedelta\n+    from pandas.tseries.offsets import DateOffset\n+    data = [\n+        None,\n+        relativedelta(years=1, months=1,\n+                      days=1, seconds=1, microseconds=1,\n+                      minutes=1, hours=1, weeks=1, leapdays=1)]\n+    # Note leapdays are ignored.\n\nReview comment:\n       Nit: Can we mention this in at least one place in a docstring.\n\n##########\nFile path: cpp/src/arrow/python/arrow_to_python.h\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Functions for converting between pandas's NumPy-based data representation\n+// and Arrow data structures\n+\n+#pragma once\n+\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/util/hashing.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class Scalar;\n+\n+namespace py {\n+\n+struct ArrowToPythonObjectOptions {\n+  MemoryPool* pool = default_memory_pool();\n+  bool deduplicate_objects = false;\n+};\n+\n+class ARROW_PYTHON_EXPORT ArrowToPython {\n+ public:\n+  // \\brief Converts the given Array to a PyList object. Returns NULL if there\n+  // is an error converting the Array. The list elements are the same ones\n+  // generated via ToLogical()\n+  //\n+  // N.B. This has limited type support.  ARROW-12976 tracks extending the implementation.\n+  Result<PyObject*> ToPyList(const Array& array);\n+\n+  // Populates out_objects with the result of converting the array values\n+  // to python objects. The same logic as ToLogical().\n+  //\n+  // N.B. Not all types are supported. ARROW-12976 tracks extending the implementation.\n+  Status ToNumpyObjectArray(const ArrowToPythonObjectOptions& options,\n+                            const ChunkedArray& array, PyObject** out_objects);\n+\n+  // \\brief Converts the given Scalar to a python object that best corresponds\n+  // with the Scalar's type.\n+  //\n+  // For example timestamp[ms] is translated into datetime.datetime.\n+  //\n+  // N.B. This has limited type support.  ARROW-12976 tracks extending the implementation.\n+  Result<PyObject*> ToLogical(const Scalar& scalar);\n+\n+  // \\brief Converts the given Scalar the type that is closed to its arrow\n+  // representation.\n+  //\n+  // For instance timestamp would be translated to a integer representing an\n+  // offset from the unix epoch.\n+  //\n+  // Returns nullptr on error.\n+  //\n+  // GIL must be health when calling this method.\n+  // N.B. This has limited type support.  ARROW-12976 tracks full implementation.\n+  Result<PyObject*> ToPrimitive(const Scalar& scalar);\n+\n+ private:\n+  Status Init();\n+};\n+\n+namespace internal {\n+// TODO(ARROW-12976):  See if we can refactor Pandas ObjectWriter logic\n+// to the .cc file and move this there as well if we can.\n+\n+// Generic Array -> PyObject** converter that handles object deduplication, if\n+// requested\n+template <typename ArrayType, typename WriteValue, typename Assigner>\n+inline Status WriteArrayObjects(const ArrayType& arr, WriteValue&& write_func,\n+                                Assigner out_values) {\n+  // TODO(ARROW-12976): Use visitor here?\n+  const bool has_nulls = arr.null_count() > 0;\n+  for (int64_t i = 0; i < arr.length(); ++i) {\n+    if (has_nulls && arr.IsNull(i)) {\n+      Py_INCREF(Py_None);\n+      *out_values = Py_None;\n+    } else {\n+      RETURN_NOT_OK(write_func(arr.GetView(i), out_values));\n+    }\n+    ++out_values;\n+  }\n\nReview comment:\n       Is this `has_nulls` enabling some kind of compiler optimization?  From a naive read it doesn't look like it is providing any value.\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n\nReview comment:\n       ```suggestion\r\n           Returns this value as a pyarrow.MonthDayNanoTuple.\r\n   ```\n\n##########\nFile path: python/pyarrow/types.pxi\n##########\n@@ -2154,6 +2154,14 @@ def duration(unit):\n     return out\n \n \n+def month_day_nano_interval():\n+    \"\"\"\n+    Create instance of a interval representing the time between two calendar\n+    instances represented as a triple of months, days and nanoseconds.\n+    \"\"\"\n+    return primitive_type(_Type_INTERVAL_MONTH_DAY_NANO)\n\nReview comment:\n       Nit: I would avoid \"the time between two calendar instances\" because a duration/Joda-interval is traditionally defined as \"the time between two instants\".  I haven't seen intervals / periods defined in this way before (possibly because calendars could change).\r\n   \r\n   Also, instead of `a triple of months` (which might make a python user think 3-tuple) could we say \"represented by values for months, days, and nanoseconds\"?  Or, if we want to be real precise, \"represented by a signed 32 bit integer of months, a signed 32 bit integer of days, and a signed 64 bit integer of nanoseconds\".\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n+        \"\"\"\n+        cdef PyObject* val\n+        val = GetResultValue(ARROW_TO_PYTHON.ToPrimitive(\n+            (deref(self.wrapped.get()))))\n+        return PyObject_to_object(val)\n+\n+    def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas DateOffset instance if Pandas is present\n+        otherwise as a named tuple containing months days and nanoseconds.\n\nReview comment:\n       I'm going to agree with @pitrou .  With pyarrow we even have cases where users aren't even really aware they are using pyarrow.  I could see a circumstance where they install their application on some new machine or environment and suddenly start getting errors.  Maybe someday we can add a `use_pandas_types` option to `as_py`, `to_pylist`, and `to_pydict`.  That way we can error if the expected library is not available instead of silently changing the type.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T01:50:59.487+0000",
                    "updated": "2021-10-05T01:50:59.487+0000",
                    "started": "2021-10-05T01:50:59.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660051",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721869652\n\n\n\n##########\nFile path: cpp/src/arrow/python/arrow_to_python.h\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Functions for converting between pandas's NumPy-based data representation\n+// and Arrow data structures\n+\n+#pragma once\n+\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/util/hashing.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class Scalar;\n+\n+namespace py {\n+\n+struct ArrowToPythonObjectOptions {\n+  MemoryPool* pool = default_memory_pool();\n+  bool deduplicate_objects = false;\n+};\n+\n+class ARROW_PYTHON_EXPORT ArrowToPython {\n+ public:\n+  // \\brief Converts the given Array to a PyList object. Returns NULL if there\n+  // is an error converting the Array. The list elements are the same ones\n+  // generated via ToLogical()\n+  //\n+  // N.B. This has limited type support.  ARROW-12976 tracks extending the implementation.\n+  Result<PyObject*> ToPyList(const Array& array);\n+\n+  // Populates out_objects with the result of converting the array values\n+  // to python objects. The same logic as ToLogical().\n+  //\n+  // N.B. Not all types are supported. ARROW-12976 tracks extending the implementation.\n+  Status ToNumpyObjectArray(const ArrowToPythonObjectOptions& options,\n+                            const ChunkedArray& array, PyObject** out_objects);\n+\n+  // \\brief Converts the given Scalar to a python object that best corresponds\n+  // with the Scalar's type.\n+  //\n+  // For example timestamp[ms] is translated into datetime.datetime.\n+  //\n+  // N.B. This has limited type support.  ARROW-12976 tracks extending the implementation.\n+  Result<PyObject*> ToLogical(const Scalar& scalar);\n+\n+  // \\brief Converts the given Scalar the type that is closed to its arrow\n+  // representation.\n+  //\n+  // For instance timestamp would be translated to a integer representing an\n+  // offset from the unix epoch.\n+  //\n+  // Returns nullptr on error.\n+  //\n+  // GIL must be health when calling this method.\n+  // N.B. This has limited type support.  ARROW-12976 tracks full implementation.\n+  Result<PyObject*> ToPrimitive(const Scalar& scalar);\n+\n+ private:\n+  Status Init();\n+};\n+\n+namespace internal {\n+// TODO(ARROW-12976):  See if we can refactor Pandas ObjectWriter logic\n+// to the .cc file and move this there as well if we can.\n+\n+// Generic Array -> PyObject** converter that handles object deduplication, if\n+// requested\n+template <typename ArrayType, typename WriteValue, typename Assigner>\n+inline Status WriteArrayObjects(const ArrayType& arr, WriteValue&& write_func,\n+                                Assigner out_values) {\n+  // TODO(ARROW-12976): Use visitor here?\n+  const bool has_nulls = arr.null_count() > 0;\n+  for (int64_t i = 0; i < arr.length(); ++i) {\n+    if (has_nulls && arr.IsNull(i)) {\n+      Py_INCREF(Py_None);\n+      *out_values = Py_None;\n+    } else {\n+      RETURN_NOT_OK(write_func(arr.GetView(i), out_values));\n+    }\n+    ++out_values;\n+  }\n\nReview comment:\n       this was moved from existing code base, I don't know but would prefer to handle the TODO above use Visitor in general.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T03:59:30.791+0000",
                    "updated": "2021-10-05T03:59:30.791+0000",
                    "started": "2021-10-05T03:59:30.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660080",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721878423\n\n\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -514,6 +514,32 @@ cdef class DurationScalar(Scalar):\n             return datetime.timedelta(microseconds=sp.value // 1000)\n \n \n+cdef class MonthDayNanoIntervalScalar(Scalar):\n+    \"\"\"\n+    Concrete class for month, day, nanosecond scalars.\n+    \"\"\"\n+\n+    @property\n+    def value(self):\n+        \"\"\"\n+        Returns this value pyarrow.MonthDayNanoTuple.\n+        \"\"\"\n+        cdef PyObject* val\n+        val = GetResultValue(ARROW_TO_PYTHON.ToPrimitive(\n+            (deref(self.wrapped.get()))))\n+        return PyObject_to_object(val)\n+\n+    def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas DateOffset instance if Pandas is present\n+        otherwise as a named tuple containing months days and nanoseconds.\n\nReview comment:\n       Going to change.  This actually simplifies the code a lot.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T04:28:43.399+0000",
                    "updated": "2021-10-05T04:28:43.399+0000",
                    "started": "2021-10-05T04:28:43.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660085",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721889385\n\n\n\n##########\nFile path: cpp/src/arrow/python/datetime.cc\n##########\n@@ -71,6 +71,19 @@ bool MatchFixedOffset(const std::string& tz, util::string_view* sign,\n   return iter == (tz.data() + tz.size());\n }\n \n+static PyTypeObject MonthDayNanoTupleType = {0, 0};\n+\n+static PyStructSequence_Field MonthDayNanoField[] = {\n+    {\"months\", \"The number of months in the interval\"},\n+    {\"days\", \"The number days in the interval\"},\n+    {\"nanoseconds\", \"The number of nanoseconds in the interval\"},\n+    {nullptr, nullptr}};\n+\n+static PyStructSequence_Desc MonthDayNanoTupleDesc = {\n+    \"MonthDayNanoTuple\", \"A interval consistent of months, days and nanoseconds.\",\n\nReview comment:\n       meant to say consisting\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:01:36.588+0000",
                    "updated": "2021-10-05T05:01:36.588+0000",
                    "started": "2021-10-05T05:01:36.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660095",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721889488\n\n\n\n##########\nFile path: cpp/src/arrow/python/datetime.cc\n##########\n@@ -270,6 +283,18 @@ static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_\n   return Status::OK();\n }\n \n+PyObject* NewMonthDayNanoTupleType() {\n+  if (MonthDayNanoTupleType.tp_name == nullptr) {\n+    if (PyStructSequence_InitType2(&MonthDayNanoTupleType, &MonthDayNanoTupleDesc) != 0) {\n+      Py_FatalError(\"Could not initialize MonthDayNanoTuple\");\n+    }\n+  }\n+  Py_INCREF(&MonthDayNanoTupleType);\n+  return (PyObject*)&MonthDayNanoTupleType;\n+}\n+\n+PyTypeObject* BorrowMonthDayNanoTupleType() { return &MonthDayNanoTupleType; }\n\nReview comment:\n       yep, left over from a prior design. removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:01:50.308+0000",
                    "updated": "2021-10-05T05:01:50.308+0000",
                    "started": "2021-10-05T05:01:50.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660096",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721891111\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n\nReview comment:\n       done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:06:34.411+0000",
                    "updated": "2021-10-05T05:06:34.411+0000",
                    "started": "2021-10-05T05:06:34.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660097",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721891998\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n+  inline static Status Field(PyObject* obj,\n+                             typename MonthDayNanoTraits<field>::c_type* out,\n+                             bool* found_attrs) {\n+    *out = 0;\n+    for (const MonthDayNanoAttrData* attr = &Traits::attrs[0]; attr->multiplier != 0;\n+         ++attr) {\n+      if (attr->multiplier != 1 &&\n+          ::arrow::internal::MultiplyWithOverflow(\n+              static_cast<typename Traits::c_type>(attr->multiplier), *out, out)) {\n+        return Status::Invalid(\"Overflow on: \", (attr - 1)->name);\n+      }\n+      if (PyObject_HasAttrString(obj, attr->name)) {\n+        OwnedRef field_value(PyObject_GetAttrString(obj, attr->name));\n\nReview comment:\n       Good point. Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:09:08.330+0000",
                    "updated": "2021-10-05T05:09:08.330+0000",
                    "started": "2021-10-05T05:09:08.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660098",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721892098\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n+  inline static Status Field(PyObject* obj,\n+                             typename MonthDayNanoTraits<field>::c_type* out,\n+                             bool* found_attrs) {\n+    *out = 0;\n+    for (const MonthDayNanoAttrData* attr = &Traits::attrs[0]; attr->multiplier != 0;\n+         ++attr) {\n+      if (attr->multiplier != 1 &&\n+          ::arrow::internal::MultiplyWithOverflow(\n+              static_cast<typename Traits::c_type>(attr->multiplier), *out, out)) {\n+        return Status::Invalid(\"Overflow on: \", (attr - 1)->name);\n+      }\n+      if (PyObject_HasAttrString(obj, attr->name)) {\n+        OwnedRef field_value(PyObject_GetAttrString(obj, attr->name));\n+        RETURN_IF_PYERROR();\n+        *found_attrs = true;\n+        if (field_value.obj() == Py_None) {\n\nReview comment:\n       i thought it might have been a valid value.  remove this check.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:09:32.861+0000",
                    "updated": "2021-10-05T05:09:32.861+0000",
                    "started": "2021-10-05T05:09:32.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660099",
                    "issueId": "13398350"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/worklog/660101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11302:\nURL: https://github.com/apache/arrow/pull/11302#discussion_r721892098\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -68,6 +69,95 @@ using internal::MakeConverter;\n \n namespace py {\n \n+enum class MonthDayNanoField { kMonths, kWeeksAndDays, kDaysOnly, kNanoseconds };\n+\n+template <MonthDayNanoField field>\n+struct MonthDayNanoTraits;\n+\n+struct MonthDayNanoAttrData {\n+  const char* name;\n+  const int64_t multiplier;\n+};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kMonths> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"months\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kMonths>::attrs[] = {\n+    {\"years\", 1}, {\"months\", /*months_in_year=*/12}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kWeeksAndDays>::attrs[] =\n+    {{\"weeks\", 1}, {\"days\", /*days_in_week=*/7}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kDaysOnly> {\n+  using c_type = int32_t;\n+  static constexpr char name[] = \"days\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kDaysOnly>::attrs[] = {\n+    {\"days\", 1}, {nullptr, 0}};\n+\n+template <>\n+struct MonthDayNanoTraits<MonthDayNanoField::kNanoseconds> {\n+  using c_type = int64_t;\n+  static constexpr char name[] = \"nanoseconds\";\n+  static const MonthDayNanoAttrData attrs[];\n+};\n+\n+const MonthDayNanoAttrData MonthDayNanoTraits<MonthDayNanoField::kNanoseconds>::attrs[] =\n+    {{\"hours\", 1},\n+     {\"minutes\", /*minutes_in_hours=*/60},\n+     {\"seconds\", /*seconds_in_minute=*/60},\n+     {\"milliseconds\", /*milliseconds_in_seconds*/ 1000},\n+     {\"microseconds\", /*microseconds_in_millseconds=*/1000},\n+     {\"nanoseconds\", /*nanoseconds_in_microseconds=*/1000},\n+     {nullptr, 0}};\n+\n+template <MonthDayNanoField field>\n+struct PopulateMonthDayNano {\n+  using Traits = MonthDayNanoTraits<field>;\n+  inline static Status Field(PyObject* obj,\n+                             typename MonthDayNanoTraits<field>::c_type* out,\n+                             bool* found_attrs) {\n+    *out = 0;\n+    for (const MonthDayNanoAttrData* attr = &Traits::attrs[0]; attr->multiplier != 0;\n+         ++attr) {\n+      if (attr->multiplier != 1 &&\n+          ::arrow::internal::MultiplyWithOverflow(\n+              static_cast<typename Traits::c_type>(attr->multiplier), *out, out)) {\n+        return Status::Invalid(\"Overflow on: \", (attr - 1)->name);\n+      }\n+      if (PyObject_HasAttrString(obj, attr->name)) {\n+        OwnedRef field_value(PyObject_GetAttrString(obj, attr->name));\n+        RETURN_IF_PYERROR();\n+        *found_attrs = true;\n+        if (field_value.obj() == Py_None) {\n\nReview comment:\n       i think I mean null here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T05:09:59.494+0000",
                    "updated": "2021-10-05T05:09:59.494+0000",
                    "started": "2021-10-05T05:09:59.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660101",
                    "issueId": "13398350"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 39600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49912b19[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@614d1082[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e8b8868[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@374b463b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@521065b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3993aa1d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b39bd8f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@362e424d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67c28cdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4325017a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55e61954[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@111e058f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 07 10:36:58 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-07T10:36:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13806/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-08-31T03:27:55.000+0000",
        "updated": "2021-10-07T23:37:00.000+0000",
        "timeoriginalestimate": null,
        "description": "[https://github.com/apache/arrow/pull/10177]\u00a0has been merged we should support conversion to and from this type for standard python surface areas.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add conversion to/from Pandas/Python for Month, Day Nano Interval Type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17407179",
                    "id": "17407179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Note that the existing interval types (Month, and DayTime) are also not yet supported, not even basic bindings of the types / arrays. So I think a first step would be to add that (with simple conversion based on the raw values?).\r\n\r\nFor proper conversion to/from Python, the question is also what kind of value to use on the Python side. AFAIK there is not really a Python scalar from the standard library that represents such interval values ({{datetime.timedelta}} maps to our Duration type, I think). The dateutil package has a {{relativedelta}} object that can be used for this (but it's an external package, and not sure how widely used it is).\r\n\r\nFor numpy-based conversion, the Months unit could be represented by \"timedelta64[M]\", as both are a count of number of months (although not a zero-copy conversion, since in numpy it's always 64bit). But for DayTime and MonthDayNano, there is no equivalent (or maybe as a numpy record/struct array?).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-08-31T08:41:43.732+0000",
                    "updated": "2021-08-31T08:41:43.732+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17408527",
                    "id": "17408527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~tswast]\u00a0suggested [https://pandas.pydata.org/docs/reference/api/pandas.tseries.offsets.DateOffset.html]\u00a0as a possible type I didn't look into how fields are stored in it yet.\u00a0 Open to suggestion, if no type really maps well then numpy struct seems like a reasonable default to me.\r\n\r\n\u00a0\r\n\r\nI'll try to tackle conversion of the existing types as well.\u00a0 After reviewing I'll try to make reasonable choices but if there are strong inclinations.\u00a0 For standard python types my inclination is to map:\r\n\r\nDayMillis to datetime.timedelta (according to docs it stores days, seconds and microseconds as separate fields).\u00a0 Not sure about the reverse mapping though\r\n\r\nFor numpy-based conversion of months, timedelta64[M] sounds good to me.\u00a0\r\n\r\n\u00a0\r\n\r\nFor month day nanos, I think if DateOffset doesn't work for numpy, the struct type seems correct to me.\u00a0 For python, I think maybe just a triple (namedtuple) in the arrow namespace might make sense.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-02T04:14:32.860+0000",
                    "updated": "2021-09-02T04:14:32.860+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17408893",
                    "id": "17408893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tswast",
                        "name": "tswast",
                        "key": "tswast",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Swast",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Regarding \"Python\" conversion, we decided in the Python BigQuery client that dateutil is widely used (including by pandas) to go with\u00a0relativedelta for a similar conversion from this data type to Python object. [https://github.com/googleapis/python-bigquery/pull/840]\r\n\r\nThe package appears to be widely used and from what I can tell from [https://github.com/dateutil/dateutil]\u00a0no additional transitive dependencies to worry about.\r\n\r\nThat said, a namedtuple or dict where the names match the arguments to relativedelta (months, days, microseconds) would be pretty easy to convert to a relativedelta if not.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tswast",
                        "name": "tswast",
                        "key": "tswast",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Swast",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-09-02T14:34:59.330+0000",
                    "updated": "2021-09-02T14:34:59.330+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17413808",
                    "id": "17413808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Pandas is an optional dependency of Arrow.\u00a0 Given that `relativedelta` only supports microsecond precision and the to_pylist methods on arrays don't support parameterization, I think I will go with a named tuple approach for pure python and use DateOffset for pandas conversion. I'll see how hard it would be to import relativedelta's optional from python to construct the array.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-12T22:14:30.647+0000",
                    "updated": "2021-09-12T22:14:30.647+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17422255",
                    "id": "17422255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "So I've started implementation.  The approach I'm going to go with:\r\n\r\n- Conversion to Pandas will use DateOffset (object dtype).\r\n- Conversion to Python will used a named tuple\r\n- Inference from python will detect DateOffset, relevativedelta or the named tuple \r\n- Conversion (once type is inferred or provided) from python will use duck typing that should support timedelta (timedelta is inferred today to be duration and that won't change),  DateOffset, relativedelta and the named tuple of export.  It will ignore \"absolute\" fields in the latter two and also ignore leapdays in relativedelta.\r\n\r\nPlease provide feedback if this is reasonable.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-29T17:02:09.712+0000",
                    "updated": "2021-09-29T17:02:09.712+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17423151",
                    "id": "17423151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~amol-] I moved this back to the 6.0 milestone. It's of course no blocker, but as long as we have the intention to try to get it done for 6.0, I think we can keep the milestone on it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-10-01T07:25:16.303+0000",
                    "updated": "2021-10-01T07:25:16.303+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17423155",
                    "id": "17423155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~emkornfield] that sounds good to me. \r\n\r\nMaybe one note that we could also do this in several PRs (eg already start with plain Python tuples conversion, so we have at least basic bindings for the interval type; cfr ARROW-14018)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-10-01T07:33:57.714+0000",
                    "updated": "2021-10-01T07:33:57.714+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17423775",
                    "id": "17423775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~jorisvandenbossche] I posted a PR for MonthDayNanos interval.  I'll think this was large enough that I will try to do another one for the other types (the PR contains a proposal for moving most of the logic to C++ and didn't want to put too much in it, if this looks good I think the other interval types probably won't be too bad).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-10-04T06:51:07.157+0000",
                    "updated": "2021-10-04T06:52:36.088+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398350/comment/17425470",
                    "id": "17425470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11302\n[https://github.com/apache/arrow/pull/11302]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-10-07T10:36:58.603+0000",
                    "updated": "2021-10-07T10:36:58.603+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uftc:",
        "customfield_12314139": null
    }
}