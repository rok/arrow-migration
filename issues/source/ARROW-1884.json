{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13122600",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122600",
    "key": "ARROW-1884",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1884/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@496bbe74[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c9c4976[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b72b50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@197e1529[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c9704c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@22189f59[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ccbdde1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7575540c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2110e76f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@47144643[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@572bf95[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5a785e03[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 07 20:54:32 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-12-07T20:54:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1884/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-12-04T15:09:22.000+0000",
        "updated": "2017-12-07T20:54:32.000+0000",
        "timeoriginalestimate": null,
        "description": "These are exposed in the public API in {{arrow::ipc}}, and could possibly mislead users: http://arrow.apache.org/docs/cpp/namespacearrow_1_1ipc.html",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Make JsonReader/JsonWriter classes internal APIs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122600/comment/16282298",
                    "id": "16282298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1400: ARROW-1884: [C++] Exclude integration test JSON reader/writer classes from public API\nURL: https://github.com/apache/arrow/pull/1400\n \n \n   These were showing up in our Doxygen docs and may mislead users reading the public API into thinking these classes do something that they do not (they don't read general JSON)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-07T18:39:28.288+0000",
                    "updated": "2017-12-07T18:39:28.288+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122600/comment/16282513",
                    "id": "16282513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1400\n[https://github.com/apache/arrow/pull/1400]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-12-07T20:54:30.484+0000",
                    "updated": "2017-12-07T20:54:30.484+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122600/comment/16282514",
                    "id": "16282514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1400: ARROW-1884: [C++] Exclude integration test JSON reader/writer classes from public API\nURL: https://github.com/apache/arrow/pull/1400\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/ipc/ipc-json-test.cc b/cpp/src/arrow/ipc/ipc-json-test.cc\nindex e496826f9..12fa4bf3e 100644\n--- a/cpp/src/arrow/ipc/ipc-json-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-json-test.cc\n@@ -39,6 +39,7 @@\n \n namespace arrow {\n namespace ipc {\n+namespace internal {\n namespace json {\n \n void TestSchemaRoundTrip(const Schema& schema) {\n@@ -46,7 +47,7 @@ void TestSchemaRoundTrip(const Schema& schema) {\n   rj::Writer<rj::StringBuffer> writer(sb);\n \n   writer.StartObject();\n-  ASSERT_OK(internal::WriteSchema(schema, &writer));\n+  ASSERT_OK(WriteSchema(schema, &writer));\n   writer.EndObject();\n \n   std::string json_schema = sb.GetString();\n@@ -55,7 +56,7 @@ void TestSchemaRoundTrip(const Schema& schema) {\n   d.Parse(json_schema);\n \n   std::shared_ptr<Schema> out;\n-  if (!internal::ReadSchema(d, default_memory_pool(), &out).ok()) {\n+  if (!ReadSchema(d, default_memory_pool(), &out).ok()) {\n     FAIL() << \"Unable to read JSON schema: \" << json_schema;\n   }\n \n@@ -70,7 +71,7 @@ void TestArrayRoundTrip(const Array& array) {\n   rj::StringBuffer sb;\n   rj::Writer<rj::StringBuffer> writer(sb);\n \n-  ASSERT_OK(internal::WriteArray(name, array, &writer));\n+  ASSERT_OK(WriteArray(name, array, &writer));\n \n   std::string array_as_json = sb.GetString();\n \n@@ -82,7 +83,7 @@ void TestArrayRoundTrip(const Array& array) {\n   }\n \n   std::shared_ptr<Array> out;\n-  ASSERT_OK(internal::ReadArray(default_memory_pool(), d, array.type(), &out));\n+  ASSERT_OK(ReadArray(default_memory_pool(), d, array.type(), &out));\n \n   // std::cout << array_as_json << std::endl;\n   CompareArraysDetailed(0, *out, array);\n@@ -415,5 +416,6 @@ TEST_P(TestJsonRoundTrip, RoundTrip) {\n INSTANTIATE_TEST_CASE_P(TestJsonRoundTrip, TestJsonRoundTrip, BATCH_CASES());\n \n }  // namespace json\n+}  // namespace internal\n }  // namespace ipc\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/ipc/json-integration-test.cc b/cpp/src/arrow/ipc/json-integration-test.cc\nindex f362d9701..37778fa25 100644\n--- a/cpp/src/arrow/ipc/json-integration-test.cc\n+++ b/cpp/src/arrow/ipc/json-integration-test.cc\n@@ -50,8 +50,7 @@ DEFINE_bool(verbose, true, \"Verbose output\");\n namespace fs = boost::filesystem;\n \n namespace arrow {\n-\n-class Buffer;\n+namespace ipc {\n \n bool file_exists(const char* path) {\n   std::ifstream handle(path);\n@@ -73,16 +72,15 @@ static Status ConvertJsonToArrow(const std::string& json_path,\n   std::shared_ptr<Buffer> json_buffer;\n   RETURN_NOT_OK(in_file->Read(file_size, &json_buffer));\n \n-  std::unique_ptr<ipc::JsonReader> reader;\n-  RETURN_NOT_OK(ipc::JsonReader::Open(json_buffer, &reader));\n+  std::unique_ptr<internal::json::JsonReader> reader;\n+  RETURN_NOT_OK(internal::json::JsonReader::Open(json_buffer, &reader));\n \n   if (FLAGS_verbose) {\n     std::cout << \"Found schema: \" << reader->schema()->ToString() << std::endl;\n   }\n \n-  std::shared_ptr<ipc::RecordBatchWriter> writer;\n-  RETURN_NOT_OK(\n-      ipc::RecordBatchFileWriter::Open(out_file.get(), reader->schema(), &writer));\n+  std::shared_ptr<RecordBatchWriter> writer;\n+  RETURN_NOT_OK(RecordBatchFileWriter::Open(out_file.get(), reader->schema(), &writer));\n \n   for (int i = 0; i < reader->num_record_batches(); ++i) {\n     std::shared_ptr<RecordBatch> batch;\n@@ -101,15 +99,15 @@ static Status ConvertArrowToJson(const std::string& arrow_path,\n   RETURN_NOT_OK(io::ReadableFile::Open(arrow_path, &in_file));\n   RETURN_NOT_OK(io::FileOutputStream::Open(json_path, &out_file));\n \n-  std::shared_ptr<ipc::RecordBatchFileReader> reader;\n-  RETURN_NOT_OK(ipc::RecordBatchFileReader::Open(in_file.get(), &reader));\n+  std::shared_ptr<RecordBatchFileReader> reader;\n+  RETURN_NOT_OK(RecordBatchFileReader::Open(in_file.get(), &reader));\n \n   if (FLAGS_verbose) {\n     std::cout << \"Found schema: \" << reader->schema()->ToString() << std::endl;\n   }\n \n-  std::unique_ptr<ipc::JsonWriter> writer;\n-  RETURN_NOT_OK(ipc::JsonWriter::Open(reader->schema(), &writer));\n+  std::unique_ptr<internal::json::JsonWriter> writer;\n+  RETURN_NOT_OK(internal::json::JsonWriter::Open(reader->schema(), &writer));\n \n   for (int i = 0; i < reader->num_record_batches(); ++i) {\n     std::shared_ptr<RecordBatch> batch;\n@@ -134,15 +132,15 @@ static Status ValidateArrowVsJson(const std::string& arrow_path,\n   std::shared_ptr<Buffer> json_buffer;\n   RETURN_NOT_OK(json_file->Read(file_size, &json_buffer));\n \n-  std::unique_ptr<ipc::JsonReader> json_reader;\n-  RETURN_NOT_OK(ipc::JsonReader::Open(json_buffer, &json_reader));\n+  std::unique_ptr<internal::json::JsonReader> json_reader;\n+  RETURN_NOT_OK(internal::json::JsonReader::Open(json_buffer, &json_reader));\n \n   // Construct Arrow reader\n   std::shared_ptr<io::ReadableFile> arrow_file;\n   RETURN_NOT_OK(io::ReadableFile::Open(arrow_path, &arrow_file));\n \n-  std::shared_ptr<ipc::RecordBatchFileReader> arrow_reader;\n-  RETURN_NOT_OK(ipc::RecordBatchFileReader::Open(arrow_file.get(), &arrow_reader));\n+  std::shared_ptr<RecordBatchFileReader> arrow_reader;\n+  RETURN_NOT_OK(RecordBatchFileReader::Open(arrow_file.get(), &arrow_reader));\n \n   auto json_schema = json_reader->schema();\n   auto arrow_schema = arrow_reader->schema();\n@@ -399,6 +397,7 @@ TEST_F(TestJSONIntegration, ErrorStates) {\n   ASSERT_RAISES(Invalid, RunCommand(json_path, \"\", \"VALIDATE\"));\n }\n \n+}  // namespace ipc\n }  // namespace arrow\n \n int main(int argc, char** argv) {\n@@ -407,7 +406,7 @@ int main(int argc, char** argv) {\n   int ret = 0;\n \n   if (FLAGS_integration) {\n-    arrow::Status result = arrow::RunCommand(FLAGS_json, FLAGS_arrow, FLAGS_mode);\n+    arrow::Status result = arrow::ipc::RunCommand(FLAGS_json, FLAGS_arrow, FLAGS_mode);\n     if (!result.ok()) {\n       std::cout << \"Error message: \" << result.ToString() << std::endl;\n       ret = 1;\ndiff --git a/cpp/src/arrow/ipc/json-internal.cc b/cpp/src/arrow/ipc/json-internal.cc\nindex 11a6956eb..4088a8f20 100644\n--- a/cpp/src/arrow/ipc/json-internal.cc\n+++ b/cpp/src/arrow/ipc/json-internal.cc\n@@ -40,8 +40,11 @@\n \n namespace arrow {\n namespace ipc {\n-namespace json {\n namespace internal {\n+namespace json {\n+\n+using ::arrow::ipc::DictionaryMemo;\n+using ::arrow::ipc::DictionaryTypeMap;\n \n static std::string GetFloatingPrecisionName(FloatingPoint::Precision precision) {\n   switch (precision) {\n@@ -1463,7 +1466,7 @@ Status ReadArray(MemoryPool* pool, const rj::Value& json_array, const Schema& sc\n   return ReadArray(pool, json_array, result->type(), array);\n }\n \n-}  // namespace internal\n }  // namespace json\n+}  // namespace internal\n }  // namespace ipc\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/ipc/json-internal.h b/cpp/src/arrow/ipc/json-internal.h\nindex 506fe6829..92afc1444 100644\n--- a/cpp/src/arrow/ipc/json-internal.h\n+++ b/cpp/src/arrow/ipc/json-internal.h\n@@ -92,8 +92,8 @@ using RjObject = rj::Value::ConstObject;\n \n namespace arrow {\n namespace ipc {\n-namespace json {\n namespace internal {\n+namespace json {\n \n Status WriteSchema(const Schema& schema, RjWriter* writer);\n Status WriteRecordBatch(const RecordBatch& batch, RjWriter* writer);\n@@ -111,8 +111,8 @@ Status ReadArray(MemoryPool* pool, const rj::Value& json_obj,\n Status ReadArray(MemoryPool* pool, const rj::Value& json_obj, const Schema& schema,\n                  std::shared_ptr<Array>* array);\n \n-}  // namespace internal\n }  // namespace json\n+}  // namespace internal\n }  // namespace ipc\n }  // namespace arrow\n \ndiff --git a/cpp/src/arrow/ipc/json.cc b/cpp/src/arrow/ipc/json.cc\nindex ea2947d5d..394563c53 100644\n--- a/cpp/src/arrow/ipc/json.cc\n+++ b/cpp/src/arrow/ipc/json.cc\n@@ -33,6 +33,8 @@ using std::size_t;\n \n namespace arrow {\n namespace ipc {\n+namespace internal {\n+namespace json {\n \n // ----------------------------------------------------------------------\n // Writer implementation\n@@ -45,7 +47,7 @@ class JsonWriter::JsonWriterImpl {\n \n   Status Start() {\n     writer_->StartObject();\n-    RETURN_NOT_OK(json::internal::WriteSchema(*schema_, writer_.get()));\n+    RETURN_NOT_OK(json::WriteSchema(*schema_, writer_.get()));\n \n     // Record batches\n     writer_->Key(\"batches\");\n@@ -63,7 +65,7 @@ class JsonWriter::JsonWriterImpl {\n \n   Status WriteRecordBatch(const RecordBatch& batch) {\n     DCHECK_EQ(batch.num_columns(), schema_->num_fields());\n-    return json::internal::WriteRecordBatch(batch, writer_.get());\n+    return json::WriteRecordBatch(batch, writer_.get());\n   }\n \n  private:\n@@ -106,7 +108,7 @@ class JsonReader::JsonReaderImpl {\n       return Status::IOError(\"JSON parsing failed\");\n     }\n \n-    RETURN_NOT_OK(json::internal::ReadSchema(doc_, pool_, &schema_));\n+    RETURN_NOT_OK(json::ReadSchema(doc_, pool_, &schema_));\n \n     auto it = doc_.FindMember(\"batches\");\n     RETURN_NOT_ARRAY(\"batches\", it, doc_);\n@@ -120,8 +122,7 @@ class JsonReader::JsonReaderImpl {\n     DCHECK_LT(i, static_cast<int>(record_batches_->GetArray().Size()))\n         << \"i out of bounds\";\n \n-    return json::internal::ReadRecordBatch(record_batches_->GetArray()[i], schema_, pool_,\n-                                           batch);\n+    return json::ReadRecordBatch(record_batches_->GetArray()[i], schema_, pool_, batch);\n   }\n \n   std::shared_ptr<Schema> schema() const { return schema_; }\n@@ -164,5 +165,7 @@ Status JsonReader::ReadRecordBatch(int i, std::shared_ptr<RecordBatch>* batch) c\n   return impl_->ReadRecordBatch(i, batch);\n }\n \n+}  // namespace json\n+}  // namespace internal\n }  // namespace ipc\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/ipc/json.h b/cpp/src/arrow/ipc/json.h\nindex 51f30f0c1..674c3745e 100644\n--- a/cpp/src/arrow/ipc/json.h\n+++ b/cpp/src/arrow/ipc/json.h\n@@ -34,12 +34,14 @@ class RecordBatch;\n class Schema;\n \n namespace ipc {\n+namespace internal {\n+namespace json {\n \n /// \\class JsonWriter\n /// \\brief Write the JSON representation of an Arrow record batch file or stream\n ///\n /// This is used for integration testing\n-class ARROW_EXPORT JsonWriter {\n+class JsonWriter {\n  public:\n   ~JsonWriter();\n \n@@ -72,7 +74,7 @@ class ARROW_EXPORT JsonWriter {\n /// \\brief Read the JSON representation of an Arrow record batch file or stream\n ///\n /// This is used for integration testing\n-class ARROW_EXPORT JsonReader {\n+class JsonReader {\n  public:\n   ~JsonReader();\n \n@@ -113,6 +115,8 @@ class ARROW_EXPORT JsonReader {\n   std::unique_ptr<JsonReaderImpl> impl_;\n };\n \n+}  // namespace json\n+}  // namespace internal\n }  // namespace ipc\n }  // namespace arrow\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-07T20:54:32.452+0000",
                    "updated": "2017-12-07T20:54:32.452+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ni53:",
        "customfield_12314139": null
    }
}