{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13265570",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570",
    "key": "ARROW-7040",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
            "name": "Blocker",
            "id": "1"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345727",
                "id": "12345727",
                "name": "0.14.1",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-22"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
            "name": "abbot",
            "key": "abbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Anthony Abate",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
            "name": "abbot",
            "key": "abbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Anthony Abate",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7040/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 44,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/365632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122\n \n \n   Work around for random crashes due to bug in Jitter / System.Memory\r\n   https://github.com/dotnet/coreclr/issues/27590\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-03T04:39:41.018+0000",
                    "updated": "2020-01-03T04:39:41.018+0000",
                    "started": "2020-01-03T04:39:41.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "365632",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/365634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#issuecomment-570461128\n \n \n   https://issues.apache.org/jira/browse/ARROW-7040\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-03T04:46:44.826+0000",
                    "updated": "2020-01-03T04:46:44.826+0000",
                    "started": "2020-01-03T04:46:44.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "365634",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363003144\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n \n Review comment:\n   I don't think these methods should be `public`. We are going to want to remove them in the future when the underlying bug is fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T00:47:44.369+0000",
                    "updated": "2020-01-04T00:47:44.369+0000",
                    "started": "2020-01-04T00:47:44.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366130",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363003368\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   This is a slower way of copying, and the underlying bug doesn't affect .NET Core.\r\n   \r\n   We already multi-target for .NET Core. So can we only do the slow/workaround way when targeting `netstandard1.3`? And when we are on .NET Core, we can continue to use `Span.CopyTo`, which will perform faster than doing it one element at a time.\r\n   \r\n   See https://github.com/apache/arrow/blob/e24825ac301d19d0b5f9f1dcdc404af98665a24f/csharp/src/Apache.Arrow/Apache.Arrow.csproj#L35-L40 for how we can switch out the implementation for different TFMs. You should be able to do the same thing for `SpanExtensions.cs`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T00:47:44.371+0000",
                    "updated": "2020-01-04T00:47:44.371+0000",
                    "started": "2020-01-04T00:47:44.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366131",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363003624\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n \n Review comment:\n   Can we add a comment here saying `TODO remove these methods once dotnet/coreclr#27590 is fixed`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T00:47:44.453+0000",
                    "updated": "2020-01-04T00:47:44.453+0000",
                    "started": "2020-01-04T00:47:44.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366132",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363005432\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   @eerhardt  -  targeting `netcoreapp2.1` makes no sense (in my opinion)  it should just be various netstandardX.Ys and Net Framworks if it were to be multi-target\r\n   \r\n   I did mention in the Jira I would make it multi-target, but the above code makes me think the multi-targeting is not setup correctly\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T01:04:51.590+0000",
                    "updated": "2020-01-04T01:04:51.590+0000",
                    "started": "2020-01-04T01:04:51.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366141",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363044767\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   We multi-target to `netcoreapp2.1` so we can take advantage of newer APIs that don't exist in netstandard. That way when this library is used in an application running on .NET Core, it can use the newer APIs.\r\n   \r\n   Your new code is a perfect example. Using the built-in `CopyTo` method is faster because it eventually calls `memcpy`, which will copy data faster than doing it one element at a time. Since there is no issue using the built-in `CopyTo` on .NET Core, it doesn't make sense to take the slower one-at-a-time route when running on .NET Core.\r\n   \r\n   > but the above code makes me think the multi-targeting is not setup correctly\r\n   \r\n   Can you explain what you mean here? Multi-targeting is set up correctly in this project. I followed the same pattern that we do in https://github.com/dotnet/runtime, which is to not use `#if` but instead split the different code into separate files, which makes it easier to reason about which code runs where. And it also aids in maintainability.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T17:03:21.713+0000",
                    "updated": "2020-01-04T17:03:21.713+0000",
                    "started": "2020-01-04T17:03:21.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366221",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363050955\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   What is an example of an API in NetCore that is not in NetStandard 2.0 or 2.1 ?\r\n   \r\n   Maybe I am taking a purist approach - But i thought the generally accepted practice is to make libraries target NetStandard...   if you build an app you target NetCore or Framework and then implementation specific api's are use by the run-time.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T19:27:06.830+0000",
                    "updated": "2020-01-04T19:27:06.830+0000",
                    "started": "2020-01-04T19:27:06.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366235",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363050955\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   What is an example of an API in NetCore that is not in NetStandard 2.0 or 2.1 ?\r\n   \r\n   Maybe I am taking a purist approach - But i thought the generally accepted practice is to make libraries target NetStandard...   if you build an app you target NetCore or Framework and then implementation specific api's are use by the run-time.\r\n   \r\n   I agree with mult-targeting  and using `#if / #def.` as you described.. I just don't understand the value of Targeting NetCore\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T19:29:12.785+0000",
                    "updated": "2020-01-04T19:29:12.785+0000",
                    "started": "2020-01-04T19:29:12.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366236",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363050955\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   What is an example of an API in NetCore that is not in NetStandard 2.0 or 2.1 ?\r\n   \r\n   Maybe I am taking a purist approach - But i thought the generally accepted practice is to make libraries target NetStandard...   if you build an app you target NetCore or Framework and then implementation specific api's are use by the run-time.\r\n   \r\n   I agree with mult-targeting and not using `#if / #def.` as you described.. I just don't understand the value of Targeting NetCore\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-04T19:29:45.223+0000",
                    "updated": "2020-01-04T19:29:45.223+0000",
                    "started": "2020-01-04T19:29:45.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366237",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363373867\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   > What is an example of an API in NetCore that is not in NetStandard 2.0 or 2.1 ?\r\n   \r\n   All the methods on Stream that accept Span / Memory parameters instead of arrays.\r\n   \r\n   ex. https://github.com/apache/arrow/blob/249a12f131fa9e53aff035e5e5ad4ee6e38c3d05/csharp/src/Apache.Arrow/Extensions/StreamExtensions.netcoreapp2.1.cs#L24-L27\r\n   \r\n   These methods are not in `netstandard2.0` and below. They were added in `netstandard2.1`, but the only executable frameworks that supports `netstandard2.1` is .NET Core 3.0 and 3.1. So if we don't target `netcoreapp2.1`, then someone running on .NET Core 2.1 will get the slower implementation.\r\n   \r\n   > But i thought the generally accepted practice is to make libraries target NetStandard\r\n   \r\n   That is correct, and this library DOES target netstandard. However, there are places where we want to take advantage of faster APIs (like the Stream.Read method above accepting a Span). In those situations, we compile multiple times - once for `netstandard` and once for the lowest framework that has the faster API (in this case `netcoreapp2.1`).\r\n   \r\n   Consumers don't see anything different. They can still run on .NET Framework or Xamarin just fine. But when they run on .NET Core 2.1+, the code built specifically for that framework is used.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-06T16:36:14.720+0000",
                    "updated": "2020-01-06T16:36:14.720+0000",
                    "started": "2020-01-06T16:36:14.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366756",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363431905\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   Right, i get that.. but I am curious how often that is even the case.   I suppose when i started looking at Arrow NetCore 3.0/3.1 and netstandard 2.0 / 2.1 were available as options so my views are somewhat anachronistic? \r\n   \r\n   FWIW - i don't see too much performance difference with this patch applied - And I am dealing with 15 gig file generation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-06T18:56:20.518+0000",
                    "updated": "2020-01-06T18:56:20.518+0000",
                    "started": "2020-01-06T18:56:20.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366857",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/366889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363431905\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   Right, i get that.. but I am curious how often that is even the case.   I suppose when i started looking at Arrow NetCore 3.0/3.1 and netstandard 2.0 / 2.1 were available as options so my views are somewhat anachronistic? \r\n   \r\n   FWIW - i don't see too much performance difference with this patch applied - And I am dealing with 15 gig file generation.\r\n   \r\n   but regardless - i'll setup the net472 target in an update to the PR\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-06T19:44:15.081+0000",
                    "updated": "2020-01-06T19:44:15.081+0000",
                    "started": "2020-01-06T19:44:15.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "366889",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363538136\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   >  I suppose when i started looking at Arrow NetCore 3.0/3.1 and netstandard 2.0 / 2.1 were available as options so my views are somewhat anachronistic?\r\n   \r\n   We don't expect apps to move up to new versions of .NET immediately. .NET Core 3.0 has only been out for 3-4 months, and 3.1 (the long term support version) just came out last month. So not many applications are on it yet. .NET Core 2.1 will be supported at a minimum until August 21, 2021 (see https://github.com/dotnet/core/blob/master/microsoft-support.md). So keeping it running as fast as possible on .NET Core 2.1 is important.\r\n   \r\n   > i don't see too much performance difference with this patch applied - And I am dealing with 15 gig file generation.\r\n   \r\n   The code change might not be on the hot path for your scenario, but that doesn't mean it isn't for some other scenario. For example, if someone was using `ArrowBuffer.Builder.Append(ReadOnlySpan<T>)` and `Build` on a hot path.\r\n   \r\n   > i'll setup the net472 target in an update to the PR\r\n   \r\n   I don't understand this. I wasn't asking for anything to do with `net472`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-06T23:57:12.880+0000",
                    "updated": "2020-01-06T23:57:12.880+0000",
                    "started": "2020-01-06T23:57:12.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367113",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363539383\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Flatbuf/FlatBuffers/ByteBuffer.cs\n ##########\n @@ -833,7 +834,7 @@ public int Put<T>(int offset, T[] x)\n                 AssertOffsetAndLength(offset, numBytes);\n                 // if we are LE, just do a block copy\n #if ENABLE_SPAN_T\n-                MemoryMarshal.Cast<T, byte>(x).CopyTo(_buffer.Span.Slice(offset, numBytes));\n+                MemoryMarshal.Cast<T, byte>(x).CopyToFix(_buffer.Span.Slice(offset, numBytes));\n \n Review comment:\n   The Flatbuffer code is copied from https://github.com/google/flatbuffers/tree/master/net/FlatBuffers (which is the way https://google.github.io/flatbuffers/flatbuffers_guide_use_java_c-sharp.html says is how you consume flat buffer code).\r\n   \r\n   I did a few checks, and the methods you are changing are not called in the Arrow library.\r\n   \r\n   Can you leave the FlatBuffers code unchanged? That way when we update it from google/flatbuffers again, we don't have to worry about merge conflicts.\r\n   \r\n   See https://github.com/apache/arrow/tree/master/csharp#updating-flatbuffers-code for more info.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T00:02:10.687+0000",
                    "updated": "2020-01-07T00:02:10.687+0000",
                    "started": "2020-01-07T00:02:10.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367115",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363596209\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   The patch I am supplying is to fix Span.CopyTo for a bug that only affects **.Net Framework** \r\n   \r\n   I thought creating a 3rd target for the arrow library (ie **net472**) is what you were proposing as a way to integrate this code so that only the target with the crash gets the fix - Or am I missing something?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T05:29:20.916+0000",
                    "updated": "2020-01-07T05:29:20.916+0000",
                    "started": "2020-01-07T05:29:20.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367293",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363596209\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   The patch I am supplying is to fix Span.CopyTo for a bug that only affects **.Net Framework** \r\n   \r\n   I thought creating a 3rd target for the arrow library (ie **net472**) is what you were proposing as a way to integrate this code so that only the target with the crash gets the fix (and 'performance hit') - Or am I missing something?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T05:29:56.478+0000",
                    "updated": "2020-01-07T05:29:56.478+0000",
                    "started": "2020-01-07T05:29:56.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367294",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363787030\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   What I am proposing is to reuse the existing targets(`netstandard1.3` and `netcoreapp2.1`), and only doing the one-element-at-a-time copy on the `netstandard1.3` target, which is the one used when the consuming application is running on the .NET Framework. When an application is running on .NET Core (where there is no issue), it will use the Apache.Arrow assembly that is compiled for `netcoreapp2.1`. When compiling for `netcoreapp2.1`, we can use the built in `CopyTo` method.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T14:57:41.864+0000",
                    "updated": "2020-01-07T14:57:41.864+0000",
                    "started": "2020-01-07T14:57:41.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367493",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363787631\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n+            {\n+                target[targetOffset + i] = source[sourceOffset + i];\n \n Review comment:\n   What happens when `target` and `source` overlap in memory? Does this handle that case?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T14:58:49.821+0000",
                    "updated": "2020-01-07T14:58:49.821+0000",
                    "started": "2020-01-07T14:58:49.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367495",
                    "issueId": "13265570"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/worklog/367510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abbotware commented on pull request #6122: ARROW-7040: [C#] - System.Memory Span.CopyTo - Crashes\nURL: https://github.com/apache/arrow/pull/6122#discussion_r363807160\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/SpanExtensions.cs\n ##########\n @@ -14,18 +14,65 @@\n // limitations under the License.\n \n using System;\n+using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n \n namespace Apache.Arrow\n {\n     public static class SpanExtensions\n     {\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static Span<T> CastTo<T>(this Span<byte> span)\n             where T: struct =>\n             MemoryMarshal.Cast<byte, T>(span);\n \n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n         public static ReadOnlySpan<T> CastTo<T>(this ReadOnlySpan<byte> span)\n             where T: struct =>\n                 MemoryMarshal.Cast<byte, T>(span);\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this ReadOnlySpan<T> source, T[] target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Span<T> source, Span<T> target)\n+        {\n+            CopyToFix(source, 0, target, 0, source.Length);\n+        }\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(this Memory<T> source, Memory<T> target)\n+        {\n+            CopyToFix(source.Span, 0, target.Span, 0, source.Length);\n+        }\n+\n+\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static void CopyToFix<T>(ReadOnlySpan<T> source, int sourceOffset, Span<T> target, int targetOffset, int length)\n+        {\n+            for (int i = 0; i < length; ++i)\n \n Review comment:\n   ok - i thought you were arguing for minimal surface area of the affected target frameworks (since netstandard1.3 is much wider range of run times.. mono, Xamarin, etc) and the bug seems to only be in net framework. However... I am happy to put into netstandard1.3 as I am currently using a fork of arrow and this bug is the only reason I am not using the official package.\r\n   \r\n   what do you think of file globing for the separate files?  (see here:)\r\n   https://github.com/abbotware/abbotware/blob/master/Common/Abbotware.Core/Abbotware.Core.csproj\r\n   \r\n   \r\n   the only issue doing this I have seen \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-07T15:36:52.439+0000",
                    "updated": "2020-01-07T15:36:52.439+0000",
                    "started": "2020-01-07T15:36:52.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "367510",
                    "issueId": "13265570"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 24600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@248dc780[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c9a08b5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2812f9b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@345193a4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cf00775[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@422aa599[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7dca030e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@45be63a0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29990fcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3e08710a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1377d7b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2562051b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:21 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7040/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2019-10-31T15:42:42.000+0000",
        "updated": "2022-07-12T14:04:21.000+0000",
        "timeoriginalestimate": null,
        "description": "The following code crashes on 8 cores.\r\n{code:java}\r\n        public async Task StringArrayBuilder_StressTest()\r\n        {\r\n            var wait = new List<Task>();            \r\n            for (int i = 0; i < 30; ++i)\r\n            {\r\n                var data = Enumerable.Range(0, 1000).Select(x => $\"Item {x + 1}\").ToArray();                \r\n                var t = Task.Run(() =>\r\n                {\r\n                    for (int j = 0; j < 10000000; ++j)\r\n                    {\r\n                        var builder = new StringArray.Builder();\r\n                        builder.AppendRange(data);\r\n                    }\r\n                });                \r\n                wait.Add(t);\r\n            }            \r\n\r\n            await Task.WhenAll(wait);\r\n        } {code}\r\n\u00a0\r\n\r\nIt does not happen with the primitive arrays.\u00a0 (ie IntArrayBuilder)\r\n\r\nI suspect it is due to the offset array / and all the copy / resizing going on\r\n\r\n\u00a0\r\n\r\nUpdate - it seems that the problem is in the underlying *ArrowBuffer.Builder<T>*\r\n{code:java}\r\n         public async Task ValueBuffer_StressTest()\r\n        {\r\n            var wait = new List<Task>();            \r\n            for (int i = 0; i < 30; ++i)\r\n            {\r\n                var data = Enumerable.Range(0, 1000).Select(x => $\"Item {x + 1}\").ToArray();                \r\n                var t = Task.Run(() =>\r\n                {\r\n                    for (int j = 0; j < 10000000; ++j)\r\n                    {\r\n                        ArrowBuffer.Builder<byte> ValueBuffer = new ArrowBuffer.Builder<byte>();                        \r\n                        foreach (var d in data)\r\n                        {\r\n                            ValueBuffer.Append(Encoding.UTF8.GetBytes(d));\r\n                        }\r\n                    }\r\n                });                \r\n                wait.Add(t);\r\n            }            \r\n            await Task.WhenAll(wait);\r\n        }{code}\r\n\u00a0\r\n\r\nUpdate 2:\r\n\r\nThis is due to a confirmed bug in System.Memory - The implications are that Span.CopyTo needs to be removed / replaced.\u00a0\r\n\r\nThis is method is used internally by ArrowBuffer so I can't work around this easily.\u00a0\r\n\r\nSolutions\r\n # Change the code\r\n ## Remove it out right (including disable span in FlatBuffer)\r\n ## create a multi target nuget where the offending code has compile blocks #If (NETFRAMEWORK) - and disable span in FlatBuffers only for net framework build \r\n # wait for a System.Memory fix?\r\n\r\n\u00a0\r\n\r\nI suspect option 2 won't happen anytime soon. \u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] System.Memory  Span.CopyTo - Crashes on Net Framework ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/comment/16964387",
                    "id": "16964387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
                        "name": "abbot",
                        "key": "abbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anthony Abate",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "this might not be an arrow issue - it might be an issue in the System.Memory code - I reported a bug here:\u00a0 [https://github.com/dotnet/corefx/issues/42276]\r\n\r\n\r\nIt still is an open issue for us though because the current Array Builder implementation of arrow is currently crashing using strings and many threads.\u00a0\u00a0 I am considering creating a separate builder for strings that internally uses byte[] instead of Spans to see if that makes the problem go away\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
                        "name": "abbot",
                        "key": "abbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anthony Abate",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-31T21:06:08.718+0000",
                    "updated": "2019-10-31T21:06:08.718+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/comment/17007222",
                    "id": "17007222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
                        "name": "abbot",
                        "key": "abbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anthony Abate",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "created a PR for this:\r\n\r\nhttps://github.com/apache/arrow/pull/6122",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=abbot",
                        "name": "abbot",
                        "key": "abbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anthony Abate",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-01-03T04:40:12.006+0000",
                    "updated": "2020-01-03T04:40:12.006+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265570/comment/17565549",
                    "id": "17565549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:21.123+0000",
                    "updated": "2022-07-12T14:04:21.123+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0854g:",
        "customfield_12314139": null
    }
}