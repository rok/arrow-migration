{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13336332",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332",
    "key": "ARROW-10354",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=florian.mueller",
            "name": "florian.mueller",
            "key": "florian.mueller",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Florian M\u00fcller",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10354/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 50,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/548766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb opened a new pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428\n\n\n   Still WIP: Adds a regexp_extract compute kernel to select a substring based on a regular expression.\r\n   \r\n   Open issues:\r\n   \r\n   * [ ] Expose functionality and add to datafusion\r\n   * [ ] Additional tests\r\n   * [ ] Better doc string\r\n   \r\n   Some things I did that I may be doing wrong:\r\n   \r\n   * I exposed `GenericStringBuilder`\r\n   * I build the resulting Array using a builder - this looks quite different from e.g. the substring kernel. Should I change it accordingly, e.g. because of performance considerations?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-05T17:17:08.327+0000",
                    "updated": "2021-02-05T17:17:08.327+0000",
                    "started": "2021-02-05T17:17:08.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "548766",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/548783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-774180357\n\n\n   https://issues.apache.org/jira/browse/ARROW-10354\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-05T17:39:58.801+0000",
                    "updated": "2021-02-05T17:39:58.801+0000",
                    "started": "2021-02-05T17:39:58.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "548783",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/549300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-774703945\n\n\n   @jorgecarleitao could I ask you for a review if you find the time? This is my first attempt to do something with datafusion, so there are probably some things I misunderstood.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-07T16:32:12.444+0000",
                    "updated": "2021-02-07T16:32:12.444+0000",
                    "started": "2021-02-07T16:32:12.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "549300",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/550994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-777044112\n\n\n   @sweb This is cool and useful.\r\n   \r\n   Given we are aiming for Postgres compatability (in terms of syntax) do you think you could modify it to be the `regexp_match ( string text, pattern text [, flags text ] ) \u2192 text[]` function instead? Then you could modify the parser to support extracting a value from the `text[]` array like Postgres.\r\n   \r\n   See: https://www.postgresql.org/docs/13/functions-string.html\r\n   \r\n   I have done a lot of work recently on Postgres functions so there may be some useful work there: https://github.com/apache/arrow/pull/9243\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T21:21:06.528+0000",
                    "updated": "2021-02-10T21:21:06.528+0000",
                    "started": "2021-02-10T21:21:06.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550994",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/551005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-777056311\n\n\n   > Given we are aiming for Postgres compatability (in terms of syntax) do you think you could modify it to be the `regexp_match ( string text, pattern text [, flags text ] ) \u2192 text[]` function instead? Then you could modify the parser to support extracting a value from the `text[]` array like Postgres.\r\n   \r\n   @seddonm1  Sure, I will try to change it accordingly!\r\n   \r\n   > I have done a lot of work recently on Postgres functions so there may be some useful work there: #9243\r\n   \r\n   What a lucky coincidence that you have not implemented `regexp_match` yet :) I will check your PR for some pointers on how to provide things like flags, etc.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T21:44:22.500+0000",
                    "updated": "2021-02-10T21:44:22.500+0000",
                    "started": "2021-02-10T21:44:22.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551005",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/553356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r577296571\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n\nReview comment:\n       It is more efficient (and probably idiomatic) to use the `collect::<GenericStringArray<OffsetSize>>()` here.\r\n   \r\n   I.e. \r\n   \r\n   ```rust\r\n   array\r\n       .iter()\r\n       .map(<logic here>)\r\n       .collect::<GenericStringArray<OffsetSize>>()\r\n   ```\r\n   \r\n   Since this is an unary operation on a utf8 array, I would try to write a generic for it (like we do for primitives in `arity.rs`) and use it here. We may even be able to write it using the `trusted_len`, which is the faster option available atm.\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n\nReview comment:\n       I wonder if the signature shouldn't be `idx: &[usize]` and the result `Vec<ArrayRef>`. It would allow for optimizations where the user wants more than one group for the same regex (as regex is usually slow). Could be left out for now, just a though.\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n\nReview comment:\n       Can we make one of these entries `None`, so that we also test the null entry case?\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -70,6 +71,16 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     Ok(builder.finish())\n }\n \n+/// extract a specific group from a string column, using a regular expression\n+pub fn regexp_extract(args: &[ArrayRef]) -> Result<ArrayRef> {\n+    let pattern_expr = args[1].as_any().downcast_ref::<StringArray>().unwrap();\n+    let pattern = pattern_expr.value(0);\n+    let idx_expr = args[2].as_any().downcast_ref::<Int64Array>().unwrap();\n+    let idx = idx_expr.value(0) as usize;\n\nReview comment:\n       I am not sure this is correct: the function expects an array, but then only picks the first element of the array for the regex. Maybe this was used because ScalarFunctions did not support the `ScalarValue` variant?\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![Some(\"005\"), Some(\"7\"), None]);\n\nReview comment:\n       if we want to mimic spark (imo we should), the last entry should result in an empty string, not a `None`. This is because it would be otherwise impossible to differentiate between a \"no match\" and a \"input is null\".\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -523,6 +544,7 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n         BuiltinScalarFunction::NullIf => {\n             Signature::Uniform(2, SUPPORTED_NULLIF_TYPES.to_vec())\n         }\n+        BuiltinScalarFunction::RegexpExtract => Signature::Any(3),\n\nReview comment:\n       I am not sure this is correct; isn't the signature `Variant([[Utf8, Utf8, UInt64], [LargeUtf8, Utf8, UInt64]])` or something like that?\r\n   \r\n   Note that these signatures are very important because they are used for type validation during logical planning, as well as type coercion at physical planning. Whenever we write `Any`, the logical planning will accept any type. Worse, the type coercer will not perform any coercion.\r\n   \r\n   In this case, because we downcast arg[2] to `Int64Array`, if the user passes a `Int32Array`, the execution panics.\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![Some(\"005\"), Some(\"7\"), None]);\n+        let result = actual.as_any().downcast_ref::<StringArray>().unwrap();\n+        assert_eq!(&expected, result);\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn no_matches() -> Result<()> {\n+        let values = vec![\"abc\", \"X::50::00\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![None, None, None]);\n+        let result = actual.as_any().downcast_ref::<StringArray>().unwrap();\n+        assert_eq!(&expected, result);\n+        Ok(())\n+    }\n\nReview comment:\n       I would be fine not adding this test. IMO this is covered on the test above.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T03:34:57.227+0000",
                    "updated": "2021-02-17T03:34:57.227+0000",
                    "started": "2021-02-17T03:34:57.227+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553356",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/553357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r577298730\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![Some(\"005\"), Some(\"7\"), None]);\n\nReview comment:\n       if we want to mimic spark, the last entry should result in an empty string, not a `None`. This is because it would be otherwise impossible to differentiate between a \"no match\" and a \"input is null\".\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T03:36:20.599+0000",
                    "updated": "2021-02-17T03:36:20.599+0000",
                    "started": "2021-02-17T03:36:20.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553357",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/553889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r577945055\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n\nReview comment:\n       Hey @jorgecarleitao thank you very much for your review. I will try to address your comments in the next days.\r\n   \r\n   Since @seddonm1 remarked that Postgres compatibility, I was thinking about changing the function signature of the kernel to:\r\n   \r\n   ```\r\n   pub fn regexp_match(array: &Array, pattern: &str) -> Result<ArrayRef>\r\n   ``` \r\n   \r\n   where the returned array is of type `GenericListArray` with values of type `&str`. A list is closer to the Postgres signature and would provide the flexibility to choose multiple groups. Would this be fine as well or is `Vec<ArrayRef>` preferable to you?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T21:10:13.761+0000",
                    "updated": "2021-02-17T21:10:13.761+0000",
                    "started": "2021-02-17T21:10:13.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553889",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/558783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-786918727\n\n\n   @sweb  what is the status of this PR? Are you blocked? If you just haven't had time or inclination to make changes, that is fine (I totally understand) I just wanted try and clear the PR queue\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-26T22:06:48.422+0000",
                    "updated": "2021-02-26T22:06:48.422+0000",
                    "started": "2021-02-26T22:06:48.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558783",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561449",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-791491062\n\n\n   > @sweb what is the status of this PR? Are you blocked? If you just haven't had time or inclination to make changes, that is fine (I totally understand) I just wanted try and clear the PR queue\r\n   \r\n   @alamb Sorry for the late response - I did not have enough time to continue with this and did not see your message. However, I am currently blocked on one front:\r\n   \r\n   I have created a new kernel function with the following signature:\r\n   ```\r\n   fn regexp_match(array: &Array, pattern: &str) -> Result<ArrayRef>\r\n   ```\r\n   \r\n   where `ArrayRef` is a `GenericListArray`. This is my attempt to get closer to the Postgres functions. However, I do not seem to understand, how I can define a return type appropriate for `ListArray` for a DataFusion function. To be more specific: When I try to define the return type of `DataType::List` in `functions.rs` I need to create a `Box<Field>` and I am not sure whether it makes sense to create it here - e.g. what should be the name of the field?\r\n   \r\n   If you have some pointers for this, I would be very grateful - I was not able to find something similar yet. Again, apologies for the late response.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T15:28:47.874+0000",
                    "updated": "2021-03-05T15:28:47.874+0000",
                    "started": "2021-03-05T15:28:47.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561449",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb edited a comment on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-791491062\n\n\n   > @sweb what is the status of this PR? Are you blocked? If you just haven't had time or inclination to make changes, that is fine (I totally understand) I just wanted try and clear the PR queue\r\n   \r\n   @alamb Sorry for the late response - I did not have enough time to continue with this and did not see your message. However, I am currently blocked on one front:\r\n   \r\n   I have created a new kernel function with the following signature:\r\n   ```\r\n   fn regexp_match(array: &Array, pattern: &str) -> Result<ArrayRef>\r\n   ```\r\n   \r\n   where `ArrayRef` is a `GenericListArray`. This is my attempt to get closer to the Postgres functions. However, I do not seem to understand, how I can define a return type appropriate for `ListArray` for a DataFusion function. To be more specific: When I try to define the return type of `DataType::List` in `functions.rs` I need to create a `Box<Field>` and I am not sure whether it makes sense to create it here - e.g. what should be the name of the field?\r\n   \r\n   If you have some pointers for this, I would be very grateful - I was not able to find something similar yet. I have added my current state, which kind of works but I am not too sure that what I am doing there is correct. Again, apologies for the late response.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T16:36:27.565+0000",
                    "updated": "2021-03-05T16:36:27.565+0000",
                    "started": "2021-03-05T16:36:27.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561465",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r588464398\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -70,6 +71,16 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     Ok(builder.finish())\n }\n \n+/// extract a specific group from a string column, using a regular expression\n+pub fn regexp_extract(args: &[ArrayRef]) -> Result<ArrayRef> {\n+    let pattern_expr = args[1].as_any().downcast_ref::<StringArray>().unwrap();\n+    let pattern = pattern_expr.value(0);\n+    let idx_expr = args[2].as_any().downcast_ref::<Int64Array>().unwrap();\n+    let idx = idx_expr.value(0) as usize;\n\nReview comment:\n       Absolutely, I did this because I am not sure, how I can get from `ArrayRef` to `ScalarVariant` - I am looking for something like the following:\r\n   \r\n   ```\r\n       let pattern_expr = args[1].as_any().downcast_ref::<ScalarValue>().unwrap();\r\n       if let ScalarValue::Utf8(Some(pattern)) = pattern_expr {\r\n           compute::regexp_match(args[0].as_ref(), pattern)\r\n               .map_err(DataFusionError::ArrowError)\r\n       } else {\r\n           Err(DataFusionError::Internal(\"This is wrong\".to_string()))\r\n       }\r\n   ```\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![Some(\"005\"), Some(\"7\"), None]);\n+        let result = actual.as_any().downcast_ref::<StringArray>().unwrap();\n+        assert_eq!(&expected, result);\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn no_matches() -> Result<()> {\n+        let values = vec![\"abc\", \"X::50::00\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![None, None, None]);\n+        let result = actual.as_any().downcast_ref::<StringArray>().unwrap();\n+        assert_eq!(&expected, result);\n+        Ok(())\n+    }\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T16:50:40.062+0000",
                    "updated": "2021-03-05T16:50:40.062+0000",
                    "started": "2021-03-05T16:50:40.062+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561468",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r588465516\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n\nReview comment:\n       I added a `None` case for `regexp_match` - I am currently planning to remove `regexp_extract` if something like `regexp_match` is preferable.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T16:51:36.194+0000",
                    "updated": "2021-03-05T16:51:36.194+0000",
                    "started": "2021-03-05T16:51:36.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561470",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r588467582\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n+        match maybe_value {\n+            Some(value) => match re.captures(value) {\n+                Some(caps) => {\n+                    let m = caps.get(idx).ok_or_else(|| {\n+                        ArrowError::ComputeError(format!(\n+                            \"Regexp has no group with index {}\",\n+                            idx\n+                        ))\n+                    })?;\n+                    builder.append_value(m.as_str())?\n+                }\n+                None => builder.append_null()?,\n+            },\n+            None => builder.append_null()?,\n+        }\n+    }\n+    Ok(Arc::new(builder.finish()))\n+}\n+\n+/// Extracts a specific group matched by a regular expression for a given String array.\n+/// Group index 0 returns the whole match, index 1 returns the first group and so on. Please\n+/// refer to regex crate for details on pattern specifics.\n+pub fn regexp_extract(array: &Array, pattern: &str, idx: usize) -> Result<ArrayRef> {\n+    let re = Regex::new(pattern).map_err(|e| {\n+        ArrowError::ComputeError(format!(\"Regular expression did not compile: {:?}\", e))\n+    })?;\n+    match array.data_type() {\n+        DataType::LargeUtf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<LargeStringArray>()\n+                .expect(\"A large string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        DataType::Utf8 => generic_regexp_extract(\n+            array\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .expect(\"A string is expected\"),\n+            &re,\n+            idx,\n+        ),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"regexp_extract does not support type {:?}\",\n+            array.data_type()\n+        ))),\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn extract_single_group() -> Result<()> {\n+        let values = vec![\"abc-005-def\", \"X-7-5\", \"X545\"];\n+        let array = StringArray::from(values);\n+        let pattern = r\".*-(\\d*)-.*\";\n+        let actual = regexp_extract(&array, pattern, 1)?;\n+        let expected = StringArray::from(vec![Some(\"005\"), Some(\"7\"), None]);\n\nReview comment:\n       Done for `regexp_match`. This will now lead to a `ListArray([StringArray([\"\"]])`, i.e. the group has a single entry with an empty string - even if there are multiple groups. I am not sure how Postgres behaves in this case... I will try to check\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T16:53:56.409+0000",
                    "updated": "2021-03-05T16:53:56.409+0000",
                    "started": "2021-03-05T16:53:56.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561472",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r588468947\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/regexp.rs\n##########\n@@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines kernel to extract substrings based on a regular\n+//! expression of a \\[Large\\]StringArray\n+\n+use crate::array::{\n+    Array, ArrayRef, GenericStringArray, GenericStringBuilder, LargeStringArray,\n+    StringArray, StringOffsetSizeTrait,\n+};\n+use crate::datatypes::DataType;\n+use crate::error::{ArrowError, Result};\n+\n+use std::sync::Arc;\n+\n+use regex::Regex;\n+\n+fn generic_regexp_extract<OffsetSize: StringOffsetSizeTrait>(\n+    array: &GenericStringArray<OffsetSize>,\n+    re: &Regex,\n+    idx: usize,\n+) -> Result<ArrayRef> {\n+    let mut builder: GenericStringBuilder<OffsetSize> = GenericStringBuilder::new(0);\n+\n+    for maybe_value in array.iter() {\n\nReview comment:\n       I did not find a way to do this for `ListArray` - I think I would have to implement the `FromIterator` trait for `GenericListArray`, correct?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T16:55:23.873+0000",
                    "updated": "2021-03-05T16:55:23.873+0000",
                    "started": "2021-03-05T16:55:23.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561473",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/561622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-791739578\n\n\n   @sweb I can help on Monday. I'm planning to raise the PR for those other regexp functions then can help work through this?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T22:01:57.816+0000",
                    "updated": "2021-03-05T22:01:57.816+0000",
                    "started": "2021-03-05T22:01:57.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561622",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/562494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-792942581\n\n\n   > @sweb I can help on Monday. I'm planning to raise the PR for those other regexp functions then can help work through this?\r\n   \r\n   Hey @seddonm1 I have rebased my PR on the current master. My plan would be to only keep `regexp_match` and remove `regexp_extract`. However, since there are review comments that I did not address yet, I did not want to remove `regexp_extract` before I was sure that `regexp_match` is the way to go.\r\n   \r\n   My main issues are:\r\n   \r\n   * What is the correct way to pass the regular expression into the DataFusion function? I have seen in your PR that you treat it as a normal column (ArrayRef) and compile all distinct regular expressions and apply the relevant one. I have to admit that I did not think of this use case, but of course it is much cleaner than my assumption that it is going to be a literal, fingers crossed. However, I am not sure that I would expect this API from a kernel function, i.e. passing the regex as a `StringArray`, instead of a `&str`.\r\n   * What do you think concerning the usage of `ListArray` in `regexp_match` and just defining the return types of the corresponding DataFusion functions as `List`? I have no experience in using DataFusion (yet) so I am not sure whether this makes sense or if I have to add some kind of handling for accessing list elements to make this usable.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T17:43:51.241+0000",
                    "updated": "2021-03-08T17:43:51.241+0000",
                    "started": "2021-03-08T17:43:51.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562494",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/562510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sweb commented on a change in pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#discussion_r589648321\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -523,6 +544,7 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n         BuiltinScalarFunction::NullIf => {\n             Signature::Uniform(2, SUPPORTED_NULLIF_TYPES.to_vec())\n         }\n+        BuiltinScalarFunction::RegexpExtract => Signature::Any(3),\n\nReview comment:\n       Done - I had to use `Int64` instead of `UInt64` because I got errors from `tests/sql.rs`. I have to check how to define a literal as unsigned from within the query string.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T18:24:25.246+0000",
                    "updated": "2021-03-08T18:24:25.246+0000",
                    "started": "2021-03-08T18:24:25.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562510",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/562588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-793074013\n\n\n   Hi @sweb \r\n   \r\n   Yesterday I made my PR for `regexp_replace` (and others) see https://github.com/apache/arrow/pull/9654/files#diff-c122a83600dc86aa69067fdfdca1e0349616dfae73eaad8a8c90d5e69dbf7a3c You can see how I am passing in the values. I think there is opportunity to use more `lazy_static` to precompile any standard regex in that file to reduce runtime cost - but we need to see all the functions before too much optimisation.\r\n   \r\n   The way I have done the `regexp_replace` code (and I am not saying it is the best way) is that because potentially each row can be different (as any argument to a function in Postgres can actually be supplied by referencing column) I have tried to balance that cost by memoizing the Regex objects. I did write a lot of this code prior to @jorgecarleitao doing some large changes in the `functions.rs` relating to Scalar vs Columnar so there may be a second pass to optimise this once we get basic functionality working.\r\n   \r\n   I think the `regexp_match` is the way to go (as per Postgres) which does return a list of string values. We will then need to look at the sqlparser to add the ability to 'extract' values from the list by id: `[0]` (I was thinking of doing this soon). I need to do some playing in Postgres to fully understand the behaivor (what happens if you reference a non-existent index).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T21:01:22.560+0000",
                    "updated": "2021-03-08T21:01:22.560+0000",
                    "started": "2021-03-08T21:01:22.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562588",
                    "issueId": "13336332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/worklog/562626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9428:\nURL: https://github.com/apache/arrow/pull/9428#issuecomment-793109365\n\n\n   > Again, apologies for the late response.\r\n   \r\n   @sweb  no worries! I *totally* understand. Thanks for sticking with it\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T21:56:46.946+0000",
                    "updated": "2021-03-08T21:56:46.946+0000",
                    "started": "2021-03-08T21:56:46.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562626",
                    "issueId": "13336332"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 30000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@cf92e78[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8add02e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b0a6702[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4dc0feed[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52b2274f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@14c3f4ab[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c09b346[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@26740fbc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@653fcc62[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6e520ac2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f6017cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@496fe872[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 01 11:59:05 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-01T11:59:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10354/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-20T16:17:06.000+0000",
        "updated": "2021-04-02T02:26:58.000+0000",
        "timeoriginalestimate": null,
        "description": "The goal of this task is to support the string operation of extracting an item of a regex group, something like sparks' `regexp_extract`.\r\n\r\n\u00a0\r\n\r\nWe could do this in the arrow crate and expose it on DataFusion. Note that arrow already depends on an external regex parser for Rust.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Add support for regex extract",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13336332/comment/17313122",
                    "id": "17313122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9428\n[https://github.com/apache/arrow/pull/9428]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-01T11:59:05.049+0000",
                    "updated": "2021-04-01T11:59:05.049+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jusw:",
        "customfield_12314139": null
    }
}