{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13214496",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496",
    "key": "ARROW-4503",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "performance",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": 172800,
        "timeestimate": 129000,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 129000,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "aggregateprogress": {
            "progress": 43800,
            "total": 172800,
            "percent": 25
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 43800,
            "total": 172800,
            "percent": 25
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4503/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 76,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/213825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925\n \n \n   When reading `RecordBatch` instances from a .NET `Stream` using the `ArrowStreamReader` class, it is currently allocating and copying memory 3 times for the data.\r\n   \r\n   I've changed it to take a MemoryPool in the constructor, `ArrowStreamReader` will allocate from the pool a single time for each `RecordBatch` it reads, copy from the `Stream` into that memory once, and then use it in the returned `RecordBatch`.\r\n   \r\n   I've also fixed the comments from #3736 that were deemed to be better fixed with this change.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-15T15:24:12.567+0000",
                    "updated": "2019-03-15T15:24:12.567+0000",
                    "started": "2019-03-15T15:24:12.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "213825",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/213847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473338446\n \n \n   Here are some preliminary perf results of this change:\r\n   \r\n   |                      Method |      Mean |     Error |    Gen 0/1k Op | Allocated Memory/Op |\r\n   |---------------------------- |----------:|----------:|----------:|--------------------:|\r\n   | **BEFORE** ArrowReaderWithMemoryStream | 81.417 ms | 1.6083 ms | 3000.0000 |         84000.73 KB |\r\n   | **AFTER** ArrowReaderWithMemoryStream | 29.431 ms | 0.5826 ms |             - |             6.28 KB |\r\n   \r\n   The reason `Allocated Memory/Op` drops to almost 0 is because we are allocating from the default `MemoryPool`, which pulls from native memory, which isn't tracked by BenchmarkDotNet.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-15T15:48:13.248+0000",
                    "updated": "2019-03-15T15:48:13.248+0000",
                    "started": "2019-03-15T15:48:13.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "213847",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473490309\n \n \n   @eerhardt Is there a way to report the native memory to the benchmark? Seems like it would be valuable for benchmarks, especially considering the current allocator is naive and probably even broken and/or not thread-safe. I expect it will be replaced or supplemented with Jemalloc.NET or some other more reliable allocation mechanism.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T02:17:01.805+0000",
                    "updated": "2019-03-16T02:17:01.805+0000",
                    "started": "2019-03-16T02:17:01.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214153",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473494959\n \n \n   > Is there a way to report the native memory to the benchmark?\r\n   \r\n   I'm not sure, but maybe @adamsitnik might be able to answer.\r\n   \r\n   On a related topic, @chutchinson, is there a specific reason why the default MemoryPool uses native memory? I guess my assumption was that the default should just be regular `byte[]` instances, which could be garbage collected. I also noticed that there doesn't seem to be a way to return memory back to the pool to be reused. Is that intentional?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T03:30:03.694+0000",
                    "updated": "2019-03-16T03:30:03.694+0000",
                    "started": "2019-03-16T03:30:03.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214168",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473597470\n \n \n   @stephentoub @chutchinson @pgovind - this is now ready for review.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T22:22:06.135+0000",
                    "updated": "2019-03-16T22:22:06.135+0000",
                    "started": "2019-03-16T22:22:06.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214306",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219354\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/StreamExtensions.netcoreapp2.1.cs\n ##########\n @@ -0,0 +1,29 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+\n+namespace Apache.Arrow\n+{\n+    // Helpers to read from Stream to Memory<byte> on netcoreapp\n+    internal static class StreamExtensions\n+    {\n+        public static int Read(this Stream stream, Memory<byte> buffer)\n \n Review comment:\n   Why is this necessary?  Why not just call it with buffer.Span at the call site?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:16:37.549+0000",
                    "updated": "2019-03-17T00:16:37.549+0000",
                    "started": "2019-03-17T00:16:37.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214334",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219398\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/StreamExtensions.netcoreapp2.1.cs\n ##########\n @@ -0,0 +1,29 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+\n+namespace Apache.Arrow\n+{\n+    // Helpers to read from Stream to Memory<byte> on netcoreapp\n+    internal static class StreamExtensions\n+    {\n+        public static int Read(this Stream stream, Memory<byte> buffer)\n \n Review comment:\n   I see. You've added this as an abstraction to enable fishing out the array when the span-based overload doesn't exist on netstandard. Ok.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:18:36.376+0000",
                    "updated": "2019-03-17T00:18:36.376+0000",
                    "started": "2019-03-17T00:18:36.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214336",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219461\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -70,36 +72,79 @@ protected override async Task ReadSchemaAsync()\n             {\n                 BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n \n-                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4).ConfigureAwait(false);\n-                footerLength = BinaryPrimitives.ReadInt32LittleEndian(buffer);\n+                bytesRead = await BaseStream.ReadAsync(buffer.AsMemory(0, 4)).ConfigureAwait(false);\n \n Review comment:\n   You'd be better off moving the declaration of bytesRead into each of these delegates so they don't have to close over the shared field and instead it can just be a local (that doesn't need to be lifted to any state machine).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:22:28.489+0000",
                    "updated": "2019-03-17T00:22:28.489+0000",
                    "started": "2019-03-17T00:22:28.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214337",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219523\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -70,36 +72,79 @@ protected override async Task ReadSchemaAsync()\n             {\n                 BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n \n-                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4).ConfigureAwait(false);\n-                footerLength = BinaryPrimitives.ReadInt32LittleEndian(buffer);\n+                bytesRead = await BaseStream.ReadAsync(buffer.AsMemory(0, 4)).ConfigureAwait(false);\n+                footerLength = ReadFooterLength(buffer, bytesRead);\n+            }).ConfigureAwait(false);\n \n-                if (bytesRead != 4) throw new InvalidDataException(\n-                    $\"Failed to read footer length. Read <{bytesRead}>, expected 4.\");\n+            await Buffers.RentReturnAsync(footerLength, async (buffer) =>\n+            {\n+                _footerStartPostion = (int)BaseStream.Length - footerLength - ArrowFileConstants.Magic.Length - 4;\n \n Review comment:\n   Is buffer.Length == footerLength?  If so, you could use that instead of footerLength to avoid closing over footerLength.  If instead buffer is a byte[] rented from the pool and thus could have a length > footerLength, you might change the signature to pass in a `Memory<byte>` rather than a `byte[]`, with it sliced to the right length, and then you could use `buffer.Length` for that purpose.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:25:05.849+0000",
                    "updated": "2019-03-17T00:25:05.849+0000",
                    "started": "2019-03-17T00:25:05.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214338",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219595\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -26,12 +27,14 @@ internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n         public Stream BaseStream { get; }\n         protected ArrayPool<byte> Buffers { get; }\n         private readonly bool _leaveOpen;\n+        private readonly MemoryPool _memoryPool;\n \n-        public ArrowStreamReaderImplementation(Stream stream, bool leaveOpen)\n+        public ArrowStreamReaderImplementation(Stream stream, MemoryPool memoryPool, bool leaveOpen)\n         {\n             BaseStream = stream;\n+            _memoryPool = memoryPool ?? MemoryPool.Default.Value;\n             _leaveOpen = leaveOpen;\n-            Buffers = ArrayPool<byte>.Create();\n+            Buffers = ArrayPool<byte>.Shared;\n \n Review comment:\n   Does it need to be a property?  It'd be more efficient to just have all callers use `ArrayPool<byte>.Shared.Rent/Return`, both because it would remove the extra field from this instance and because the .NET Core JIT will likely be able to devirtualize those calls.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:28:45.305+0000",
                    "updated": "2019-03-17T00:28:45.305+0000",
                    "started": "2019-03-17T00:28:45.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214339",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266219636\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -51,69 +54,101 @@ public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationTok\n \n         public override RecordBatch ReadNextRecordBatch()\n         {\n-            throw new NotImplementedException();\n+            return ReadRecordBatch();\n         }\n \n         protected async Task<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken = default)\n         {\n             await ReadSchemaAsync().ConfigureAwait(false);\n \n-            var bytesRead = 0;\n+            int bytesRead = 0;\n \n-            byte[] lengthBuffer = null;\n-            byte[] messageBuff = null;\n-            byte[] bodyBuff = null;\n-\n-            try\n+            int messageLength = 0;\n+            await Buffers.RentReturnAsync(4, async (lengthBuffer) =>\n             {\n                 // Get Length of record batch for message header.\n+                bytesRead += await BaseStream.ReadAsync(lengthBuffer.AsMemory(0, 4), cancellationToken)\n+                    .ConfigureAwait(false);\n+\n+                if (bytesRead == 4)\n+                {\n+                    messageLength = BitConverter.ToInt32(lengthBuffer, 0);\n+                }\n+            }).ConfigureAwait(false);\n+\n+            if (messageLength == 0)\n+            {\n+                // reached end\n+                return null;\n+            }\n+\n+            RecordBatch result = null;\n+            await Buffers.RentReturnAsync(messageLength, async (messageBuff) =>\n+            {\n+                bytesRead += await BaseStream.ReadAsync(messageBuff.AsMemory(0, messageLength), cancellationToken)\n+                    .ConfigureAwait(false);\n+                Flatbuf.Message message = Flatbuf.Message.GetRootAsMessage(new FlatBuffers.ByteBuffer(messageBuff));\n \n-                lengthBuffer = Buffers.Rent(4);\n-                bytesRead += await BaseStream.ReadAsync(lengthBuffer, 0, 4, cancellationToken)\n+                Memory<byte> bodyBuff = _memoryPool.Allocate((int)message.BodyLength);\n \n Review comment:\n   Where and when do these buffers get returned to the pool?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:29:55.106+0000",
                    "updated": "2019-03-17T00:29:55.106+0000",
                    "started": "2019-03-17T00:29:55.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214340",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473604432\n \n \n   > ArrowReaderWithMemoryStream\r\n   \r\n   Do we expect this to be a common case? If so, have you considered extracting the byte[] underlying the MemoryStream and using the memory-based reader instead of stream-based? Your need to read the header info at least presumably to know how to slice it, but that should then should then allow that case to be zero-copy, too.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:34:35.307+0000",
                    "updated": "2019-03-17T00:34:35.307+0000",
                    "started": "2019-03-17T00:34:35.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214341",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473604432\n \n \n   > ArrowReaderWithMemoryStream\r\n   \r\n   Do we expect this to be a common case? If so, have you considered extracting the byte[] underlying the MemoryStream and using the memory-based reader instead of stream-based? You'll need to read the header info at least presumably to know how to slice it, but that should then allow that case to be zero-copy, too.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T00:35:03.266+0000",
                    "updated": "2019-03-17T00:35:03.266+0000",
                    "started": "2019-03-17T00:35:03.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214342",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473605919\n \n \n   > On a related topic, @chutchinson, is there a specific reason why the default MemoryPool uses native memory? I guess my assumption was that the default should just be regular `byte[]` instances, which could be garbage collected. I also noticed that there doesn't seem to be a way to return memory back to the pool to be reused. Is that intentional?\r\n   \r\n   The default memory pool allocates native memory because the allocated pointer can be adjusted to satisfy the Arrow memory alignment rule in a cross-platform way without GC pinning and the associated complexity. Admittedly I don't have a sufficiently deep understanding of the CLR (especially CoreCLR) to imagine a better way. \r\n   \r\n   There needs to be more thought and care put into the design of the memory allocation API and implementation. There is no mechanism for returning allocated memory; at the moment it is garbage collected as appropriate via the MemoryManager<T> API. \r\n   \r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T01:03:57.687+0000",
                    "updated": "2019-03-17T01:03:57.687+0000",
                    "started": "2019-03-17T01:03:57.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214344",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473605919\n \n \n   > On a related topic, @chutchinson, is there a specific reason why the default MemoryPool uses native memory? I guess my assumption was that the default should just be regular `byte[]` instances, which could be garbage collected. I also noticed that there doesn't seem to be a way to return memory back to the pool to be reused. Is that intentional?\r\n   \r\n   The default memory pool allocates native memory because the allocated pointer can be adjusted to satisfy the Arrow memory alignment rule in a cross-platform way without GC pinning and the associated complexity. Admittedly I don't have a sufficiently deep understanding of the CLR (especially CoreCLR) to imagine a better way. \r\n   \r\n   There needs to be more thought and care put into the design of the memory allocation API and implementation. There is no mechanism for returning allocated memory; at the moment it is garbage collected as appropriate via the MemoryManager<T> API. I agree it's not much of a pool if you never have to return anything. We either need to pick a better name or enforce the strategy.\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T01:18:57.765+0000",
                    "updated": "2019-03-17T01:18:57.765+0000",
                    "started": "2019-03-17T01:18:57.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214349",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473608316\n \n \n   > There is no mechanism for returning allocated memory; at the moment it is garbage collected as appropriate via the MemoryManager API.\r\n   \r\n   Given this, I'd recommend not using this pool in this PR.  It's going to make things significantly less efficient.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T01:53:18.119+0000",
                    "updated": "2019-03-17T01:53:18.119+0000",
                    "started": "2019-03-17T01:53:18.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214351",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on issue #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#issuecomment-473608316\n \n \n   > There is no mechanism for returning allocated memory; at the moment it is garbage collected as appropriate via the MemoryManager API.\r\n   \r\n   Given this, I'd recommend not using this pool in this PR.  It's going to make things significantly less efficient for any real use (beyond a microbenchmark).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-17T01:53:46.586+0000",
                    "updated": "2019-03-17T01:53:46.586+0000",
                    "started": "2019-03-17T01:53:46.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214352",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266508762\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/StreamExtensions.netcoreapp2.1.cs\n ##########\n @@ -0,0 +1,29 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+\n+namespace Apache.Arrow\n+{\n+    // Helpers to read from Stream to Memory<byte> on netcoreapp\n+    internal static class StreamExtensions\n+    {\n+        public static int Read(this Stream stream, Memory<byte> buffer)\n \n Review comment:\n   Is there are better way to do this? I didn't find one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:48:29.957+0000",
                    "updated": "2019-03-18T15:48:29.957+0000",
                    "started": "2019-03-18T15:48:29.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214839",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266509637\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -70,36 +72,79 @@ protected override async Task ReadSchemaAsync()\n             {\n                 BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n \n-                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4).ConfigureAwait(false);\n-                footerLength = BinaryPrimitives.ReadInt32LittleEndian(buffer);\n+                bytesRead = await BaseStream.ReadAsync(buffer.AsMemory(0, 4)).ConfigureAwait(false);\n \n Review comment:\n   Good call. Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:49:55.016+0000",
                    "updated": "2019-03-18T15:49:55.016+0000",
                    "started": "2019-03-18T15:49:55.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214840",
                    "issueId": "13214496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/worklog/214841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3925: ARROW-4503: [C#] Eliminate allocations in ArrowStreamReader when reading from a Stream\nURL: https://github.com/apache/arrow/pull/3925#discussion_r266510894\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Extensions/StreamExtensions.netcoreapp2.1.cs\n ##########\n @@ -0,0 +1,29 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.IO;\n+\n+namespace Apache.Arrow\n+{\n+    // Helpers to read from Stream to Memory<byte> on netcoreapp\n+    internal static class StreamExtensions\n+    {\n+        public static int Read(this Stream stream, Memory<byte> buffer)\n \n Review comment:\n   Given the desire to also compile for netstandard, this seems reasonable.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:52:19.575+0000",
                    "updated": "2019-03-18T15:52:19.575+0000",
                    "started": "2019-03-18T15:52:19.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214841",
                    "issueId": "13214496"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 43800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@665d175e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63cf3b2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@81d6778[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@69ddb4aa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44bca49c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61d56f9b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@290e27e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6ec7e62[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27d5a267[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6db6a8b1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68b0346b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@dca5871[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 43800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 07 12:02:43 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-05-07T12:02:43.000+0000",
        "workratio": 25,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4503/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-02-08T00:28:32.000+0000",
        "updated": "2019-05-07T16:10:26.000+0000",
        "timeoriginalestimate": 172800,
        "description": "When reading `RecordBatch` instances using the `ArrowStreamReader`\u00a0class, it is currently allocating and copying memory 3 times for the data.\r\n # It is allocating memory in order to [read the data from the Stream|https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs#L72-L74], and then reading from the Stream.\u00a0 (This should be the only allocation that is necessary.)\r\n # It then\u00a0[creates a new `ArrowBuffer.Builder`|https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs#L227-L228], which allocates another `byte[]`, and calls `Append` on it, which copies the values to the new `byte[]`.\r\n # Finally, it then calls `.Build()` on the `ArrowBuffer.Builder`, which [allocates memory from the MemoryPool, and then copies the intermediate buffer|https://github.com/apache/arrow/blob/044b418fa108a57f0b4e2e887546cc3e68271397/csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs#L112-L121] into it.\r\n\r\n\u00a0\r\n\r\nWe should reduce this overhead to only allocating a single time (from the MemoryPool), and not copying the data more times than necessary.",
        "customfield_10010": null,
        "timetracking": {
            "originalEstimate": "48h",
            "remainingEstimate": "35h 50m",
            "timeSpent": "12h 10m",
            "originalEstimateSeconds": 172800,
            "remainingEstimateSeconds": 129000,
            "timeSpentSeconds": 43800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] ArrowStreamReader allocates and copies data excessively",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/comment/16764599",
                    "id": "16764599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cshutchinson",
                        "name": "cshutchinson",
                        "key": "cshutchinson",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Chris Hutchinson",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The serialization code needs a lot of work.\u00a0There were\u00a0recent changes to ArrowBuffer.Builder\u00a0that I made that I believe were a mistake.\u00a0I believe it should probably allocate from MemoryPool and \"freeze\" the builder after building an ArrowBuffer. I think this means you would expect InvalidOperationException when attempting to\u00a0modify the builder after building an ArrowBuffer, or perhaps just allocating new backing memory when needed.\r\n\r\nAs for\u00a0ByteBuffer, consider\u00a0that it is presently code generated by the Google FlatBuffer schema compiler. The correct approach\u00a0seems to be to allocate from MemoryPool, read from the stream into the allocated memory, have the ByteBuffer backed by that memory, and construct an ArrowBuffer directly from the ByteBuffer instead of\u00a0using ArrowBuffer.Builder. Alternatively ArrowBuffer.Builder could be modified to accept an existing memory\u00a0for the initial backing store.\u00a0\r\n\r\nPlease note one of the original goals was to target .NET Standard 1.3. I would be comfortable moving that up to .NET Standard 2.0, but also would be interested in hearing any arguments on that.\r\n\r\nGood work!\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cshutchinson",
                        "name": "cshutchinson",
                        "key": "cshutchinson",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Chris Hutchinson",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-10T23:24:51.180+0000",
                    "updated": "2019-02-10T23:24:51.180+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/comment/16765332",
                    "id": "16765332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Thanks for the info, [~cshutchinson]. I was thinking the same approach that you describe above, so that's good.\r\n\r\nAs for the moving to .NET Standard 2.0, I don't think that is necessary at this time. We can make all the changes described above and still target 1.3, as far as I can tell.\r\n\r\nSide note: We may want to multi-target for `netstandard1.3`, `netstandard2.0` and `net4x`, following the OSS Library guidance here: [https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting.]\u00a0But for now we can keep just `netstandard1.3`, until we get more users asking for\u00a0`netstandard2.0` or `net4x` targets.\u00a0 (They are mainly just\u00a0convenience.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2019-02-11T19:38:23.790+0000",
                    "updated": "2019-02-11T19:38:23.790+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214496/comment/16834684",
                    "id": "16834684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3925\n[https://github.com/apache/arrow/pull/3925]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-05-07T12:02:43.444+0000",
                    "updated": "2019-05-07T12:02:43.444+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0rq8:",
        "customfield_12314139": null
    }
}