{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13395228",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228",
    "key": "ARROW-13628",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 38400,
            "total": 38400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 38400,
            "total": 38400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13628/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 64,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#issuecomment-898811945\n\n\n   https://issues.apache.org/jira/browse/ARROW-13628\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T03:47:44.351+0000",
                    "updated": "2021-08-14T03:47:44.351+0000",
                    "started": "2021-08-14T03:47:44.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637927",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#issuecomment-898811967\n\n\n   OK, I think I'm done with the initial batch of changes.\r\n   \r\n   @pitrou or @bkietz would you mind reviewing C++\r\n   @liyafan82 could you review Java.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T03:48:08.054+0000",
                    "updated": "2021-08-14T03:48:08.054+0000",
                    "started": "2021-08-14T03:48:08.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637928",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r688913337\n\n\n\n##########\nFile path: format/Schema.fbs\n##########\n@@ -269,15 +274,24 @@ table Timestamp {\n   timezone: string;\n }\n \n-enum IntervalUnit: short { YEAR_MONTH, DAY_TIME}\n+enum IntervalUnit: short { YEAR_MONTH, DAY_TIME, MONTH_DAY_NANO}\n // A \"calendar\" interval which models types that don't necessarily\n // have a precise duration without the context of a base timestamp (e.g.\n // days can differ in length during day light savings time transitions).\n+// All integers in the types below are stored in the endianness indicated\n+// by the schema.\n // YEAR_MONTH - Indicates the number of elapsed whole months, stored as\n-//   4-byte integers.\n+//   4-byte signed integers.\n // DAY_TIME - Indicates the number of elapsed days and milliseconds,\n //   stored as 2 contiguous 32-bit integers (8-bytes in total).  Support\n //   of this IntervalUnit is not required for full arrow compatibility.\n+// MONTH_DAY_NANO - A triple of the number of elapsed months, days, and nanoseconds.\n+//  The values are stored contiguously in 16 byte blocks. Months and\n+//  days are encoded as 32 bit integers and nanoseconds is encoded as a\n+//  64 bit integer. All integers are signed. Each field is independent\n+//  (e.g. there is no constraint that nanoseconds have the same sign\n+//   as days or that the quantity of nanoseconds represents less\n+//   than a day's worth of time).\n\nReview comment:\n       I was rereading this and I noticed that `DAY_TIME` says:\r\n   \r\n   > Support of this IntervalUnit is not required for full arrow compatibility.\r\n   \r\n   I wonder if the same caveat is meant to apply to `MONTH_DAY_NANO`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T10:31:44.367+0000",
                    "updated": "2021-08-14T10:31:44.367+0000",
                    "started": "2021-08-14T10:31:44.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637934",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r688913459\n\n\n\n##########\nFile path: java/format/src/main/java/org/apache/arrow/flatbuf/Timestamp.java\n##########\n@@ -29,8 +29,33 @@\n  * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n  * leap seconds.\n  *\n- * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n- * aware\" timestamps. Read about the timezone attribute for more detail\n+ * Date & time libraries often have multiple different data types for temporal\n+ * data.  In order to ease interoperability between different implementations the\n+ * Arrow project has some recommendations for encoding these types into a Timestamp\n+ * column.\n+ *\n+ * An \"instant\" represents a single moment in time that has no meaningful time zone\n+ * or the time zone is unknown.  A column of instants can also contain values from\n+ * multiple time zones.  To encode an instant set the timezone string to \"UTC\".\n+ *\n+ * A \"zoned date-time\" represents a single moment in time that has a meaningful\n+ * reference time zone.  To encode a zoned date-time as a Timestamp set the timezone\n+ * string to the name of the timezone.  There is some ambiguity between an instant\n+ * and a zoned date-time with the UTC time zone.  Both of these are stored the same.\n+ * Typically, this distinction does not matter.  If it does, then an application should\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T10:32:47.719+0000",
                    "updated": "2021-08-14T10:32:47.719+0000",
                    "started": "2021-08-14T10:32:47.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637935",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r688967515\n\n\n\n##########\nFile path: java/format/src/main/java/org/apache/arrow/flatbuf/Timestamp.java\n##########\n@@ -29,8 +29,33 @@\n  * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n  * leap seconds.\n  *\n- * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n- * aware\" timestamps. Read about the timezone attribute for more detail\n+ * Date & time libraries often have multiple different data types for temporal\n+ * data.  In order to ease interoperability between different implementations the\n+ * Arrow project has some recommendations for encoding these types into a Timestamp\n+ * column.\n+ *\n+ * An \"instant\" represents a single moment in time that has no meaningful time zone\n+ * or the time zone is unknown.  A column of instants can also contain values from\n+ * multiple time zones.  To encode an instant set the timezone string to \"UTC\".\n+ *\n+ * A \"zoned date-time\" represents a single moment in time that has a meaningful\n+ * reference time zone.  To encode a zoned date-time as a Timestamp set the timezone\n+ * string to the name of the timezone.  There is some ambiguity between an instant\n+ * and a zoned date-time with the UTC time zone.  Both of these are stored the same.\n+ * Typically, this distinction does not matter.  If it does, then an application should\n\nReview comment:\n       this is just updating generated code from FBS :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T16:44:17.099+0000",
                    "updated": "2021-08-14T16:44:17.099+0000",
                    "started": "2021-08-14T16:44:17.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637961",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r688967619\n\n\n\n##########\nFile path: format/Schema.fbs\n##########\n@@ -269,15 +274,24 @@ table Timestamp {\n   timezone: string;\n }\n \n-enum IntervalUnit: short { YEAR_MONTH, DAY_TIME}\n+enum IntervalUnit: short { YEAR_MONTH, DAY_TIME, MONTH_DAY_NANO}\n // A \"calendar\" interval which models types that don't necessarily\n // have a precise duration without the context of a base timestamp (e.g.\n // days can differ in length during day light savings time transitions).\n+// All integers in the types below are stored in the endianness indicated\n+// by the schema.\n // YEAR_MONTH - Indicates the number of elapsed whole months, stored as\n-//   4-byte integers.\n+//   4-byte signed integers.\n // DAY_TIME - Indicates the number of elapsed days and milliseconds,\n //   stored as 2 contiguous 32-bit integers (8-bytes in total).  Support\n //   of this IntervalUnit is not required for full arrow compatibility.\n+// MONTH_DAY_NANO - A triple of the number of elapsed months, days, and nanoseconds.\n+//  The values are stored contiguously in 16 byte blocks. Months and\n+//  days are encoded as 32 bit integers and nanoseconds is encoded as a\n+//  64 bit integer. All integers are signed. Each field is independent\n+//  (e.g. there is no constraint that nanoseconds have the same sign\n+//   as days or that the quantity of nanoseconds represents less\n+//   than a day's worth of time).\n\nReview comment:\n       I think DAY_TIME was problematic because millisecond granularity should have been configurable.  We introduced a duration type to handle most of thse.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T16:45:16.798+0000",
                    "updated": "2021-08-14T16:45:16.798+0000",
                    "started": "2021-08-14T16:45:16.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637962",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#issuecomment-898929295\n\n\n   1. Should we also declare the format on the c data interface?\r\n   \r\n       We currently have:\r\n       * `tiM` - interval [months]\r\n       * `tiD` - interval [days, time]\r\n       \r\n       maybe `tiN` (Nano seems to be the only thing that is different from the existing ones)?\r\n   \r\n   2. it seems that we usually generate files and place them on the testing git repo so that users do not need to compile all other languages and use docker to test against the IPC files and streams. I do not know which script we use, but it could be useful to have them also.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T16:52:27.288+0000",
                    "updated": "2021-08-14T16:52:27.288+0000",
                    "started": "2021-08-14T16:52:27.288+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637963",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/637964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#issuecomment-898930067\n\n\n   > Should we also declare the format on the c data interface?\r\n   \r\n   I'd like to handle this in a separate PR\r\n   \r\n   > it seems that we usually generate files and place them on the testing git repo so that users do not need to compile all other languages and use docker to test against the IPC files and streams. I do not know which script we use, but it could be useful to have them also.\r\n   \r\n   I don't think we've been very consistent here.  In the past I think we only did this when we had specific new features in the format, not necessarily new data type.  @pitrou I think added the last set, maybe he can comment on why he did this?\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-14T16:58:33.187+0000",
                    "updated": "2021-08-14T16:58:33.187+0000",
                    "started": "2021-08-14T16:58:33.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637964",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689227995\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/IntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,440 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.IntervalMonthDayNanoReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.util.TransferPair;\n+\n+/**\n+ * IntervalMonthDayNanoVectorimplements a fixed width vector (16 bytes) of\n\nReview comment:\n       nit: a space is missed here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:10:52.322+0000",
                    "updated": "2021-08-16T04:10:52.322+0000",
                    "started": "2021-08-16T04:10:52.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638035",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689229653\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/IntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,440 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.IntervalMonthDayNanoReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.util.TransferPair;\n+\n+/**\n+ * IntervalMonthDayNanoVectorimplements a fixed width vector (16 bytes) of\n+ * interval (month, days and nanoseconds) values which could be null.\n+ * A validity buffer (bit vector) is maintained to track which elements in the\n+ * vector are null.\n+ */\n+public final class IntervalMonthDayNanoVector extends BaseFixedWidthVector {\n+  public static final byte TYPE_WIDTH = 16;\n+  private static final byte DAY_OFFSET = 4;\n+  private static final byte NANOSECOND_OFFSET = 8;\n+  private final FieldReader reader;\n+\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, BufferAllocator allocator) {\n+    this(name, FieldType.nullable(MinorType.INTERVALDAY.getType()), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param fieldType type of Field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, FieldType fieldType, BufferAllocator allocator) {\n+    this(new Field(name, fieldType, null), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param field field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(Field field, BufferAllocator allocator) {\n+    super(field, allocator, TYPE_WIDTH);\n+    reader = new IntervalMonthDayNanoReaderImpl(IntervalMonthDayNanoVector.this);\n+  }\n+\n+  /**\n+   * Get a reader that supports reading values from this vector.\n+   *\n+   * @return Field Reader for this vector\n+   */\n+  @Override\n+  public FieldReader getReader() {\n+    return reader;\n+  }\n+\n+  /**\n+   * Get minor type for this vector. The vector holds values belonging\n+   * to a particular type.\n+   *\n+   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n+   */\n+  @Override\n+  public MinorType getMinorType() {\n+    return MinorType.INTERVALMONTHDAYNANO;\n+  }\n+\n+\n+  /*----------------------------------------------------------------*\n+   |                                                                |\n+   |          vector value retrieval methods                        |\n+   |                                                                |\n+   *----------------------------------------------------------------*/\n+\n+  /**\n+   * Given a data buffer, get the number of months stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n\nReview comment:\n       If it is not intended to be used externally, then it should not be declared \"public\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:18:57.794+0000",
                    "updated": "2021-08-16T04:18:57.794+0000",
                    "started": "2021-08-16T04:18:57.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638036",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689231040\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/IntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,440 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.IntervalMonthDayNanoReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.util.TransferPair;\n+\n+/**\n+ * IntervalMonthDayNanoVectorimplements a fixed width vector (16 bytes) of\n+ * interval (month, days and nanoseconds) values which could be null.\n+ * A validity buffer (bit vector) is maintained to track which elements in the\n+ * vector are null.\n+ */\n+public final class IntervalMonthDayNanoVector extends BaseFixedWidthVector {\n+  public static final byte TYPE_WIDTH = 16;\n+  private static final byte DAY_OFFSET = 4;\n+  private static final byte NANOSECOND_OFFSET = 8;\n+  private final FieldReader reader;\n+\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, BufferAllocator allocator) {\n+    this(name, FieldType.nullable(MinorType.INTERVALDAY.getType()), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param fieldType type of Field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, FieldType fieldType, BufferAllocator allocator) {\n+    this(new Field(name, fieldType, null), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param field field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(Field field, BufferAllocator allocator) {\n+    super(field, allocator, TYPE_WIDTH);\n+    reader = new IntervalMonthDayNanoReaderImpl(IntervalMonthDayNanoVector.this);\n+  }\n+\n+  /**\n+   * Get a reader that supports reading values from this vector.\n+   *\n+   * @return Field Reader for this vector\n+   */\n+  @Override\n+  public FieldReader getReader() {\n+    return reader;\n+  }\n+\n+  /**\n+   * Get minor type for this vector. The vector holds values belonging\n+   * to a particular type.\n+   *\n+   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n+   */\n+  @Override\n+  public MinorType getMinorType() {\n+    return MinorType.INTERVALMONTHDAYNANO;\n+  }\n+\n+\n+  /*----------------------------------------------------------------*\n+   |                                                                |\n+   |          vector value retrieval methods                        |\n+   |                                                                |\n+   *----------------------------------------------------------------*/\n+\n+  /**\n+   * Given a data buffer, get the number of months stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return day value stored at the index.\n+   */\n+  public static int getMonths(final ArrowBuf buffer, final int index) {\n+    return buffer.getInt((long) index * TYPE_WIDTH);\n+  }\n+\n+\n+  /**\n+   * Given a data buffer, get the number of days stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return day value stored at the index.\n+   */\n+  public static int getDays(final ArrowBuf buffer, final int index) {\n+    return buffer.getInt((long) index * TYPE_WIDTH + DAY_OFFSET);\n+  }\n+\n+  /**\n+   * Given a data buffer, get the get the number of nanoseconds stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return nanoseconds value stored at the index.\n+   */\n+  public static long getNanoseconds(final ArrowBuf buffer, final int index) {\n+    return buffer.getLong((long) index * TYPE_WIDTH + NANOSECOND_OFFSET);\n+  }\n+\n+  /**\n+   * Get the element at the given index from the vector.\n+   *\n+   * @param index   position of element\n+   * @return element at given index\n+   */\n+  public ArrowBuf get(int index) throws IllegalStateException {\n+    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {\n+      return null;\n+    }\n+    return valueBuffer.slice((long) index * TYPE_WIDTH, TYPE_WIDTH);\n+  }\n+\n+  /**\n+   * Get the element at the given index from the vector and\n+   * sets the state in holder. If element at given index\n+   * is null, holder.isSet will be zero.\n+   *\n+   * @param index   position of element\n+   */\n+  public void get(int index, NullableIntervalMonthDayNanoHolder holder) {\n+    if (isSet(index) == 0) {\n+      holder.isSet = 0;\n+      return;\n+    }\n+    final long startIndex = (long) index * TYPE_WIDTH;\n+    holder.isSet = 1;\n+    holder.months = valueBuffer.getInt(startIndex);\n+    holder.days = valueBuffer.getInt(startIndex + DAY_OFFSET);\n+    holder.nanoseconds = valueBuffer.getLong(startIndex + NANOSECOND_OFFSET);\n+  }\n+\n+  /**\n+   * Same as {@link #get(int)}.\n+   *\n+   * @param index   position of element\n+   * @return element at given index\n+   */\n+  public PeriodDuration getObject(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      final long startIndex = (long) index * TYPE_WIDTH;\n+      final int months = valueBuffer.getInt(startIndex);\n+      final int days = valueBuffer.getInt(startIndex + DAY_OFFSET);\n+      final long nanoseconds = valueBuffer.getLong(startIndex + NANOSECOND_OFFSET);\n+\n+      return new PeriodDuration(Period.ofMonths(months).plusDays(days),\n+            Duration.ofNanos(nanoseconds));\n+    }\n+  }\n+\n+  /**\n+   * Get the Interval value at a given index as a {@link StringBuilder} object.\n+   *\n+   * @param index position of the element\n+   * @return String Builder object with Interval value as\n+   */\n+  public StringBuilder getAsStringBuilder(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      return getAsStringBuilderHelper(index);\n+    }\n+  }\n+\n+  private StringBuilder getAsStringBuilderHelper(int index) {\n+    final long startIndex = (long) index * TYPE_WIDTH;\n\nReview comment:\n       `startIndex` is not used here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:24:49.045+0000",
                    "updated": "2021-08-16T04:24:49.045+0000",
                    "started": "2021-08-16T04:24:49.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638037",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689232109\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/IntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,440 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.complex.impl.IntervalMonthDayNanoReaderImpl;\n+import org.apache.arrow.vector.complex.reader.FieldReader;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.util.TransferPair;\n+\n+/**\n+ * IntervalMonthDayNanoVectorimplements a fixed width vector (16 bytes) of\n+ * interval (month, days and nanoseconds) values which could be null.\n+ * A validity buffer (bit vector) is maintained to track which elements in the\n+ * vector are null.\n+ */\n+public final class IntervalMonthDayNanoVector extends BaseFixedWidthVector {\n+  public static final byte TYPE_WIDTH = 16;\n+  private static final byte DAY_OFFSET = 4;\n+  private static final byte NANOSECOND_OFFSET = 8;\n+  private final FieldReader reader;\n+\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, BufferAllocator allocator) {\n+    this(name, FieldType.nullable(MinorType.INTERVALDAY.getType()), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param name name of the vector\n+   * @param fieldType type of Field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(String name, FieldType fieldType, BufferAllocator allocator) {\n+    this(new Field(name, fieldType, null), allocator);\n+  }\n+\n+  /**\n+   * Instantiate a IntervalMonthDayNanoVector. This doesn't allocate any memory for\n+   * the data in vector.\n+   *\n+   * @param field field materialized by this vector\n+   * @param allocator allocator for memory management.\n+   */\n+  public IntervalMonthDayNanoVector(Field field, BufferAllocator allocator) {\n+    super(field, allocator, TYPE_WIDTH);\n+    reader = new IntervalMonthDayNanoReaderImpl(IntervalMonthDayNanoVector.this);\n+  }\n+\n+  /**\n+   * Get a reader that supports reading values from this vector.\n+   *\n+   * @return Field Reader for this vector\n+   */\n+  @Override\n+  public FieldReader getReader() {\n+    return reader;\n+  }\n+\n+  /**\n+   * Get minor type for this vector. The vector holds values belonging\n+   * to a particular type.\n+   *\n+   * @return {@link org.apache.arrow.vector.types.Types.MinorType}\n+   */\n+  @Override\n+  public MinorType getMinorType() {\n+    return MinorType.INTERVALMONTHDAYNANO;\n+  }\n+\n+\n+  /*----------------------------------------------------------------*\n+   |                                                                |\n+   |          vector value retrieval methods                        |\n+   |                                                                |\n+   *----------------------------------------------------------------*/\n+\n+  /**\n+   * Given a data buffer, get the number of months stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return day value stored at the index.\n+   */\n+  public static int getMonths(final ArrowBuf buffer, final int index) {\n+    return buffer.getInt((long) index * TYPE_WIDTH);\n+  }\n+\n+\n+  /**\n+   * Given a data buffer, get the number of days stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return day value stored at the index.\n+   */\n+  public static int getDays(final ArrowBuf buffer, final int index) {\n+    return buffer.getInt((long) index * TYPE_WIDTH + DAY_OFFSET);\n+  }\n+\n+  /**\n+   * Given a data buffer, get the get the number of nanoseconds stored at a particular position\n+   * in the vector.\n+   *\n+   * <p>This method should not be used externally.\n+   *\n+   * @param buffer data buffer\n+   * @param index  position of the element.\n+   * @return nanoseconds value stored at the index.\n+   */\n+  public static long getNanoseconds(final ArrowBuf buffer, final int index) {\n+    return buffer.getLong((long) index * TYPE_WIDTH + NANOSECOND_OFFSET);\n+  }\n+\n+  /**\n+   * Get the element at the given index from the vector.\n+   *\n+   * @param index   position of element\n+   * @return element at given index\n+   */\n+  public ArrowBuf get(int index) throws IllegalStateException {\n+    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {\n+      return null;\n+    }\n+    return valueBuffer.slice((long) index * TYPE_WIDTH, TYPE_WIDTH);\n+  }\n+\n+  /**\n+   * Get the element at the given index from the vector and\n+   * sets the state in holder. If element at given index\n+   * is null, holder.isSet will be zero.\n+   *\n+   * @param index   position of element\n+   */\n+  public void get(int index, NullableIntervalMonthDayNanoHolder holder) {\n+    if (isSet(index) == 0) {\n+      holder.isSet = 0;\n+      return;\n+    }\n+    final long startIndex = (long) index * TYPE_WIDTH;\n+    holder.isSet = 1;\n+    holder.months = valueBuffer.getInt(startIndex);\n+    holder.days = valueBuffer.getInt(startIndex + DAY_OFFSET);\n+    holder.nanoseconds = valueBuffer.getLong(startIndex + NANOSECOND_OFFSET);\n+  }\n+\n+  /**\n+   * Same as {@link #get(int)}.\n+   *\n+   * @param index   position of element\n+   * @return element at given index\n+   */\n+  public PeriodDuration getObject(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      final long startIndex = (long) index * TYPE_WIDTH;\n+      final int months = valueBuffer.getInt(startIndex);\n+      final int days = valueBuffer.getInt(startIndex + DAY_OFFSET);\n+      final long nanoseconds = valueBuffer.getLong(startIndex + NANOSECOND_OFFSET);\n+\n+      return new PeriodDuration(Period.ofMonths(months).plusDays(days),\n+            Duration.ofNanos(nanoseconds));\n+    }\n+  }\n+\n+  /**\n+   * Get the Interval value at a given index as a {@link StringBuilder} object.\n+   *\n+   * @param index position of the element\n+   * @return String Builder object with Interval value as\n+   */\n+  public StringBuilder getAsStringBuilder(int index) {\n+    if (isSet(index) == 0) {\n+      return null;\n+    } else {\n+      return getAsStringBuilderHelper(index);\n+    }\n+  }\n+\n+  private StringBuilder getAsStringBuilderHelper(int index) {\n+    final long startIndex = (long) index * TYPE_WIDTH;\n+    return new StringBuilder().append(getObject(index).toString()).append(\" \");\n+  }\n+\n+  /*----------------------------------------------------------------*\n+   |                                                                |\n+   |          vector value setter methods                           |\n+   |                                                                |\n+   *----------------------------------------------------------------*/\n+\n+\n+  /**\n+   * Set the element at the given index to the given value.\n+   *\n+   * @param index   position of element\n+   * @param value   value of element\n+   */\n+  public void set(int index, ArrowBuf value) {\n+    BitVectorHelper.setBit(validityBuffer, index);\n+    valueBuffer.setBytes((long) index * TYPE_WIDTH, value, 0, TYPE_WIDTH);\n+  }\n+\n+  /**\n+   * Set the element at the given index to the given value.\n+   *\n+   * @param index          position of element\n+   * @param months months component of interval\n+   * @param days days component of interval\n+   * @param nanoseconds nanosecond component of interval\n+   */\n+  public void set(int index, int months, int days, long nanoseconds) {\n+    final long offsetIndex = (long) index * TYPE_WIDTH;\n+    BitVectorHelper.setBit(validityBuffer, index);\n+    valueBuffer.setInt(offsetIndex, months);\n+    valueBuffer.setInt(offsetIndex + DAY_OFFSET, days);\n+    valueBuffer.setLong((offsetIndex + NANOSECOND_OFFSET), nanoseconds);\n+  }\n+\n+  /**\n+   * Set the element at the given index to the value set in data holder.\n+   * If the value in holder is not indicated as set, element in the\n\nReview comment:\n       remove 'in the'?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:29:26.574+0000",
                    "updated": "2021-08-16T04:29:26.574+0000",
                    "started": "2021-08-16T04:29:26.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638038",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689234920\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/PeriodDuration.java\n##########\n@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+/**\n+ * Combination of Period and Duration for representing this interval type\n+ * as a POJO.\n+ */\n+public class PeriodDuration {\n+  private final Period period;\n+  private final Duration duration;\n+\n+  public PeriodDuration(Period period, Duration duration) {\n+    this.period = period;\n+    this.duration = duration;\n+  }\n+\n+  public Period getPeriod() {\n+    return period;\n+  }\n+\n+  public Duration getDuration() {\n+    return duration;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return period.toString() + \" \" + duration.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (!(o instanceof PeriodDuration)) {\n+      return false;\n+    }\n+    PeriodDuration other = (PeriodDuration) o;\n+    return this.period.equals(other.period) && this.duration.equals(other.duration);\n\nReview comment:\n       do we allow cases where the `period` or `duration` are null?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:42:32.662+0000",
                    "updated": "2021-08-16T04:42:32.662+0000",
                    "started": "2021-08-16T04:42:32.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638040",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689237135\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/TestIntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestIntervalMonthDayNanoVector {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new DirtyRootAllocator(Long.MAX_VALUE, (byte) 100);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBasics() {\n+    try (final IntervalMonthDayNanoVector vector = new IntervalMonthDayNanoVector(/*name=*/\"\", allocator)) {\n+      int valueCount = 100;\n+      vector.setInitialCapacity(valueCount);\n+      vector.allocateNew();\n+      NullableIntervalMonthDayNanoHolder nullableHolder = new NullableIntervalMonthDayNanoHolder();\n+      nullableHolder.isSet = 1;\n+      nullableHolder.months = 2;\n+      nullableHolder.days = 20;\n+      nullableHolder.nanoseconds = 123;\n+      IntervalMonthDayNanoHolder holder = new IntervalMonthDayNanoHolder();\n+      holder.months = Integer.MIN_VALUE;\n+      holder.days = Integer.MIN_VALUE;\n+      holder.nanoseconds = Long.MIN_VALUE;\n+\n+\n+      vector.set(0, /*moths=*/1, /*days=*/2, /*nanoseconds=*/-2);\n\nReview comment:\n       nit: moths -> months\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:51:55.851+0000",
                    "updated": "2021-08-16T04:51:55.851+0000",
                    "started": "2021-08-16T04:51:55.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638041",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689237349\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/TestIntervalMonthDayNanoVector.java\n##########\n@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+import java.time.Duration;\n+import java.time.Period;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.holders.IntervalMonthDayNanoHolder;\n+import org.apache.arrow.vector.holders.NullableIntervalMonthDayNanoHolder;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestIntervalMonthDayNanoVector {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new DirtyRootAllocator(Long.MAX_VALUE, (byte) 100);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBasics() {\n+    try (final IntervalMonthDayNanoVector vector = new IntervalMonthDayNanoVector(/*name=*/\"\", allocator)) {\n+      int valueCount = 100;\n+      vector.setInitialCapacity(valueCount);\n+      vector.allocateNew();\n+      NullableIntervalMonthDayNanoHolder nullableHolder = new NullableIntervalMonthDayNanoHolder();\n+      nullableHolder.isSet = 1;\n+      nullableHolder.months = 2;\n+      nullableHolder.days = 20;\n+      nullableHolder.nanoseconds = 123;\n+      IntervalMonthDayNanoHolder holder = new IntervalMonthDayNanoHolder();\n+      holder.months = Integer.MIN_VALUE;\n+      holder.days = Integer.MIN_VALUE;\n+      holder.nanoseconds = Long.MIN_VALUE;\n+\n+\n+      vector.set(0, /*moths=*/1, /*days=*/2, /*nanoseconds=*/-2);\n+      vector.setSafe(2, /*moths=*/1, /*days=*/2, /*nanoseconds=*/-3);\n+      vector.setSafe(/*index=*/4, nullableHolder);\n+      vector.set(3, holder);\n+      nullableHolder.isSet = 0;\n+      vector.setSafe(/*index=*/5, nullableHolder);\n\nReview comment:\n       nit: we should `setValueCount` here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T04:52:49.196+0000",
                    "updated": "2021-08-16T04:52:49.196+0000",
                    "started": "2021-08-16T04:52:49.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638042",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689589106\n\n\n\n##########\nFile path: format/Schema.fbs\n##########\n@@ -17,6 +17,11 @@\n \n /// Logical types, vector layouts, and schemas\n \n+/// Format Version History.\n+/// Version 1.0 - Forward and backwards compatibility guaranteed.\n+/// Version 1.1 - Add Decimal256 (No format release).\n+/// Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO\n\nReview comment:\n       Did we actually formalize the notion of format versions?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T14:30:31.259+0000",
                    "updated": "2021-08-16T14:30:31.259+0000",
                    "started": "2021-08-16T14:30:31.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638187",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689592888\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1317,6 +1317,40 @@ class ARROW_EXPORT DayTimeIntervalType : public IntervalType {\n   std::string name() const override { return \"day_time_interval\"; }\n };\n \n+/// \\brief Represents a number of days and milliseconds (fraction of day).\n\nReview comment:\n       Update docstring? (this looks like a paste of the `DayTimeIntervalType` docstring)\n\n##########\nFile path: cpp/src/arrow/array/array_primitive.h\n##########\n@@ -132,4 +136,33 @@ class ARROW_EXPORT DayTimeIntervalArray : public PrimitiveArray {\n   const uint8_t* raw_values() const { return raw_values_ + data_->offset * byte_width(); }\n };\n \n+/// \\brief Array of Month, Day and nanosecond values.\n+class ARROW_EXPORT MonthDayNanoIntervalArray : public PrimitiveArray {\n+ public:\n+  using TypeClass = MonthDayNanoIntervalType;\n+\n+  explicit MonthDayNanoIntervalArray(const std::shared_ptr<ArrayData>& data);\n+\n+  MonthDayNanoIntervalArray(const std::shared_ptr<DataType>& type, int64_t length,\n+                            const std::shared_ptr<Buffer>& data,\n+                            const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n+                            int64_t null_count = kUnknownNullCount, int64_t offset = 0);\n+\n+  MonthDayNanoIntervalArray(int64_t length, const std::shared_ptr<Buffer>& data,\n+                            const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n+                            int64_t null_count = kUnknownNullCount, int64_t offset = 0);\n+\n+  TypeClass::MonthDayNanos GetValue(int64_t i) const;\n+  TypeClass::MonthDayNanos Value(int64_t i) const { return GetValue(i); }\n+\n+  // For compatibility with Take kernel.\n+  TypeClass::MonthDayNanos GetView(int64_t i) const { return GetValue(i); }\n+\n+  int32_t byte_width() const { return sizeof(TypeClass::MonthDayNanos); }\n+  static_assert(sizeof(TypeClass::MonthDayNanos) == 16,\n+                \"MonthDayNanos should only take 16 bytes\");\n\nReview comment:\n       This is already in `type.h`, no need to repeat it here IMHO.\n\n##########\nFile path: cpp/src/arrow/testing/random.cc\n##########\n@@ -867,6 +869,7 @@ std::shared_ptr<Array> RandomArrayGenerator::ArrayOf(const Field& field, int64_t\n       // This isn't as flexible as it could be, but the array-of-structs layout of this\n       // type means it's not a (useful) composition of other generators\n       GENERATE_INTEGRAL_CASE_VIEW(Int64Type, DayTimeIntervalType);\n+      GENERATE_INTEGRAL_CASE_VIEW(Int64Type, MonthDayNanoIntervalType);\n\nReview comment:\n       Hmm... it seems you should view a `fixed_size_binary(16)` instead.\r\n   Also, can you add some tests in `random_test.cc`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_test.cc\n##########\n@@ -803,6 +803,24 @@ TEST_F(TestIndexInKernel, FixedSizeBinary) {\n   CheckIndexIn(fixed_size_binary(0), R\"([])\", R\"([])\", R\"([])\");\n }\n \n+TEST_F(TestIndexInKernel, MonthDayNanoInterval) {\n+  auto type = month_day_nano_interval();\n+\n+  CheckIndexIn(type,\n+               /*input=*/R\"([[5, -1, 5], null, [4, 5, 6], [5, -1, 5], [1, 2, 3]])\",\n+               /*value_set=*/R\"([null, [4, 5, 6], [5, -1, 5]])\",\n+               /*expected=*/R\"([2, 0, 1, 2, null])\",\n+               /*skip_nulls=*/false);\n+\n+  // Duplicates in value_set\n+  CheckIndexIn(\n+      type,\n+      /*input=*/R\"([[7, 8, 0], null, [0, 0, 0], [7, 8, 0], [0, 0, 1]])\",\n+      /*value_set=*/R\"([null, null, [0, 0, 0], [0, 0, 0], [7, 8, 0], [7, 8, 0]])\",\n+      /*expected=*/R\"([4, 0, 2, 4, null])\",\n+      /*skip_nulls=*/false);\n+}\n+\n\nReview comment:\n       Interesting! Do you think it's useful to add implementation for other interval types or not?\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1317,6 +1317,40 @@ class ARROW_EXPORT DayTimeIntervalType : public IntervalType {\n   std::string name() const override { return \"day_time_interval\"; }\n };\n \n+/// \\brief Represents a number of days and milliseconds (fraction of day).\n+class ARROW_EXPORT MonthDayNanoIntervalType : public IntervalType {\n+ public:\n+  struct MonthDayNanos {\n+    int32_t months;\n+    int32_t days;\n+    int64_t nanoseconds;\n+    bool operator==(MonthDayNanos other) const {\n+      return this->months == other.months && this->days == other.days &&\n+             this->nanoseconds == other.nanoseconds;\n+    }\n+    bool operator!=(MonthDayNanos other) const { return !(*this == other); }\n+  };\n+  using c_type = MonthDayNanos;\n+  using PhysicalType = MonthDayNanoIntervalType;\n+\n+  static_assert(sizeof(MonthDayNanos) == 16,\n+                \"MonthDayNanos  struct assumed to be of size 8 bytes\");\n\nReview comment:\n       Fix message?\n\n##########\nFile path: cpp/src/arrow/testing/random.h\n##########\n@@ -454,6 +454,37 @@ std::shared_ptr<arrow::Array> GenerateArray(const Field& field, int64_t size,\n // Assorted functions\n //\n \n+inline void rand_day_millis(int64_t N,\n+                            std::vector<DayTimeIntervalType::DayMilliseconds>* out) {\n+  const int random_seed = 0;\n+  std::default_random_engine gen(random_seed);\n+  std::uniform_int_distribution<int32_t> d(std::numeric_limits<int32_t>::min(),\n+                                           std::numeric_limits<int32_t>::max());\n+  out->resize(N, {});\n+  std::generate(out->begin(), out->end(), [&d, &gen] {\n+    DayTimeIntervalType::DayMilliseconds tmp;\n+    tmp.days = d(gen);\n+    tmp.milliseconds = d(gen);\n+    return tmp;\n+  });\n+}\n+\n+inline void rand_month_day_nanos(\n+    int64_t N, std::vector<MonthDayNanoIntervalType::MonthDayNanos>* out) {\n+  const int random_seed = 0;\n+  std::default_random_engine gen(random_seed);\n+  std::uniform_int_distribution<int64_t> d(std::numeric_limits<int64_t>::min(),\n+                                           std::numeric_limits<int64_t>::max());\n+  out->resize(N, {});\n+  std::generate(out->begin(), out->end(), [&d, &gen] {\n+    MonthDayNanoIntervalType::MonthDayNanos tmp;\n+    tmp.months = static_cast<int32_t>(d(gen));\n+    tmp.days = static_cast<int32_t>(d(gen));\n+    tmp.nanoseconds = d(gen);\n+    return tmp;\n+  });\n+}\n+\n\nReview comment:\n       Please don't inline functions which don't need to be inlined. Only put the declarations here.\r\n   (also, the pointer-out signature seems unnecessary)\n\n##########\nFile path: cpp/src/arrow/array/array_test.cc\n##########\n@@ -3060,4 +3098,14 @@ TEST(TestSwapEndianArrayData, ExtensionType) {\n   AssertArrayDataEqualsWithSwapEndian(test_data, expected_data);\n }\n \n+TEST(TestSwapEndianArrayData, MonthDayNanoInterval) {\n+  auto array = ArrayFromJSON(month_day_nano_interval(), R\"([[0, 1, 2],\n+                                                          [5000, 200, 3000000000]])\");\n+  auto swap_array = MakeArray(*::arrow::internal::SwapEndianArrayData(array->data()));\n+  EXPECT_TRUE(!swap_array->Equals(array));\n+  ASSERT_ARRAYS_EQUAL(\n+      *MakeArray(*::arrow::internal::SwapEndianArrayData(swap_array->data())), *array);\n+  ASSERT_OK(swap_array->ValidateFull());\n+}\n\nReview comment:\n       Hmm... it should be pretty easy to check the expected result here.\n\n##########\nFile path: cpp/src/arrow/array/array_test.cc\n##########\n@@ -1332,12 +1366,16 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendValuesLazyIter) {\n }\n \n TYPED_TEST(TestPrimitiveBuilder, TestAppendValuesIterConverted) {\n-  DECL_T();\n+  typedef typename TestFixture::CType T;\n   // find type we can safely convert the tested values to and from\n-  using conversion_type =\n-      typename std::conditional<std::is_floating_point<T>::value, double,\n-                                typename std::conditional<std::is_unsigned<T>::value,\n-                                                          uint64_t, int64_t>::type>::type;\n+  using conversion_type = typename std::conditional<\n+      std::is_floating_point<T>::value, double,\n+      typename std::conditional<\n+          std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value ||\n+              std::is_same<T, MonthDayNanoIntervalType::MonthDayNanos>::value,\n+          T,\n+          typename std::conditional<std::is_unsigned<T>::value, uint64_t,\n+                                    int64_t>::type>::type>::type;\n\nReview comment:\n       Hmm... can you put something on the various P* classes instead?\n\n##########\nFile path: cpp/src/arrow/testing/random.h\n##########\n@@ -454,6 +454,37 @@ std::shared_ptr<arrow::Array> GenerateArray(const Field& field, int64_t size,\n // Assorted functions\n //\n \n+inline void rand_day_millis(int64_t N,\n+                            std::vector<DayTimeIntervalType::DayMilliseconds>* out) {\n+  const int random_seed = 0;\n+  std::default_random_engine gen(random_seed);\n+  std::uniform_int_distribution<int32_t> d(std::numeric_limits<int32_t>::min(),\n+                                           std::numeric_limits<int32_t>::max());\n+  out->resize(N, {});\n+  std::generate(out->begin(), out->end(), [&d, &gen] {\n+    DayTimeIntervalType::DayMilliseconds tmp;\n+    tmp.days = d(gen);\n+    tmp.milliseconds = d(gen);\n+    return tmp;\n+  });\n+}\n+\n+inline void rand_month_day_nanos(\n+    int64_t N, std::vector<MonthDayNanoIntervalType::MonthDayNanos>* out) {\n+  const int random_seed = 0;\n+  std::default_random_engine gen(random_seed);\n+  std::uniform_int_distribution<int64_t> d(std::numeric_limits<int64_t>::min(),\n+                                           std::numeric_limits<int64_t>::max());\n+  out->resize(N, {});\n+  std::generate(out->begin(), out->end(), [&d, &gen] {\n+    MonthDayNanoIntervalType::MonthDayNanos tmp;\n+    tmp.months = static_cast<int32_t>(d(gen));\n+    tmp.days = static_cast<int32_t>(d(gen));\n+    tmp.nanoseconds = d(gen);\n+    return tmp;\n+  });\n+}\n+\n\nReview comment:\n       Actually, I'm not even sure where these functions are used?\n\n##########\nFile path: cpp/src/arrow/ipc/json_simple.cc\n##########\n@@ -410,6 +410,41 @@ class DayTimeIntervalConverter final\n   std::shared_ptr<DayTimeIntervalBuilder> builder_;\n };\n \n+class MonthDayNanoIntervalConverter final\n+    : public ConcreteConverter<MonthDayNanoIntervalConverter> {\n+ public:\n+  explicit MonthDayNanoIntervalConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<MonthDayNanoIntervalBuilder>(default_memory_pool());\n+  }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return this->AppendNull();\n+    }\n+    MonthDayNanoIntervalType::MonthDayNanos value;\n+    if (!json_obj.IsArray()) {\n+      return JSONTypeError(\"array\", json_obj.GetType());\n+    }\n+    if (json_obj.Size() != 3) {\n+      return Status::Invalid(\n+          \"month day nanos interval pair must have exactly two elements, had \",\n\nReview comment:\n       Hmm, I think the error message is slightly off.\r\n   Also, I think we need to settle on a spelling of the type name. Apparently it's \"month_day_nano_interval\". Let's not vary gratuitously :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T14:58:50.867+0000",
                    "updated": "2021-08-16T14:58:50.867+0000",
                    "started": "2021-08-16T14:58:50.867+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638203",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#issuecomment-899581174\n\n\n   @jorgecarleitao \r\n   \r\n   > Should we also declare the format on the c data interface?\r\n   \r\n   I agree this can be done separately.\r\n   \r\n   @emkornfield \r\n   \r\n   > I don't think we've been very consistent here. In the past I think we only did this when we had specific new features in the format, not necessarily new data type. @pitrou I think added the last set, maybe he can comment on why he did this?\r\n   \r\n   AFAICT we've only done this on an ad-hoc basis when specific problems arised. Most additions were related to fuzzing.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T15:00:44.163+0000",
                    "updated": "2021-08-16T15:00:44.163+0000",
                    "started": "2021-08-16T15:00:44.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638205",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689680020\n\n\n\n##########\nFile path: format/Schema.fbs\n##########\n@@ -17,6 +17,11 @@\n \n /// Logical types, vector layouts, and schemas\n \n+/// Format Version History.\n+/// Version 1.0 - Forward and backwards compatibility guaranteed.\n+/// Version 1.1 - Add Decimal256 (No format release).\n+/// Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO\n\nReview comment:\n       We [have](https://arrow.apache.org/docs/format/Versioning.html) this but I don't know if we've been officially announcing/voting on them as separate releases.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T16:22:34.472+0000",
                    "updated": "2021-08-16T16:22:34.472+0000",
                    "started": "2021-08-16T16:22:34.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638262",
                    "issueId": "13395228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/worklog/638443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10177:\nURL: https://github.com/apache/arrow/pull/10177#discussion_r689930031\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_set_lookup_test.cc\n##########\n@@ -803,6 +803,24 @@ TEST_F(TestIndexInKernel, FixedSizeBinary) {\n   CheckIndexIn(fixed_size_binary(0), R\"([])\", R\"([])\", R\"([])\");\n }\n \n+TEST_F(TestIndexInKernel, MonthDayNanoInterval) {\n+  auto type = month_day_nano_interval();\n+\n+  CheckIndexIn(type,\n+               /*input=*/R\"([[5, -1, 5], null, [4, 5, 6], [5, -1, 5], [1, 2, 3]])\",\n+               /*value_set=*/R\"([null, [4, 5, 6], [5, -1, 5]])\",\n+               /*expected=*/R\"([2, 0, 1, 2, null])\",\n+               /*skip_nulls=*/false);\n+\n+  // Duplicates in value_set\n+  CheckIndexIn(\n+      type,\n+      /*input=*/R\"([[7, 8, 0], null, [0, 0, 0], [7, 8, 0], [0, 0, 1]])\",\n+      /*value_set=*/R\"([null, null, [0, 0, 0], [0, 0, 0], [7, 8, 0], [7, 8, 0]])\",\n+      /*expected=*/R\"([4, 0, 2, 4, null])\",\n+      /*skip_nulls=*/false);\n+}\n+\n\nReview comment:\n       I'm not really sure.  I included this, because this seemed like the only code path to test the change for adding a hash for the new type.  I might have been able to skip adding some of the code but it wasn't immediately obvious to me how to do that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T23:42:21.033+0000",
                    "updated": "2021-08-16T23:42:21.033+0000",
                    "started": "2021-08-16T23:42:21.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638443",
                    "issueId": "13395228"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 38400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@29aaa073[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@447bc1e6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@320c01aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@28e282fc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c4efbb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3e5c35c2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c0f62f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5046f8ed[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b9e4a66[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44b38ef2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53bc6c64[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@34da776e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 38400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 31 03:22:16 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-31T03:22:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13628/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-08-14T03:46:24.000+0000",
        "updated": "2022-01-19T11:02:53.000+0000",
        "timeoriginalestimate": null,
        "description": "Add type definition to fbs files with initial IPC implementations for Java and C++ (as discussed on the mailing list).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 38400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Format] Add MonthDayNano interval type.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395228/comment/17407044",
                    "id": "17407044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10177\n[https://github.com/apache/arrow/pull/10177]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-31T03:22:16.903+0000",
                    "updated": "2021-08-31T03:22:16.903+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0twk0:",
        "customfield_12314139": null
    }
}