{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13311863",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863",
    "key": "ARROW-9156",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12591406",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12591406",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13307842",
                    "key": "ARROW-8970",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307842",
                    "fields": {
                        "summary": "[C++] Reduce shared library / binary code size (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9156/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/450813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn opened a new pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539\n\n\n   To reduce the size of libarrow.so, I'd like to reduce the size of tensor and sparse tensor codes.\r\n   \r\n   TODO:\r\n   - [x] Stop using template parameters in Tensor to SparseTensor converters\r\n   - [ ] Stop using template parameters in SparseTensor to Tensor converters\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T06:28:16.127+0000",
                    "updated": "2020-06-25T06:28:16.127+0000",
                    "started": "2020-06-25T06:28:16.127+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450813",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/450815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-649256419\n\n\n   https://issues.apache.org/jira/browse/ARROW-9156\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T06:31:56.580+0000",
                    "updated": "2020-06-25T06:31:56.580+0000",
                    "started": "2020-06-25T06:31:56.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450815",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/451051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-649561148\n\n\n   This removes already more than 2MB of code from libarrow.so on Linux: great. I'll keep an eye on this\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T14:00:42.271+0000",
                    "updated": "2020-06-25T14:00:42.271+0000",
                    "started": "2020-06-25T14:00:42.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451051",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-650967222\n\n\n   @wesm Could you please review this?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T06:49:50.731+0000",
                    "updated": "2020-06-29T06:49:50.731+0000",
                    "started": "2020-06-29T06:49:50.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452184",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#discussion_r447030010\n\n\n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -57,73 +57,86 @@ inline void IncrementIndex(std::vector<int64_t>& coord, const std::vector<int64_\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCSFIndex\n \n-template <typename TYPE>\n-class SparseCSFTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCSFTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCSFTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCSFTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       Could be helper function, maybe we can put an `internal::GetByteWidth` function in `arrow/type.h` that does this? \n\n##########\nFile path: cpp/src/arrow/tensor/csx_converter.cc\n##########\n@@ -0,0 +1,245 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/tensor/converter.h\"\n+\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/buffer.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+namespace internal {\n+namespace {\n+\n+// ----------------------------------------------------------------------\n+// SparseTensorConverter for SparseCSRIndex\n+\n+class SparseCSXMatrixConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n+\n+ public:\n+  SparseCSXMatrixConverter(SparseMatrixCompressedAxis axis, const Tensor& tensor,\n+                           const std::shared_ptr<DataType>& index_value_type,\n+                           MemoryPool* pool)\n+      : axis_(axis), tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n+\n+  Status Convert() {\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n\nReview comment:\n       Can you factor this \"get byte width\" operation into a helper function? \n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -148,84 +161,130 @@ class SparseCSFTensorConverter {\n     return Status::OK();\n   }\n \n-#define CALL_TYPE_SPECIFIC_CONVERT(TYPE_CLASS) \\\n-  case TYPE_CLASS##Type::type_id:              \\\n-    return Convert<TYPE_CLASS##Type>();\n-\n-  Status Convert() {\n-    switch (index_value_type_->id()) {\n-      ARROW_GENERATE_FOR_ALL_INTEGER_TYPES(CALL_TYPE_SPECIFIC_CONVERT);\n-      // LCOV_EXCL_START: The following invalid causes program failure.\n-      default:\n-        return Status::TypeError(\"Unsupported SparseTensor index value type\");\n-        // LCOV_EXCL_STOP\n-    }\n-  }\n-\n-#undef CALL_TYPE_SPECIFIC_CONVERT\n-\n   std::shared_ptr<SparseCSFIndex> sparse_index;\n   std::shared_ptr<Buffer> data;\n \n  private:\n-  const NumericTensorType& tensor_;\n+  const Tensor& tensor_;\n   const std::shared_ptr<DataType>& index_value_type_;\n   MemoryPool* pool_;\n+};\n \n-  template <typename c_value_type>\n-  inline Status CheckMaximumValue(const c_value_type type_max) const {\n-    auto max_dimension =\n-        *std::max_element(tensor_.shape().begin(), tensor_.shape().end());\n-    if (static_cast<int64_t>(type_max) < max_dimension) {\n-      // LCOV_EXCL_START: The following invalid causes program failure.\n-      return Status::Invalid(\"The bit width of the index value type is too small\");\n-      // LCOV_EXCL_STOP\n-    }\n-    return Status::OK();\n+class TensorBuilderFromSparseCSFTensor : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::GetIndexValue;\n+\n+  MemoryPool* pool_;\n+  const SparseCSFTensor* sparse_tensor_;\n+  const SparseCSFIndex* sparse_index_;\n+  const std::vector<std::shared_ptr<Tensor>>& indptr_;\n+  const std::vector<std::shared_ptr<Tensor>>& indices_;\n+  const std::vector<int64_t>& axis_order_;\n+  const std::vector<int64_t>& shape_;\n+  const int64_t non_zero_length_;\n+  const int ndim_;\n+  const int64_t tensor_size_;\n+  const FixedWidthType& value_type_;\n+  const int value_elsize_;\n+  const uint8_t* raw_data_;\n+  std::vector<int64_t> strides_;\n+  std::shared_ptr<Buffer> values_buffer_;\n+  uint8_t* values_;\n+\n+ public:\n+  TensorBuilderFromSparseCSFTensor(const SparseCSFTensor* sparse_tensor, MemoryPool* pool)\n+      : pool_(pool),\n+        sparse_tensor_(sparse_tensor),\n+        sparse_index_(\n+            checked_cast<const SparseCSFIndex*>(sparse_tensor->sparse_index().get())),\n+        indptr_(sparse_index_->indptr()),\n+        indices_(sparse_index_->indices()),\n+        axis_order_(sparse_index_->axis_order()),\n+        shape_(sparse_tensor->shape()),\n+        non_zero_length_(sparse_tensor->non_zero_length()),\n+        ndim_(sparse_tensor->ndim()),\n+        tensor_size_(sparse_tensor->size()),\n+        value_type_(checked_cast<const FixedWidthType&>(*sparse_tensor->type())),\n+        value_elsize_(value_type_.bit_width() / CHAR_BIT),\n+        raw_data_(sparse_tensor->raw_data()) {}\n+\n+  int ElementSize(const std::shared_ptr<Tensor>& tensor) const {\n+    return checked_cast<const FixedWidthType&>(*tensor->type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       helper function\n\n##########\nFile path: cpp/src/arrow/tensor/coo_converter.cc\n##########\n@@ -51,133 +51,185 @@ inline void IncrementIndex(std::vector<int64_t>& coord,\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCOOIndex\n \n-template <typename TYPE>\n-class SparseCOOTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCOOTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCOOTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCOOTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    const int64_t indices_elsize = sizeof(c_index_value_type);\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n \n     const int64_t ndim = tensor_.ndim();\n-    int64_t nonzero_count = -1;\n-    RETURN_NOT_OK(tensor_.CountNonZero(&nonzero_count));\n+    ARROW_ASSIGN_OR_RAISE(int64_t nonzero_count, tensor_.CountNonZero());\n \n     ARROW_ASSIGN_OR_RAISE(auto indices_buffer,\n-                          AllocateBuffer(indices_elsize * ndim * nonzero_count, pool_));\n-    c_index_value_type* indices =\n-        reinterpret_cast<c_index_value_type*>(indices_buffer->mutable_data());\n+                          AllocateBuffer(index_elsize * ndim * nonzero_count, pool_));\n+    uint8_t* indices = indices_buffer->mutable_data();\n \n     ARROW_ASSIGN_OR_RAISE(auto values_buffer,\n-                          AllocateBuffer(sizeof(value_type) * nonzero_count, pool_));\n-    value_type* values = reinterpret_cast<value_type*>(values_buffer->mutable_data());\n+                          AllocateBuffer(value_elsize * nonzero_count, pool_));\n+    uint8_t* values = values_buffer->mutable_data();\n \n+    const uint8_t* tensor_data = tensor_.raw_data();\n     if (ndim <= 1) {\n-      const value_type* data = reinterpret_cast<const value_type*>(tensor_.raw_data());\n       const int64_t count = ndim == 0 ? 1 : tensor_.shape()[0];\n-      for (int64_t i = 0; i < count; ++i, ++data) {\n-        if (*data != 0) {\n-          *indices++ = static_cast<c_index_value_type>(i);\n-          *values++ = *data;\n+      for (int64_t i = 0; i < count; ++i) {\n+        if (std::any_of(tensor_data, tensor_data + value_elsize, IsNonZero)) {\n+          AssignIndex(indices, i, index_elsize);\n+          std::copy_n(tensor_data, value_elsize, values);\n+\n+          indices += index_elsize;\n+          values += value_elsize;\n         }\n+        tensor_data += value_elsize;\n       }\n     } else {\n       const std::vector<int64_t>& shape = tensor_.shape();\n       std::vector<int64_t> coord(ndim, 0);  // The current logical coordinates\n \n       for (int64_t n = tensor_.size(); n > 0; n--) {\n-        const value_type x = tensor_.Value(coord);\n-        if (tensor_.Value(coord) != 0) {\n-          *values++ = x;\n+        int64_t offset = tensor_.CalculateValueOffset(coord);\n+        if (std::any_of(tensor_data + offset, tensor_data + offset + value_elsize,\n+                        IsNonZero)) {\n+          std::copy_n(tensor_data + offset, value_elsize, values);\n+          values += value_elsize;\n+\n           // Write indices in row-major order.\n           for (int64_t i = 0; i < ndim; ++i) {\n-            *indices++ = static_cast<c_index_value_type>(coord[i]);\n+            AssignIndex(indices, coord[i], index_elsize);\n+            indices += index_elsize;\n           }\n         }\n+\n         IncrementIndex(coord, shape);\n       }\n     }\n \n     // make results\n     const std::vector<int64_t> indices_shape = {nonzero_count, ndim};\n-    const std::vector<int64_t> indices_strides = {indices_elsize * ndim, indices_elsize};\n+    const std::vector<int64_t> indices_strides = {index_elsize * ndim, index_elsize};\n     sparse_index = std::make_shared<SparseCOOIndex>(std::make_shared<Tensor>(\n         index_value_type_, std::move(indices_buffer), indices_shape, indices_strides));\n     data = std::move(values_buffer);\n \n     return Status::OK();\n   }\n \n-#define CALL_TYPE_SPECIFIC_CONVERT(TYPE_CLASS) \\\n-  case TYPE_CLASS##Type::type_id:              \\\n-    return Convert<TYPE_CLASS##Type>();\n-\n-  Status Convert() {\n-    switch (index_value_type_->id()) {\n-      ARROW_GENERATE_FOR_ALL_INTEGER_TYPES(CALL_TYPE_SPECIFIC_CONVERT);\n-      // LCOV_EXCL_START: The following invalid causes program failure.\n-      default:\n-        return Status::TypeError(\"Unsupported SparseTensor index value type\");\n-        // LCOV_EXCL_STOP\n-    }\n-  }\n-\n-#undef CALL_TYPE_SPECIFIC_CONVERT\n-\n   std::shared_ptr<SparseCOOIndex> sparse_index;\n   std::shared_ptr<Buffer> data;\n \n  private:\n-  const NumericTensorType& tensor_;\n+  const Tensor& tensor_;\n   const std::shared_ptr<DataType>& index_value_type_;\n   MemoryPool* pool_;\n };\n \n-template <typename TYPE>\n+}  // namespace\n+\n+void SparseTensorConverterMixin::AssignIndex(uint8_t* indices, int64_t val,\n+                                             const int elsize) {\n+  switch (elsize) {\n+    case 1:\n+      *indices = static_cast<uint8_t>(val);\n+      break;\n+    case 2:\n+      *reinterpret_cast<uint16_t*>(indices) = static_cast<uint16_t>(val);\n+      break;\n+    case 4:\n+      *reinterpret_cast<uint32_t*>(indices) = static_cast<uint32_t>(val);\n+      break;\n+    case 8:\n+      *reinterpret_cast<int64_t*>(indices) = val;\n+      break;\n+    default:\n+      break;\n+  }\n+}\n+\n+int64_t SparseTensorConverterMixin::GetIndexValue(const uint8_t* value_ptr,\n+                                                  const int elsize) {\n+  switch (elsize) {\n+    case 1:\n+      return *value_ptr;\n+\n+    case 2:\n+      return *reinterpret_cast<const uint16_t*>(value_ptr);\n+\n+    case 4:\n+      return *reinterpret_cast<const uint32_t*>(value_ptr);\n+\n+    case 8:\n+      return *reinterpret_cast<const int64_t*>(value_ptr);\n+\n+    default:\n+      return 0;\n+  }\n+}\n+\n Status MakeSparseCOOTensorFromTensor(const Tensor& tensor,\n                                      const std::shared_ptr<DataType>& index_value_type,\n                                      MemoryPool* pool,\n                                      std::shared_ptr<SparseIndex>* out_sparse_index,\n                                      std::shared_ptr<Buffer>* out_data) {\n-  NumericTensor<TYPE> numeric_tensor(tensor.data(), tensor.shape(), tensor.strides());\n-  SparseCOOTensorConverter<TYPE> converter(numeric_tensor, index_value_type, pool);\n+  SparseCOOTensorConverter converter(tensor, index_value_type, pool);\n   RETURN_NOT_OK(converter.Convert());\n \n   *out_sparse_index = checked_pointer_cast<SparseIndex>(converter.sparse_index);\n   *out_data = converter.data;\n   return Status::OK();\n }\n \n-}  // namespace\n-\n-#define MAKE_SPARSE_TENSOR_FROM_TENSOR(TYPE_CLASS)          \\\n-  case TYPE_CLASS##Type::type_id:                           \\\n-    return MakeSparseCOOTensorFromTensor<TYPE_CLASS##Type>( \\\n-        tensor, index_value_type, pool, out_sparse_index, out_data);\n+Result<std::shared_ptr<Tensor>> MakeTensorFromSparseCOOTensor(\n+    MemoryPool* pool, const SparseCOOTensor* sparse_tensor) {\n+  const auto& sparse_index =\n+      checked_cast<const SparseCOOIndex&>(*sparse_tensor->sparse_index());\n+  const auto& coords = sparse_index.indices();\n+  const auto* coords_data = coords->raw_data();\n+\n+  const auto& index_type = checked_cast<const FixedWidthType&>(*coords->type());\n+  const int index_elsize = index_type.bit_width() / CHAR_BIT;\n+\n+  const auto& value_type = checked_cast<const FixedWidthType&>(*sparse_tensor->type());\n+  const int value_elsize = value_type.bit_width() / CHAR_BIT;\n\nReview comment:\n       See comments re: having a helper function below\n\n##########\nFile path: cpp/src/arrow/tensor/coo_converter.cc\n##########\n@@ -51,133 +51,185 @@ inline void IncrementIndex(std::vector<int64_t>& coord,\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCOOIndex\n \n-template <typename TYPE>\n-class SparseCOOTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCOOTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCOOTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCOOTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    const int64_t indices_elsize = sizeof(c_index_value_type);\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n \n     const int64_t ndim = tensor_.ndim();\n-    int64_t nonzero_count = -1;\n-    RETURN_NOT_OK(tensor_.CountNonZero(&nonzero_count));\n+    ARROW_ASSIGN_OR_RAISE(int64_t nonzero_count, tensor_.CountNonZero());\n \n     ARROW_ASSIGN_OR_RAISE(auto indices_buffer,\n-                          AllocateBuffer(indices_elsize * ndim * nonzero_count, pool_));\n-    c_index_value_type* indices =\n-        reinterpret_cast<c_index_value_type*>(indices_buffer->mutable_data());\n+                          AllocateBuffer(index_elsize * ndim * nonzero_count, pool_));\n+    uint8_t* indices = indices_buffer->mutable_data();\n \n     ARROW_ASSIGN_OR_RAISE(auto values_buffer,\n-                          AllocateBuffer(sizeof(value_type) * nonzero_count, pool_));\n-    value_type* values = reinterpret_cast<value_type*>(values_buffer->mutable_data());\n+                          AllocateBuffer(value_elsize * nonzero_count, pool_));\n+    uint8_t* values = values_buffer->mutable_data();\n \n+    const uint8_t* tensor_data = tensor_.raw_data();\n     if (ndim <= 1) {\n-      const value_type* data = reinterpret_cast<const value_type*>(tensor_.raw_data());\n       const int64_t count = ndim == 0 ? 1 : tensor_.shape()[0];\n-      for (int64_t i = 0; i < count; ++i, ++data) {\n-        if (*data != 0) {\n-          *indices++ = static_cast<c_index_value_type>(i);\n-          *values++ = *data;\n+      for (int64_t i = 0; i < count; ++i) {\n+        if (std::any_of(tensor_data, tensor_data + value_elsize, IsNonZero)) {\n+          AssignIndex(indices, i, index_elsize);\n+          std::copy_n(tensor_data, value_elsize, values);\n+\n+          indices += index_elsize;\n+          values += value_elsize;\n         }\n+        tensor_data += value_elsize;\n       }\n     } else {\n       const std::vector<int64_t>& shape = tensor_.shape();\n       std::vector<int64_t> coord(ndim, 0);  // The current logical coordinates\n \n       for (int64_t n = tensor_.size(); n > 0; n--) {\n-        const value_type x = tensor_.Value(coord);\n-        if (tensor_.Value(coord) != 0) {\n-          *values++ = x;\n+        int64_t offset = tensor_.CalculateValueOffset(coord);\n+        if (std::any_of(tensor_data + offset, tensor_data + offset + value_elsize,\n+                        IsNonZero)) {\n+          std::copy_n(tensor_data + offset, value_elsize, values);\n+          values += value_elsize;\n+\n           // Write indices in row-major order.\n           for (int64_t i = 0; i < ndim; ++i) {\n-            *indices++ = static_cast<c_index_value_type>(coord[i]);\n+            AssignIndex(indices, coord[i], index_elsize);\n+            indices += index_elsize;\n           }\n         }\n+\n         IncrementIndex(coord, shape);\n       }\n     }\n \n     // make results\n     const std::vector<int64_t> indices_shape = {nonzero_count, ndim};\n-    const std::vector<int64_t> indices_strides = {indices_elsize * ndim, indices_elsize};\n+    const std::vector<int64_t> indices_strides = {index_elsize * ndim, index_elsize};\n     sparse_index = std::make_shared<SparseCOOIndex>(std::make_shared<Tensor>(\n         index_value_type_, std::move(indices_buffer), indices_shape, indices_strides));\n     data = std::move(values_buffer);\n \n     return Status::OK();\n   }\n \n-#define CALL_TYPE_SPECIFIC_CONVERT(TYPE_CLASS) \\\n-  case TYPE_CLASS##Type::type_id:              \\\n-    return Convert<TYPE_CLASS##Type>();\n-\n-  Status Convert() {\n-    switch (index_value_type_->id()) {\n-      ARROW_GENERATE_FOR_ALL_INTEGER_TYPES(CALL_TYPE_SPECIFIC_CONVERT);\n-      // LCOV_EXCL_START: The following invalid causes program failure.\n-      default:\n-        return Status::TypeError(\"Unsupported SparseTensor index value type\");\n-        // LCOV_EXCL_STOP\n-    }\n-  }\n-\n-#undef CALL_TYPE_SPECIFIC_CONVERT\n-\n   std::shared_ptr<SparseCOOIndex> sparse_index;\n   std::shared_ptr<Buffer> data;\n \n  private:\n-  const NumericTensorType& tensor_;\n+  const Tensor& tensor_;\n   const std::shared_ptr<DataType>& index_value_type_;\n   MemoryPool* pool_;\n };\n \n-template <typename TYPE>\n+}  // namespace\n+\n+void SparseTensorConverterMixin::AssignIndex(uint8_t* indices, int64_t val,\n+                                             const int elsize) {\n+  switch (elsize) {\n+    case 1:\n+      *indices = static_cast<uint8_t>(val);\n+      break;\n+    case 2:\n+      *reinterpret_cast<uint16_t*>(indices) = static_cast<uint16_t>(val);\n+      break;\n+    case 4:\n+      *reinterpret_cast<uint32_t*>(indices) = static_cast<uint32_t>(val);\n+      break;\n+    case 8:\n+      *reinterpret_cast<int64_t*>(indices) = val;\n+      break;\n+    default:\n+      break;\n+  }\n+}\n+\n+int64_t SparseTensorConverterMixin::GetIndexValue(const uint8_t* value_ptr,\n+                                                  const int elsize) {\n+  switch (elsize) {\n+    case 1:\n+      return *value_ptr;\n+\n+    case 2:\n+      return *reinterpret_cast<const uint16_t*>(value_ptr);\n+\n+    case 4:\n+      return *reinterpret_cast<const uint32_t*>(value_ptr);\n+\n+    case 8:\n+      return *reinterpret_cast<const int64_t*>(value_ptr);\n+\n+    default:\n+      return 0;\n+  }\n+}\n\nReview comment:\n       You could also use an `std::function` for this, benchmarks would help show which is better. Either solution is going to be slower than the inlined version but if it is demonstrated to be a performance problem then we can revisit the template instantiation on a case by case basis to decide whether the tradeoff between code size and performance makes sense. \r\n   \r\n   Additionally, in the future I think it could be beneficial to package the tensor support code in a libarrow_tensor in the future so that we could also \"spin off\" the tensor support into a separate `pyarrow-tensor` Python package so that users who do not need tensor support are not having to always carry around the compiled code that they may never use. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T15:02:08.222+0000",
                    "updated": "2020-06-29T15:02:08.222+0000",
                    "started": "2020-06-29T15:02:08.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452418",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#discussion_r447259489\n\n\n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -57,73 +57,86 @@ inline void IncrementIndex(std::vector<int64_t>& coord, const std::vector<int64_\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCSFIndex\n \n-template <typename TYPE>\n-class SparseCSFTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCSFTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCSFTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCSFTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       I agreed with you. I felt it is better to extract this idiom as a function, too.\r\n   `internal::GetByteWith` looks good to me, but how about the member function of `FixedWidthType`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T21:17:50.408+0000",
                    "updated": "2020-06-29T21:17:50.408+0000",
                    "started": "2020-06-29T21:17:50.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452639",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#discussion_r447264419\n\n\n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -57,73 +57,86 @@ inline void IncrementIndex(std::vector<int64_t>& coord, const std::vector<int64_\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCSFIndex\n \n-template <typename TYPE>\n-class SparseCSFTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCSFTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCSFTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCSFTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       As long as the signature of the function is `int(const DataType&)` it sounds good to me. I don't think it should be a non-internal API because it does not need to do error-handling. If it's a non-static member of FixedWidthType, then a `checked_cast` is still necessary which seems against the spirit of making the code simpler\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T21:27:56.523+0000",
                    "updated": "2020-06-29T21:27:56.523+0000",
                    "started": "2020-06-29T21:27:56.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452645",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#discussion_r447267538\n\n\n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -57,73 +57,86 @@ inline void IncrementIndex(std::vector<int64_t>& coord, const std::vector<int64_\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCSFIndex\n \n-template <typename TYPE>\n-class SparseCSFTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCSFTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCSFTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCSFTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       OK. I'll make `inernal::GetByteWidth`, and let it return `-1` for non-`FixedWidthType` values.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T21:34:58.906+0000",
                    "updated": "2020-06-29T21:34:58.906+0000",
                    "started": "2020-06-29T21:34:58.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452648",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#discussion_r447268862\n\n\n\n##########\nFile path: cpp/src/arrow/tensor/csf_converter.cc\n##########\n@@ -57,73 +57,86 @@ inline void IncrementIndex(std::vector<int64_t>& coord, const std::vector<int64_\n // ----------------------------------------------------------------------\n // SparseTensorConverter for SparseCSFIndex\n \n-template <typename TYPE>\n-class SparseCSFTensorConverter {\n- public:\n-  using NumericTensorType = NumericTensor<TYPE>;\n-  using value_type = typename NumericTensorType::value_type;\n+class SparseCSFTensorConverter : private SparseTensorConverterMixin {\n+  using SparseTensorConverterMixin::AssignIndex;\n+  using SparseTensorConverterMixin::IsNonZero;\n \n-  SparseCSFTensorConverter(const NumericTensorType& tensor,\n+ public:\n+  SparseCSFTensorConverter(const Tensor& tensor,\n                            const std::shared_ptr<DataType>& index_value_type,\n                            MemoryPool* pool)\n       : tensor_(tensor), index_value_type_(index_value_type), pool_(pool) {}\n \n-  template <typename IndexValueType>\n   Status Convert() {\n-    using c_index_value_type = typename IndexValueType::c_type;\n-    RETURN_NOT_OK(CheckMaximumValue(std::numeric_limits<c_index_value_type>::max()));\n+    RETURN_NOT_OK(CheckSparseIndexMaximumValue(index_value_type_, tensor_.shape()));\n+\n+    const int index_elsize =\n+        checked_cast<const IntegerType&>(*index_value_type_).bit_width() / CHAR_BIT;\n+    const int value_elsize =\n+        checked_cast<const FixedWidthType&>(*tensor_.type()).bit_width() / CHAR_BIT;\n\nReview comment:\n       Oops, I don't need to return `-1` because `checked_cast` is used in this function.  Sorry.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-29T21:37:44.998+0000",
                    "updated": "2020-06-29T21:37:44.998+0000",
                    "started": "2020-06-29T21:37:44.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452650",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-651456329\n\n\n   @wesm Is it better to work for benchmarking in other pull-request?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T01:10:47.593+0000",
                    "updated": "2020-06-30T01:10:47.593+0000",
                    "started": "2020-06-30T01:10:47.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452729",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-651457062\n\n\n   @mrkn it's up to you, it's fine with me if you work on performance tuning in another PR or this one\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T01:12:21.739+0000",
                    "updated": "2020-06-30T01:12:21.739+0000",
                    "started": "2020-06-30T01:12:21.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452731",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-651457062\n\n\n   @mrkn it's up to you, it's fine with me if you work on performance tuning (or at least measurement) in another PR or this one\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T01:12:44.501+0000",
                    "updated": "2020-06-30T01:12:44.501+0000",
                    "started": "2020-06-30T01:12:44.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452732",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-651458470\n\n\n   OK.  I continue to work for benchmarking in this pull-request. If I need more time to tune etc., I'll split the issue.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T01:15:53.932+0000",
                    "updated": "2020-06-30T01:15:53.932+0000",
                    "started": "2020-06-30T01:15:53.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452735",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/452736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn edited a comment on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-651458470\n\n\n   @wesm OK.  I continue to work for benchmarking in this pull-request. If I need more time to tune etc., I'll split the issue.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-30T01:15:56.904+0000",
                    "updated": "2020-06-30T01:15:56.904+0000",
                    "started": "2020-06-30T01:15:56.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "452736",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/453324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-652298958\n\n\n   I wrote a benchmark code that measures the performance of conversion from Tensor to SparseTensor.\r\n   And I run this code with `--repetitions=10` and got the following result.\r\n   \r\n   - Converting to SparseCOOTensor is 1.4x-1.8x slower than the original.\r\n   - Converting to SparseCSRMatrix and SparseCSCMatrix is 1.0x-1.2x faster than the original.\r\n   - Converting to SparseCSFTensor is 1.0-1.3x slower than the original.\r\n   \r\n   I don't think this result, especially SparseCOOTensor's case can be acceptable.\r\n   Now I'm trying to resolve this performance regression.\r\n   \r\n   <details>\r\n   <summary><b>The full result is shown below:</b></summary>\r\n   <table role=\"table\">\r\n   <thead>\r\n   <tr>\r\n   <th>Format</th>\r\n   <th>IndexType</th>\r\n   <th>ValueType</th>\r\n   <th align=\"right\">Change %</th>\r\n   <th align=\"right\">Baseline</th>\r\n   <th align=\"right\">Contender</th>\r\n   </tr>\r\n   </thead>\r\n   <tbody>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int32Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">56.426</td>\r\n   <td align=\"right\">2459.397090</td>\r\n   <td align=\"right\">3847.138775</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int16Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">43.062</td>\r\n   <td align=\"right\">2619.848028</td>\r\n   <td align=\"right\">3748.014603</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int64Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">40.137</td>\r\n   <td align=\"right\">2850.826136</td>\r\n   <td align=\"right\">3995.057821</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int8Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">35.478</td>\r\n   <td align=\"right\">2776.716694</td>\r\n   <td align=\"right\">3761.850287</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int16Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">66.812</td>\r\n   <td align=\"right\">2394.011928</td>\r\n   <td align=\"right\">3993.489611</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int32Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">59.281</td>\r\n   <td align=\"right\">2728.577337</td>\r\n   <td align=\"right\">4346.096797</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int64Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">52.043</td>\r\n   <td align=\"right\">2596.404005</td>\r\n   <td align=\"right\">3947.663313</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int8Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">44.510</td>\r\n   <td align=\"right\">2768.567992</td>\r\n   <td align=\"right\">4000.853968</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int32Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">93.283</td>\r\n   <td align=\"right\">2287.343291</td>\r\n   <td align=\"right\">4421.039474</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int16Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">71.100</td>\r\n   <td align=\"right\">2577.689569</td>\r\n   <td align=\"right\">4410.437858</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int64Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">61.035</td>\r\n   <td align=\"right\">2821.300996</td>\r\n   <td align=\"right\">4543.277655</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int8Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">53.303</td>\r\n   <td align=\"right\">2666.801559</td>\r\n   <td align=\"right\">4088.291362</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int64Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">88.230</td>\r\n   <td align=\"right\">2616.000738</td>\r\n   <td align=\"right\">4924.096764</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int16Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">70.188</td>\r\n   <td align=\"right\">2698.335495</td>\r\n   <td align=\"right\">4592.253023</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int32Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">69.368</td>\r\n   <td align=\"right\">2579.753902</td>\r\n   <td align=\"right\">4369.267270</td>\r\n   </tr>\r\n   <tr>\r\n   <td>COO</td>\r\n   <td>Int8Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">62.781</td>\r\n   <td align=\"right\">2747.179806</td>\r\n   <td align=\"right\">4471.895533</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int8Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-1.660</td>\r\n   <td align=\"right\">4626.181791</td>\r\n   <td align=\"right\">4549.389657</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int32Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-4.718</td>\r\n   <td align=\"right\">4708.044556</td>\r\n   <td align=\"right\">4485.938002</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int64Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-4.905</td>\r\n   <td align=\"right\">4687.961132</td>\r\n   <td align=\"right\">4458.024004</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int16Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-7.164</td>\r\n   <td align=\"right\">4851.803479</td>\r\n   <td align=\"right\">4504.201161</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int32Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-1.481</td>\r\n   <td align=\"right\">4722.676795</td>\r\n   <td align=\"right\">4652.711030</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int64Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-5.853</td>\r\n   <td align=\"right\">4573.124314</td>\r\n   <td align=\"right\">4305.462839</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int8Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-11.890</td>\r\n   <td align=\"right\">4631.290389</td>\r\n   <td align=\"right\">4080.628990</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int16Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-12.372</td>\r\n   <td align=\"right\">4737.320600</td>\r\n   <td align=\"right\">4151.197839</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int64Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-4.999</td>\r\n   <td align=\"right\">4711.575565</td>\r\n   <td align=\"right\">4476.032868</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int16Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-5.062</td>\r\n   <td align=\"right\">4811.457037</td>\r\n   <td align=\"right\">4567.909440</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int32Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-7.651</td>\r\n   <td align=\"right\">4814.813084</td>\r\n   <td align=\"right\">4446.432341</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int8Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-12.196</td>\r\n   <td align=\"right\">5158.868330</td>\r\n   <td align=\"right\">4529.676101</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int32Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">0.384</td>\r\n   <td align=\"right\">4631.005506</td>\r\n   <td align=\"right\">4648.789489</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int64Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-0.273</td>\r\n   <td align=\"right\">4816.669765</td>\r\n   <td align=\"right\">4803.522209</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int8Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-3.453</td>\r\n   <td align=\"right\">4646.652774</td>\r\n   <td align=\"right\">4486.217718</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSR</td>\r\n   <td>Int16Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-8.963</td>\r\n   <td align=\"right\">4952.032110</td>\r\n   <td align=\"right\">4508.161865</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int8Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-4.207</td>\r\n   <td align=\"right\">4871.793338</td>\r\n   <td align=\"right\">4666.848429</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int64Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-10.582</td>\r\n   <td align=\"right\">4571.251613</td>\r\n   <td align=\"right\">4087.509465</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int16Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-13.189</td>\r\n   <td align=\"right\">4865.666295</td>\r\n   <td align=\"right\">4223.934008</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int32Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">-16.546</td>\r\n   <td align=\"right\">4999.577506</td>\r\n   <td align=\"right\">4172.360711</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int32Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-0.619</td>\r\n   <td align=\"right\">4842.515715</td>\r\n   <td align=\"right\">4812.531287</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int8Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-4.128</td>\r\n   <td align=\"right\">4689.737235</td>\r\n   <td align=\"right\">4496.135413</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int16Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-8.110</td>\r\n   <td align=\"right\">4643.413441</td>\r\n   <td align=\"right\">4266.836346</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int64Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">-10.302</td>\r\n   <td align=\"right\">4971.879449</td>\r\n   <td align=\"right\">4459.696887</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int8Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-0.547</td>\r\n   <td align=\"right\">4694.347970</td>\r\n   <td align=\"right\">4668.667817</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int32Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-0.619</td>\r\n   <td align=\"right\">4718.207593</td>\r\n   <td align=\"right\">4688.994670</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int64Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-3.360</td>\r\n   <td align=\"right\">4847.753893</td>\r\n   <td align=\"right\">4684.849545</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int16Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">-7.408</td>\r\n   <td align=\"right\">4956.795348</td>\r\n   <td align=\"right\">4589.607722</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int32Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">0.491</td>\r\n   <td align=\"right\">4917.172760</td>\r\n   <td align=\"right\">4941.321519</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int64Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-0.754</td>\r\n   <td align=\"right\">5069.589290</td>\r\n   <td align=\"right\">5031.376333</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int16Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-2.023</td>\r\n   <td align=\"right\">4762.425910</td>\r\n   <td align=\"right\">4666.071367</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSC</td>\r\n   <td>Int8Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">-5.987</td>\r\n   <td align=\"right\">4934.016268</td>\r\n   <td align=\"right\">4638.636384</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int16Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">25.394</td>\r\n   <td align=\"right\">7885.986312</td>\r\n   <td align=\"right\">9888.571309</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int64Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">22.605</td>\r\n   <td align=\"right\">9083.444559</td>\r\n   <td align=\"right\">11136.716151</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int32Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">13.486</td>\r\n   <td align=\"right\">8228.377064</td>\r\n   <td align=\"right\">9338.031561</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int8Type</td>\r\n   <td>Int8</td>\r\n   <td align=\"right\">11.900</td>\r\n   <td align=\"right\">7687.347967</td>\r\n   <td align=\"right\">8602.168534</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int64Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">28.094</td>\r\n   <td align=\"right\">8247.255772</td>\r\n   <td align=\"right\">10564.280045</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int8Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">20.276</td>\r\n   <td align=\"right\">8172.411486</td>\r\n   <td align=\"right\">9829.454135</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int32Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">15.240</td>\r\n   <td align=\"right\">8776.213727</td>\r\n   <td align=\"right\">10113.751856</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int16Type</td>\r\n   <td>Int16</td>\r\n   <td align=\"right\">13.707</td>\r\n   <td align=\"right\">8396.322326</td>\r\n   <td align=\"right\">9547.223214</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int16Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">25.989</td>\r\n   <td align=\"right\">8340.996459</td>\r\n   <td align=\"right\">10508.758442</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int32Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">20.562</td>\r\n   <td align=\"right\">8882.075299</td>\r\n   <td align=\"right\">10708.400993</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int8Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">19.021</td>\r\n   <td align=\"right\">8507.160025</td>\r\n   <td align=\"right\">10125.299339</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int64Type</td>\r\n   <td>Float</td>\r\n   <td align=\"right\">1.769</td>\r\n   <td align=\"right\">9657.000323</td>\r\n   <td align=\"right\">9827.819671</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int8Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">20.382</td>\r\n   <td align=\"right\">8380.183782</td>\r\n   <td align=\"right\">10088.211026</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int32Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">14.353</td>\r\n   <td align=\"right\">9512.403696</td>\r\n   <td align=\"right\">10877.711426</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int16Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">13.737</td>\r\n   <td align=\"right\">8536.269931</td>\r\n   <td align=\"right\">9708.870939</td>\r\n   </tr>\r\n   <tr>\r\n   <td>CSF</td>\r\n   <td>Int64Type</td>\r\n   <td>Double</td>\r\n   <td align=\"right\">12.413</td>\r\n   <td align=\"right\">9737.555217</td>\r\n   <td align=\"right\">10946.296736</td>\r\n   </tr>\r\n   </tbody>\r\n   </table>\r\n   </details>\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-01T09:15:29.486+0000",
                    "updated": "2020-07-01T09:15:29.486+0000",
                    "started": "2020-07-01T09:15:29.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "453324",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/453962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-653023037\n\n\n   @mrkn to improve the benchmark usefulness I would recommend increasing the size of the data being processed. I ran them locally and the COO benchmarks all run in less than 10 microseconds (some close to 1 microsecond) and at that speed things like destructors show up as non-trivial overhead\r\n   \r\n   ```\r\n   +   91.29%     0.50%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] arrow::Int8RowMajorTensorConversionFixture_ConvertToSparseCOOTensorInt32_Benchmark::BenchmarkCase\r\n   +   91.24%     0.00%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] _start\r\n   +   91.24%     0.00%  arrow-tensor-co  libc-2.27.so                       [.] __libc_start_main\r\n   +   91.24%     0.00%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] main\r\n   +   91.24%     0.00%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] benchmark::RunSpecifiedBenchmarks\r\n   +   79.50%     3.05%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] arrow::SparseTensorImpl<arrow::SparseCOOIndex>::Make\r\n   +   74.47%     2.29%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::internal::MakeSparseCOOTensorFromTensor\r\n   +   74.47%     0.04%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::internal::MakeSparseTensorFromTensor\r\n   +   74.33%    16.65%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::internal::(anonymous namespace)::SparseCOOTensorConverter::Convert\r\n   +   25.47%    25.47%  arrow-tensor-co  libc-2.27.so                       [.] __memmove_avx_unaligned_erms\r\n   +   12.64%     7.00%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::internal::ComputeRowMajorStrides\r\n   +   11.35%     1.87%  arrow-tensor-co  arrow-tensor-conversion-benchmark  [.] arrow::SparseTensor::~SparseTensor\r\n   +    9.15%     0.26%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::internal::IsTensorStridesContiguous\r\n   +    7.76%     2.52%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::Tensor::CountNonZero\r\n   +    7.25%     0.57%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::AllocateBuffer\r\n   +    6.99%     6.99%  arrow-tensor-co  libc-2.27.so                       [.] cfree@GLIBC_2.2.5\r\n   +    6.99%     0.00%  arrow-tensor-co  libc-2.27.so                       [.] __GI___libc_free (inlined)\r\n   +    6.76%     1.07%  arrow-tensor-co  libstdc++.so.6.0.27                [.] operator new\r\n   +    6.03%     0.00%  arrow-tensor-co  libc-2.27.so                       [.] __GI___libc_malloc (inlined)\r\n   +    5.73%     1.71%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::PoolBuffer::~PoolBuffer\r\n   +    5.42%     1.35%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::SparseCOOIndex::SparseCOOIndex\r\n   +    4.99%     0.41%  arrow-tensor-co  libarrow.so.100.0.0                [.] arrow::SparseCOOIndex::~SparseCOOIndex\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-02T14:00:04.820+0000",
                    "updated": "2020-07-02T14:00:04.820+0000",
                    "started": "2020-07-02T14:00:04.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "453962",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/454229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-653266493\n\n\n   What do you think about pursuing the performance optimization work as a follow up? \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-03T00:04:08.938+0000",
                    "updated": "2020-07-03T00:04:08.938+0000",
                    "started": "2020-07-03T00:04:08.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454229",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/454437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-653559925\n\n\n   @wesm I decided to separate a pull-request for performance optimization because I may need some days to get this work done.\r\n   I'll make a new ticket for optimization, and clean up this pull-request.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-03T13:54:57.015+0000",
                    "updated": "2020-07-03T13:54:57.015+0000",
                    "started": "2020-07-03T13:54:57.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454437",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/454438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539#issuecomment-653560364\n\n\n   OK, sounds good, let me know when this is ready to be merged\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-03T13:55:59.940+0000",
                    "updated": "2020-07-03T13:55:59.940+0000",
                    "started": "2020-07-03T13:55:59.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454438",
                    "issueId": "13311863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/worklog/454619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #7539:\nURL: https://github.com/apache/arrow/pull/7539\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-05T15:40:43.176+0000",
                    "updated": "2020-07-05T15:40:43.176+0000",
                    "started": "2020-07-05T15:40:43.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454619",
                    "issueId": "13311863"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@59f6936[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72de096f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35ed7252[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37fa80f1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4da16a06[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2d22ccab[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@738344bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@109dbf36[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@562a0679[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6dd6cf83[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@419d83a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7900b380[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Jul 05 15:40:33 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-07-05T15:40:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9156/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-17T03:29:07.000+0000",
        "updated": "2020-07-05T15:40:44.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Reducing the code size of the tensor module",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311863/comment/17151605",
                    "id": "17151605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7539\n[https://github.com/apache/arrow/pull/7539]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-07-05T15:40:33.528+0000",
                    "updated": "2020-07-05T15:40:33.528+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fx7s:",
        "customfield_12314139": null
    }
}