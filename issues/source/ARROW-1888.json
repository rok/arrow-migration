{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13123027",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027",
    "key": "ARROW-1888",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "analytics",
            "good-first-issue",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589306",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589306",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12633379",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633379",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13427734",
                    "key": "ARROW-15643",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734",
                    "fields": {
                        "summary": "[C++] Kernel to select subset of fields of a StructArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
            "name": "willayd",
            "key": "willayd",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
            },
            "displayName": "Will Ayd",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1888/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 44,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/714186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd opened a new pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248\n\n\n   Implements casts from one struct type to another, given the same field names and number of fields\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T04:11:15.447+0000",
                    "updated": "2022-01-25T04:11:15.447+0000",
                    "started": "2022-01-25T04:11:15.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714186",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/714187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#issuecomment-1020792655\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T04:12:10.719+0000",
                    "updated": "2022-01-25T04:12:10.719+0000",
                    "started": "2022-01-25T04:12:10.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714187",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/714500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r791750845\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n\nReview comment:\n       Shouldn't this get copied from the input scalar?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       You could imagine the cast dropping columns or adding columns of nulls in this case, too (ARROW-7051 would make that more efficient, and I believe this is needed to fully complete ARROW-14658)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[0];\n\nReview comment:\n       I don't think this will work if the StructArray is sliced - we need to add the StructArray's offset to the child's offset.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       Also, you can just `return Status::TypeError(...)` - no need to use the macro or construct the status manually.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,65 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n+      auto src = StructArray::Make({a1}, field_names).ValueOrDie();\n+      auto dest = StructArray::Make({a2}, field_names).ValueOrDie();\n+\n+      CheckCast(src, dest);\n+    }\n+  }\n+}\n+\n+TEST(Cast, StructToSameSizedAndNamedStruct) {\n+  CheckStructToStruct({int32(), float32(), int64()});\n\nReview comment:\n       It might be good to also test a StructArray that has been manually constructed such that the children have offsets (i.e. a StructArray consisting of slices of other arrays), since this is a corner case that has tripped up some other code before (ARROW-14156)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T14:15:28.251+0000",
                    "updated": "2022-01-25T14:15:28.251+0000",
                    "started": "2022-01-25T14:15:28.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714500",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/714887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#issuecomment-1020792655\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T16:55:08.126+0000",
                    "updated": "2022-01-25T16:55:08.126+0000",
                    "started": "2022-01-25T16:55:08.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714887",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/714936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r791750845\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n\nReview comment:\n       Shouldn't this get copied from the input scalar?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       You could imagine the cast dropping columns or adding columns of nulls in this case, too (ARROW-7051 would make that more efficient, and I believe this is needed to fully complete ARROW-14658)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[0];\n\nReview comment:\n       I don't think this will work if the StructArray is sliced - we need to add the StructArray's offset to the child's offset.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       Also, you can just `return Status::TypeError(...)` - no need to use the macro or construct the status manually.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,65 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n+      auto src = StructArray::Make({a1}, field_names).ValueOrDie();\n+      auto dest = StructArray::Make({a2}, field_names).ValueOrDie();\n+\n+      CheckCast(src, dest);\n+    }\n+  }\n+}\n+\n+TEST(Cast, StructToSameSizedAndNamedStruct) {\n+  CheckStructToStruct({int32(), float32(), int64()});\n\nReview comment:\n       It might be good to also test a StructArray that has been manually constructed such that the children have offsets (i.e. a StructArray consisting of slices of other arrays), since this is a corner case that has tripped up some other code before (ARROW-14156)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T16:59:45.953+0000",
                    "updated": "2022-01-25T16:59:45.953+0000",
                    "started": "2022-01-25T16:59:45.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "714936",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/715088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd opened a new pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248\n\n\n   Implements casts from one struct type to another, given the same field names and number of fields\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-25T17:12:32.450+0000",
                    "updated": "2022-01-25T17:12:32.450+0000",
                    "started": "2022-01-25T17:12:32.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715088",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/715899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#issuecomment-1022471692\n\n\n   Thanks for the awesome feedback - I'll look to tackle this over the next week or so\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T18:24:15.874+0000",
                    "updated": "2022-01-26T18:24:15.874+0000",
                    "started": "2022-01-26T18:24:15.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715899",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/718447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r796311267\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[0];\n\nReview comment:\n       I think I set up a minimal case for this in the tests but it did not fail - let me know if I am overlooking something\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T07:13:17.748+0000",
                    "updated": "2022-02-01T07:13:17.748+0000",
                    "started": "2022-02-01T07:13:17.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718447",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/718448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r796311481\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       So do you think 7051 is a pre-cursor to this change?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T07:13:50.486+0000",
                    "updated": "2022-02-01T07:13:50.486+0000",
                    "started": "2022-02-01T07:13:50.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718448",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/718646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r796571456\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n\nReview comment:\n       We can leave it for afterwards/we can file another JIRA for this case.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T13:00:07.684+0000",
                    "updated": "2022-02-01T13:00:07.684+0000",
                    "started": "2022-02-01T13:00:07.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718646",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/718661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r796583966\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,74 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status(StatusCode::TypeError, \"struct field sizes do not match\");\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n\nReview comment:\n       Just `return Status::TypeError(...)`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,74 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status(StatusCode::TypeError, \"struct field sizes do not match\");\n\nReview comment:\n       nit, but this can just be `return Status::TypeError(\"...\");`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,73 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n+      auto src = StructArray::Make({a1}, field_names).ValueOrDie();\n\nReview comment:\n       nit, but usually we use ASSERT_OK_AND_ASSIGN (or EXPECT_OK_AND_ASSIGN) to do this in tests\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,73 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n+      auto src = StructArray::Make({a1}, field_names).ValueOrDie();\n+      auto dest = StructArray::Make({a2}, field_names).ValueOrDie();\n+\n+      CheckCast(src, dest);\n+\n+      // Test corner case using children with offsets\n+      auto a3 = ArrayFromJSON(src_value_type, \"[1, 2, 3]\")->Slice(1, 2);\n+      auto a4 = ArrayFromJSON(dest_value_type, \"[2, 3]\");\n+      auto slicedSrc = StructArray::Make({a3}, field_names).ValueOrDie();\n+      auto slicedDest = StructArray::Make({a4}, field_names).ValueOrDie();\n+\n+      CheckCast(slicedSrc, slicedDest);\n+    }\n+  }\n+}\n+\n+TEST(Cast, StructToSameSizedAndNamedStruct) {\n+  CheckStructToStruct({int32(), float32(), int64()});\n+}\n+\n+TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n+  std::vector<std::string> field_names = {\"a\", \"b\"};\n+  std::shared_ptr<Array> a, b;\n+  a = ArrayFromJSON(int8(), \"[1, 2]\");\n+  b = ArrayFromJSON(int8(), \"[3, 4]\");\n+  auto src = StructArray::Make({a, b}, field_names).ValueOrDie();\n+\n+  std::vector<std::string> field_names2 = {\"c\", \"d\"};\n+  std::shared_ptr<Array> c, d;\n+  c = ArrayFromJSON(int8(), \"[1, 2]\");\n+  d = ArrayFromJSON(int8(), \"[3, 4]\");\n+  auto dest = StructArray::Make({c, d}, field_names2).ValueOrDie();\n+  auto options = CastOptions{};\n\nReview comment:\n       Use `CastOptions::Safe(dest->type())`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,74 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status(StatusCode::TypeError, \"struct field sizes do not match\");\n\nReview comment:\n       It would be nice to include the counts in the error message to be user-friendly. Or at least, include the ToString() of both types.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,74 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status(StatusCode::TypeError, \"struct field sizes do not match\");\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n\nReview comment:\n       It might be nice to include the index and the mismatching names to be user-friendly, or the ToString() of both types.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[0];\n\nReview comment:\n       CheckCast checks slices for you, but it only does so if there are more than three input elements - we should make the arrays used in the test longer.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,73 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n+      auto src = StructArray::Make({a1}, field_names).ValueOrDie();\n+      auto dest = StructArray::Make({a2}, field_names).ValueOrDie();\n+\n+      CheckCast(src, dest);\n+\n+      // Test corner case using children with offsets\n+      auto a3 = ArrayFromJSON(src_value_type, \"[1, 2, 3]\")->Slice(1, 2);\n+      auto a4 = ArrayFromJSON(dest_value_type, \"[2, 3]\");\n+      auto slicedSrc = StructArray::Make({a3}, field_names).ValueOrDie();\n+      auto slicedDest = StructArray::Make({a4}, field_names).ValueOrDie();\n+\n+      CheckCast(slicedSrc, slicedDest);\n+    }\n+  }\n+}\n+\n+TEST(Cast, StructToSameSizedAndNamedStruct) {\n+  CheckStructToStruct({int32(), float32(), int64()});\n+}\n+\n+TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n+  std::vector<std::string> field_names = {\"a\", \"b\"};\n+  std::shared_ptr<Array> a, b;\n+  a = ArrayFromJSON(int8(), \"[1, 2]\");\n+  b = ArrayFromJSON(int8(), \"[3, 4]\");\n+  auto src = StructArray::Make({a, b}, field_names).ValueOrDie();\n+\n+  std::vector<std::string> field_names2 = {\"c\", \"d\"};\n+  std::shared_ptr<Array> c, d;\n+  c = ArrayFromJSON(int8(), \"[1, 2]\");\n+  d = ArrayFromJSON(int8(), \"[3, 4]\");\n+  auto dest = StructArray::Make({c, d}, field_names2).ValueOrDie();\n+  auto options = CastOptions{};\n+  options.to_type = dest->type();\n+\n+  ASSERT_RAISES_WITH_MESSAGE(TypeError, \"Type error: struct field names do not match\",\n+                             Cast(src, options));\n\nReview comment:\n       CI is failing, use `EXPECT_RAISES_WITH_MESSAGE_THAT(TypeError, ::testing::HasSubstr(\"...\"), ...)` to avoid that\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T13:23:08.972+0000",
                    "updated": "2022-02-01T13:23:08.972+0000",
                    "started": "2022-02-01T13:23:08.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718661",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/720152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r798580395\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,73 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      ARROW_RETURN_NOT_OK(\n+          Status(StatusCode::TypeError, \"struct field sizes do not match\"));\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        ARROW_RETURN_NOT_OK(\n+            Status(StatusCode::TypeError, \"struct field names do not match\"));\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      for (int64_t i = 0; i < in_field_count; i++) {\n+        auto values = in_scalar.value[i];\n+        auto target_type = out->type()->field(i)->type();\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+        DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+        out_scalar->value.push_back(cast_values.scalar());\n+      }\n+\n+      out_scalar->is_valid = true;\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[0];\n\nReview comment:\n       Now there are test cases failing, I believe due to this case.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,76 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \", in_field_count,\n+                               \" and \", out_field_count);\n+    }\n\nReview comment:\n       Sorry, looking at the output:\r\n   \r\n   ```\r\n    [ RUN      ] ScanNode.MaterializationOfNestedVirtualColumn\r\n   /Users/runner/work/arrow/arrow/cpp/src/arrow/dataset/scanner_test.cc:1631: Failure\r\n   Value of: _st.IsNotImplemented()\r\n     Actual: false\r\n   Expected: true\r\n   Expected 'fut.status()' to fail with NotImplemented, but got Type error: struct field sizes do not match: 1 and 2\r\n   /Users/runner/work/arrow/arrow/cpp/src/arrow/dataset/scanner_test.cc:1631: Failure\r\n   Value of: _st.ToString()\r\n   Expected: has substring \"Unsupported cast from struct<e: int64> to struct\"\r\n     Actual: \"Type error: struct field sizes do not match: 1 and 2\"\r\n   [  FAILED  ] ScanNode.MaterializationOfNestedVirtualColumn (3 ms)\r\n   ```\r\n   \r\n   including the stringified types would probably be more helpful than the field count after all\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2217,6 +2217,78 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+static void CheckStructToStruct(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\"};\n+      std::shared_ptr<Array> a1, b1, a2, b2;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2]\");\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2]\");\n\nReview comment:\n       We should make these arrays longer so that CheckCast/CheckScalar will actually test sliced inputs.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,76 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \", in_field_count,\n+                               \" and \", out_field_count);\n+    }\n\nReview comment:\n       Also, that test needs adjusting^: we can just change it to expect TypeError instead of NotImplemented (we can implement the full path later)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T13:51:50.068+0000",
                    "updated": "2022-02-03T13:51:50.068+0000",
                    "started": "2022-02-03T13:51:50.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720152",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/721548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r800108984\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,78 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\n+          \"struct field sizes do not match: \", batch[0].type()->ToString(), \" \", \" and \",\n+          out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        return Status::TypeError(\n+            \"struct field names do not match: \", batch[0].type()->ToString(), \" \",\n+            out->type()->ToString());\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        for (int64_t i = 0; i < in_field_count; i++) {\n+          auto values = in_scalar.value[i];\n+          auto target_type = out->type()->field(i)->type();\n+          ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                                Cast(values, target_type, options, ctx->exec_context()));\n+          DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+          out_scalar->value.push_back(cast_values.scalar());\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[i];\n\nReview comment:\n       Not complete but hope this is headed in the right direction. Think I just need to figure out how the slices are handled within this loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T00:11:24.807+0000",
                    "updated": "2022-02-06T00:11:24.807+0000",
                    "started": "2022-02-06T00:11:24.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721548",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/721683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r800108984\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,78 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\n+          \"struct field sizes do not match: \", batch[0].type()->ToString(), \" \", \" and \",\n+          out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        return Status::TypeError(\n+            \"struct field names do not match: \", batch[0].type()->ToString(), \" \",\n+            out->type()->ToString());\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        for (int64_t i = 0; i < in_field_count; i++) {\n+          auto values = in_scalar.value[i];\n+          auto target_type = out->type()->field(i)->type();\n+          ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                                Cast(values, target_type, options, ctx->exec_context()));\n+          DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+          out_scalar->value.push_back(cast_values.scalar());\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[i];\n\nReview comment:\n       Not complete but hope this is headed in the right direction. ~~Think I just need to figure out how the slices are handled within this loop~~\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T19:09:41.384+0000",
                    "updated": "2022-02-06T19:09:41.384+0000",
                    "started": "2022-02-06T19:09:41.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721683",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/721684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r800108984\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,78 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\n+          \"struct field sizes do not match: \", batch[0].type()->ToString(), \" \", \" and \",\n+          out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        return Status::TypeError(\n+            \"struct field names do not match: \", batch[0].type()->ToString(), \" \",\n+            out->type()->ToString());\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        for (int64_t i = 0; i < in_field_count; i++) {\n+          auto values = in_scalar.value[i];\n+          auto target_type = out->type()->field(i)->type();\n+          ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                                Cast(values, target_type, options, ctx->exec_context()));\n+          DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+          out_scalar->value.push_back(cast_values.scalar());\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[i];\n\nReview comment:\n       Not complete but hope this is headed in the right direction. ~~Think I just need to figure out how the slices are handled within this loop~~ \r\n   \r\n   edit: need to handle outside loop. Getting a better grasp of the internal structure\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T19:10:03.874+0000",
                    "updated": "2022-02-06T19:10:03.874+0000",
                    "started": "2022-02-06T19:10:03.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721684",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/721687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r800108984\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,78 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\n+          \"struct field sizes do not match: \", batch[0].type()->ToString(), \" \", \" and \",\n+          out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        return Status::TypeError(\n+            \"struct field names do not match: \", batch[0].type()->ToString(), \" \",\n+            out->type()->ToString());\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        for (int64_t i = 0; i < in_field_count; i++) {\n+          auto values = in_scalar.value[i];\n+          auto target_type = out->type()->field(i)->type();\n+          ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                                Cast(values, target_type, options, ctx->exec_context()));\n+          DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+          out_scalar->value.push_back(cast_values.scalar());\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[i];\n\nReview comment:\n       Not complete but hope this is headed in the right direction. Think I just need to figure out how the slices are handled within this loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T19:12:20.383+0000",
                    "updated": "2022-02-06T19:12:20.383+0000",
                    "started": "2022-02-06T19:12:20.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721687",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/721888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r800633991\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,80 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \",\n+                               batch[0].type()->ToString(), \" \", out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n\nReview comment:\n       Should we also check field nullability here? It seems fine to cast non-nullable to nullable, but not the other way around (unless there are no nulls).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,80 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \",\n+                               batch[0].type()->ToString(), \" \", out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n\nReview comment:\n       MSVC is a bit stricter about comparing integers of the same width/sign so it might be easier to use `int` here to keep types consistent\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,78 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\n+          \"struct field sizes do not match: \", batch[0].type()->ToString(), \" \", \" and \",\n+          out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n+      if (in_field_name != out_field_name) {\n+        return Status::TypeError(\n+            \"struct field names do not match: \", batch[0].type()->ToString(), \" \",\n+            out->type()->ToString());\n+      }\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        for (int64_t i = 0; i < in_field_count; i++) {\n+          auto values = in_scalar.value[i];\n+          auto target_type = out->type()->field(i)->type();\n+          ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                                Cast(values, target_type, options, ctx->exec_context()));\n+          DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+          out_scalar->value.push_back(cast_values.scalar());\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      auto values = in_array.child_data[i];\n\nReview comment:\n       This looks right. (Absolute offset = child offset + parent offset)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-07T13:06:32.524+0000",
                    "updated": "2022-02-07T13:06:32.524+0000",
                    "started": "2022-02-07T13:06:32.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721888",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/722556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r801231495\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,80 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \",\n+                               batch[0].type()->ToString(), \" \", out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n\nReview comment:\n       Done but currently failing - when casting from non-nullable to nullable do you think the null bitmap of the target should be respected or should we drop that? Right now the current test machinery expects that to be maintained from the target\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-08T03:09:06.496+0000",
                    "updated": "2022-02-08T03:09:06.496+0000",
                    "started": "2022-02-08T03:09:06.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "722556",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/722808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r801601934\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,80 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \",\n+                               batch[0].type()->ToString(), \" \", out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n\nReview comment:\n       Could you expand on what you mean? Looking at the test below, why would casting a non-null value suddenly result in a null value? Changing nullability is only about whether there _can_ be nulls, not whether there actually _are_ nulls.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-08T12:57:14.184+0000",
                    "updated": "2022-02-08T12:57:14.184+0000",
                    "started": "2022-02-08T12:57:14.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "722808",
                    "issueId": "13123027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/worklog/723028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on a change in pull request #12248:\nURL: https://github.com/apache/arrow/pull/12248#discussion_r801899343\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -150,6 +150,80 @@ void AddListCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(SrcType::type_id, std::move(kernel)));\n }\n \n+struct CastStruct {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto in_field_count =\n+        checked_cast<const StructType&>(*batch[0].type()).num_fields();\n+    const auto out_field_count =\n+        checked_cast<const StructType&>(*out->type()).num_fields();\n+\n+    if (in_field_count != out_field_count) {\n+      return Status::TypeError(\"struct field sizes do not match: \",\n+                               batch[0].type()->ToString(), \" \", out->type()->ToString());\n+    }\n+\n+    for (int64_t i = 0; i < in_field_count; ++i) {\n+      const auto in_field_name =\n+          checked_cast<const StructType&>(*batch[0].type()).field(i)->name();\n+      const auto out_field_name =\n+          checked_cast<const StructType&>(*out->type()).field(i)->name();\n\nReview comment:\n       Sounds good. I think I know how to get this passing\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-08T17:42:46.631+0000",
                    "updated": "2022-02-08T17:42:46.631+0000",
                    "started": "2022-02-08T17:42:46.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "723028",
                    "issueId": "13123027"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 26400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@60710d7a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4770975f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@707df3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@43f9c8cd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5373c74d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2eb6f270[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d2a9db0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20989778[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d1c6589[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@74203f28[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d1eeb01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@69598e8d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 26400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 11 14:15:01 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-11T14:15:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1888/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2017-12-05T22:49:46.000+0000",
        "updated": "2022-02-15T19:12:45.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 26400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement casts from one struct type to another (with same field names and number of fields)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17116062",
                    "id": "17116062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This should be implemented in scalar_cast_nested.cc",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T14:14:07.339+0000",
                    "updated": "2020-05-25T14:14:07.339+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17320031",
                    "id": "17320031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Small example of what could be supported:\r\n\r\n{code:python}\r\n>>> arr = pa.array([{'a': 1, 'b': None}, {'a': 2, 'b': None}])\r\n>>> arr.type\r\nStructType(struct<a: int64, b: null>)\r\n\r\n>>> arr.cast(pa.struct([('a', pa.int64()), ('b', pa.int64())]))\r\n...\r\nArrowNotImplementedError: Unsupported cast from struct<a: int64, b: null> to struct using function cast_struct\r\n../src/arrow/compute/function.cc:175  DispatchBest(&inputs)\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-04-13T08:45:53.324+0000",
                    "updated": "2021-04-13T08:45:53.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17392880",
                    "id": "17392880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~lidavidm]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T08:53:02.246+0000",
                    "updated": "2021-08-04T08:53:02.246+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17458346",
                    "id": "17458346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~diegodfrf] Are you still planning to work on this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-13T12:00:46.750+0000",
                    "updated": "2021-12-13T12:00:46.750+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17471153",
                    "id": "17471153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I can take a look at this if it is still open",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-08T15:05:28.296+0000",
                    "updated": "2022-01-08T15:05:28.296+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17471837",
                    "id": "17471837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~willayd] That would certainly be welcome!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-01-10T10:14:16.561+0000",
                    "updated": "2022-01-10T10:14:16.561+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027/comment/17490946",
                    "id": "17490946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12248\n[https://github.com/apache/arrow/pull/12248]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-11T14:15:01.711+0000",
                    "updated": "2022-02-11T14:15:01.711+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3nkqn:",
        "customfield_12314139": null
    }
}