{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13162387",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387",
    "key": "ARROW-2641",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12553458",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12553458",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13160751",
                    "key": "ARROW-2622",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13160751",
                    "fields": {
                        "summary": "[C++] Array methods IsNull and IsValid are not complementary",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2641/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2091: [WIP] ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T09:34:11.996+0000",
                    "updated": "2018-05-30T09:34:11.996+0000",
                    "started": "2018-05-30T09:34:11.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107083",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2091: [WIP] ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#issuecomment-393111422\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@cdacb09`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `95.95%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2091/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2091   +/-   ##\n   =========================================\n     Coverage          ?   86.35%           \n   =========================================\n     Files             ?      230           \n     Lines             ?    40376           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    34865           \n     Misses            ?     5511           \n     Partials          ?        0\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/ipc/ipc-read-write-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLXJlYWQtd3JpdGUtdGVzdC5jYw==) | `99.03% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/builder.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmg=) | `91.71% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/type\\_traits.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlX3RyYWl0cy5o) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/feather-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvZmVhdGhlci10ZXN0LmNj) | `98.2% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/kernels/hash.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvaGFzaC5jYw==) | `95.62% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/builder.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmNj) | `82.02% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.49% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `100% <100%> (\u00f8)` | |\n   | ... and [4 more](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=footer). Last update [cdacb09...d4ee143](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T10:26:45.798+0000",
                    "updated": "2018-05-30T10:26:45.798+0000",
                    "started": "2018-05-30T10:26:45.798+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107104",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2091: [WIP] ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#issuecomment-393111422\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@cdacb09`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `95.34%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2091/graphs/tree.svg?width=650&src=pr&token=LpTCFbqVT1&height=150)](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2091   +/-   ##\n   =========================================\n     Coverage          ?   86.35%           \n   =========================================\n     Files             ?      230           \n     Lines             ?    40392           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    34880           \n     Misses            ?     5512           \n     Partials          ?        0\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/type\\_traits.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlX3RyYWl0cy5o) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/ipc-read-write-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLXJlYWQtd3JpdGUtdGVzdC5jYw==) | `99.03% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/builder.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmg=) | `91.75% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/kernels/hash.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvaGFzaC5jYw==) | `95.62% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/feather-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvZmVhdGhlci10ZXN0LmNj) | `98.2% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `89.48% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.49% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `100% <100%> (\u00f8)` | |\n   | ... and [4 more](https://codecov.io/gh/apache/arrow/pull/2091/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=footer). Last update [cdacb09...a6f0ae8](https://codecov.io/gh/apache/arrow/pull/2091?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T12:00:29.715+0000",
                    "updated": "2018-05-30T12:00:29.715+0000",
                    "started": "2018-05-30T12:00:29.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107131",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191860576\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   Do you know if `inline` is redundant here? I think so but just confirming my understanding of the C++ spec cc @cpcloud @joshuastorck \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.567+0000",
                    "updated": "2018-05-30T18:01:06.567+0000",
                    "started": "2018-05-30T18:01:06.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107274",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191863346\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-internal.cc\n ##########\n @@ -372,27 +372,42 @@ class ArrayWriter {\n   template <typename T>\n   typename std::enable_if<IsSignedInt<T>::value, void>::type WriteDataValues(\n       const T& arr) {\n+    static const char null_string[] = \"0\";\n     const auto data = arr.raw_values();\n-    for (int i = 0; i < arr.length(); ++i) {\n-      writer_->Int64(data[i]);\n+    for (int64_t i = 0; i < arr.length(); ++i) {\n+      if (arr.IsValid(i)) {\n+        writer_->Int64(data[i]);\n+      } else {\n+        writer_->RawNumber(null_string, sizeof(null_string));\n \n Review comment:\n   No tests should be asserting that the value in the null slots is coming back as 0, though, right? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.762+0000",
                    "updated": "2018-05-30T18:01:06.762+0000",
                    "started": "2018-05-30T18:01:06.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107275",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191864564\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -495,6 +509,60 @@ class BitmapWriter {\n   int64_t byte_offset_;\n };\n \n+class FirstTimeBitmapWriter {\n+  // Like BitmapWriter, but any bit values *following* the bits written\n+  // might be clobbered.  It is hence faster than BitmapWriter, and can\n+  // also avoid false positives with Valgrind.\n \n Review comment:\n   Very nice, thank you for adding this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.896+0000",
                    "updated": "2018-05-30T18:01:06.896+0000",
                    "started": "2018-05-30T18:01:06.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107276",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191862483\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -349,23 +349,24 @@ class HashTableKernel<Type, Action, enable_if_boolean<Type>> : public HashTable\n       internal::BitmapReader valid_reader(arr.buffers[0]->data(), arr.offset, arr.length);\n       for (int64_t i = 0; i < arr.length; ++i) {\n         const bool is_null = valid_reader.IsNotSet();\n-        const bool value = value_reader.IsSet();\n-        const int j = value ? 1 : 0;\n-        hash_slot_t slot = table_[j];\n         valid_reader.Next();\n-        value_reader.Next();\n         if (is_null) {\n+          value_reader.Next();\n           action->ObserveNull();\n           continue;\n         }\n+        const bool value = value_reader.IsSet();\n+        value_reader.Next();\n+        const int j = value ? 1 : 0;\n \n Review comment:\n   Could even elide `value` here and have `value_reader.IsSet() ? 1 : 0`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.904+0000",
                    "updated": "2018-05-30T18:01:06.904+0000",
                    "started": "2018-05-30T18:01:06.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107277",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191863983\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n+    const Scalar* data = reinterpret_cast<const Scalar*>(builder.data()->data());\n+    return data[index];\n+  }\n+\n+  // Compute the hash of a scalar value\n+  static int64_t HashValue(const Scalar& value, int byte_width) {\n+    return HashUtil::Hash(&value, sizeof(Scalar), 0);\n+  }\n+\n+  // Return whether the dictionary value at the given builder index is unequal to value\n+  static bool SlotDifferent(const Builder& builder, int64_t index, const Scalar& value) {\n+    return GetDictionaryValue(builder, index) != value;\n+  }\n+\n+  // Append a value to the builder\n+  static Status AppendValue(Builder& builder, const Scalar& value) {\n+    return builder.Append(value);\n+  }\n+\n+  // Append another builder's contents to the builder\n+  static Status AppendBuilder(Builder& builder, const Builder& source_builder) {\n+    return builder.AppendValues(\n+        reinterpret_cast<const Scalar*>(source_builder.data()->data()),\n+        source_builder.length(), nullptr);\n+  }\n+};\n+\n+// DictionaryHashHelper implementation for StringType / BinaryType\n+template <typename T>\n+struct DictionaryHashHelper<\n+    T, typename std::enable_if<TypeTraits<T>::is_binary_like>::type> {\n \n Review comment:\n   Can you use `enable_if_binary` here https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/util-internal.h#L71? This may also make the `is_binary_like` type traits unneeded\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.918+0000",
                    "updated": "2018-05-30T18:01:06.918+0000",
                    "started": "2018-05-30T18:01:06.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107278",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191865352\n \n \n\n ##########\n File path: cpp/src/arrow/util/hash.h\n ##########\n @@ -39,6 +39,9 @@ static constexpr double kMaxHashTableLoad = 0.5;\n \n namespace internal {\n \n+// TODO this ugliness should be rewritten as an inline function with\n+// a callable argument.\n \n Review comment:\n   Agreed; this refactor should be accompanied by additional benchmarks to ensure we do not introduce performance regressions\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:06.920+0000",
                    "updated": "2018-05-30T18:01:06.920+0000",
                    "started": "2018-05-30T18:01:06.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107279",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191858771\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -210,7 +210,7 @@ class ARROW_EXPORT Array {\n   /// \\brief Return true if value at index is valid (not null). Does not\n   /// boundscheck\n   bool IsValid(int64_t i) const {\n-    return null_bitmap_data_ != NULLPTR &&\n+    return null_bitmap_data_ == NULLPTR ||\n            BitUtil::GetBit(null_bitmap_data_, i + data_->offset);\n \n Review comment:\n   Thanks for fixing this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:01:07.802+0000",
                    "updated": "2018-05-30T18:01:07.802+0000",
                    "started": "2018-05-30T18:01:07.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107280",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191869270\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   @wesm do you mean `static`? if so, then yes `static` is redundant inside of an anonymous namespace. Both anonymous namespaces and `static` are two different ways of declaring [internal linkage](http://en.cppreference.com/w/cpp/language/storage_duration#Linkage).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:12:04.085+0000",
                    "updated": "2018-05-30T18:12:04.085+0000",
                    "started": "2018-05-30T18:12:04.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107295",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191869715\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   Sorry I missed that this `static` is on the method, in which case it is of course meaningful beyond anonymous namespaces.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:13:24.126+0000",
                    "updated": "2018-05-30T18:13:24.126+0000",
                    "started": "2018-05-30T18:13:24.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107296",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191871544\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   No I mean `inline`. Because this function is in a templated struct that is used later, is `static` the same as `static inline`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:18:31.501+0000",
                    "updated": "2018-05-30T18:18:31.501+0000",
                    "started": "2018-05-30T18:18:31.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107299",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191871968\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   I think any method defined inside the `struct` or `class` definition is considered `inline`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:19:46.714+0000",
                    "updated": "2018-05-30T18:19:46.714+0000",
                    "started": "2018-05-30T18:19:46.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107300",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191872104\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   When you declare complete member functions in a class declarations, they are implicitly inline (so writing `inline` is redundant), I believe that is the same here but just want to confirm\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:20:12.864+0000",
                    "updated": "2018-05-30T18:20:12.864+0000",
                    "started": "2018-05-30T18:20:12.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107305",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191872379\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   From http://en.cppreference.com/w/cpp/language/inline:\r\n   \r\n   > A function defined entirely inside a class/struct/union definition, whether it's a member function or a non-member friend function, is implicitly an inline function. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:21:07.375+0000",
                    "updated": "2018-05-30T18:21:07.375+0000",
                    "started": "2018-05-30T18:21:07.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107308",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r191872849\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n \n Review comment:\n   :+1: great, thank you =)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-30T18:22:34.691+0000",
                    "updated": "2018-05-30T18:22:34.691+0000",
                    "started": "2018-05-30T18:22:34.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107309",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r192102330\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -349,23 +349,24 @@ class HashTableKernel<Type, Action, enable_if_boolean<Type>> : public HashTable\n       internal::BitmapReader valid_reader(arr.buffers[0]->data(), arr.offset, arr.length);\n       for (int64_t i = 0; i < arr.length; ++i) {\n         const bool is_null = valid_reader.IsNotSet();\n-        const bool value = value_reader.IsSet();\n-        const int j = value ? 1 : 0;\n-        hash_slot_t slot = table_[j];\n         valid_reader.Next();\n-        value_reader.Next();\n         if (is_null) {\n+          value_reader.Next();\n           action->ObserveNull();\n           continue;\n         }\n+        const bool value = value_reader.IsSet();\n+        value_reader.Next();\n+        const int j = value ? 1 : 0;\n \n Review comment:\n   Yes, good point.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T13:41:17.720+0000",
                    "updated": "2018-05-31T13:41:17.720+0000",
                    "started": "2018-05-31T13:41:17.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107667",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r192102765\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-internal.cc\n ##########\n @@ -372,27 +372,42 @@ class ArrayWriter {\n   template <typename T>\n   typename std::enable_if<IsSignedInt<T>::value, void>::type WriteDataValues(\n       const T& arr) {\n+    static const char null_string[] = \"0\";\n     const auto data = arr.raw_values();\n-    for (int i = 0; i < arr.length(); ++i) {\n-      writer_->Int64(data[i]);\n+    for (int64_t i = 0; i < arr.length(); ++i) {\n+      if (arr.IsValid(i)) {\n+        writer_->Int64(data[i]);\n+      } else {\n+        writer_->RawNumber(null_string, sizeof(null_string));\n \n Review comment:\n   I don't think so, indeed. But to be frank I don't know anything about our JSON format. Here the goal is to avoid 1) reading uninitialized memory 2) outputting junk values in the JSON (even if they'll be ignored since the corresponding validity value is false).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T13:42:23.976+0000",
                    "updated": "2018-05-31T13:42:23.976+0000",
                    "started": "2018-05-31T13:42:23.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107668",
                    "issueId": "13162387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/worklog/107669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2091: ARROW-2641: [C++] Avoid spurious memset() calls, improve bitmap write performance\nURL: https://github.com/apache/arrow/pull/2091#discussion_r192102971\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -872,8 +894,124 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n+using internal::DictionaryScalar;\n using internal::WrappedBinary;\n \n+namespace {\n+\n+// A helper class to manage a hash table embedded in a typed Builder.\n+template <typename T, typename Enable = void>\n+struct DictionaryHashHelper {};\n+\n+// DictionaryHashHelper implementation for primitive types\n+template <typename T>\n+struct DictionaryHashHelper<T,\n+                            typename std::enable_if<TypeTraits<T>::is_primitive>::type> {\n+  using Builder = typename TypeTraits<T>::BuilderType;\n+  using Scalar = typename DictionaryScalar<T>::type;\n+\n+  // Get the dictionary value at the given builder index\n+  static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n+    const Scalar* data = reinterpret_cast<const Scalar*>(builder.data()->data());\n+    return data[index];\n+  }\n+\n+  // Compute the hash of a scalar value\n+  static int64_t HashValue(const Scalar& value, int byte_width) {\n+    return HashUtil::Hash(&value, sizeof(Scalar), 0);\n+  }\n+\n+  // Return whether the dictionary value at the given builder index is unequal to value\n+  static bool SlotDifferent(const Builder& builder, int64_t index, const Scalar& value) {\n+    return GetDictionaryValue(builder, index) != value;\n+  }\n+\n+  // Append a value to the builder\n+  static Status AppendValue(Builder& builder, const Scalar& value) {\n+    return builder.Append(value);\n+  }\n+\n+  // Append another builder's contents to the builder\n+  static Status AppendBuilder(Builder& builder, const Builder& source_builder) {\n+    return builder.AppendValues(\n+        reinterpret_cast<const Scalar*>(source_builder.data()->data()),\n+        source_builder.length(), nullptr);\n+  }\n+};\n+\n+// DictionaryHashHelper implementation for StringType / BinaryType\n+template <typename T>\n+struct DictionaryHashHelper<\n+    T, typename std::enable_if<TypeTraits<T>::is_binary_like>::type> {\n \n Review comment:\n   Wow, I didn't know about those predicates :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T13:43:01.072+0000",
                    "updated": "2018-05-31T13:43:01.072+0000",
                    "started": "2018-05-31T13:43:01.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107669",
                    "issueId": "13162387"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1b095a84[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@395a043b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a2753d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2335fd73[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e2b7b90[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3afecaa1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a37a7fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@466515ad[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6337010a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f50640f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58af3657[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@36898892[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 31 15:44:01 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-31T15:38:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2641/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-05-28T12:50:44.000+0000",
        "updated": "2019-02-06T14:48:58.000+0000",
        "timeoriginalestimate": null,
        "description": "{{builder.cc}} has TODO statements of the form:\r\n\r\n{code:c++}\r\n  // TODO(emkornfield) valgrind complains without this\r\n  memset(data_->mutable_data(), 0, static_cast<size_t>(nbytes));\r\n{code}\r\n\r\nIdeally we shouldn't have to zero-initialize a data buffer before writing to it.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Investigate spurious memset() calls",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/comment/16492909",
                    "id": "16492909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
                        "name": "robertnishihara",
                        "key": "robertnishihara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robert Nishihara",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Most likely unrelated, but we memset some unused padding bytes to 0 in the c++ implementation to make the serialization deterministic. e.g., https://github.com/apache/arrow/pull/405",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
                        "name": "robertnishihara",
                        "key": "robertnishihara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robert Nishihara",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-05-28T20:11:12.795+0000",
                    "updated": "2018-05-28T20:11:12.795+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/comment/16496724",
                    "id": "16496724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2091\n[https://github.com/apache/arrow/pull/2091]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-05-31T15:38:16.471+0000",
                    "updated": "2018-05-31T15:38:16.471+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162387/comment/16496730",
                    "id": "16496730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "As a side note, though, the fact that our IPC code can write out uninitialized memory /might/ have adverse security consequences.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-05-31T15:44:01.525+0000",
                    "updated": "2018-05-31T15:44:01.525+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3u853:",
        "customfield_12314139": null
    }
}