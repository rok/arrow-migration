{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13151085",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151085",
    "key": "ARROW-2427",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2427/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3614e9f3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@130356ab[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d8b4195[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2434ec81[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cd07c0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b42461e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c32250a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1f6182e9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@400ea50e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@390579a7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@341201f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@27f7ab59[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 23 12:49:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-23T12:49:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2427/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-09T15:15:49.000+0000",
        "updated": "2018-04-23T12:49:30.000+0000",
        "timeoriginalestimate": null,
        "description": "The {{ReadAt}} implementations for at least {{OSFile}} and {{MemoryMappedFile}} take the file lock and seek. They could instead read directly from the given offset, allowing concurrent I/O from multiple threads.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] ReadAt implementations suboptimal",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151085/comment/16430953",
                    "id": "16430953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1867: [WIP] ARROW-2427: [C++] Implement ReadAt properly\nURL: https://github.com/apache/arrow/pull/1867\n \n \n   Allow for concurrent I/O by avoiding locking and seeking.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-09T17:44:14.782+0000",
                    "updated": "2018-04-09T17:44:14.782+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151085/comment/16447698",
                    "id": "16447698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1867: ARROW-2427: [C++] Implement ReadAt properly\nURL: https://github.com/apache/arrow/pull/1867#issuecomment-383488993\n \n \n   Ok, rebased.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-23T08:03:33.327+0000",
                    "updated": "2018-04-23T08:03:33.327+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151085/comment/16448088",
                    "id": "16448088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou closed pull request #1867: ARROW-2427: [C++] Implement ReadAt properly\nURL: https://github.com/apache/arrow/pull/1867\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/io/file.cc b/cpp/src/arrow/io/file.cc\nindex ba012beb7..e3d6f84f3 100644\n--- a/cpp/src/arrow/io/file.cc\n+++ b/cpp/src/arrow/io/file.cc\n@@ -125,9 +125,8 @@ class OSFile {\n   }\n \n   Status ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read, void* out) {\n-    std::lock_guard<std::mutex> guard(lock_);\n-    RETURN_NOT_OK(Seek(position));\n-    return Read(nbytes, bytes_read, out);\n+    return internal::FileReadAt(fd_, reinterpret_cast<uint8_t*>(out), position, nbytes,\n+                                bytes_read);\n   }\n \n   Status Seek(int64_t pos) {\n@@ -203,6 +202,19 @@ class ReadableFile::ReadableFileImpl : public OSFile {\n     return Status::OK();\n   }\n \n+  Status ReadBufferAt(int64_t position, int64_t nbytes, std::shared_ptr<Buffer>* out) {\n+    std::shared_ptr<ResizableBuffer> buffer;\n+    RETURN_NOT_OK(AllocateResizableBuffer(pool_, nbytes, &buffer));\n+\n+    int64_t bytes_read = 0;\n+    RETURN_NOT_OK(ReadAt(position, nbytes, &bytes_read, buffer->mutable_data()));\n+    if (bytes_read < nbytes) {\n+      RETURN_NOT_OK(buffer->Resize(bytes_read));\n+    }\n+    *out = buffer;\n+    return Status::OK();\n+  }\n+\n  private:\n   MemoryPool* pool_;\n };\n@@ -247,9 +259,7 @@ Status ReadableFile::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_rea\n \n Status ReadableFile::ReadAt(int64_t position, int64_t nbytes,\n                             std::shared_ptr<Buffer>* out) {\n-  std::lock_guard<std::mutex> guard(impl_->lock());\n-  RETURN_NOT_OK(Seek(position));\n-  return impl_->ReadBuffer(nbytes, out);\n+  return impl_->ReadBufferAt(position, nbytes, out);\n }\n \n Status ReadableFile::Read(int64_t nbytes, std::shared_ptr<Buffer>* out) {\n@@ -459,42 +469,38 @@ Status MemoryMappedFile::Close() {\n   return Status::OK();\n }\n \n-Status MemoryMappedFile::Read(int64_t nbytes, int64_t* bytes_read, void* out) {\n-  nbytes = std::max<int64_t>(\n-      0, std::min(nbytes, memory_map_->size() - memory_map_->position()));\n+Status MemoryMappedFile::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read,\n+                                void* out) {\n+  nbytes = std::max<int64_t>(0, std::min(nbytes, memory_map_->size() - position));\n   if (nbytes > 0) {\n-    std::memcpy(out, memory_map_->head(), static_cast<size_t>(nbytes));\n+    std::memcpy(out, memory_map_->data() + position, static_cast<size_t>(nbytes));\n   }\n   *bytes_read = nbytes;\n-  memory_map_->advance(nbytes);\n   return Status::OK();\n }\n \n-Status MemoryMappedFile::Read(int64_t nbytes, std::shared_ptr<Buffer>* out) {\n-  nbytes = std::max<int64_t>(\n-      0, std::min(nbytes, memory_map_->size() - memory_map_->position()));\n+Status MemoryMappedFile::ReadAt(int64_t position, int64_t nbytes,\n+                                std::shared_ptr<Buffer>* out) {\n+  nbytes = std::max<int64_t>(0, std::min(nbytes, memory_map_->size() - position));\n \n   if (nbytes > 0) {\n-    *out = SliceBuffer(memory_map_, memory_map_->position(), nbytes);\n+    *out = SliceBuffer(memory_map_, position, nbytes);\n   } else {\n     *out = std::make_shared<Buffer>(nullptr, 0);\n   }\n-  memory_map_->advance(nbytes);\n   return Status::OK();\n }\n \n-Status MemoryMappedFile::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read,\n-                                void* out) {\n-  std::lock_guard<std::mutex> guard(memory_map_->lock());\n-  RETURN_NOT_OK(Seek(position));\n-  return Read(nbytes, bytes_read, out);\n+Status MemoryMappedFile::Read(int64_t nbytes, int64_t* bytes_read, void* out) {\n+  RETURN_NOT_OK(ReadAt(memory_map_->position(), nbytes, bytes_read, out));\n+  memory_map_->advance(*bytes_read);\n+  return Status::OK();\n }\n \n-Status MemoryMappedFile::ReadAt(int64_t position, int64_t nbytes,\n-                                std::shared_ptr<Buffer>* out) {\n-  std::lock_guard<std::mutex> guard(memory_map_->lock());\n-  RETURN_NOT_OK(Seek(position));\n-  return Read(nbytes, out);\n+Status MemoryMappedFile::Read(int64_t nbytes, std::shared_ptr<Buffer>* out) {\n+  RETURN_NOT_OK(ReadAt(memory_map_->position(), nbytes, out));\n+  memory_map_->advance((*out)->size());\n+  return Status::OK();\n }\n \n bool MemoryMappedFile::supports_zero_copy() const { return true; }\ndiff --git a/cpp/src/arrow/io/interfaces.h b/cpp/src/arrow/io/interfaces.h\nindex 09536a44e..743621c46 100644\n--- a/cpp/src/arrow/io/interfaces.h\n+++ b/cpp/src/arrow/io/interfaces.h\n@@ -128,7 +128,8 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   virtual bool supports_zero_copy() const = 0;\n \n   /// \\brief Read nbytes at position, provide default implementations using Read(...), but\n-  /// can be overridden. Default implementation is thread-safe.\n+  /// can be overridden. Default implementation is thread-safe.  It is unspecified\n+  /// whether this method updates the file position or not.\n   ///\n   /// \\note Child classes must explicitly call this implementation or provide their own.\n   ///\n@@ -141,7 +142,8 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n                         void* out) = 0;\n \n   /// \\brief Read nbytes at position, provide default implementations using Read(...), but\n-  /// can be overridden. Default implementation is thread-safe.\n+  /// can be overridden. Default implementation is thread-safe.  It is unspecified\n+  /// whether this method updates the file position or not.\n   ///\n   /// \\note Child classes must explicitly call this implementation or provide their own.\n   ///\ndiff --git a/cpp/src/arrow/io/io-file-test.cc b/cpp/src/arrow/io/io-file-test.cc\nindex d3ef90800..b661fb678 100644\n--- a/cpp/src/arrow/io/io-file-test.cc\n+++ b/cpp/src/arrow/io/io-file-test.cc\n@@ -359,36 +359,23 @@ TEST_F(TestReadableFile, ReadAt) {\n   OpenFile();\n \n   int64_t bytes_read;\n-  int64_t position;\n \n   ASSERT_OK(file_->ReadAt(0, 4, &bytes_read, buffer));\n   ASSERT_EQ(4, bytes_read);\n   ASSERT_EQ(0, std::memcmp(buffer, \"test\", 4));\n \n-  // position advanced\n-  ASSERT_OK(file_->Tell(&position));\n-  ASSERT_EQ(4, position);\n-\n-  ASSERT_OK(file_->ReadAt(4, 10, &bytes_read, buffer));\n-  ASSERT_EQ(4, bytes_read);\n-  ASSERT_EQ(0, std::memcmp(buffer, \"data\", 4));\n-\n-  // position advanced to EOF\n-  ASSERT_OK(file_->Tell(&position));\n-  ASSERT_EQ(8, position);\n+  ASSERT_OK(file_->ReadAt(1, 10, &bytes_read, buffer));\n+  ASSERT_EQ(7, bytes_read);\n+  ASSERT_EQ(0, std::memcmp(buffer, \"estdata\", 7));\n \n   // Check buffer API\n   std::shared_ptr<Buffer> buffer2;\n \n-  ASSERT_OK(file_->ReadAt(0, 4, &buffer2));\n-  ASSERT_EQ(4, buffer2->size());\n+  ASSERT_OK(file_->ReadAt(2, 5, &buffer2));\n+  ASSERT_EQ(5, buffer2->size());\n \n-  Buffer expected(reinterpret_cast<const uint8_t*>(test_data), 4);\n+  Buffer expected(reinterpret_cast<const uint8_t*>(test_data + 2), 5);\n   ASSERT_TRUE(buffer2->Equals(expected));\n-\n-  // position advanced\n-  ASSERT_OK(file_->Tell(&position));\n-  ASSERT_EQ(4, position);\n }\n \n TEST_F(TestReadableFile, NonExistentFile) {\n@@ -457,14 +444,15 @@ TEST_F(TestReadableFile, ThreadSafety) {\n   ASSERT_OK(ReadableFile::Open(path_, &pool, &file_));\n \n   std::atomic<int> correct_count(0);\n-  int niter = 10000;\n+  int niter = 30000;\n \n   auto ReadData = [&correct_count, &data, &niter, this]() {\n     std::shared_ptr<Buffer> buffer;\n \n     for (int i = 0; i < niter; ++i) {\n-      ASSERT_OK(file_->ReadAt(0, 3, &buffer));\n-      if (0 == memcmp(data.c_str(), buffer->data(), 3)) {\n+      const int offset = i % 3;\n+      ASSERT_OK(file_->ReadAt(offset, 3, &buffer));\n+      if (0 == memcmp(data.c_str() + offset, buffer->data(), 3)) {\n         correct_count += 1;\n       }\n     }\ndiff --git a/cpp/src/arrow/io/memory.cc b/cpp/src/arrow/io/memory.cc\nindex 512e7f513..54cf8e459 100644\n--- a/cpp/src/arrow/io/memory.cc\n+++ b/cpp/src/arrow/io/memory.cc\n@@ -256,42 +256,43 @@ Status BufferReader::Tell(int64_t* position) const {\n \n bool BufferReader::supports_zero_copy() const { return true; }\n \n-Status BufferReader::Read(int64_t nbytes, int64_t* bytes_read, void* buffer) {\n+Status BufferReader::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read,\n+                            void* buffer) {\n   if (nbytes < 0) {\n     return Status::IOError(\"Cannot read a negative number of bytes from BufferReader.\");\n   }\n-  *bytes_read = std::min(nbytes, size_ - position_);\n+  *bytes_read = std::min(nbytes, size_ - position);\n   if (*bytes_read) {\n-    memcpy(buffer, data_ + position_, *bytes_read);\n-    position_ += *bytes_read;\n+    memcpy(buffer, data_ + position, *bytes_read);\n   }\n   return Status::OK();\n }\n \n-Status BufferReader::Read(int64_t nbytes, std::shared_ptr<Buffer>* out) {\n+Status BufferReader::ReadAt(int64_t position, int64_t nbytes,\n+                            std::shared_ptr<Buffer>* out) {\n   if (nbytes < 0) {\n     return Status::IOError(\"Cannot read a negative number of bytes from BufferReader.\");\n   }\n-  int64_t size = std::min(nbytes, size_ - position_);\n+  int64_t size = std::min(nbytes, size_ - position);\n \n   if (size > 0 && buffer_ != nullptr) {\n-    *out = SliceBuffer(buffer_, position_, size);\n+    *out = SliceBuffer(buffer_, position, size);\n   } else {\n-    *out = std::make_shared<Buffer>(data_ + position_, size);\n+    *out = std::make_shared<Buffer>(data_ + position, size);\n   }\n-\n-  position_ += size;\n   return Status::OK();\n }\n \n-Status BufferReader::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read,\n-                            void* out) {\n-  return RandomAccessFile::ReadAt(position, nbytes, bytes_read, out);\n+Status BufferReader::Read(int64_t nbytes, int64_t* bytes_read, void* buffer) {\n+  RETURN_NOT_OK(ReadAt(position_, nbytes, bytes_read, buffer));\n+  position_ += *bytes_read;\n+  return Status::OK();\n }\n \n-Status BufferReader::ReadAt(int64_t position, int64_t nbytes,\n-                            std::shared_ptr<Buffer>* out) {\n-  return RandomAccessFile::ReadAt(position, nbytes, out);\n+Status BufferReader::Read(int64_t nbytes, std::shared_ptr<Buffer>* out) {\n+  RETURN_NOT_OK(ReadAt(position_, nbytes, out));\n+  position_ += (*out)->size();\n+  return Status::OK();\n }\n \n Status BufferReader::GetSize(int64_t* size) {\ndiff --git a/cpp/src/arrow/io/memory.h b/cpp/src/arrow/io/memory.h\nindex cf370b3b6..7757c18fc 100644\n--- a/cpp/src/arrow/io/memory.h\n+++ b/cpp/src/arrow/io/memory.h\n@@ -113,13 +113,11 @@ class ARROW_EXPORT BufferReader : public RandomAccessFile {\n   Status Close() override;\n   Status Tell(int64_t* position) const override;\n   Status Read(int64_t nbytes, int64_t* bytes_read, void* buffer) override;\n-\n   // Zero copy read\n   Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) override;\n+\n   Status ReadAt(int64_t position, int64_t nbytes, int64_t* bytes_read,\n                 void* out) override;\n-\n-  /// Default implementation is thread-safe\n   Status ReadAt(int64_t position, int64_t nbytes, std::shared_ptr<Buffer>* out) override;\n \n   Status GetSize(int64_t* size) override;\ndiff --git a/cpp/src/arrow/ipc/feather.cc b/cpp/src/arrow/ipc/feather.cc\nindex df5c7993e..7e762ac28 100644\n--- a/cpp/src/arrow/ipc/feather.cc\n+++ b/cpp/src/arrow/ipc/feather.cc\n@@ -283,7 +283,7 @@ class TableReader::TableReaderImpl {\n     }\n \n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(source->Read(magic_size, &buffer));\n+    RETURN_NOT_OK(source->ReadAt(0, magic_size, &buffer));\n \n     if (memcmp(buffer->data(), kFeatherMagicBytes, magic_size)) {\n       return Status::Invalid(\"Not a feather file\");\ndiff --git a/cpp/src/arrow/ipc/message.cc b/cpp/src/arrow/ipc/message.cc\nindex 0a5bcdc70..4ee0c345e 100644\n--- a/cpp/src/arrow/ipc/message.cc\n+++ b/cpp/src/arrow/ipc/message.cc\n@@ -157,6 +157,24 @@ Status Message::ReadFrom(const std::shared_ptr<Buffer>& metadata, io::InputStrea\n   return Message::Open(metadata, body, out);\n }\n \n+Status Message::ReadFrom(const int64_t offset, const std::shared_ptr<Buffer>& metadata,\n+                         io::RandomAccessFile* file, std::unique_ptr<Message>* out) {\n+  auto fb_message = flatbuf::GetMessage(metadata->data());\n+\n+  int64_t body_length = fb_message->bodyLength();\n+\n+  std::shared_ptr<Buffer> body;\n+  RETURN_NOT_OK(file->ReadAt(offset, body_length, &body));\n+  if (body->size() < body_length) {\n+    std::stringstream ss;\n+    ss << \"Expected to be able to read \" << body_length << \" bytes for message body, got \"\n+       << body->size();\n+    return Status::IOError(ss.str());\n+  }\n+\n+  return Message::Open(metadata, body, out);\n+}\n+\n Status Message::SerializeTo(io::OutputStream* file, int64_t* output_length) const {\n   int32_t metadata_length = 0;\n   RETURN_NOT_OK(internal::WriteMessage(*metadata(), file, &metadata_length));\n@@ -210,7 +228,7 @@ Status ReadMessage(int64_t offset, int32_t metadata_length, io::RandomAccessFile\n   }\n \n   auto metadata = SliceBuffer(buffer, 4, buffer->size() - 4);\n-  return Message::ReadFrom(metadata, file, message);\n+  return Message::ReadFrom(offset + metadata_length, metadata, file, message);\n }\n \n Status ReadMessage(io::InputStream* file, bool aligned,\ndiff --git a/cpp/src/arrow/ipc/message.h b/cpp/src/arrow/ipc/message.h\nindex e5ea40911..d150eab26 100644\n--- a/cpp/src/arrow/ipc/message.h\n+++ b/cpp/src/arrow/ipc/message.h\n@@ -97,6 +97,18 @@ class ARROW_EXPORT Message {\n   static Status ReadFrom(const std::shared_ptr<Buffer>& metadata, io::InputStream* stream,\n                          std::unique_ptr<Message>* out);\n \n+  /// \\brief Read message body from position in file, and create Message given\n+  /// the Flatbuffer metadata\n+  /// \\param[in] offset the position in the file where the message body starts.\n+  /// \\param[in] metadata containing a serialized Message flatbuffer\n+  /// \\param[in] file the seekable file interface to read from\n+  /// \\param[out] out the created Message\n+  /// \\return Status\n+  ///\n+  /// \\note If file supports zero-copy, this is zero-copy\n+  static Status ReadFrom(const int64_t offset, const std::shared_ptr<Buffer>& metadata,\n+                         io::RandomAccessFile* file, std::unique_ptr<Message>* out);\n+\n   /// \\brief Return true if message type and contents are equal\n   ///\n   /// \\param other another message\ndiff --git a/cpp/src/arrow/python/arrow_to_python.cc b/cpp/src/arrow/python/arrow_to_python.cc\nindex 3fdc5f144..6ae5d43ec 100644\n--- a/cpp/src/arrow/python/arrow_to_python.cc\n+++ b/cpp/src/arrow/python/arrow_to_python.cc\n@@ -268,11 +268,11 @@ Status ReadSerializedObject(io::RandomAccessFile* src, SerializedPyObject* out)\n     int64_t size;\n     RETURN_NOT_OK(src->ReadAt(offset, sizeof(int64_t), &bytes_read,\n                               reinterpret_cast<uint8_t*>(&size)));\n-    RETURN_NOT_OK(src->Tell(&offset));\n+    offset += sizeof(int64_t);\n     std::shared_ptr<Buffer> buffer;\n     RETURN_NOT_OK(src->ReadAt(offset, size, &buffer));\n     out->buffers.push_back(buffer);\n-    RETURN_NOT_OK(src->Tell(&offset));\n+    offset += size;\n   }\n \n   return Status::OK();\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-23T12:49:15.054+0000",
                    "updated": "2018-04-23T12:49:15.054+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151085/comment/16448089",
                    "id": "16448089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 1867\n[https://github.com/apache/arrow/pull/1867]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-23T12:49:21.232+0000",
                    "updated": "2018-04-23T12:49:21.232+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3sbjb:",
        "customfield_12314139": null
    }
}