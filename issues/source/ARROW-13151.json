{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13385472",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472",
    "key": "ARROW-13151",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=agoose77",
            "name": "agoose77",
            "key": "agoose77",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Angus Hollands",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=agoose77",
            "name": "agoose77",
            "key": "agoose77",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Angus Hollands",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13151/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351\n\n\n   Previously, structs would only work for a single level, and other nested types did not do this at all.  This PR propagates types through lists, large_lists, fixed_sized_lists and multiple nesting of structs.  Maps had some special handling:\r\n   1.  If only a partial key is selected it gets converted to list<struct>\r\n   2. If only a partial value is selected it maintains the map type.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T05:28:44.308+0000",
                    "updated": "2021-10-07T05:28:44.308+0000",
                    "started": "2021-10-07T05:28:44.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661325",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-937462760\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T05:29:08.398+0000",
                    "updated": "2021-10-07T05:29:08.398+0000",
                    "started": "2021-10-07T05:29:08.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661326",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724473946\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n+    if (type_id == ::arrow::Type::MAP) {\n+      if (reader_child_type->num_fields() != 2 ||\n+          !reader_child_type->field(0)->type()->Equals(\n+              *schema_child_type.field(0)->type())) {\n+        // This case applies if either key or value are completed filtered\n+        // out so we can take the type as is or the key was partially\n+        // so keeping it as a map no longer makes sence.\n         list_field = list_field->WithType(::arrow::list(child_reader->field()));\n+      } else if (!reader_child_type->field(1)->type()->Equals(\n+                     *schema_child_type.field(1)->type())) {\n+        list_field = list_field->WithType(std::make_shared<::arrow::MapType>(\n+            reader_child_type->field(\n+                0),  // field 0 is unchanged baed on previous if statement\n+            reader_child_type->field(1)));\n+      }\n+      // Map types are list<struct<key, value>> so use ListReader\n+      // for reconstruction.\n+      out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n+                                         std::move(child_reader)));\n+    } else if (type_id == ::arrow::Type::LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::list(reader_child_type));\n       }\n+\n       out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else if (type_id == ::arrow::Type::LARGE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::large_list(reader_child_type));\n+      }\n+\n       out->reset(new ListReader<int64_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n-\n     } else if (type_id == ::arrow::Type::FIXED_SIZE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        auto& fixed_list_type =\n+            checked_cast<const ::arrow::FixedSizeListType&>(*list_field->type());\n+        int32_t list_size = fixed_list_type.list_size();\n+        list_field =\n+            list_field->WithType(::arrow::fixed_size_list(reader_child_type, list_size));\n+      }\n+\n       out->reset(new FixedSizeListReader(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else {\n       return Status::UnknownError(\"Unknown list type: \", field.field->ToString());\n     }\n   } else if (type_id == ::arrow::Type::STRUCT) {\n     std::vector<std::shared_ptr<Field>> child_fields;\n+    int arrow_field_idx = 0;\n     std::vector<std::unique_ptr<ColumnReaderImpl>> child_readers;\n     for (const auto& child : field.children) {\n       std::unique_ptr<ColumnReaderImpl> child_reader;\n       RETURN_NOT_OK(GetReader(child, ctx, &child_reader));\n       if (!child_reader) {\n+        arrow_field_idx++;\n         // If all children were pruned, then we do not try to read this field\n         continue;\n       }\n-      child_fields.push_back(child.field);\n+      std::shared_ptr<::arrow::Field> child_field = child.field;\n+      const DataType& reader_child_type = *child_reader->field()->type();\n+      const DataType& schema_child_type =\n+          *arrow_field->type()->field(arrow_field_idx++)->type();\n+      // These might not be equal if column pruning occurred.\n+      if (!schema_child_type.Equals(reader_child_type)) {\n+        child_field = child_field->WithType(child_reader->field()->type());\n+      }\n+      child_fields.push_back(child_field);\n\nReview comment:\n       I think this assumes that `arrow_field->type()` and `field.children()` have the same order which is probably a perfectly reasonable assumption to make but I figured I'd check just in case.  E.g. borrowing the test case  from arrow_reader_writer_test.cc:4294 would it be legal to do...\r\n   \r\n   ```\r\n     cases.push_back(\r\n         {map_type,\r\n          /*indices=*/{1, 0},\r\n          /*selected_type=*/\r\n          ::arrow::list(field(\"col\", struct_({REVERSE(map_type->key_field())}), /*nullable=*/false)),\r\n          kWriteData, /*expected_data=*/R\"([[{\"key\": {\"b\": 0, \"a\":1}}]])\"});\r\n   ```\r\n   \r\n   A selection string \"x.y.z\" should just be masking (and thus can't change the order) but I wasn't sure if there was some other code path that could lead here.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n\nReview comment:\n       ```suggestion\r\n       // These two types might not be equal if column pruning occurred.\r\n       // further down the stack.\r\n   ```\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n\nReview comment:\n       Is there any pathological case where `list_field->type()` won't have any child fields? (and thus `field->(0)` fails).  Maybe `DCHECK_GT(list_field->type->num_fields(), 0)`\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -4191,5 +4191,148 @@ TEST(TestArrowReadDeltaEncoding, DeltaBinaryPacked) {\n }\n #endif\n \n+struct NestedFilterTestCase {\n+  std::shared_ptr<::arrow::DataType> write_schema;\n+  std::vector<int> indices_to_read;\n+  std::shared_ptr<::arrow::DataType> expected_schema;\n+  std::string write_data;\n+  std::string read_data;\n+};\n+class TestNestedSchemaFilteredReader\n+    : public ::testing::TestWithParam<NestedFilterTestCase> {};\n+\n+TEST_P(TestNestedSchemaFilteredReader, ReadWrite) {\n+  std::shared_ptr<::arrow::io::BufferOutputStream> sink = CreateOutputStream();\n+  auto write_props = WriterProperties::Builder().build();\n+  std::shared_ptr<::arrow::Array> array =\n+      ArrayFromJSON(GetParam().write_schema, GetParam().write_data);\n+\n+  ASSERT_OK_NO_THROW(\n+      WriteTable(**Table::FromRecordBatches({::arrow::RecordBatch::Make(\n+                     ::arrow::schema({::arrow::field(\"col\", array->type())}),\n+                     array->length(), {array})}),\n+                 ::arrow::default_memory_pool(), sink, /*row_group_size=*/100,\n\nReview comment:\n       ```suggestion\r\n                    ::arrow::default_memory_pool(), sink, /*chunk_size=*/100,\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T19:45:25.733+0000",
                    "updated": "2021-10-07T19:45:25.733+0000",
                    "started": "2021-10-07T19:45:25.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661874",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724484089\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n\nReview comment:\n       lists always have exactly one child I thought.  I will add the dcheck though.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T19:49:09.624+0000",
                    "updated": "2021-10-07T19:49:09.624+0000",
                    "started": "2021-10-07T19:49:09.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661875",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724492778\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n+    if (type_id == ::arrow::Type::MAP) {\n+      if (reader_child_type->num_fields() != 2 ||\n+          !reader_child_type->field(0)->type()->Equals(\n+              *schema_child_type.field(0)->type())) {\n+        // This case applies if either key or value are completed filtered\n+        // out so we can take the type as is or the key was partially\n+        // so keeping it as a map no longer makes sence.\n         list_field = list_field->WithType(::arrow::list(child_reader->field()));\n+      } else if (!reader_child_type->field(1)->type()->Equals(\n+                     *schema_child_type.field(1)->type())) {\n+        list_field = list_field->WithType(std::make_shared<::arrow::MapType>(\n+            reader_child_type->field(\n+                0),  // field 0 is unchanged baed on previous if statement\n+            reader_child_type->field(1)));\n+      }\n+      // Map types are list<struct<key, value>> so use ListReader\n+      // for reconstruction.\n+      out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n+                                         std::move(child_reader)));\n+    } else if (type_id == ::arrow::Type::LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::list(reader_child_type));\n       }\n+\n       out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else if (type_id == ::arrow::Type::LARGE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::large_list(reader_child_type));\n+      }\n+\n       out->reset(new ListReader<int64_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n-\n     } else if (type_id == ::arrow::Type::FIXED_SIZE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        auto& fixed_list_type =\n+            checked_cast<const ::arrow::FixedSizeListType&>(*list_field->type());\n+        int32_t list_size = fixed_list_type.list_size();\n+        list_field =\n+            list_field->WithType(::arrow::fixed_size_list(reader_child_type, list_size));\n+      }\n+\n       out->reset(new FixedSizeListReader(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else {\n       return Status::UnknownError(\"Unknown list type: \", field.field->ToString());\n     }\n   } else if (type_id == ::arrow::Type::STRUCT) {\n     std::vector<std::shared_ptr<Field>> child_fields;\n+    int arrow_field_idx = 0;\n     std::vector<std::unique_ptr<ColumnReaderImpl>> child_readers;\n     for (const auto& child : field.children) {\n       std::unique_ptr<ColumnReaderImpl> child_reader;\n       RETURN_NOT_OK(GetReader(child, ctx, &child_reader));\n       if (!child_reader) {\n+        arrow_field_idx++;\n         // If all children were pruned, then we do not try to read this field\n         continue;\n       }\n-      child_fields.push_back(child.field);\n+      std::shared_ptr<::arrow::Field> child_field = child.field;\n+      const DataType& reader_child_type = *child_reader->field()->type();\n+      const DataType& schema_child_type =\n+          *arrow_field->type()->field(arrow_field_idx++)->type();\n+      // These might not be equal if column pruning occurred.\n+      if (!schema_child_type.Equals(reader_child_type)) {\n+        child_field = child_field->WithType(child_reader->field()->type());\n+      }\n+      child_fields.push_back(child_field);\n\nReview comment:\n       Good question.  I don't think so.  Ultimately indices is translated into an [unordered set](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L211) and only used for filtering columns.  The only place iteration happens is [here](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L867) which should have a deterministic order that is already aligned with the schema.  I think the only type of rearranging columns that is supported is at the top level of selection (not nested types) which this code doesn't really touch.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T20:02:41.566+0000",
                    "updated": "2021-10-07T20:02:41.566+0000",
                    "started": "2021-10-07T20:02:41.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661880",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-938114021\n\n\n   Was there a GHA to automatically format code?\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T20:02:54.985+0000",
                    "updated": "2021-10-07T20:02:54.985+0000",
                    "started": "2021-10-07T20:02:54.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661881",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-938118700\n\n\n   @github-actions autotune\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T20:09:43.316+0000",
                    "updated": "2021-10-07T20:09:43.316+0000",
                    "started": "2021-10-07T20:09:43.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661886",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/661978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-938114021\n\n\n   Was there a GHA to automatically format code?\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:06:12.149+0000",
                    "updated": "2021-10-07T23:06:12.149+0000",
                    "started": "2021-10-07T23:06:12.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661978",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351\n\n\n   Previously, structs would only work for a single level, and other nested types did not do this at all.  This PR propagates types through lists, large_lists, fixed_sized_lists and multiple nesting of structs.  Maps had some special handling:\r\n   1.  If only a partial key is selected it gets converted to list<struct>\r\n   2. If only a partial value is selected it maintains the map type.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:14:31.141+0000",
                    "updated": "2021-10-07T23:14:31.141+0000",
                    "started": "2021-10-07T23:14:31.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662075",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724473946\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n+    if (type_id == ::arrow::Type::MAP) {\n+      if (reader_child_type->num_fields() != 2 ||\n+          !reader_child_type->field(0)->type()->Equals(\n+              *schema_child_type.field(0)->type())) {\n+        // This case applies if either key or value are completed filtered\n+        // out so we can take the type as is or the key was partially\n+        // so keeping it as a map no longer makes sence.\n         list_field = list_field->WithType(::arrow::list(child_reader->field()));\n+      } else if (!reader_child_type->field(1)->type()->Equals(\n+                     *schema_child_type.field(1)->type())) {\n+        list_field = list_field->WithType(std::make_shared<::arrow::MapType>(\n+            reader_child_type->field(\n+                0),  // field 0 is unchanged baed on previous if statement\n+            reader_child_type->field(1)));\n+      }\n+      // Map types are list<struct<key, value>> so use ListReader\n+      // for reconstruction.\n+      out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n+                                         std::move(child_reader)));\n+    } else if (type_id == ::arrow::Type::LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::list(reader_child_type));\n       }\n+\n       out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else if (type_id == ::arrow::Type::LARGE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::large_list(reader_child_type));\n+      }\n+\n       out->reset(new ListReader<int64_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n-\n     } else if (type_id == ::arrow::Type::FIXED_SIZE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        auto& fixed_list_type =\n+            checked_cast<const ::arrow::FixedSizeListType&>(*list_field->type());\n+        int32_t list_size = fixed_list_type.list_size();\n+        list_field =\n+            list_field->WithType(::arrow::fixed_size_list(reader_child_type, list_size));\n+      }\n+\n       out->reset(new FixedSizeListReader(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else {\n       return Status::UnknownError(\"Unknown list type: \", field.field->ToString());\n     }\n   } else if (type_id == ::arrow::Type::STRUCT) {\n     std::vector<std::shared_ptr<Field>> child_fields;\n+    int arrow_field_idx = 0;\n     std::vector<std::unique_ptr<ColumnReaderImpl>> child_readers;\n     for (const auto& child : field.children) {\n       std::unique_ptr<ColumnReaderImpl> child_reader;\n       RETURN_NOT_OK(GetReader(child, ctx, &child_reader));\n       if (!child_reader) {\n+        arrow_field_idx++;\n         // If all children were pruned, then we do not try to read this field\n         continue;\n       }\n-      child_fields.push_back(child.field);\n+      std::shared_ptr<::arrow::Field> child_field = child.field;\n+      const DataType& reader_child_type = *child_reader->field()->type();\n+      const DataType& schema_child_type =\n+          *arrow_field->type()->field(arrow_field_idx++)->type();\n+      // These might not be equal if column pruning occurred.\n+      if (!schema_child_type.Equals(reader_child_type)) {\n+        child_field = child_field->WithType(child_reader->field()->type());\n+      }\n+      child_fields.push_back(child_field);\n\nReview comment:\n       I think this assumes that `arrow_field->type()` and `field.children()` have the same order which is probably a perfectly reasonable assumption to make but I figured I'd check just in case.  E.g. borrowing the test case  from arrow_reader_writer_test.cc:4294 would it be legal to do...\r\n   \r\n   ```\r\n     cases.push_back(\r\n         {map_type,\r\n          /*indices=*/{1, 0},\r\n          /*selected_type=*/\r\n          ::arrow::list(field(\"col\", struct_({REVERSE(map_type->key_field())}), /*nullable=*/false)),\r\n          kWriteData, /*expected_data=*/R\"([[{\"key\": {\"b\": 0, \"a\":1}}]])\"});\r\n   ```\r\n   \r\n   A selection string \"x.y.z\" should just be masking (and thus can't change the order) but I wasn't sure if there was some other code path that could lead here.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n\nReview comment:\n       ```suggestion\r\n       // These two types might not be equal if column pruning occurred.\r\n       // further down the stack.\r\n   ```\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n\nReview comment:\n       Is there any pathological case where `list_field->type()` won't have any child fields? (and thus `field->(0)` fails).  Maybe `DCHECK_GT(list_field->type->num_fields(), 0)`\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -4191,5 +4191,148 @@ TEST(TestArrowReadDeltaEncoding, DeltaBinaryPacked) {\n }\n #endif\n \n+struct NestedFilterTestCase {\n+  std::shared_ptr<::arrow::DataType> write_schema;\n+  std::vector<int> indices_to_read;\n+  std::shared_ptr<::arrow::DataType> expected_schema;\n+  std::string write_data;\n+  std::string read_data;\n+};\n+class TestNestedSchemaFilteredReader\n+    : public ::testing::TestWithParam<NestedFilterTestCase> {};\n+\n+TEST_P(TestNestedSchemaFilteredReader, ReadWrite) {\n+  std::shared_ptr<::arrow::io::BufferOutputStream> sink = CreateOutputStream();\n+  auto write_props = WriterProperties::Builder().build();\n+  std::shared_ptr<::arrow::Array> array =\n+      ArrayFromJSON(GetParam().write_schema, GetParam().write_data);\n+\n+  ASSERT_OK_NO_THROW(\n+      WriteTable(**Table::FromRecordBatches({::arrow::RecordBatch::Make(\n+                     ::arrow::schema({::arrow::field(\"col\", array->type())}),\n+                     array->length(), {array})}),\n+                 ::arrow::default_memory_pool(), sink, /*row_group_size=*/100,\n\nReview comment:\n       ```suggestion\r\n                    ::arrow::default_memory_pool(), sink, /*chunk_size=*/100,\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:21:58.371+0000",
                    "updated": "2021-10-07T23:21:58.371+0000",
                    "started": "2021-10-07T23:21:58.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662157",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-937462760\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:31:02.322+0000",
                    "updated": "2021-10-07T23:31:02.322+0000",
                    "started": "2021-10-07T23:31:02.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662275",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-938118700\n\n\n   @github-actions autotune\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:31:15.044+0000",
                    "updated": "2021-10-07T23:31:15.044+0000",
                    "started": "2021-10-07T23:31:15.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662278",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724484089\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n\nReview comment:\n       lists always have exactly one child I thought.  I will add the dcheck though.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n+    if (type_id == ::arrow::Type::MAP) {\n+      if (reader_child_type->num_fields() != 2 ||\n+          !reader_child_type->field(0)->type()->Equals(\n+              *schema_child_type.field(0)->type())) {\n+        // This case applies if either key or value are completed filtered\n+        // out so we can take the type as is or the key was partially\n+        // so keeping it as a map no longer makes sence.\n         list_field = list_field->WithType(::arrow::list(child_reader->field()));\n+      } else if (!reader_child_type->field(1)->type()->Equals(\n+                     *schema_child_type.field(1)->type())) {\n+        list_field = list_field->WithType(std::make_shared<::arrow::MapType>(\n+            reader_child_type->field(\n+                0),  // field 0 is unchanged baed on previous if statement\n+            reader_child_type->field(1)));\n+      }\n+      // Map types are list<struct<key, value>> so use ListReader\n+      // for reconstruction.\n+      out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n+                                         std::move(child_reader)));\n+    } else if (type_id == ::arrow::Type::LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::list(reader_child_type));\n       }\n+\n       out->reset(new ListReader<int32_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else if (type_id == ::arrow::Type::LARGE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        list_field = list_field->WithType(::arrow::large_list(reader_child_type));\n+      }\n+\n       out->reset(new ListReader<int64_t>(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n-\n     } else if (type_id == ::arrow::Type::FIXED_SIZE_LIST) {\n+      if (!reader_child_type->Equals(schema_child_type)) {\n+        auto& fixed_list_type =\n+            checked_cast<const ::arrow::FixedSizeListType&>(*list_field->type());\n+        int32_t list_size = fixed_list_type.list_size();\n+        list_field =\n+            list_field->WithType(::arrow::fixed_size_list(reader_child_type, list_size));\n+      }\n+\n       out->reset(new FixedSizeListReader(ctx, list_field, field.level_info,\n                                          std::move(child_reader)));\n     } else {\n       return Status::UnknownError(\"Unknown list type: \", field.field->ToString());\n     }\n   } else if (type_id == ::arrow::Type::STRUCT) {\n     std::vector<std::shared_ptr<Field>> child_fields;\n+    int arrow_field_idx = 0;\n     std::vector<std::unique_ptr<ColumnReaderImpl>> child_readers;\n     for (const auto& child : field.children) {\n       std::unique_ptr<ColumnReaderImpl> child_reader;\n       RETURN_NOT_OK(GetReader(child, ctx, &child_reader));\n       if (!child_reader) {\n+        arrow_field_idx++;\n         // If all children were pruned, then we do not try to read this field\n         continue;\n       }\n-      child_fields.push_back(child.field);\n+      std::shared_ptr<::arrow::Field> child_field = child.field;\n+      const DataType& reader_child_type = *child_reader->field()->type();\n+      const DataType& schema_child_type =\n+          *arrow_field->type()->field(arrow_field_idx++)->type();\n+      // These might not be equal if column pruning occurred.\n+      if (!schema_child_type.Equals(reader_child_type)) {\n+        child_field = child_field->WithType(child_reader->field()->type());\n+      }\n+      child_fields.push_back(child_field);\n\nReview comment:\n       Good question.  I don't think so.  Ultimately indices is translated into an [unordered set](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L211) and only used for filtering columns.  The only place iteration happens is [here](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L867) which should have a deterministic order that is already aligned with the schema.  I think the only type of rearranging columns that is supported is at the top level of selection (not nested types) which this code doesn't really touch.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:32:56.769+0000",
                    "updated": "2021-10-07T23:32:56.769+0000",
                    "started": "2021-10-07T23:32:56.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662299",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-938225940\n\n\n   Also CC @zeroshade I know we haven't gotten there yet, but this might have crept into your port.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:41:47.864+0000",
                    "updated": "2021-10-07T23:41:47.864+0000",
                    "started": "2021-10-07T23:41:47.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662403",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#discussion_r724725027\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -842,36 +842,79 @@ Status GetReader(const SchemaField& field, const std::shared_ptr<Field>& arrow_f\n       *out = nullptr;\n       return Status::OK();\n     }\n-    if (type_id == ::arrow::Type::LIST ||\n-        type_id == ::arrow::Type::MAP) {  // Map can be reconstructed as list of structs.\n-      if (type_id == ::arrow::Type::MAP &&\n-          child_reader->field()->type()->num_fields() != 2) {\n-        // This case applies if either key or value is filtered.\n+\n+    // These two types might not be equal if there column pruning occurred.\n+    // further down the stack.\n+    const std::shared_ptr<DataType> reader_child_type = child_reader->field()->type();\n+    const DataType& schema_child_type = *(list_field->type()->field(0)->type());\n\nReview comment:\n       added just a normal return error.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T06:07:35.679+0000",
                    "updated": "2021-10-08T06:07:35.679+0000",
                    "started": "2021-10-08T06:07:35.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662551",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-939047021\n\n\n   Tested this branch, and it seems to work nicely. I was just looking into the topic of \"selecting nested columns\" for ORC (https://github.com/apache/arrow/pull/11372), and selecting lists elements actually uses different \"dotted paths\" in ORC compared to Parquet. \r\n   For example, your example in the top post of `file.read([\"root.list.item.addr.that\"])` needs to be written as `file.read([\"root.addr.that\"])` for an ORCFile. \r\n   \r\n   Not for this PR, but that's maybe something to consider for Parquet as well? (I personally like this simplified selecting; the \"list.item\" part in the path for lists is basically superfluous, since lists always have a single child)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T18:48:02.210+0000",
                    "updated": "2021-10-08T18:48:02.210+0000",
                    "started": "2021-10-08T18:48:02.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662912",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-939049737\n\n\n   > Not for this PR, but that's maybe something to consider for Parquet as well? (I personally like this simplified selecting; the \"list.item\" part in the path for lists is basically superfluous, since lists always have a single child)\r\n   \r\n   Yes, I agree.  This also helps with the  enabling \"compliant nested types\" issue.  We probably would want to maintain this for backwards compatibility.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T18:53:02.232+0000",
                    "updated": "2021-10-08T18:53:02.232+0000",
                    "started": "2021-10-08T18:53:02.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662914",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/662917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield edited a comment on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-939049737\n\n\n   > Not for this PR, but that's maybe something to consider for Parquet as well? (I personally like this simplified selecting; the \"list.item\" part in the path for lists is basically superfluous, since lists always have a single child)\r\n   \r\n   Yes, I agree.  This also helps with the  enabling \"compliant nested types\" issue as it would matter if it is \"list.item\" or \"list.element\".  We probably would want to maintain this for backwards compatibility.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T18:53:54.753+0000",
                    "updated": "2021-10-08T18:53:54.753+0000",
                    "started": "2021-10-08T18:53:54.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662917",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/663878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-940679713\n\n\n   @westonpace if possible, I'd like to get this merged in time for the release.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T05:35:50.480+0000",
                    "updated": "2021-10-12T05:35:50.480+0000",
                    "started": "2021-10-12T05:35:50.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663878",
                    "issueId": "13385472"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/worklog/663879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield edited a comment on pull request #11351:\nURL: https://github.com/apache/arrow/pull/11351#issuecomment-940679713\n\n\n   @westonpace if possible, I'd like to get this merged in time for the release.  Any more concerns?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T05:36:24.109+0000",
                    "updated": "2021-10-12T05:36:24.109+0000",
                    "started": "2021-10-12T05:36:24.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663879",
                    "issueId": "13385472"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73122b94[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d839dc3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@134f9aa4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72c3708b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66f024f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@df4bed2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62018f72[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@baffc91[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c9f9ea2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44b5afcd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a21d236[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5e1ee897[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 15 08:56:14 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-15T08:56:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13151/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2021-06-23T17:52:23.000+0000",
        "updated": "2021-10-15T08:56:29.000+0000",
        "timeoriginalestimate": null,
        "description": "Given the following table\r\n{code:java}\r\ndata = {\"root\": [[{\"addr\": {\"this\": 3, \"that\": 3}}]]}\r\ntable = pa.Table.from_pydict(data)\r\n{code}\r\nreading the nested column leads to an {{pyarrow.lib.ArrowInvalid}} error:\r\n{code:java}\r\npq.write_table(table, \"/tmp/table.parquet\")\r\nfile = pq.ParquetFile(\"/tmp/table.parquet\")\r\narray = file.read([\"root.list.item.addr.that\"])\r\n{code}\r\nTraceback:\r\n{code:java}\r\nTraceback (most recent call last):\r\n  File \"....\", line 21, in <module>\r\n    array = file.read([\"root.list.item.addr.that\"])\r\n  File \"/home/angus/.mambaforge/envs/awkward/lib/python3.9/site-packages/pyarrow/parquet.py\", line 383, in read\r\n    return self.reader.read_all(column_indices=column_indices,\r\n  File \"pyarrow/_parquet.pyx\", line 1097, in pyarrow._parquet.ParquetReader.read_all\r\n  File \"pyarrow/error.pxi\", line 97, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: List child array invalid: Invalid: Struct child array #0 does not match type field: struct<that: int64> vs struct<that: int64, this: int64>\r\n{code}\r\nIt's possible that I don't quite understand this properly - am I doing something wrong?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Unable to read single child field of struct column from Parquet",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17368879",
                    "id": "17368879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Reading the file itself seems to work OK:\r\n\r\n{code}\r\nIn [13]: file.read()\r\nOut[13]: \r\npyarrow.Table\r\nroot: list<item: struct<addr: struct<that: int64, this: int64>>>\r\n  child 0, item: struct<addr: struct<that: int64, this: int64>>\r\n      child 0, addr: struct<that: int64, this: int64>\r\n          child 0, that: int64\r\n          child 1, this: int64\r\n{code}\r\n\r\nBut it's the reading of only a specific child field that seems to be failing (I can reproduce the failure). \r\n\r\nI am not fully sure what is currently expected to be supported (whether we support reading a single field of a struct column).  cc [~emkornfield]\r\n\r\nThanks for the report!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-06-24T14:20:46.976+0000",
                    "updated": "2021-06-24T14:20:46.976+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17368946",
                    "id": "17368946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This seems like a legitimate bug, I would guess this might occur when applying arrow schema back to the data. I forget if we have a flag exposed to turn that off as a work around.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-24T16:04:51.659+0000",
                    "updated": "2021-06-24T16:04:51.659+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17368952",
                    "id": "17368952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "As an aside it is ugly that we need to include \"list.item\" in the path to read the single column.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-24T16:17:28.032+0000",
                    "updated": "2021-06-24T16:17:28.032+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17369517",
                    "id": "17369517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
                        "name": "jpivarski",
                        "key": "jpivarski",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jim Pivarski",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "I hope reading a single field of a struct column is supported! It's an important use-case for us.\r\n\r\nIn particle physics, our data consist of many collision events, each with a variable-length number of particles, and each particle is a struct with many fields. Often, there's even deeper structure than that, but this is the basic structure. These structs are very wide, with as many as a hundred fields, because the same dataset is used by 3000 authors, all doing different analyses on the same input dataset. Most individual data analysts don't access more than 10% of these struct fields.\r\n\r\nTherefore, it's important to be able to read the data lazily (in interactive analysis) or at least selectively (in high-throughput applications). Reading and decompressing data are often bottlenecks, so restricting data-loading to just the data we use is by itself a 10\u00d7 improvement. We have a custom file format (ROOT) that is designed to provide exactly this selective reading, but we've been looking at Parquet as a more cross-language and non-domain-specific alternative.\r\n\r\nThe bug that Angus reported arose in a framework that provides lazy-reading, Awkward Array's [ak.from_parquet|https://awkward-array.readthedocs.io/en/latest/_auto/ak.from_parquet.html] function, which uses pyarrow.parquet.ParquetFile to read the data and convert it to Arrow, then converts the Arrow into Awkward Arrays (which are highly interchangeable with Arrow Arrays; conversion in both directions is usually zero-copy). [This whole feature|https://github.com/scikit-hep/awkward-1.0/blob/1ecfc3e29aaf1b79cd7e0e8fa1598452f3827c64/src/awkward/operations/convert.py#L3122-L3959] was designed around the idea that you can read individual struct fields, just as you can read individual columns. Just today, I found out that's not true, even in our basic case that does not trigger errors like Angus's:\r\n\r\n>>> pq.write_table(pa.Table.from_pydict(\\{\"events\": [{\"muons\": [{\"pt\": 10.5, \"eta\": -1.5, \"phi\": 0.1}]}]}), \"/tmp/testy.parquet\")\r\n\r\n>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"events.muons.list.item.pt\"])\u00a0 \u00a0# reads all three\r\npyarrow.Table\r\nevents: struct<muons: list<item: struct<eta: double, phi: double, pt: double>>>\r\n\u00a0 child 0, muons: list<item: struct<eta: double, phi: double, pt: double>>\r\n\u00a0 \u00a0 child 0, item: struct<eta: double, phi: double, pt: double>\r\n\u00a0 \u00a0 \u00a0 child 0, eta: double\r\n\u00a0 \u00a0 \u00a0 child 1, phi: double\r\n\u00a0 \u00a0 \u00a0 child 2, pt: double\r\n>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"events.muons.list.item.eta\"])\u00a0 \u00a0# reads all three\r\npyarrow.Table\r\nevents: struct<muons: list<item: struct<eta: double, phi: double, pt: double>>>\r\n\u00a0 child 0, muons: list<item: struct<eta: double, phi: double, pt: double>>\r\n\u00a0 \u00a0 child 0, item: struct<eta: double, phi: double, pt: double>\r\n\u00a0 \u00a0 \u00a0 child 0, eta: double\r\n\u00a0 \u00a0 \u00a0 child 1, phi: double\r\n\u00a0 \u00a0 \u00a0 child 2, pt: double\r\n>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"events.muons.list.item.phi\"])\u00a0 \u00a0# reads all three\r\npyarrow.Table\r\nevents: struct<muons: list<item: struct<eta: double, phi: double, pt: double>>>\r\n\u00a0 child 0, muons: list<item: struct<eta: double, phi: double, pt: double>>\r\n\u00a0 \u00a0 child 0, item: struct<eta: double, phi: double, pt: double>\r\n\u00a0 \u00a0 \u00a0 child 0, eta: double\r\n\u00a0 \u00a0 \u00a0 child 1, phi: double\r\n\u00a0 \u00a0 \u00a0 child 2, pt: double\r\n\r\nI hadn't realized that our attempts to read only \"muon pt\" or only \"muon eta\" were, in fact, reading all muon fields. (In the real datasets, muons have 32 fields, electrons have 47, taus have 37, jets have 30, photons have 27...)\r\n\r\nWe could try to rearrange data to something shallower:\r\n\r\n{{>>> pq.write_table(pa.Table.from_pydict(\\{\"muons\": [{\"pt\": 10.5, \"eta\": -1.5, \"phi\": 0.1}]}), \"/tmp/testy.parquet\")}}\r\n{{>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"muons.pt\"])}}\r\n{{pyarrow.Table}}\r\n{{muons: struct<pt: double>}}\r\n{{\u00a0 child 0, pt: double}}\r\n{{>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"muons.eta\"])}}\r\n{{pyarrow.Table}}\r\n{{muons: struct<eta: double>}}\r\n{{\u00a0 child 0, eta: double}}\r\n{{>>> pq.ParquetFile(\"/tmp/testy.parquet\").read([\"muons.phi\"])}}\r\n{{pyarrow.Table}}\r\n{{muons: struct<phi: double>}}\r\n{{\u00a0 child 0, phi: double}}\r\n\r\nbut that puts a hard-to-predict constraint on data structures. In the above, aren't we \"reading a single column of a struct column?\" (I probably saw this behavior and assumed that it would continue to deeper structures, which is how I never noticed that they sometimes read all struct fields.)\r\n\r\nAs a real-world case, here's a dataset that naturally has a structure that suffers from over-reading. It's not physics-related: it's a translation of the [Million Song Dataset|http://millionsongdataset.com/] into Parquet (side-note: it's losslessly 3\u00d7 smaller than the original HDF5 files because of all the variable-length data): s3://pivarski-princeton/millionsongs/ . Lazily loading it has odd performance characteristics that I hadn't measured in detail until now:\r\n\r\nIn [1]: import awkward as ak\r\n\r\nIn [2]: songs = ak.from_parquet(\"/home/jpivarski/storage/data/million-song-datas\r\n ...: et/full/millionsongs/millionsongs-A-zstd.parquet\", lazy=True)\r\n\r\nIn [3]: %time songs.analysis.segments.loudness_start\r\nCPU times: user 19.1 ms, sys: 0 ns, total: 19.1 ms\r\nWall time: 18.8 ms\r\nOut[3]: <Array [[-60, -22.7, -23, ... -38, -37.5]] type='39100 * var * float64'>\r\n\r\nIn [4]: %time songs.analysis.segments.loudness_max\r\nCPU times: user 3.97 ms, sys: 14 \u00b5s, total: 3.98 ms\r\nWall time: 4.03 ms\r\nOut[4]: <Array [[-20.6, -21.1, ... -35.6, -35.6]] type='39100 * var * float64'>\r\n\r\nIn [5]: %time songs.analysis.segments.pitches\r\nCPU times: user 4.2 ms, sys: 0 ns, total: 4.2 ms\r\nWall time: 4.2 ms\r\nOut[5]: <Array [[[0.294, 0.158, ... 0.437, 0.065]]] type='39100 * var * var * float64'>\r\n\r\nIn [6]: %time songs.analysis.segments.timbre\r\nCPU times: user 4.05 ms, sys: 53 \u00b5s, total: 4.1 ms\r\nWall time: 4.11 ms\r\nOut[6]: <Array [[[18, 71.3, 193, ... -34.8, 2.66]]] type='39100 * var * var * float64'>\r\n\r\nThe \"pitches\" and \"timbre\" fields are much larger than the \"loudness_start\" and \"loudness_max\" (note the deeper nesting), but the \"loudness_start\" takes 4\u00d7 longer to load because that is triggering a read of everything in the whole \"segments\" struct. This depth of nestedness is necessary because \"segments\" have to be differentiated from \"bars,\" \"beats,\" \"sections,\" \"tatums,\" and the \"analysis\" level has to be differentiated from \"metadata\"\u2014song names, artist names, tags\u2014all of which are nested with different cardinalities. Restructuring this to have individually readable fields be separate top-level table columns would mean managing a lot of relationships using naming conventions, rather than the tree structure that more naturally fits the data.\r\n\r\nSo\u2014the point of this long comment is that reading individual struct fields would be a very, very, very nice feature to have. Without it, we'll have to detect the unsupported cases and tell our users to rearrange their data to fit the supported ones through naming conventions.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
                        "name": "jpivarski",
                        "key": "jpivarski",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jim Pivarski",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-06-25T14:52:56.444+0000",
                    "updated": "2021-06-25T14:52:56.444+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17369562",
                    "id": "17369562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "It should be very much supported.\u00a0 Like I said this is a bug.\u00a0 It will take some tracing to figure out why it is occurring.\u00a0\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-25T15:59:57.144+0000",
                    "updated": "2021-06-25T15:59:57.144+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17369582",
                    "id": "17369582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
                        "name": "jpivarski",
                        "key": "jpivarski",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jim Pivarski",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Great, thank you! I see now that your calling it a \"bug\" was commenting on\u00a0Joris's question about whether it ought to be supported, and that's what I was responding to.\r\n\r\nWhen this is fixed, it will be a new minimum version of Arrow for us because of its importance in our work.\r\n\r\n(As a side-note, if you do change the ugly \"list.item\" access, we'll have to adjust because of course we're generating column names to request them like that. So if that changes, we'll definitely need to pin a minimum Arrow version because the new names would be incompatible. I'd prefer it not to; and after all, it's what's in the Parquet schema. Maybe \"synonyms\" could hide that feature from high-level users, though that complicates the interface.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
                        "name": "jpivarski",
                        "key": "jpivarski",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jim Pivarski",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-06-25T16:35:45.544+0000",
                    "updated": "2021-06-25T16:35:45.544+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17374935",
                    "id": "17374935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}As a side-note, if you do change the ugly \"list.item\" access\r\n{quote}\r\nYeah this would be a seperate change, and I think we could make it be backwards compatible.\u00a0 \u00a0 This would be a separate issue.\u00a0 The reason why removing list.item makes sense is that there are legacy encodings that encode lists in different ways, it would be nice to have a uniform access to these different types (i.e. schema evolution), I'll open up a separate item to track this and we can have more discussion there, I don't expect anyone would take this up any time soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-05T16:57:06.048+0000",
                    "updated": "2021-07-05T16:57:06.048+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17420211",
                    "id": "17420211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Looking at this the problem is we do not propagate filtered fields through lists or nested structs (only one level of structs).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-26T05:32:08.060+0000",
                    "updated": "2021-10-07T05:38:15.765+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17425351",
                    "id": "17425351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "With the PR that is up this now seems to work:\r\n{code:java}\r\n\r\n>>> data = {\"root\": [[\\{\"addr\": {\"this\": 3, \"that\": 3}}]]}\r\n >>> table = pa.Table.from_pydict(data)\r\n >>> pq.write_table(table, \"/tmp/table.parquet\")\r\n >>> file = pq.ParquetFile(\"/tmp/table.parquet\")\r\n >>> array = file.read([\"root.list.item.addr.that\"])\r\n >>> array\r\n pyarrow.Table\r\n root: list<item: struct<addr: struct<that: int64>>>\r\n child 0, item: struct<addr: struct<that: int64>>\r\n child 0, addr: struct<that: int64>\r\n child 0, that: int64\r\n----\r\nroot: [[ \u2013 is_valid: all not null\r\n \u2013 child 0 type: struct<that: int64>\r\n \u2013 is_valid: all not null\r\n \u2013 child 0 type: int64\r\n [\r\n 3\r\n ]]]\r\n\u00a0{code}\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-10-07T05:45:02.164+0000",
                    "updated": "2021-10-07T05:45:02.164+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17428799",
                    "id": "17428799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It seems the PR was merged, does this issue still need to remain unresolved?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-10-14T13:10:12.188+0000",
                    "updated": "2021-10-14T13:10:12.188+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385472/comment/17429192",
                    "id": "17429192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Yes, the PR fixed this. Not sure why the JIRA was not automatically resolved on merge.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-10-15T08:56:14.958+0000",
                    "updated": "2021-10-15T08:56:14.958+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|z0s8fk:",
        "customfield_12314139": null
    }
}