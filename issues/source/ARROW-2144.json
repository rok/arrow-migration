{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13137952",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952",
    "key": "ARROW-2144",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342291",
                "id": "12342291",
                "name": "JS-0.3.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-02-21"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2144/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@b06e917[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44557d7a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d1d8525[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@724c8551[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76882155[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2bc85cb4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a8dc045[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4cfda048[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b48a20b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@120c7c2a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26b719c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7e902b8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Feb 19 17:47:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-19T17:47:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2144/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-02-12T20:08:00.000+0000",
        "updated": "2018-02-19T17:48:21.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we repeat dictionary lookups every time we bind a new record batch when doing an equality check in a DataFrame op (https://github.com/apache/arrow/blob/master/js/src/predicate.ts#L143).\r\n\r\nIn most cases the dictionary won't be changing between record batches, so we should remember these reverse dictionary lookups, either permanently, or at least for the duration of the current operation.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Don't repeat dictionary lookups in DataFrame ops",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16361555",
                    "id": "16361555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit opened a new pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599\n \n \n   The optimized `Equals` predicate now caches its reverse dictionary lookup for subsequent `bind` calls. Also adds `DictionaryVector.reverseLookup(value)`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-12T22:40:35.563+0000",
                    "updated": "2018-02-12T22:40:35.563+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16361571",
                    "id": "16361571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r167714283\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -414,6 +414,16 @@ export class DictionaryVector<T extends DataType = DataType> extends Vector<Dict\n     }\n     public getKey(index: number) { return this.indicies.get(index); }\n     public getValue(key: number) { return this.dictionary.get(key); }\n+    public reverseLookup(value: T): number|undefined {\n \n Review comment:\n   @trxcllnt do you think it makes sense to implement `reverseLookup` here, or should it be in the view?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-12T23:00:39.260+0000",
                    "updated": "2018-02-12T23:00:39.260+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16361594",
                    "id": "16361594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r167719314\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -414,6 +414,16 @@ export class DictionaryVector<T extends DataType = DataType> extends Vector<Dict\n     }\n     public getKey(index: number) { return this.indicies.get(index); }\n     public getValue(key: number) { return this.dictionary.get(key); }\n+    public reverseLookup(value: T): number|undefined {\n \n Review comment:\n   @TheNeuralBit I think this is in the right place, since it's specific to DictionaryVectors. The View interface is intended to provide a minimal common interface for views over the the Vector buffer layouts (aka the Vector Data types), somewhat analogously to the DataView/TypedArray relationship with ArrayBuffer.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-12T23:26:37.618+0000",
                    "updated": "2018-02-12T23:26:37.618+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16361595",
                    "id": "16361595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r167719671\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -414,6 +414,16 @@ export class DictionaryVector<T extends DataType = DataType> extends Vector<Dict\n     }\n     public getKey(index: number) { return this.indicies.get(index); }\n     public getValue(key: number) { return this.dictionary.get(key); }\n+    public reverseLookup(value: T): number|undefined {\n+        let key = -1;\n+        for (let len = this.dictionary.length; ++key < len;) {\n+            if (this.dictionary.get(key) === value) {\n \n Review comment:\n   @TheNeuralBit is it worthwhile to cache the dictionary lookup in a local variable to avoid the repeated `this.dictionary` lookups?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-12T23:28:21.535+0000",
                    "updated": "2018-02-12T23:28:21.535+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16362711",
                    "id": "16362711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r167941349\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -414,6 +414,16 @@ export class DictionaryVector<T extends DataType = DataType> extends Vector<Dict\n     }\n     public getKey(index: number) { return this.indicies.get(index); }\n     public getValue(key: number) { return this.dictionary.get(key); }\n+    public reverseLookup(value: T): number|undefined {\n+        let key = -1;\n+        for (let len = this.dictionary.length; ++key < len;) {\n+            if (this.dictionary.get(key) === value) {\n \n Review comment:\n   good call, I'll make that change\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-13T17:32:22.826+0000",
                    "updated": "2018-02-13T17:32:22.826+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16364699",
                    "id": "16364699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r168296826\n \n \n\n ##########\n File path: js/src/vector/nested.ts\n ##########\n @@ -40,6 +40,15 @@ export abstract class NestedView<T extends NestedType> implements View<T> {\n     public toArray(): IterableArrayLike<T['TValue']> {\n         return [...this];\n     }\n+    public find(search: T['TValue']) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value === search) { return index; }\n \n Review comment:\n   @TheNeuralBit I saw the special-cased `every()` call in `FixedSizeListView`'s find method, so I suspect you're already aware of the question I have here: since `get(i)` on a NestedView returns a structured clone of the nested element, how do we make this work? I know in C++ they have visitors that compare vectors of the same type together, and that sounds like what we really need here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T20:14:54.298+0000",
                    "updated": "2018-02-14T20:14:54.298+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16364700",
                    "id": "16364700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r168292856\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -28,6 +28,7 @@ export interface View<T extends DataType> {\n     get(index: number): T['TValue'] | null;\n     set(index: number, value: T['TValue']): void;\n     toArray(): IterableArrayLike<T['TValue'] | null>;\n+    find(search: T['TValue']): number | null;\n \n Review comment:\n   @TheNeuralBit how do you feel about mirroring the Array/TypedArray prototypes' naming convention and calling this [`indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf)? The built-ins also have [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find) and [`findIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex) methods that take predicate functions, and may help JS folks already familiar with these APIs\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T20:14:54.393+0000",
                    "updated": "2018-02-14T20:14:54.393+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16364791",
                    "id": "16364791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#discussion_r168313060\n \n \n\n ##########\n File path: js/src/vector.ts\n ##########\n @@ -28,6 +28,7 @@ export interface View<T extends DataType> {\n     get(index: number): T['TValue'] | null;\n     set(index: number, value: T['TValue']): void;\n     toArray(): IterableArrayLike<T['TValue'] | null>;\n+    find(search: T['TValue']): number | null;\n \n Review comment:\n   Yeah I even used `indexOf` to generate expected values in the unit tests... Not sure why I stubbornly refused to mirror that naming convention, but that's definitely the way to go\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T21:19:57.290+0000",
                    "updated": "2018-02-14T21:19:57.290+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369287",
                    "id": "16369287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#issuecomment-366741758\n \n \n   @TheNeuralBit I think Paul is on vacation this week -- is this good to go? I can cut the JS release candidate later today once we get all the pending patches in\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T16:24:45.683+0000",
                    "updated": "2018-02-19T16:24:45.683+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369294",
                    "id": "16369294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on issue #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#issuecomment-366744742\n \n \n   @wesm yeah I think this is good to go. I was waiting on a final :+1: from Paul, but we've already talked through the changes and I've updated as necessary. I guess I can try to follow the directions [here](https://github.com/apache/arrow/blob/master/dev/README.md) to merge this myself now?\r\n   \r\n   I'd also be interested in helping out with the release process if possible\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T16:35:33.965+0000",
                    "updated": "2018-02-19T16:35:33.965+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369296",
                    "id": "16369296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#issuecomment-366745403\n \n \n   Sure, want to try to merge this to see if your gitbox stuff is set up right? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T16:38:09.936+0000",
                    "updated": "2018-02-19T16:38:09.936+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369310",
                    "id": "16369310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on issue #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599#issuecomment-366749063\n \n \n   Sure! I just tried it out, but I'm getting an auth error from the GitHub API: \"Must specify two-factor authentication OTP code.\"\r\n   Did I miss some configuration step?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T16:52:16.265+0000",
                    "updated": "2018-02-19T16:52:16.265+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369366",
                    "id": "16369366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit closed pull request #1599: ARROW-2144: [JS] Don't repeat dictionary lookups in DataFrame ops\nURL: https://github.com/apache/arrow/pull/1599\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/package.json b/js/package.json\nindex d36e87263..1c22fc117 100644\n--- a/js/package.json\n+++ b/js/package.json\n@@ -19,7 +19,7 @@\n     \"clean:testdata\": \"gulp clean:testdata\",\n     \"create:testdata\": \"gulp create:testdata\",\n     \"test:coverage\": \"gulp test -t ts --coverage\",\n-    \"doc\": \"shx rm -rf ./doc && esdoc\",\n+    \"doc\": \"shx rm -rf ./doc && typedoc --mode file --out doc src/Arrow.ts\",\n     \"lint\": \"run-p lint:*\",\n     \"lint:src\": \"tslint --fix --project -p tsconfig.json -c tslint.json \\\"src/**/*.ts\\\"\",\n     \"lint:test\": \"tslint --fix --project -p test/tsconfig.json -c tslint.json \\\"test/**/*.ts\\\"\",\n@@ -70,8 +70,6 @@\n     \"benchmark\": \"2.1.4\",\n     \"coveralls\": \"3.0.0\",\n     \"del\": \"3.0.0\",\n-    \"esdoc\": \"1.0.4\",\n-    \"esdoc-standard-plugin\": \"1.0.0\",\n     \"glob\": \"7.1.2\",\n     \"google-closure-compiler\": \"20180101.0.0\",\n     \"gulp\": \"github:gulpjs/gulp#6d71a658c61edb3090221579d8f97dbe086ba2ed\",\n@@ -97,6 +95,7 @@\n     \"trash\": \"4.2.1\",\n     \"ts-jest\": \"22.0.1\",\n     \"tslint\": \"5.9.1\",\n+    \"typedoc\": \"0.10.0\",\n     \"typescript\": \"2.7.1\",\n     \"uglifyjs-webpack-plugin\": \"1.1.6\",\n     \"webpack\": \"3.10.0\",\ndiff --git a/js/src/predicate.ts b/js/src/predicate.ts\nindex 9d55274bd..981ffb166 100644\n--- a/js/src/predicate.ts\n+++ b/js/src/predicate.ts\n@@ -125,6 +125,10 @@ export class Or extends CombinationPredicate {\n }\n \n export class Equals extends ComparisonPredicate {\n+    // Helpers used to cache dictionary reverse lookups between calls to bind\n+    private lastDictionary: Vector|undefined;\n+    private lastKey: number|undefined;\n+\n     protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n         const rtrn: boolean = left.v == right.v;\n         return () => rtrn;\n@@ -139,20 +143,17 @@ export class Equals extends ComparisonPredicate {\n     protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n         const col_func = col.bind(batch);\n         if (col.vector instanceof DictionaryVector) {\n-            // Assume that there is only one key with the value `lit.v`\n-            // TODO: add lazily-computed reverse dictionary lookups, associated\n-            // with col.vector.data so that we only have to do this once per\n-            // dictionary\n-            let key = -1;\n-            let dict = col.vector;\n-            let data = dict.dictionary!;\n-            for (let len = data.length; ++key < len;) {\n-                if (data.get(key) === lit.v) {\n-                    break;\n-                }\n+            let key: any;\n+            const vector = col.vector as DictionaryVector;\n+            if (vector.dictionary !== this.lastDictionary) {\n+                key = vector.reverseLookup(lit.v);\n+                this.lastDictionary = vector.dictionary;\n+                this.lastKey = key;\n+            } else {\n+                key = this.lastKey;\n             }\n \n-            if (key == data.length) {\n+            if (key === -1) {\n                 // the value doesn't exist in the dictionary - always return\n                 // false\n                 // TODO: special-case of PredicateFunc that encapsulates this\n@@ -161,7 +162,7 @@ export class Equals extends ComparisonPredicate {\n                 return () => false;\n             } else {\n                 return (idx: number) => {\n-                    return dict.getKey(idx) === key;\n+                    return vector.getKey(idx) === key;\n                 };\n             }\n         } else {\ndiff --git a/js/src/vector.ts b/js/src/vector.ts\nindex d9ca97b5f..fa1d16efc 100644\n--- a/js/src/vector.ts\n+++ b/js/src/vector.ts\n@@ -28,6 +28,7 @@ export interface View<T extends DataType> {\n     get(index: number): T['TValue'] | null;\n     set(index: number, value: T['TValue']): void;\n     toArray(): IterableArrayLike<T['TValue'] | null>;\n+    indexOf(search: T['TValue']): number;\n     [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n }\n \n@@ -77,6 +78,9 @@ export class Vector<T extends DataType = any> implements VectorLike, View<T>, Vi\n     public toArray(): IterableArrayLike<T['TValue'] | null> {\n         return this.view.toArray();\n     }\n+    public indexOf(value: T['TValue']) {\n+        return this.view.indexOf(value);\n+    }\n     public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n         return this.view[Symbol.iterator]();\n     }\n@@ -414,6 +418,7 @@ export class DictionaryVector<T extends DataType = DataType> extends Vector<Dict\n     }\n     public getKey(index: number) { return this.indicies.get(index); }\n     public getValue(key: number) { return this.dictionary.get(key); }\n+    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n }\n \n export const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\ndiff --git a/js/src/vector/chunked.ts b/js/src/vector/chunked.ts\nindex 2eaf99c7c..7876bbae5 100644\n--- a/js/src/vector/chunked.ts\n+++ b/js/src/vector/chunked.ts\n@@ -103,6 +103,16 @@ export class ChunkedView<T extends DataType> implements View<T> {\n         }\n         return target;\n     }\n+    public indexOf(search: T['TValue']) {\n+        let offset = 0, result;\n+        for (const vector of this.chunkVectors) {\n+            result = vector.indexOf(search);\n+            if (result !== -1) { return result + offset; }\n+            offset += vector.length;\n+        }\n+\n+        return -1;\n+    }\n }\n \n function typedArraySet(source: TypedArray, target: TypedArray, index: number) {\ndiff --git a/js/src/vector/dictionary.ts b/js/src/vector/dictionary.ts\nindex 385729814..f4de810b0 100644\n--- a/js/src/vector/dictionary.ts\n+++ b/js/src/vector/dictionary.ts\n@@ -47,4 +47,12 @@ export class DictionaryView<T extends DataType> implements View<T> {\n             yield values.get(indicies.get(index));\n         }\n     }\n+    public indexOf(search: T['TValue']) {\n+        // First find the dictionary key for the desired value...\n+        const key = this.dictionary.indexOf(search);\n+        if (key === -1) { return key; }\n+\n+        // ... then find the first occurence of that key in indicies\n+        return this.indicies.indexOf(key!);\n+    }\n }\ndiff --git a/js/src/vector/flat.ts b/js/src/vector/flat.ts\nindex a32bd9d39..acc2f1af9 100644\n--- a/js/src/vector/flat.ts\n+++ b/js/src/vector/flat.ts\n@@ -43,6 +43,15 @@ export class FlatView<T extends FlatType> implements View<T> {\n     public toArray(): IterableArrayLike<T['TValue']> {\n         return this.values.subarray(0, this.length);\n     }\n+    public indexOf(search: T['TValue']) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value === search) { return index; }\n+            ++index;\n+        }\n+\n+        return -1;\n+    }\n     public [Symbol.iterator](): IterableIterator<T['TValue']> {\n         return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n     }\n@@ -64,6 +73,10 @@ export class NullView implements View<Null> {\n     public toArray(): IterableArrayLike<null> {\n         return [...this];\n     }\n+    public indexOf(search: any) {\n+        // if you're looking for nulls and the view isn't empty, we've got 'em!\n+        return search === null && this.length > 0 ? 0 : -1;\n+    }\n     public *[Symbol.iterator](): IterableIterator<null> {\n         for (let index = -1, length = this.length; ++index < length;) {\n             yield null;\n@@ -107,6 +120,15 @@ export class ValidityView<T extends DataType> implements View<T> {\n     public toArray(): IterableArrayLike<T['TValue'] | null> {\n         return [...this];\n     }\n+    public indexOf(search: T['TValue']) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value === search) { return index; }\n+            ++index;\n+        }\n+\n+        return -1;\n+    }\n     public isValid(index: number): boolean {\n         const nullBitIndex = this.offset + index;\n         return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n@@ -169,6 +191,15 @@ export class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n     public toArray(): IterableArrayLike<T['TValue']> {\n         return this.values;\n     }\n+    public indexOf(search: T['TValue']) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n+            ++index;\n+        }\n+\n+        return -1;\n+    }\n     protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n         return values.subarray(index * size, index * size + size);\n     }\ndiff --git a/js/src/vector/list.ts b/js/src/vector/list.ts\nindex 3d365ceac..8561c66ba 100644\n--- a/js/src/vector/list.ts\n+++ b/js/src/vector/list.ts\n@@ -59,6 +59,15 @@ export abstract class ListViewBase<T extends (ListType | FlatListType | FixedSiz\n             yield get(values, index, valueOffsets);\n         }\n     }\n+    public indexOf(search: T['TValue']) {\n+        let index = 0;\n+        for (let value of this) {\n+            if (value === search) { return index; }\n+            ++index;\n+        }\n+\n+        return -1;\n+    }\n     protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n     protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n }\ndiff --git a/js/src/vector/nested.ts b/js/src/vector/nested.ts\nindex d0fb24ca9..a45a912c9 100644\n--- a/js/src/vector/nested.ts\n+++ b/js/src/vector/nested.ts\n@@ -40,6 +40,9 @@ export abstract class NestedView<T extends NestedType> implements View<T> {\n     public toArray(): IterableArrayLike<T['TValue']> {\n         return [...this];\n     }\n+    public indexOf(_: T['TValue']): number {\n+        throw new Error(`Not implemented yet`);\n+    }\n     public toJSON(): any { return this.toArray(); }\n     public toString() {\n         return [...this].map((x) => stringify(x)).join(', ');\ndiff --git a/js/test/unit/vector-tests.ts b/js/test/unit/vector-tests.ts\nindex 81676b003..e2be22983 100644\n--- a/js/test/unit/vector-tests.ts\n+++ b/js/test/unit/vector-tests.ts\n@@ -15,13 +15,16 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+import { TextEncoder } from 'text-encoding-utf-8';\n import Arrow from '../Arrow';\n import { type, TypedArray, TypedArrayConstructor } from '../../src/Arrow';\n \n-const { BoolData, FlatData } = Arrow.data;\n-const { IntVector, FloatVector, BoolVector } = Arrow.vector;\n+const utf8Encoder = new TextEncoder('utf-8');\n+\n+const { BoolData, FlatData, FlatListData } = Arrow.data;\n+const { IntVector, FloatVector, BoolVector, Utf8Vector } = Arrow.vector;\n const {\n-    Bool,\n+    Utf8, Bool,\n     Float16, Float32, Float64,\n     Int8, Int16, Int32, Int64,\n     Uint8, Uint16, Uint32, Uint64,\n@@ -45,11 +48,14 @@ const FixedWidthVectors = {\n \n const fixedSizeVectors = toMap(FixedSizeVectors, Object.keys(FixedSizeVectors));\n const fixedWidthVectors = toMap(FixedWidthVectors, Object.keys(FixedWidthVectors));\n+const randomBytes = (n: number) => Uint8Array.from(\n+    { length: n },\n+    () => Math.random() * 255 | 0\n+);\n const bytes = Array.from(\n     { length: 5 },\n-    () => Uint8Array.from(\n-        { length: 64 },\n-        () => Math.random() * 255 | 0));\n+    () => randomBytes(64)\n+);\n \n describe(`BoolVector`, () => {\n     const values = [true, true, false, true, true, false, false, false], n = values.length;\n@@ -67,6 +73,16 @@ describe(`BoolVector`, () => {\n             expect(v).toEqual(values[i]);\n         }\n     });\n+    test(`indexOf returns expected values`, () => {\n+        for (let test_value of [true, false]) {\n+            const expected = values.indexOf(test_value);\n+            expect(vector.indexOf(test_value)).toEqual(expected);\n+        }\n+    });\n+    test(`indexOf returns -1 when value not found`, () => {\n+        const v = new BoolVector(new BoolData(new Bool(), 3, null, new Uint8Array([0xFF])));\n+        expect(v.indexOf(false)).toEqual(-1);\n+    });\n     test(`can set values to true and false`, () => {\n         const v = new BoolVector(new BoolData(new Bool(), n, null, new Uint8Array([27, 0, 0, 0, 0, 0, 0, 0])));\n         const expected1 = [true, true, false, true, true, false, false, false];\n@@ -145,6 +161,13 @@ describe('Float16Vector', () => {\n             expect(v).toEqual(clamp(values[i]));\n         }\n     });\n+    test(`indexOf returns expected values`, () => {\n+        const randomValues = new Uint16Array(randomBytes(64).buffer);\n+        for (let value of [...values, ...randomValues]) {\n+            const expected = values.indexOf(value);\n+            expect(vector.indexOf(clamp(value))).toEqual(expected);\n+        }\n+    });\n     test(`slices the entire array`, () => {\n         expect(vector.slice().toArray()).toEqual(float16s);\n     });\n@@ -187,6 +210,21 @@ for (const [VectorName, [VectorType, DataType]] of fixedSizeVectors) {\n                 expect(v).toEqual(values.slice(2 * i, 2 * (i + 1)));\n             }\n         });\n+        test(`indexOf returns expected values`, () => {\n+            // Create a set of test data composed of all of the actual values\n+            // and a few random values\n+            let testValues = concatTyped(\n+                type.ArrayType,\n+                ...bytes,\n+                ...[randomBytes(8 * 2 * type.ArrayType.BYTES_PER_ELEMENT)]\n+            );\n+\n+            for (let i = -1, n = testValues.length / 2 | 0; ++i < n;) {\n+                const value = testValues.slice(2 * i, 2 * (i + 1));\n+                const expected = values.findIndex((d, i) => i % 2 === 0 && d === value[0] && testValues[i + 1] === value[1]);\n+                expect(vector.indexOf(value)).toEqual(expected >= 0 ? expected / 2 : -1);\n+            }\n+        });\n         test(`slices the entire array`, () => {\n             expect(vector.slice().toArray()).toEqual(values);\n         });\n@@ -232,6 +270,20 @@ for (const [VectorName, [VectorType, DataType]] of fixedWidthVectors) {\n                 expect(v).toEqual(values[i]);\n             }\n         });\n+        test(`indexOf returns expected values`, () => {\n+            // Create a set of test data composed of all of the actual values\n+            // and a few random values\n+            let testValues = concatTyped(\n+                type.ArrayType,\n+                ...bytes,\n+                ...[randomBytes(8 * type.ArrayType.BYTES_PER_ELEMENT)]\n+            );\n+\n+            for (const value of testValues) {\n+                const expected = values.indexOf(value);\n+                expect(vector.indexOf(value)).toEqual(expected);\n+            }\n+        });\n         test(`slices the entire array`, () => {\n             expect(vector.slice().toArray()).toEqual(values);\n         });\n@@ -253,6 +305,35 @@ for (const [VectorName, [VectorType, DataType]] of fixedWidthVectors) {\n     });\n }\n \n+describe(`Utf8Vector`, () => {\n+    const values = ['foo', 'bar', 'baz', 'foo bar', 'bar'], n = values.length;\n+    let offset = 0;\n+    const offsets = Uint32Array.of(0, ...values.map((d) => { offset += d.length; return offset; }));\n+    const vector = new Utf8Vector(new FlatListData(new Utf8(), n, null, offsets, utf8Encoder.encode(values.join(''))));\n+    test(`gets expected values`, () => {\n+        let i = -1;\n+        while (++i < n) {\n+            expect(vector.get(i)).toEqual(values[i]);\n+        }\n+    });\n+    test(`iterates expected values`, () => {\n+        expect.hasAssertions();\n+        let i = -1;\n+        for (let v of vector) {\n+            expect(++i).toBeLessThan(n);\n+            expect(v).toEqual(values[i]);\n+        }\n+    });\n+    test(`indexOf returns expected values`, () => {\n+        let testValues = values.concat(['abc', '12345']);\n+\n+        for (const value of testValues) {\n+            const expected = values.indexOf(value);\n+            expect(vector.indexOf(value)).toEqual(expected);\n+        }\n+    });\n+});\n+\n function toMap<T>(entries: Record<string, T>, keys: string[]) {\n     return keys.reduce((map, key) => {\n         map.set(key, entries[key] as T);\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T17:45:00.815+0000",
                    "updated": "2018-02-19T17:45:00.815+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137952/comment/16369369",
                    "id": "16369369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "Issue resolved by pull request 1599\n[https://github.com/apache/arrow/pull/1599]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2018-02-19T17:47:21.527+0000",
                    "updated": "2018-02-19T17:47:21.527+0000"
                }
            ],
            "maxResults": 14,
            "total": 14,
            "startAt": 0
        },
        "customfield_12311820": "0|i3q34v:",
        "customfield_12314139": null
    }
}