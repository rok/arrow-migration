{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13182044",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044",
    "key": "ARROW-3146",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3146/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547\n \n \n   There's a bunch more to do here; I'm going to try to get to a reasonable starting point soon so that follow-up work can be addressed in smaller incremental patches.\r\n   \r\n   This is a partial C++ implementation of the Flight RPC system initially proposed by Jacques in ARROW-249. As in Java, I had to dig into gRPC and Protocol Buffers internals to ensure that\r\n   \r\n   * On write, memory is only copied once into the outgoing gRPC buffer\r\n   * On read, no memory is copied\r\n   \r\n   The way that I tricked gRPC into circumventing the built-in protobuf serde paths might look a bit hacky, but after digging around in the library a bunch I've convinced myself that it's the best and perhaps only way to accomplish this. Luckily, the message that's being serialized/deserialized is pretty opaque to the rest of the gRPC system, and it's controlled by the `SerializationTraits<T>` class. So you can take a gRPC stream reader and make it create any kind of type you want, even if the input data is a protocol buffer. \r\n   \r\n   Some things that won't be addressed in this patch, as scope is too large:\r\n   \r\n   * gRPC build toolchain issues (this is rather complex, I will create follow-up issues)\r\n   * Security / encryption, and authentication issues. I have only implemented an insecure server\r\n   * Integration with Travis CI\r\n   * Python bindings\r\n   \r\n   API is preliminary and I expect to be the subject of iteration to make general and fast over the next several months. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T20:49:58.339+0000",
                    "updated": "2018-09-11T20:49:58.339+0000",
                    "started": "2018-09-11T20:49:58.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143270",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216820623\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -269,6 +269,36 @@ ARROW_EXPORT\n Status WriteTensor(const Tensor& tensor, io::OutputStream* dst, int32_t* metadata_length,\n                    int64_t* body_length);\n \n+namespace internal {\n+\n+// These internal APIs may change without warning or deprecation\n+\n+// Intermediate data structure with metadata header plus zero or more buffers\n+// for the message body. This data can either be written out directly as an\n+// encapsulated IPC message or used with Flight RPCs\n+struct IpcPayload {\n+  Message::Type type;\n+  std::shared_ptr<Buffer> metadata;\n+  std::vector<std::shared_ptr<Buffer>> body_buffers;\n+  int64_t body_length;\n+};\n+\n+/// \\brief Extract IPC payloads from given schema for purposes of wire\n+/// transport, separate from using the *StreamWriter classes\n+ARROW_EXPORT\n+Status GetDictionaryPayloads(const Schema& schema,\n+                             std::vector<std::unique_ptr<IpcPayload>>* out);\n+\n+/// \\brief Compute IpcPayload for the given record batch\n+/// \\param[in] record_batch the RecordBatch that is being serialized\n+/// \\param[inout] pool for any required temporary memory allocations\n+/// \\param[out] out the returned IpcPayload\n+/// \\return Status\n+ARROW_EXPORT\n+Status GetRecordBatchPayload(const RecordBatch& batch, MemoryPool* pool, IpcPayload* out);\n \n Review comment:\n   We need this because the Flight protocol is slightly different from the IPC protocol\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:00:20.644+0000",
                    "updated": "2018-09-11T21:00:20.644+0000",
                    "started": "2018-09-11T21:00:20.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143271",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216819718\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -0,0 +1,345 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/server.h\"\n+\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <string>\n+\n+#include \"google/protobuf/io/coded_stream.h\"\n+#include \"google/protobuf/io/zero_copy_stream.h\"\n+#include \"google/protobuf/wire_format_lite.h\"\n+#include \"grpcpp/grpcpp.h\"\n+\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/flight/Flight.grpc.pb.h\"\n+#include \"arrow/flight/Flight.pb.h\"\n+#include \"arrow/flight/internal.h\"\n+#include \"arrow/flight/types.h\"\n+\n+using FlightService = arrow::flight::protocol::FlightService;\n+using ServerContext = grpc::ServerContext;\n+\n+using arrow::ipc::internal::IpcPayload;\n+\n+template <typename T>\n+using ServerWriter = grpc::ServerWriter<T>;\n+\n+namespace pb = arrow::flight::protocol;\n+\n+constexpr int64_t kInt32Max = std::numeric_limits<int32_t>::max();\n+\n+namespace grpc {\n+\n+using google::protobuf::internal::WireFormatLite;\n+using google::protobuf::io::CodedOutputStream;\n+\n+// More efficient writing of FlightData to gRPC output buffer\n+// Implementation of ZeroCopyOutputStream that writes to a fixed-size buffer\n+class FixedSizeProtoWriter : public ::google::protobuf::io::ZeroCopyOutputStream {\n+ public:\n+  explicit FixedSizeProtoWriter(grpc_slice slice)\n+      : slice_(slice),\n+        bytes_written_(0),\n+        total_size_(static_cast<int>(GRPC_SLICE_LENGTH(slice))) {}\n+\n+  bool Next(void** data, int* size) override {\n+    // Consume the whole slice\n+    *data = GRPC_SLICE_START_PTR(slice_) + bytes_written_;\n+    *size = total_size_ - bytes_written_;\n+    bytes_written_ = total_size_;\n+    return true;\n+  }\n+\n+  void BackUp(int count) override { bytes_written_ -= count; }\n+\n+  int64_t ByteCount() const override { return bytes_written_; }\n+\n+ private:\n+  grpc_slice slice_;\n+  int bytes_written_;\n+  int total_size_;\n+};\n+\n+// Write FlightData to a grpc::ByteBuffer without extra copying\n+template <>\n+class SerializationTraits<IpcPayload> {\n+ public:\n+  static grpc::Status Deserialize(ByteBuffer* buffer, IpcPayload* out) {\n+    return grpc::Status(grpc::StatusCode::UNIMPLEMENTED,\n+                        \"IpcPayload deserialization not implemented\");\n+  }\n+\n+  static grpc::Status Serialize(const IpcPayload& msg, ByteBuffer* out,\n+                                bool* own_buffer) {\n+    size_t total_size = 0;\n+\n+    DCHECK_LT(msg.metadata->size(), kInt32Max);\n+    const int32_t metadata_size = static_cast<int32_t>(msg.metadata->size());\n+\n+    // 1 byte for metadata tag\n+    total_size += 1 + WireFormatLite::LengthDelimitedSize(metadata_size);\n+\n+    int64_t body_size = 0;\n+    for (const auto& buffer : msg.body_buffers) {\n+      body_size += buffer->size();\n+\n+      // TODO(wesm): add padding bytes?\n+    }\n+\n+    // 2 bytes for body tag\n+    total_size += 2 + WireFormatLite::LengthDelimitedSize(static_cast<size_t>(body_size));\n+\n+    // TODO(wesm): messages over 2GB unlikely to be yet supported\n+    if (total_size > kInt32Max) {\n+      return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT,\n+                          \"Cannot send record batches exceeding 2GB yet\");\n+    }\n+\n+    // Allocate slice, assign to output buffer\n+    grpc::Slice slice(total_size);\n+\n+    FixedSizeProtoWriter writer(*reinterpret_cast<grpc_slice*>(&slice));\n+    CodedOutputStream pb_stream(&writer);\n+\n+    // Write header\n+    WireFormatLite::WriteTag(pb::FlightData::kDataHeaderFieldNumber,\n+                             WireFormatLite::WIRETYPE_LENGTH_DELIMITED, &pb_stream);\n+    pb_stream.WriteVarint32(metadata_size);\n+    pb_stream.WriteRawMaybeAliased(msg.metadata->data(),\n+                                   static_cast<int>(msg.metadata->size()));\n+\n+    // Write body\n+    WireFormatLite::WriteTag(pb::FlightData::kDataBodyFieldNumber,\n+                             WireFormatLite::WIRETYPE_LENGTH_DELIMITED, &pb_stream);\n+    pb_stream.WriteVarint32(static_cast<uint32_t>(body_size));\n+    for (const auto& buffer : msg.body_buffers) {\n+      pb_stream.WriteRawMaybeAliased(buffer->data(), static_cast<int>(buffer->size()));\n+\n+      // TODO(wesm): add padding bytes?\n+    }\n+\n+    DCHECK_EQ(static_cast<int>(total_size), pb_stream.ByteCount());\n+\n+    // Hand off the slice to the returned ByteBuffer\n+    grpc::ByteBuffer tmp(&slice, 1);\n+    out->Swap(&tmp);\n+    *own_buffer = true;\n+    return grpc::Status::OK;\n+  }\n+};\n+\n+}  // namespace grpc\n+\n+namespace arrow {\n+namespace flight {\n+\n+// This class glues an implementation of FlightServerBase together with the\n+// GRPC service definition, so the latter is not exposed in the public API\n+class FlightServiceImpl : public FlightService::Service {\n+ public:\n+  explicit FlightServiceImpl(FlightServerBase* server) : server_(server) {}\n+\n+  template <typename UserType, typename Iterator, typename ProtoType>\n+  grpc::Status WriteStream(Iterator* iterator, ServerWriter<ProtoType>* writer) {\n+    // Write flight info to stream until listing is exhausted\n+    ProtoType pb_value;\n+    std::unique_ptr<UserType> value;\n+    while (true) {\n+      GRPC_RETURN_NOT_OK(iterator->Next(&value));\n+      if (!value) {\n+        break;\n+      }\n+      GRPC_RETURN_NOT_OK(internal::ToProto(*value, &pb_value));\n+\n+      // Blocking write\n+      if (!writer->Write(pb_value)) {\n+        // Write returns false if the stream is closed\n+        break;\n+      }\n+    }\n+    return grpc::Status::OK;\n+  }\n+\n+  template <typename UserType, typename ProtoType>\n+  grpc::Status WriteStream(const std::vector<UserType>& values,\n+                           ServerWriter<ProtoType>* writer) {\n+    // Write flight info to stream until listing is exhausted\n+    ProtoType pb_value;\n+    for (const UserType& value : values) {\n+      GRPC_RETURN_NOT_OK(internal::ToProto(value, &pb_value));\n+      // Blocking write\n+      if (!writer->Write(pb_value)) {\n+        // Write returns false if the stream is closed\n+        break;\n+      }\n+    }\n+    return grpc::Status::OK;\n+  }\n+\n+  grpc::Status ListFlights(ServerContext* context, const pb::Criteria* request,\n+                           ServerWriter<pb::FlightGetInfo>* writer) {\n+    // Retrieve the listing from the implementation\n+    std::unique_ptr<FlightListing> listing;\n+\n+    Criteria criteria;\n+    if (request) {\n+      GRPC_RETURN_NOT_OK(internal::FromProto(*request, &criteria));\n+    }\n+    GRPC_RETURN_NOT_OK(server_->ListFlights(&criteria, &listing));\n+    return WriteStream<FlightInfo>(listing.get(), writer);\n+  }\n+\n+  grpc::Status GetFlightInfo(ServerContext* context, const pb::FlightDescriptor* request,\n+                             pb::FlightGetInfo* response) {\n+    FlightDescriptor descr;\n+    GRPC_RETURN_NOT_OK(internal::FromProto(*request, &descr));\n+\n+    std::unique_ptr<FlightInfo> info;\n+    GRPC_RETURN_NOT_OK(server_->GetFlightInfo(descr, &info));\n+\n+    GRPC_RETURN_NOT_OK(internal::ToProto(*info, response));\n+    return grpc::Status::OK;\n+  }\n+\n+  grpc::Status DoGet(ServerContext* context, const pb::Ticket* request,\n+                     ServerWriter<pb::FlightData>* writer) {\n+    if (request == nullptr) {\n+      return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT, \"Ticket cannot be null\");\n+    }\n+\n+    Ticket ticket;\n+    GRPC_RETURN_NOT_OK(internal::FromProto(*request, &ticket));\n+\n+    std::unique_ptr<FlightPayloadProvider> message_provider;\n+    GRPC_RETURN_NOT_OK(server_->DoGet(ticket, &message_provider));\n+\n+    // Requires ServerWriter customization in grpc_customizations.h\n+    auto custom_writer = reinterpret_cast<ServerWriter<IpcPayload>*>(writer);\n \n Review comment:\n   Cast to invoke custom serialize path\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:00:20.647+0000",
                    "updated": "2018-09-11T21:00:20.647+0000",
                    "started": "2018-09-11T21:00:20.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143272",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216818885\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -0,0 +1,389 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client.h\"\n+\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <utility>\n+\n+#include \"google/protobuf/io/coded_stream.h\"\n+#include \"google/protobuf/wire_format_lite.h\"\n+#include \"grpc/byte_buffer_reader.h\"\n+#include \"grpcpp/grpcpp.h\"\n+\n+#include \"arrow/ipc/reader.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/flight/Flight.grpc.pb.h\"\n+#include \"arrow/flight/Flight.pb.h\"\n+#include \"arrow/flight/internal.h\"\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+\n+/// Internal, not user-visible type used for memory-efficient reads from gRPC\n+/// stream\n+struct FlightData {\n+  /// Used only for puts, may be null\n+  std::unique_ptr<FlightDescriptor> descriptor;\n+\n+  /// Non-length-prefixed Message header as described in format/Message.fbs\n+  std::shared_ptr<Buffer> metadata;\n+\n+  /// Message body\n+  std::shared_ptr<Buffer> body;\n+};\n+\n+}  // namespace flight\n+}  // namespace arrow\n+\n+namespace grpc {\n+\n+// Customizations to gRPC for more efficient deserialization of FlightData\n+\n+using google::protobuf::internal::WireFormatLite;\n+using google::protobuf::io::CodedInputStream;\n+\n+using arrow::flight::FlightData;\n+\n+bool ReadBytesZeroCopy(const std::shared_ptr<arrow::Buffer>& source_data,\n+                       CodedInputStream* input, std::shared_ptr<arrow::Buffer>* out) {\n+  uint32_t length;\n+  if (!input->ReadVarint32(&length)) {\n+    return false;\n+  }\n+  *out = arrow::SliceBuffer(source_data, input->CurrentPosition(),\n+                            static_cast<int64_t>(length));\n+  return input->Skip(static_cast<int>(length));\n+}\n+\n+// Internal wrapper for gRPC ByteBuffer so its memory can be exposed to Arrow\n+// consumers with zero-copy\n+class GrpcBuffer : public arrow::MutableBuffer {\n+ public:\n+  GrpcBuffer(grpc_slice slice, bool incref)\n+      : MutableBuffer(GRPC_SLICE_START_PTR(slice),\n+                      static_cast<int64_t>(GRPC_SLICE_LENGTH(slice))),\n+        slice_(incref ? grpc_slice_ref(slice) : slice) {}\n+\n+  ~GrpcBuffer() override {\n+    // Decref slice\n+    grpc_slice_unref(slice_);\n+  }\n+\n+  static arrow::Status Wrap(ByteBuffer* cpp_buf, std::shared_ptr<arrow::Buffer>* out) {\n+    // These types are guaranteed by static assertions in gRPC to have the same\n+    // in-memory representation\n+\n+    auto buffer = *reinterpret_cast<grpc_byte_buffer**>(cpp_buf);\n+\n+    // Check if this is a single uncompressed slice.\n+    if ((buffer->type == GRPC_BB_RAW) &&\n+        (buffer->data.raw.compression == GRPC_COMPRESS_NONE) &&\n+        (buffer->data.raw.slice_buffer.count == 1)) {\n+      // If it is, then we can reference the `grpc_slice` directly.\n+      grpc_slice slice = buffer->data.raw.slice_buffer.slices[0];\n+\n+      // Increment reference count so this memory remains valid\n+      *out = std::make_shared<GrpcBuffer>(slice, true);\n+    } else {\n+      // Otherwise, we need to use `grpc_byte_buffer_reader_readall` to read\n+      // `buffer` into a single contiguous `grpc_slice`. The gRPC reader gives\n+      // us back a new slice with the refcount already incremented.\n+      grpc_byte_buffer_reader reader;\n+      if (!grpc_byte_buffer_reader_init(&reader, buffer)) {\n+        return arrow::Status::IOError(\"Internal gRPC error reading from ByteBuffer\");\n+      }\n+      grpc_slice slice = grpc_byte_buffer_reader_readall(&reader);\n+      grpc_byte_buffer_reader_destroy(&reader);\n+\n+      // Steal the slice reference\n+      *out = std::make_shared<GrpcBuffer>(slice, false);\n+    }\n+\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  grpc_slice slice_;\n+};\n+\n+// Read internal::FlightData from grpc::ByteBuffer containing FlightData\n+// protobuf without copying\n+template <>\n+class SerializationTraits<FlightData> {\n+ public:\n+  static Status Serialize(const FlightData& msg, ByteBuffer** buffer, bool* own_buffer) {\n+    return Status(StatusCode::UNIMPLEMENTED,\n+                  \"internal::FlightData serialization not implemented\");\n+  }\n+\n+  static Status Deserialize(ByteBuffer* buffer, FlightData* out) {\n+    if (!buffer) {\n+      return Status(StatusCode::INTERNAL, \"No payload\");\n+    }\n+\n+    std::shared_ptr<arrow::Buffer> wrapped_buffer;\n+    GRPC_RETURN_NOT_OK(GrpcBuffer::Wrap(buffer, &wrapped_buffer));\n+\n+    auto buffer_length = static_cast<int>(wrapped_buffer->size());\n+    CodedInputStream pb_stream(wrapped_buffer->data(), buffer_length);\n+\n+    // TODO(wesm): The 2-parameter version of this function is deprecated\n+    pb_stream.SetTotalBytesLimit(buffer_length, -1 /* no threshold */);\n+\n+    // This is the bytes remaining when using CodedInputStream like this\n+    while (pb_stream.BytesUntilTotalBytesLimit()) {\n+      const uint32_t tag = pb_stream.ReadTag();\n+      const int field_number = WireFormatLite::GetTagFieldNumber(tag);\n+      switch (field_number) {\n+        case pb::FlightData::kFlightDescriptorFieldNumber: {\n+          pb::FlightDescriptor pb_descriptor;\n+          if (!pb_descriptor.ParseFromCodedStream(&pb_stream)) {\n+            return Status(StatusCode::INTERNAL, \"Unable to parse FlightDescriptor\");\n+          }\n+        } break;\n+        case pb::FlightData::kDataHeaderFieldNumber: {\n+          if (!ReadBytesZeroCopy(wrapped_buffer, &pb_stream, &out->metadata)) {\n+            return Status(StatusCode::INTERNAL, \"Unable to read FlightData metadata\");\n+          }\n+        } break;\n+        case pb::FlightData::kDataBodyFieldNumber: {\n+          if (!ReadBytesZeroCopy(wrapped_buffer, &pb_stream, &out->body)) {\n+            return Status(StatusCode::INTERNAL, \"Unable to read FlightData body\");\n+          }\n+        } break;\n+        default:\n+          DCHECK(false) << \"cannot happen\";\n+      }\n+    }\n+    buffer->Clear();\n+\n+    // TODO(wesm): Where and when should we verify that the FlightData is not\n+    // malformed or missing components?\n+\n+    return Status::OK;\n+  }\n+};\n+\n+}  // namespace grpc\n+\n+namespace arrow {\n+namespace flight {\n+\n+struct ClientRpc {\n+  grpc::ClientContext context;\n+\n+  ClientRpc() {\n+    /// XXX workaround until we have a handshake in Connect\n+    context.set_wait_for_ready(true);\n+  }\n+};\n+\n+class FlightStreamReader : public RecordBatchReader {\n+ public:\n+  FlightStreamReader(std::unique_ptr<ClientRpc> rpc,\n+                     const std::shared_ptr<Schema>& schema,\n+                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n+      : rpc_(std::move(rpc)),\n+        stream_finished_(false),\n+        schema_(schema),\n+        stream_(std::move(stream)) {}\n+\n+  std::shared_ptr<Schema> schema() const override { return schema_; }\n+\n+  Status ReadNext(std::shared_ptr<RecordBatch>* out) override {\n+    FlightData data;\n+\n+    if (stream_finished_) {\n+      *out = nullptr;\n+      return Status::OK();\n+    }\n+\n+    // For customizing read path for better memory/serialization efficiency\n+    auto custom_reader = reinterpret_cast<grpc::ClientReader<FlightData>*>(stream_.get());\n \n Review comment:\n   Here is where I cast the gRPC stream reader so that it calls our custom deserializer to avoid memory copies\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:00:20.677+0000",
                    "updated": "2018-09-11T21:00:20.677+0000",
                    "started": "2018-09-11T21:00:20.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143273",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216820413\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.h\n ##########\n @@ -269,6 +269,36 @@ ARROW_EXPORT\n Status WriteTensor(const Tensor& tensor, io::OutputStream* dst, int32_t* metadata_length,\n                    int64_t* body_length);\n \n+namespace internal {\n+\n+// These internal APIs may change without warning or deprecation\n+\n+// Intermediate data structure with metadata header plus zero or more buffers\n+// for the message body. This data can either be written out directly as an\n+// encapsulated IPC message or used with Flight RPCs\n+struct IpcPayload {\n \n Review comment:\n   This is for ARROW-1860\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:00:20.680+0000",
                    "updated": "2018-09-11T21:00:20.680+0000",
                    "started": "2018-09-11T21:00:20.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143274",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216818278\n \n \n\n ##########\n File path: cpp/src/arrow/dbi/hiveserver2/thrift/CMakeLists.txt\n ##########\n @@ -44,10 +44,11 @@ function(HS2_THRIFT_GEN VAR)\n     # All the output files we can determine based on filename.\n     #   - Does not include .skeleton.cpp files\n     #   - Does not include java output files\n-    set(OUTPUT_BE_FILE \"${GEN_DIR}/${FIL_WE}_types.cpp\")\n-    set(OUTPUT_BE_FILE ${OUTPUT_BE_FILE} \" ${GEN_DIR}/${FIL_WE}_types.h\")\n-    set(OUTPUT_BE_FILE ${OUTPUT_BE_FILE} \" ${GEN_DIR}/${FIL_WE}_constants.cpp\")\n-    set(OUTPUT_BE_FILE ${OUTPUT_BE_FILE} \" ${GEN_DIR}/${FIL_WE}_constants.h\")\n+    set(OUTPUT_BE_FILE\n+      \"${GEN_DIR}/${FIL_WE}_types.cpp\"\n+      \"${GEN_DIR}/${FIL_WE}_types.h\"\n+      \"${GEN_DIR}/${FIL_WE}_constants.cpp\"\n+      \"${GEN_DIR}/${FIL_WE}_constants.h\")\n \n Review comment:\n   This is the fix for ARROW-3145\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:00:20.689+0000",
                    "updated": "2018-09-11T21:00:20.689+0000",
                    "started": "2018-09-11T21:00:20.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143275",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216822312\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-util.h\n ##########\n @@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <boost/process.hpp>\n+\n+#include \"arrow/ipc/test-common.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+\n+#include \"arrow/flight/api.h\"\n+#include \"arrow/flight/internal.h\"\n+\n+namespace bp = boost::process;\n \n Review comment:\n   I think boost::process is header-only. I have this here as otherwise it's going to be difficult to deal with process spin-up-spin-down on Windows. So having it as a test dependency is probably ok\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:05:29.596+0000",
                    "updated": "2018-09-11T21:05:29.596+0000",
                    "started": "2018-09-11T21:05:29.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143276",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/143277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r216822455\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test-util.h\n ##########\n @@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <boost/process.hpp>\n+\n+#include \"arrow/ipc/test-common.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+\n+#include \"arrow/flight/api.h\"\n+#include \"arrow/flight/internal.h\"\n+\n+namespace bp = boost::process;\n+\n+namespace arrow {\n+namespace flight {\n+\n+// ----------------------------------------------------------------------\n+// Fixture to use for running test servers\n+\n+struct TestServer {\n+ public:\n+  explicit TestServer(int port) : port_(port) {}\n+\n+  void Start() {\n+    std::string str_port = std::to_string(port_);\n+    server_process_.reset(\n+        new bp::child(bp::search_path(\"flight-test-server\"), \"-port\", str_port));\n \n Review comment:\n   I wasn't really sure how to \"discover\" the test server, even if it's in the same directory as the test executable\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-11T21:06:10.920+0000",
                    "updated": "2018-09-11T21:06:10.920+0000",
                    "started": "2018-09-11T21:06:10.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143277",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/144373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-421436004\n \n \n   I'm going to spend about another full day on this to get things into merge-ready shape, and run some simple performance benchmarks. Can someone have a glance at the public API and see if anything looks weird or confusing so we can merge this soon? There is a ton of follow up work to do, and many aspects of this should be regarded as preliminary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-14T17:53:25.722+0000",
                    "updated": "2018-09-14T17:53:25.722+0000",
                    "started": "2018-09-14T17:53:25.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144373",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/144706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-421871701\n \n \n   OK, I have some initial perf numbers (they are really good). I want to implement the DoAction RPC before merging this, so I'll do that and let you know when I'm done with the patch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T01:54:24.055+0000",
                    "updated": "2018-09-17T01:54:24.055+0000",
                    "started": "2018-09-17T01:54:24.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144706",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/144708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-421875971\n \n \n   Barring bugs I seem to be pushing about ~3.5 gigabytes/second on localhost with a single thread -- this is without touching any default gRPC settings so I don't know what tuning options are available:\r\n   \r\n   ```\r\n   $ PATH=release:$PATH release/flight-benchmark -num_threads 1 -num_streams 10 -records_per_batch 4096\r\n   Server running with pid 22098\r\n   Server listening on localhost:31337\r\n   Bytes read: 3200000000\r\n   Nanos: 869852908\r\n   Speed: 3508.36 MB/s\r\n   ```\r\n   \r\n   This is sending ~32 gigabytes from the perf server to the benchmark client in a little over 8 seconds. \r\n   \r\n   Take a look at the FlameGraph (I think this also captures the child benchmark server):\r\n   \r\n   https://www.dropbox.com/s/kkibfs9froh0mt3/flight-perf-20180916-1.svg?dl=0\r\n   \r\n   It appears that gRPC's TCP / HTTP2 machinery dominates the runtime, which is what we want. \r\n   \r\n   * A tiny fraction (< 5%) is spent in \"deserialization\" / IPC reconstuction\r\n   * About 10% of time is spend copying memory onto the outgoing gRPC buffer\r\n   * gRPC reads account for ~37% of runtime\r\n   * gRPC sends account for 25% of runtime\r\n   \r\n   All and all looks pretty good to me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T02:24:59.942+0000",
                    "updated": "2018-09-17T02:24:59.942+0000",
                    "started": "2018-09-17T02:24:59.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144708",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/144710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on issue #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-421875971\n \n \n   Barring bugs I seem to be pushing about ~3.5 gigabytes/second on localhost with a single thread -- this is without touching any default gRPC settings so I don't know what tuning options are available:\r\n   \r\n   ```\r\n   $ PATH=release:$PATH release/flight-benchmark -num_threads 1 -num_streams 10 -records_per_batch 4096\r\n   Server running with pid 22098\r\n   Server listening on localhost:31337\r\n   Bytes read: 3200000000\r\n   Nanos: 869852908\r\n   Speed: 3508.36 MB/s\r\n   ```\r\n   \r\n   This is sending ~3.2 gigabytes from the perf server to the benchmark client in a little under a second. \r\n   \r\n   Take a look at the FlameGraph (I think this also captures the child benchmark server):\r\n   \r\n   https://www.dropbox.com/s/kkibfs9froh0mt3/flight-perf-20180916-1.svg?dl=0\r\n   \r\n   It appears that gRPC's TCP / HTTP2 machinery dominates the runtime, which is what we want. \r\n   \r\n   * A tiny fraction (< 5%) is spent in \"deserialization\" / IPC reconstuction\r\n   * About 10% of time is spend copying memory onto the outgoing gRPC buffer\r\n   * gRPC reads account for ~37% of runtime\r\n   * gRPC sends account for 25% of runtime\r\n   \r\n   All and all looks pretty good to me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T02:30:51.969+0000",
                    "updated": "2018-09-17T02:30:51.969+0000",
                    "started": "2018-09-17T02:30:51.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144710",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/144856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: WIP ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422039159\n \n \n   Somehow I broke the integration tests with the IPC refactoring. Looking into it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T14:27:47.419+0000",
                    "updated": "2018-09-17T14:27:47.419+0000",
                    "started": "2018-09-17T14:27:47.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144856",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422189290\n \n \n   I removed the WIP and not going to do much more owrk here. I'm going to get the CI build passing and then would like to merge this soon. \r\n   \r\n   I know the patch is large and there's a lot of foreign details -- I had to spend quite a bit of time learning about GRPC internals. I'd prefer to not have this sit for very long (until the end of this week, at the latest) -- if there is feedback that comes in after merge I will create follow up JIRAs to track\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T22:13:56.306+0000",
                    "updated": "2018-09-17T22:13:56.306+0000",
                    "started": "2018-09-17T22:13:56.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145089",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422502684\n \n \n   @kou could you review some of this when you have a chance? I want to make sure that high quality RPC interfaces can be shipped for GLib and Ruby users. Thank you!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T18:39:44.803+0000",
                    "updated": "2018-09-18T18:39:44.803+0000",
                    "started": "2018-09-18T18:39:44.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145426",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422555298\n \n \n   Build seems to be working again =)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T21:07:45.862+0000",
                    "updated": "2018-09-18T21:07:45.862+0000",
                    "started": "2018-09-18T21:07:45.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145476",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422567785\n \n \n   The manylinux1 build is timing out but I don't think it's caused by this patch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T21:47:15.159+0000",
                    "updated": "2018-09-18T21:47:15.159+0000",
                    "started": "2018-09-18T21:47:15.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145492",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#issuecomment-422625855\n \n \n   @wesm Sure. I will be able to do in this week.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T02:23:53.995+0000",
                    "updated": "2018-09-19T02:23:53.995+0000",
                    "started": "2018-09-19T02:23:53.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145549",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r218652569\n \n \n\n ##########\n File path: cpp/src/arrow/flight/CMakeLists.txt\n ##########\n @@ -0,0 +1,139 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight)\n+\n+# Header files\n+install(FILES\n+  api.h\n+  client.h\n+  server.h\n+  types.h\n+  DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/arrow/flight\")\n+\n+SET(ARROW_FLIGHT_STATIC_LINK_LIBS\n+  grpc_grpcpp\n+  grpc_grpc\n+  grpc_gpr\n+  grpc_address_sorting\n+  cares)\n+\n+# TODO(wesm): Protobuf shared vs static linking\n+\n+set(FLIGHT_PROTO_PATH \"${CMAKE_SOURCE_DIR}/../format\")\n+set(FLIGHT_PROTO ${CMAKE_SOURCE_DIR}/../format/Flight.proto)\n+\n+set(FLIGHT_GENERATED_PROTO_FILES\n+  \"${CMAKE_CURRENT_BINARY_DIR}/Flight.pb.cc\"\n+  \"${CMAKE_CURRENT_BINARY_DIR}/Flight.pb.h\"\n+  \"${CMAKE_CURRENT_BINARY_DIR}/Flight.grpc.pb.cc\"\n+  \"${CMAKE_CURRENT_BINARY_DIR}/Flight.grpc.pb.h\")\n+\n+if(PROTOBUF_VENDORED)\n+  set(PROTO_DEPENDS ${FLIGHT_PROTO} protobuf_ep)\n+else()\n+  set(PROTO_DEPENDS ${FLIGHT_PROTO})\n+endif()\n \n Review comment:\n   Can we use `set(PROTO_DEPENDS ${FLIGHT_PROTO} protobuf)` here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T07:08:04.228+0000",
                    "updated": "2018-09-19T07:08:04.228+0000",
                    "started": "2018-09-19T07:08:04.227+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145578",
                    "issueId": "13182044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/worklog/145579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2547: ARROW-3146: [C++] Prototype Flight RPC client and server implementations\nURL: https://github.com/apache/arrow/pull/2547#discussion_r218677758\n \n \n\n ##########\n File path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n ##########\n @@ -41,6 +41,9 @@ if (NOT \"$ENV{ARROW_BUILD_TOOLCHAIN}\" STREQUAL \"\")\n   set(ZLIB_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(ZSTD_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n \n+  set(PROTOBUF_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n+  set(GRPC_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n \n Review comment:\n   This is duplicated.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T07:08:04.239+0000",
                    "updated": "2018-09-19T07:08:04.239+0000",
                    "started": "2018-09-19T07:08:04.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145579",
                    "issueId": "13182044"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23bc0556[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46a51474[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@258d9225[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4b652454[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39a8742d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1a3b8640[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@536e2398[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@31cbea25[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bb8e92d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@d777f9c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f27ef49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4153b24a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 20 20:57:28 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-20T20:57:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3146/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-30T05:08:41.000+0000",
        "updated": "2018-09-30T19:45:12.000+0000",
        "timeoriginalestimate": null,
        "description": "Unsecure transport only (SSL support will require a fair bit of toolchain work)\r\n\r\nDepends on ARROW-249",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Barebones Flight RPC server and client implementations",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182044/comment/16622708",
                    "id": "16622708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2547\n[https://github.com/apache/arrow/pull/2547]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-20T20:57:28.995+0000",
                    "updated": "2018-09-20T20:57:28.995+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xkqv:",
        "customfield_12314139": null
    }
}