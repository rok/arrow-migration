{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382474",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474",
    "key": "ARROW-12986",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12986/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/607838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes opened a new pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465\n\n\n   Actually, the eviction policy algorithm used by Gandiva's cache is based on LRU.\r\n   \r\n   I suggest to add a new option of eviction algorithm to use that considers the LLVM build time as a cost, and evicts the elements based on the GrredyDual-Size algorithm.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T12:52:19.587+0000",
                    "updated": "2021-06-07T12:52:19.587+0000",
                    "started": "2021-06-07T12:52:19.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607838",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/613947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r656962320\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache_test.cc\n##########\n@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/greedy_dual_size_cache.h\"\n+\n+#include <string>\n+#include <typeinfo>\n+\n+#include <gtest/gtest.h>\n+\n+namespace gandiva {\n+\n+class GreedyDualSizeCacheKey {\n+ public:\n+  explicit GreedyDualSizeCacheKey(int tmp) : tmp_(tmp) {}\n+  std::size_t Hash() const { return tmp_; }\n+  bool operator==(const GreedyDualSizeCacheKey& other) const {\n+    return tmp_ == other.tmp_;\n+  }\n+\n+ private:\n+  int tmp_;\n+};\n+\n+class TestGreedyDualSizeCache : public ::testing::Test {\n+ public:\n+  TestGreedyDualSizeCache() : cache_(2) {}\n+\n+ protected:\n+  GreedyDualSizeCache<GreedyDualSizeCacheKey, std::string> cache_;\n+};\n+\n+TEST_F(TestGreedyDualSizeCache, TestEvict) {\n+  // check if the cache is evicting the items with low priority on cache\n+  cache_.insert(GreedyDualSizeCacheKey(1), ValueCacheObject<std::string>(\"bye\", 1));\n\nReview comment:\n       Please consider making variations to the cache entry strings so that it can be effectively evaluated whether the item has been cached and not. Inserting the same string always has no way of guaranteeing which object is actually inserted and whether the cache behaved as it should.\n\n##########\nFile path: cpp/src/gandiva/lru_cache_test.cc\n##########\n@@ -40,25 +40,25 @@ class TestLruCache : public ::testing::Test {\n   TestLruCache() : cache_(2) {}\n \n  protected:\n-  LruCache<TestCacheKey, std::string> cache_;\n+  LruCache<TestLruCacheKey, std::string> cache_;\n };\n \n TEST_F(TestLruCache, TestEvict) {\n-  cache_.insert(TestCacheKey(1), \"hello\");\n-  cache_.insert(TestCacheKey(2), \"hello\");\n-  cache_.insert(TestCacheKey(1), \"hello\");\n-  cache_.insert(TestCacheKey(3), \"hello\");\n+  cache_.insert(TestLruCacheKey(1), ValueCacheObject<std::string>(\"hello\", 0));\n+  cache_.insert(TestLruCacheKey(2), ValueCacheObject<std::string>(\"hello\", 0));\n+  cache_.insert(TestLruCacheKey(1), ValueCacheObject<std::string>(\"hello\", 0));\n+  cache_.insert(TestLruCacheKey(3), ValueCacheObject<std::string>(\"hello\", 0));\n   // should have evicted key 1\n   ASSERT_EQ(2, cache_.size());\n-  ASSERT_EQ(cache_.get(TestCacheKey(1)), arrow::util::nullopt);\n+  ASSERT_EQ(cache_.get(TestLruCacheKey(1)), arrow::util::nullopt);\n }\n \n TEST_F(TestLruCache, TestLruBehavior) {\n-  cache_.insert(TestCacheKey(1), \"hello\");\n-  cache_.insert(TestCacheKey(2), \"hello\");\n-  cache_.get(TestCacheKey(1));\n-  cache_.insert(TestCacheKey(3), \"hello\");\n+  cache_.insert(TestLruCacheKey(1), ValueCacheObject<std::string>(\"hello\", 0));\n\nReview comment:\n       Here is the same consideration of varying the string to be inserted into the cache.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-23T10:27:47.529+0000",
                    "updated": "2021-06-23T10:27:47.529+0000",
                    "started": "2021-06-23T10:27:47.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613947",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/614886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r658544921\n\n\n\n##########\nFile path: cpp/src/gandiva/base_cache.h\n##########\n@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+namespace gandiva {\n+\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// A base cache class which defines the main methods that should be implemented\n+// to expose a different cache with different policies.\n+template <class Key, class Value>\n+class BaseCache {\n\nReview comment:\n       Lets remove the original lru cache since we are no longer using. And no need to use base class then\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-25T07:45:44.462+0000",
                    "updated": "2021-06-25T07:45:44.462+0000",
                    "started": "2021-06-25T07:45:44.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "614886",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r667536039\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// a particular LRU based cache which evicts the least recently used item\n+// considering the different costs for each entry.\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return this->actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : cache_capacity_(capacity) {\n+    this->inflation_cost_ = 0;\n\nReview comment:\n       better put it in the initializer list\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// a particular LRU based cache which evicts the least recently used item\n+// considering the different costs for each entry.\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return this->actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : cache_capacity_(capacity) {\n+    this->inflation_cost_ = 0;\n+  }\n+\n+  GreedyDualSizeCache<Key, Value>() : cache_capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return this->cache_capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= this->cache_capacity_) {\n\nReview comment:\n       nit: lets not use the \"this\" pointer here and elsewhere unless needed to prevent ambiguity\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// a particular LRU based cache which evicts the least recently used item\n+// considering the different costs for each entry.\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return this->actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : cache_capacity_(capacity) {\n+    this->inflation_cost_ = 0;\n+  }\n+\n+  GreedyDualSizeCache<Key, Value>() : cache_capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return this->cache_capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= this->cache_capacity_) {\n+        evict();\n+      }\n+\n+      // insert the new item\n+      auto iter = this->priority_set_.insert(\n+          PriorityItem(value.cost + this->inflation_cost_, value.cost, key));\n+      // save on map the value and the priority item iterator position\n+      map_[key] = std::make_pair(value, iter.first);\n+    }\n+  }\n+\n+  arrow::util::optional<ValueCacheObject<Value>> get(const Key& key) {\n+    // lookup value in the cache\n+    typename map_type::iterator value_for_key = map_.find(key);\n+    if (value_for_key == map_.end()) {\n+      // value not in cache\n+      return arrow::util::nullopt;\n+    }\n+    PriorityItem item = *value_for_key->second.second;\n+    // if the value was found on the cache, update its cost (original + inflation)\n+    if (item.actual_priority != item.original_priority + this->inflation_cost_) {\n+      priority_set_.erase(value_for_key->second.second);\n+      auto iter = priority_set_.insert(\n+          PriorityItem(item.original_priority + this->inflation_cost_,\n+                       item.original_priority, item.cache_key));\n+      value_for_key->second.second = iter.first;\n+    }\n+    return value_for_key->second.first;\n+  }\n+\n+  void clear() {\n+    map_.clear();\n+    priority_set_.clear();\n+  }\n+\n+ private:\n+  void evict() {\n+    // evict item from the beginning of the set. This set is ordered from the\n+    // lower priority value to the higher priority value.\n+    typename std::set<PriorityItem>::iterator i = priority_set_.begin();\n+    // update the inflation cost related to the evicted item\n+    this->inflation_cost_ = (*i).actual_priority;\n+    map_.erase((*i).cache_key);\n+    priority_set_.erase(i);\n+  }\n+\n+ private:\n\nReview comment:\n       private specifier not required here\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// a particular LRU based cache which evicts the least recently used item\n+// considering the different costs for each entry.\n\nReview comment:\n       Can you also add comment detailing how the algorithm works? Also include that in the PR description.\n\n##########\nFile path: cpp/src/gandiva/projector.cc\n##########\n@@ -186,7 +192,10 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n   // Instantiate the projector with the completely built llvm generator\n   *projector = std::shared_ptr<Projector>(\n       new Projector(std::move(llvm_gen), schema, output_fields, configuration));\n-  cache.PutModule(cache_key, *projector);\n+  ValueCacheObject<std::shared_ptr<Projector>> value_cache =\n+      *std::make_unique<ValueCacheObject<std::shared_ptr<Projector>>>(*projector,\n\nReview comment:\n       This is not correct. You are creating a temporary shared pointer and then immediately dereferencing it, which will lead to destructor getting called after the statement.\r\n   And why the need to unnecessarily create a temporary shared pointer? just do normal stack initialization.\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n\nReview comment:\n       explicit is only required for a single argument constructor.\r\n   The below default constructor is also not required\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,150 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  explicit ValueCacheObject(ValueType module, uint64_t cost)\n+      : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return this->cost < other.cost; }\n+};\n+\n+// a particular LRU based cache which evicts the least recently used item\n+// considering the different costs for each entry.\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return this->actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : cache_capacity_(capacity) {\n+    this->inflation_cost_ = 0;\n+  }\n+\n+  GreedyDualSizeCache<Key, Value>() : cache_capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return this->cache_capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= this->cache_capacity_) {\n+        evict();\n+      }\n+\n+      // insert the new item\n+      auto iter = this->priority_set_.insert(\n+          PriorityItem(value.cost + this->inflation_cost_, value.cost, key));\n+      // save on map the value and the priority item iterator position\n+      map_[key] = std::make_pair(value, iter.first);\n+    }\n+  }\n+\n+  arrow::util::optional<ValueCacheObject<Value>> get(const Key& key) {\n+    // lookup value in the cache\n+    typename map_type::iterator value_for_key = map_.find(key);\n+    if (value_for_key == map_.end()) {\n+      // value not in cache\n+      return arrow::util::nullopt;\n+    }\n+    PriorityItem item = *value_for_key->second.second;\n+    // if the value was found on the cache, update its cost (original + inflation)\n+    if (item.actual_priority != item.original_priority + this->inflation_cost_) {\n+      priority_set_.erase(value_for_key->second.second);\n+      auto iter = priority_set_.insert(\n+          PriorityItem(item.original_priority + this->inflation_cost_,\n+                       item.original_priority, item.cache_key));\n+      value_for_key->second.second = iter.first;\n+    }\n+    return value_for_key->second.first;\n+  }\n+\n+  void clear() {\n+    map_.clear();\n+    priority_set_.clear();\n+  }\n+\n+ private:\n+  void evict() {\n+    // evict item from the beginning of the set. This set is ordered from the\n+    // lower priority value to the higher priority value.\n+    typename std::set<PriorityItem>::iterator i = priority_set_.begin();\n+    // update the inflation cost related to the evicted item\n+    this->inflation_cost_ = (*i).actual_priority;\n+    map_.erase((*i).cache_key);\n+    priority_set_.erase(i);\n+  }\n+\n+ private:\n+  map_type map_;\n+  std::set<PriorityItem> priority_set_;\n+  int64_t inflation_cost_;\n\nReview comment:\n       uint64_t? (same as priority cost)\r\n   Also since the inflation_cost is always increasing, is there a possibility of overflow?\n\n##########\nFile path: cpp/src/gandiva/cache.h\n##########\n@@ -34,26 +35,29 @@ void LogCacheSize(size_t capacity);\n template <class KeyType, typename ValueType>\n class Cache {\n  public:\n-  explicit Cache(size_t capacity) : cache_(capacity) { LogCacheSize(capacity); }\n+  explicit Cache(size_t capacity) {\n+    this->cache_ = std::make_unique<GreedyDualSizeCache<KeyType, ValueType>>(capacity);\n+    LogCacheSize(capacity);\n+  }\n \n   Cache() : Cache(GetCapacity()) {}\n \n   ValueType GetModule(KeyType cache_key) {\n-    arrow::util::optional<ValueType> result;\n+    arrow::util::optional<ValueCacheObject<ValueType>> result;\n     mtx_.lock();\n-    result = cache_.get(cache_key);\n+    result = (*cache_).get(cache_key);\n     mtx_.unlock();\n-    return result != arrow::util::nullopt ? *result : nullptr;\n+    return result != arrow::util::nullopt ? (*result).module : nullptr;\n   }\n \n-  void PutModule(KeyType cache_key, ValueType module) {\n+  void PutModule(KeyType cache_key, ValueCacheObject<ValueType> valueCacheObject) {\n     mtx_.lock();\n-    cache_.insert(cache_key, module);\n+    (*cache_).insert(cache_key, valueCacheObject);\n     mtx_.unlock();\n   }\n \n  private:\n-  LruCache<KeyType, ValueType> cache_;\n+  std::unique_ptr<GreedyDualSizeCache<KeyType, ValueType>> cache_;\n\nReview comment:\n       why not just keep the object instead of pointer like in earlier code?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T06:59:37.781+0000",
                    "updated": "2021-07-12T06:59:37.781+0000",
                    "started": "2021-07-12T06:59:37.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621469",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668062139\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n\nReview comment:\n       This is not required\n\n##########\nFile path: cpp/src/gandiva/projector.cc\n##########\n@@ -186,7 +192,9 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n   // Instantiate the projector with the completely built llvm generator\n   *projector = std::shared_ptr<Projector>(\n       new Projector(std::move(llvm_gen), schema, output_fields, configuration));\n-  cache.PutModule(cache_key, *projector);\n+  ValueCacheObject<std::shared_ptr<Projector>> value_cache =\n\nReview comment:\n       Write it as:\r\n   ```\r\n   ValueCacheObject<std::shared_ptr<Projector>> value_cache(*projector, elapsed);\r\n   ```\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return cost < other.cost; }\n+};\n+\n+// A particular cache based on the GreedyDual-Size cache which is a generalization of LRU\n+// which defines costs for each cache values.\n+// The algorithm associates a cost, C, with each cache value. Initially, when the value\n+// is brought into cache, C is set to be the cost related to the value (the cost is\n+// always non-negative). When a replacement needs to be made, the value with the lowest C\n+// cost is replaced, and then all values reduce their C costs by the minimum value of C\n+// over all the values already in the cache.\n+// If a value is accessed, its C value is restored to its initial cost. Thus, the C costs\n+// of recently accessed values retain a larger portion of the original cost than those of\n+// values that have not been accessed for a long time. The C costs are reduced as time\n+// goes and are restored when accessed.\n+\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : inflation_(0), capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= capacity_) {\n+        evict();\n+      }\n+\n+      // insert the new item\n+      auto iter =\n+          priority_set_.insert(PriorityItem(value.cost + inflation_, value.cost, key));\n+      // save on map the value and the priority item iterator position\n+      map_[key] = std::make_pair(value, iter.first);\n+    }\n+  }\n+\n+  arrow::util::optional<ValueCacheObject<Value>> get(const Key& key) {\n+    // lookup value in the cache\n+    typename map_type::iterator value_for_key = map_.find(key);\n+    if (value_for_key == map_.end()) {\n+      // value not in cache\n+      return arrow::util::nullopt;\n+    }\n+    PriorityItem item = *value_for_key->second.second;\n+    // if the value was found on the cache, update its cost (original + inflation)\n+    if (item.actual_priority != item.original_priority + inflation_) {\n+      priority_set_.erase(value_for_key->second.second);\n+      auto iter = priority_set_.insert(PriorityItem(\n+          item.original_priority + inflation_, item.original_priority, item.cache_key));\n+      value_for_key->second.second = iter.first;\n+    }\n+    return value_for_key->second.first;\n+  }\n+\n+  void clear() {\n+    map_.clear();\n+    priority_set_.clear();\n+  }\n+\n+ private:\n+  void evict() {\n+    // evict item from the beginning of the set. This set is ordered from the\n+    // lower priority value to the higher priority value.\n+    typename std::set<PriorityItem>::iterator i = priority_set_.begin();\n+    // update the inflation cost related to the evicted item\n+    inflation_ = (*i).actual_priority;\n+    map_.erase((*i).cache_key);\n+    priority_set_.erase(i);\n+  }\n+\n+  map_type map_;\n+  std::set<PriorityItem> priority_set_;\n+  uint64_t inflation_;\n\nReview comment:\n       It is int64 so it can overflow for repeated inflation. Assuming 100ms avg compilation time, it is in the order of 10^11 which is large enough that we can ignore. But still I think we can measure the duration cost as microseconds/milliseconds instead of nano seconds. What is the compilation time for smallest possible expression `out = in` ?\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return cost < other.cost; }\n+};\n+\n+// A particular cache based on the GreedyDual-Size cache which is a generalization of LRU\n+// which defines costs for each cache values.\n+// The algorithm associates a cost, C, with each cache value. Initially, when the value\n+// is brought into cache, C is set to be the cost related to the value (the cost is\n+// always non-negative). When a replacement needs to be made, the value with the lowest C\n+// cost is replaced, and then all values reduce their C costs by the minimum value of C\n+// over all the values already in the cache.\n+// If a value is accessed, its C value is restored to its initial cost. Thus, the C costs\n+// of recently accessed values retain a larger portion of the original cost than those of\n+// values that have not been accessed for a long time. The C costs are reduced as time\n+// goes and are restored when accessed.\n+\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : inflation_(0), capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= capacity_) {\n+        evict();\n+      }\n+\n+      // insert the new item\n+      auto iter =\n+          priority_set_.insert(PriorityItem(value.cost + inflation_, value.cost, key));\n+      // save on map the value and the priority item iterator position\n+      map_[key] = std::make_pair(value, iter.first);\n+    }\n+  }\n+\n+  arrow::util::optional<ValueCacheObject<Value>> get(const Key& key) {\n+    // lookup value in the cache\n+    typename map_type::iterator value_for_key = map_.find(key);\n+    if (value_for_key == map_.end()) {\n+      // value not in cache\n+      return arrow::util::nullopt;\n+    }\n+    PriorityItem item = *value_for_key->second.second;\n+    // if the value was found on the cache, update its cost (original + inflation)\n+    if (item.actual_priority != item.original_priority + inflation_) {\n+      priority_set_.erase(value_for_key->second.second);\n+      auto iter = priority_set_.insert(PriorityItem(\n+          item.original_priority + inflation_, item.original_priority, item.cache_key));\n+      value_for_key->second.second = iter.first;\n+    }\n+    return value_for_key->second.first;\n+  }\n+\n+  void clear() {\n+    map_.clear();\n+    priority_set_.clear();\n+  }\n+\n+ private:\n+  void evict() {\n+    // evict item from the beginning of the set. This set is ordered from the\n+    // lower priority value to the higher priority value.\n+    typename std::set<PriorityItem>::iterator i = priority_set_.begin();\n+    // update the inflation cost related to the evicted item\n+    inflation_ = (*i).actual_priority;\n+    map_.erase((*i).cache_key);\n+    priority_set_.erase(i);\n+  }\n+\n+  map_type map_;\n+  std::set<PriorityItem> priority_set_;\n+  uint64_t inflation_;\n\nReview comment:\n       It is int64 so it can overflow for repeated inflation. Assuming 100ms avg compilation time, it is in the order of 10^11 which I don't know if it is large enough that we can ignore. Its better to measure the duration cost as microseconds/milliseconds instead of nano seconds. What is the compilation time for smallest possible expression `out = in` ?\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n+  ValueType module;\n+  uint64_t cost;\n+  bool operator<(const ValueCacheObject& other) const { return cost < other.cost; }\n+};\n+\n+// A particular cache based on the GreedyDual-Size cache which is a generalization of LRU\n+// which defines costs for each cache values.\n+// The algorithm associates a cost, C, with each cache value. Initially, when the value\n+// is brought into cache, C is set to be the cost related to the value (the cost is\n+// always non-negative). When a replacement needs to be made, the value with the lowest C\n+// cost is replaced, and then all values reduce their C costs by the minimum value of C\n+// over all the values already in the cache.\n+// If a value is accessed, its C value is restored to its initial cost. Thus, the C costs\n+// of recently accessed values retain a larger portion of the original cost than those of\n+// values that have not been accessed for a long time. The C costs are reduced as time\n+// goes and are restored when accessed.\n+\n+template <class Key, class Value>\n+class GreedyDualSizeCache {\n+  // inner class to define the priority item\n+  class PriorityItem {\n+   public:\n+    PriorityItem(uint64_t actual_priority, uint64_t original_priority, Key key)\n+        : actual_priority(actual_priority),\n+          original_priority(original_priority),\n+          cache_key(key) {}\n+    // this ensure that the items with low priority stays in the beginning of the queue,\n+    // so it can be the one removed by evict operation\n+    bool operator<(const PriorityItem& other) const {\n+      return actual_priority < other.actual_priority;\n+    }\n+    uint64_t actual_priority;\n+    uint64_t original_priority;\n+    Key cache_key;\n+  };\n+\n+ public:\n+  struct hasher {\n+    template <typename I>\n+    std::size_t operator()(const I& i) const {\n+      return i.Hash();\n+    }\n+  };\n+  // a map from 'key' to a pair of Value and a pointer to the priority value\n+  using map_type = std::unordered_map<\n+      Key, std::pair<ValueCacheObject<Value>, typename std::set<PriorityItem>::iterator>,\n+      hasher>;\n+\n+  explicit GreedyDualSizeCache(size_t capacity) : inflation_(0), capacity_(capacity) {}\n+\n+  ~GreedyDualSizeCache() = default;\n+\n+  size_t size() const { return map_.size(); }\n+\n+  size_t capacity() const { return capacity_; }\n+\n+  bool empty() const { return map_.empty(); }\n+\n+  bool contains(const Key& key) { return map_.find(key) != map_.end(); }\n+\n+  void insert(const Key& key, const ValueCacheObject<Value>& value) {\n+    typename map_type::iterator i = map_.find(key);\n+    // check if element is not in the cache to add it\n+    if (i == map_.end()) {\n+      // insert item into the cache, but first check if it is full, to evict an item\n+      // if it is necessary\n+      if (size() >= capacity_) {\n+        evict();\n+      }\n+\n+      // insert the new item\n+      auto iter =\n+          priority_set_.insert(PriorityItem(value.cost + inflation_, value.cost, key));\n+      // save on map the value and the priority item iterator position\n+      map_[key] = std::make_pair(value, iter.first);\n+    }\n+  }\n+\n+  arrow::util::optional<ValueCacheObject<Value>> get(const Key& key) {\n+    // lookup value in the cache\n+    typename map_type::iterator value_for_key = map_.find(key);\n+    if (value_for_key == map_.end()) {\n+      // value not in cache\n+      return arrow::util::nullopt;\n+    }\n+    PriorityItem item = *value_for_key->second.second;\n+    // if the value was found on the cache, update its cost (original + inflation)\n+    if (item.actual_priority != item.original_priority + inflation_) {\n+      priority_set_.erase(value_for_key->second.second);\n+      auto iter = priority_set_.insert(PriorityItem(\n+          item.original_priority + inflation_, item.original_priority, item.cache_key));\n+      value_for_key->second.second = iter.first;\n+    }\n+    return value_for_key->second.first;\n+  }\n+\n+  void clear() {\n+    map_.clear();\n+    priority_set_.clear();\n+  }\n+\n+ private:\n+  void evict() {\n+    // evict item from the beginning of the set. This set is ordered from the\n+    // lower priority value to the higher priority value.\n+    typename std::set<PriorityItem>::iterator i = priority_set_.begin();\n+    // update the inflation cost related to the evicted item\n+    inflation_ = (*i).actual_priority;\n+    map_.erase((*i).cache_key);\n+    priority_set_.erase(i);\n+  }\n+\n+  map_type map_;\n+  std::set<PriorityItem> priority_set_;\n+  uint64_t inflation_;\n\nReview comment:\n       I think its better to handle this case correctly. If it is posssible to overflow just reassign all the entries to original cost and inflation to zero.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:51:04.166+0000",
                    "updated": "2021-07-12T19:51:04.166+0000",
                    "started": "2021-07-12T19:51:04.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621553",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r667844965\n\n\n\n##########\nFile path: cpp/src/gandiva/cache.h\n##########\n@@ -34,26 +35,29 @@ void LogCacheSize(size_t capacity);\n template <class KeyType, typename ValueType>\n class Cache {\n  public:\n-  explicit Cache(size_t capacity) : cache_(capacity) { LogCacheSize(capacity); }\n+  explicit Cache(size_t capacity) {\n+    this->cache_ = std::make_unique<GreedyDualSizeCache<KeyType, ValueType>>(capacity);\n+    LogCacheSize(capacity);\n+  }\n \n   Cache() : Cache(GetCapacity()) {}\n \n   ValueType GetModule(KeyType cache_key) {\n-    arrow::util::optional<ValueType> result;\n+    arrow::util::optional<ValueCacheObject<ValueType>> result;\n     mtx_.lock();\n-    result = cache_.get(cache_key);\n+    result = (*cache_).get(cache_key);\n     mtx_.unlock();\n-    return result != arrow::util::nullopt ? *result : nullptr;\n+    return result != arrow::util::nullopt ? (*result).module : nullptr;\n   }\n \n-  void PutModule(KeyType cache_key, ValueType module) {\n+  void PutModule(KeyType cache_key, ValueCacheObject<ValueType> valueCacheObject) {\n     mtx_.lock();\n-    cache_.insert(cache_key, module);\n+    (*cache_).insert(cache_key, valueCacheObject);\n     mtx_.unlock();\n   }\n \n  private:\n-  LruCache<KeyType, ValueType> cache_;\n+  std::unique_ptr<GreedyDualSizeCache<KeyType, ValueType>> cache_;\n\nReview comment:\n       Before that, we were going to use cache of different types. Since, we not need it anymore I will change it!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:51:49.923+0000",
                    "updated": "2021-07-12T19:51:49.923+0000",
                    "started": "2021-07-12T19:51:49.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621561",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#issuecomment-878225239\n\n\n   https://issues.apache.org/jira/browse/ARROW-12986\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:01:38.032+0000",
                    "updated": "2021-07-12T20:01:38.032+0000",
                    "started": "2021-07-12T20:01:38.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621642",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668350635\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n\nReview comment:\n       I removed it, but it is important to notice that just removing it breaks the code, since the Cache implementation was fulfilling the map like this `map_[key] = std::make_pair(value, iter.first);` using the operator `[]`\r\n   The **operator []** uses the default constructor. Because of that, I changed to use the `emplace` function when adding an item to the map.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T00:54:15.227+0000",
                    "updated": "2021-07-13T00:54:15.227+0000",
                    "started": "2021-07-13T00:54:15.227+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621774",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/621775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668350635\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <list>\n+#include <queue>\n+#include <set>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/util/optional.h\"\n+\n+// modified cache to support evict policy using the GreedyDual-Size algorithm.\n+namespace gandiva {\n+// Defines a base value object supported on the cache that may contain properties\n+template <typename ValueType>\n+class ValueCacheObject {\n+ public:\n+  ValueCacheObject(ValueType module, uint64_t cost) : module(module), cost(cost) {}\n+  ValueCacheObject() = default;\n\nReview comment:\n       I removed it, but it is important to notice that just removing it breaks the code, since the Cache implementation was fulfilling the map like this `map_[key] = std::make_pair(value_cache_object, iter.first);` using the operator `[]`.\r\n   \r\n   The **operator []** uses the default constructor. Because of that, I changed to use the `emplace` function when adding an item to the map.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T00:54:59.335+0000",
                    "updated": "2021-07-13T00:54:59.335+0000",
                    "started": "2021-07-13T00:54:59.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621775",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/622051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668870317\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -101,12 +101,16 @@ class GreedyDualSizeCache {\n       if (size() >= capacity_) {\n         evict();\n       }\n+      // check and handle possible overflow\n+      if (UINT64_MAX - value.cost < inflation_) {\n+        overflow();\n\nReview comment:\n       You don't need to do it for every insert. You can do it inside evict since only there inflation is updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T15:22:18.080+0000",
                    "updated": "2021-07-13T15:22:18.080+0000",
                    "started": "2021-07-13T15:22:18.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622051",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/622052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668870317\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -101,12 +101,16 @@ class GreedyDualSizeCache {\n       if (size() >= capacity_) {\n         evict();\n       }\n+      // check and handle possible overflow\n+      if (UINT64_MAX - value.cost < inflation_) {\n+        overflow();\n\nReview comment:\n       You don't need to do it for every insert and get. You can do it inside evict since only there inflation is updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T15:22:31.349+0000",
                    "updated": "2021-07-13T15:22:31.349+0000",
                    "started": "2021-07-13T15:22:31.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622052",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/622053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668872330\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -144,6 +152,23 @@ class GreedyDualSizeCache {\n     priority_set_.erase(i);\n   }\n \n+  void overflow() {\n\nReview comment:\n       can you name it handle_overflow\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T15:24:19.732+0000",
                    "updated": "2021-07-13T15:24:19.732+0000",
                    "started": "2021-07-13T15:24:19.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622053",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/622083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668904491\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -101,12 +101,16 @@ class GreedyDualSizeCache {\n       if (size() >= capacity_) {\n         evict();\n       }\n+      // check and handle possible overflow\n+      if (UINT64_MAX - value.cost < inflation_) {\n+        overflow();\n\nReview comment:\n       Even if the inflation is not updated, it is still possible that the inserted **value.cost + inflation** generates an overflow. This is why we need to always check it during insertion or get methods\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T16:01:45.018+0000",
                    "updated": "2021-07-13T16:01:45.018+0000",
                    "started": "2021-07-13T16:01:45.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622083",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/622088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465#discussion_r668912237\n\n\n\n##########\nFile path: cpp/src/gandiva/greedy_dual_size_cache.h\n##########\n@@ -101,12 +101,16 @@ class GreedyDualSizeCache {\n       if (size() >= capacity_) {\n         evict();\n       }\n+      // check and handle possible overflow\n+      if (UINT64_MAX - value.cost < inflation_) {\n+        overflow();\n\nReview comment:\n       Since we are resetting here the current costs are lost. Set the new costs to current_cost - inflation\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T16:10:52.363+0000",
                    "updated": "2021-07-13T16:10:52.363+0000",
                    "started": "2021-07-13T16:10:52.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622088",
                    "issueId": "13382474"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/worklog/623136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo closed pull request #10465:\nURL: https://github.com/apache/arrow/pull/10465\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-15T15:57:16.223+0000",
                    "updated": "2021-07-15T15:57:16.223+0000",
                    "started": "2021-07-15T15:57:16.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623136",
                    "issueId": "13382474"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e0f81aa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f864621[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23050e0d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6e7fe302[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1592e005[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ab22878[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@714c3445[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@60babe9d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62aae847[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@9b0ed82[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19ce1eed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2c35151f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 15 15:57:11 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-15T15:57:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12986/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-06-07T12:51:10.000+0000",
        "updated": "2021-07-21T01:39:01.000+0000",
        "timeoriginalestimate": null,
        "description": "Actually, the eviction policy algorithm used by Gandiva's cache is based on LRU.\r\n\r\nI suggest to add a new option of eviction algorithm to use that considers the LLVM build time as a cost, and evicts the elements based on the GrredyDual-Size algorithm.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement new cache eviction policy in Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382474/comment/17381436",
                    "id": "17381436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10465\n[https://github.com/apache/arrow/pull/10465]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-15T15:57:11.001+0000",
                    "updated": "2021-07-15T15:57:11.001+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rpyg:",
        "customfield_12314139": null
    }
}