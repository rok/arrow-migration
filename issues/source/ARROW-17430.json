{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13477042",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042",
    "key": "ARROW-17430",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12645761",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12645761",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13477043",
                    "key": "ARROW-17431",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477043",
                    "fields": {
                        "summary": "[Java] MapBinder to bind Arrow Map type to DB column ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17430/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov opened a new pull request, #13906:\nURL: https://github.com/apache/arrow/pull/13906\n\n   Typical real life Arrow datasets contain List type vectors of primitive type. This PR introduce ListBinder mapping of primitive types lists to java.sql.Types.ARRAY\n\n\n",
                    "created": "2022-08-17T15:14:23.781+0000",
                    "updated": "2022-08-17T15:14:23.781+0000",
                    "started": "2022-08-17T15:14:23.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801408",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r948142802\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private UnionListReader listReader;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Class<?> arrayElementClass = sourceArray.get(0).getClass();\n\nReview Comment:\n   This won't work if the list element is empty, right?\n\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private UnionListReader listReader;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Class<?> arrayElementClass = sourceArray.get(0).getClass();\n\nReview Comment:\n   I think we'd also want to see that covered in the tests\n\n\n\n",
                    "created": "2022-08-17T15:57:45.049+0000",
                    "updated": "2022-08-17T15:57:45.049+0000",
                    "started": "2022-08-17T15:57:45.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801421",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#issuecomment-1218243140\n\n   https://issues.apache.org/jira/browse/ARROW-17430\n\n\n",
                    "created": "2022-08-17T16:27:04.046+0000",
                    "updated": "2022-08-17T16:27:04.046+0000",
                    "started": "2022-08-17T16:27:04.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801432",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#issuecomment-1218243168\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-17T16:27:06.150+0000",
                    "updated": "2022-08-17T16:27:06.150+0000",
                    "started": "2022-08-17T16:27:06.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801433",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r948465760\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private UnionListReader listReader;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Class<?> arrayElementClass = sourceArray.get(0).getClass();\n\nReview Comment:\n   well spotted! I change implementation and test to process empty list case and Text values\n\n\n\n",
                    "created": "2022-08-17T21:57:56.410+0000",
                    "updated": "2022-08-17T21:57:56.410+0000",
                    "started": "2022-08-17T21:57:56.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801507",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949126301\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+import org.apache.arrow.vector.util.Text;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private final UnionListReader listReader;\n+  private final Class<?> arrayElementClass;\n+  private final boolean isTextColumn;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  /**\n+   * Init ListBinder and determine type of data vector.\n+   *\n+   * @param vector corresponding data vector from arrow buffer for binding\n+   * @param jdbcType parameter jdbc type\n+   */\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+    Class<? extends FieldVector> dataVectorClass = vector.getDataVector().getClass();\n+    try {\n+      arrayElementClass = dataVectorClass.getMethod(\"getObject\", Integer.TYPE).getReturnType();\n+    } catch (NoSuchMethodException e) {\n+      final String message = String.format(\"Issue to determine type for getObject method of data vector class %s \",\n+              dataVectorClass.getName());\n+      throw new RuntimeException(message);\n+    }\n+    isTextColumn = arrayElementClass.isAssignableFrom(Text.class);\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Object array;\n+    if (!isTextColumn) {\n+      array = Array.newInstance(arrayElementClass, sourceArray.size());\n+      Arrays.setAll((Object[]) array, sourceArray::get);\n+    } else {\n+      array = new String[sourceArray.size()];\n+      Arrays.setAll((Object[]) array, idx -> sourceArray.get(idx) != null ? sourceArray.get(idx).toString() : null);\n\nReview Comment:\n   nit: instead of calling `get` twice, use `sourceArray.isNull(idx)`\n\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinderTest.java:\n##########\n@@ -385,6 +388,106 @@ void decimal256() throws SQLException {\n         Arrays.asList(new BigDecimal(\"120.429\"), new BigDecimal(\"-10590.123\"), new BigDecimal(\"0.000\")));\n   }\n \n+  @Test\n+  void listOfDouble() throws SQLException {\n+    TriConsumer<ListVector, Integer, Double[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(doubleValue -> writer.float8().writeFloat8(doubleValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Double[]> values = Arrays.asList(new Double[]{0.0, Math.PI}, new Double[]{1.1, -352346.2, 2355.6},\n+                                          new Double[]{-1024.3});\n+    testListType(new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt64() throws SQLException {\n+    TriConsumer<ListVector, Integer, Long[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(longValue -> writer.bigInt().writeBigInt(longValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Long[]> values = Arrays.asList(new Long[]{1L, 2L, 3L}, new Long[]{4L, 5L},\n+            new Long[]{512L, 1024L, 2048L, 4096L});\n+    testListType((ArrowType) new ArrowType.Int(64, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32() throws SQLException {\n+    TriConsumer<ListVector, Integer, Integer[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(integerValue -> writer.integer().writeInt(integerValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Integer[]> values = Arrays.asList(new Integer[]{1, 2, 3}, new Integer[]{4, 5},\n+            new Integer[]{512, 1024, 2048, 4096});\n+    testListType((ArrowType) new ArrowType.Int(32, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32WithEmptyList() throws SQLException {\n\nReview Comment:\n   nit: why not just add an empty list value to each of the test cases, instead of having a separate test only for one case?\n\n\n\n",
                    "created": "2022-08-18T13:24:00.476+0000",
                    "updated": "2022-08-18T13:24:00.476+0000",
                    "started": "2022-08-18T13:24:00.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801701",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949145695\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+import org.apache.arrow.vector.util.Text;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private final UnionListReader listReader;\n+  private final Class<?> arrayElementClass;\n+  private final boolean isTextColumn;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  /**\n+   * Init ListBinder and determine type of data vector.\n+   *\n+   * @param vector corresponding data vector from arrow buffer for binding\n+   * @param jdbcType parameter jdbc type\n+   */\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+    Class<? extends FieldVector> dataVectorClass = vector.getDataVector().getClass();\n+    try {\n+      arrayElementClass = dataVectorClass.getMethod(\"getObject\", Integer.TYPE).getReturnType();\n+    } catch (NoSuchMethodException e) {\n+      final String message = String.format(\"Issue to determine type for getObject method of data vector class %s \",\n+              dataVectorClass.getName());\n+      throw new RuntimeException(message);\n+    }\n+    isTextColumn = arrayElementClass.isAssignableFrom(Text.class);\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Object array;\n+    if (!isTextColumn) {\n+      array = Array.newInstance(arrayElementClass, sourceArray.size());\n+      Arrays.setAll((Object[]) array, sourceArray::get);\n+    } else {\n+      array = new String[sourceArray.size()];\n+      Arrays.setAll((Object[]) array, idx -> sourceArray.get(idx) != null ? sourceArray.get(idx).toString() : null);\n\nReview Comment:\n   do you mean Objects::nonNull? As ArrayList..isNull not available\n\n\n\n",
                    "created": "2022-08-18T13:38:57.601+0000",
                    "updated": "2022-08-18T13:38:57.601+0000",
                    "started": "2022-08-18T13:38:57.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801707",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949146357\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinderTest.java:\n##########\n@@ -385,6 +388,106 @@ void decimal256() throws SQLException {\n         Arrays.asList(new BigDecimal(\"120.429\"), new BigDecimal(\"-10590.123\"), new BigDecimal(\"0.000\")));\n   }\n \n+  @Test\n+  void listOfDouble() throws SQLException {\n+    TriConsumer<ListVector, Integer, Double[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(doubleValue -> writer.float8().writeFloat8(doubleValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Double[]> values = Arrays.asList(new Double[]{0.0, Math.PI}, new Double[]{1.1, -352346.2, 2355.6},\n+                                          new Double[]{-1024.3});\n+    testListType(new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt64() throws SQLException {\n+    TriConsumer<ListVector, Integer, Long[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(longValue -> writer.bigInt().writeBigInt(longValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Long[]> values = Arrays.asList(new Long[]{1L, 2L, 3L}, new Long[]{4L, 5L},\n+            new Long[]{512L, 1024L, 2048L, 4096L});\n+    testListType((ArrowType) new ArrowType.Int(64, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32() throws SQLException {\n+    TriConsumer<ListVector, Integer, Integer[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(integerValue -> writer.integer().writeInt(integerValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Integer[]> values = Arrays.asList(new Integer[]{1, 2, 3}, new Integer[]{4, 5},\n+            new Integer[]{512, 1024, 2048, 4096});\n+    testListType((ArrowType) new ArrowType.Int(32, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32WithEmptyList() throws SQLException {\n\nReview Comment:\n   Sure, thanks for advice\n\n\n\n",
                    "created": "2022-08-18T13:39:37.432+0000",
                    "updated": "2022-08-18T13:39:37.432+0000",
                    "started": "2022-08-18T13:39:37.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801709",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949147149\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ListBinder.java:\n##########\n@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.impl.UnionListReader;\n+import org.apache.arrow.vector.util.Text;\n+\n+/**\n+ * A column binder for list of primitive values.\n+ */\n+public class ListBinder extends BaseColumnBinder<ListVector> {\n+\n+  private final UnionListReader listReader;\n+  private final Class<?> arrayElementClass;\n+  private final boolean isTextColumn;\n+\n+  public ListBinder(ListVector vector) {\n+    this(vector, java.sql.Types.ARRAY);\n+  }\n+\n+  /**\n+   * Init ListBinder and determine type of data vector.\n+   *\n+   * @param vector corresponding data vector from arrow buffer for binding\n+   * @param jdbcType parameter jdbc type\n+   */\n+  public ListBinder(ListVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n+    listReader = vector.getReader();\n+    Class<? extends FieldVector> dataVectorClass = vector.getDataVector().getClass();\n+    try {\n+      arrayElementClass = dataVectorClass.getMethod(\"getObject\", Integer.TYPE).getReturnType();\n+    } catch (NoSuchMethodException e) {\n+      final String message = String.format(\"Issue to determine type for getObject method of data vector class %s \",\n+              dataVectorClass.getName());\n+      throw new RuntimeException(message);\n+    }\n+    isTextColumn = arrayElementClass.isAssignableFrom(Text.class);\n+  }\n+\n+  @Override\n+  public void bind(java.sql.PreparedStatement statement, int parameterIndex, int rowIndex)throws java.sql.SQLException {\n+    listReader.setPosition(rowIndex);\n+    ArrayList<?> sourceArray = (ArrayList<?>) listReader.readObject();\n+    Object array;\n+    if (!isTextColumn) {\n+      array = Array.newInstance(arrayElementClass, sourceArray.size());\n+      Arrays.setAll((Object[]) array, sourceArray::get);\n+    } else {\n+      array = new String[sourceArray.size()];\n+      Arrays.setAll((Object[]) array, idx -> sourceArray.get(idx) != null ? sourceArray.get(idx).toString() : null);\n\nReview Comment:\n   Oh whoops, I thought this was a ValueVector, not an ArrayList for some reason. No problems here.\n\n\n\n",
                    "created": "2022-08-18T13:40:17.343+0000",
                    "updated": "2022-08-18T13:40:17.343+0000",
                    "started": "2022-08-18T13:40:17.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801710",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949156691\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinderTest.java:\n##########\n@@ -385,6 +388,106 @@ void decimal256() throws SQLException {\n         Arrays.asList(new BigDecimal(\"120.429\"), new BigDecimal(\"-10590.123\"), new BigDecimal(\"0.000\")));\n   }\n \n+  @Test\n+  void listOfDouble() throws SQLException {\n+    TriConsumer<ListVector, Integer, Double[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(doubleValue -> writer.float8().writeFloat8(doubleValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Double[]> values = Arrays.asList(new Double[]{0.0, Math.PI}, new Double[]{1.1, -352346.2, 2355.6},\n+                                          new Double[]{-1024.3});\n+    testListType(new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt64() throws SQLException {\n+    TriConsumer<ListVector, Integer, Long[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(longValue -> writer.bigInt().writeBigInt(longValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Long[]> values = Arrays.asList(new Long[]{1L, 2L, 3L}, new Long[]{4L, 5L},\n+            new Long[]{512L, 1024L, 2048L, 4096L});\n+    testListType((ArrowType) new ArrowType.Int(64, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32() throws SQLException {\n+    TriConsumer<ListVector, Integer, Integer[]> setValue = (listVector, index, values) -> {\n+      org.apache.arrow.vector.complex.impl.UnionListWriter writer = listVector.getWriter();\n+      writer.setPosition(index);\n+      writer.startList();\n+      Arrays.stream(values).forEach(integerValue -> writer.integer().writeInt(integerValue));\n+      writer.endList();\n+      listVector.setLastSet(index);\n+    };\n+    List<Integer[]> values = Arrays.asList(new Integer[]{1, 2, 3}, new Integer[]{4, 5},\n+            new Integer[]{512, 1024, 2048, 4096});\n+    testListType((ArrowType) new ArrowType.Int(32, true), setValue, ListVector::setNull, values);\n+  }\n+\n+  @Test\n+  void listOfInt32WithEmptyList() throws SQLException {\n\nReview Comment:\n   done\n\n\n\n",
                    "created": "2022-08-18T13:48:23.524+0000",
                    "updated": "2022-08-18T13:48:23.524+0000",
                    "started": "2022-08-18T13:48:23.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801711",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949269533\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinderTest.java:\n##########\n@@ -483,4 +571,105 @@ <T, V extends FieldVector> void testSimpleType(ArrowType arrowType, int jdbcType\n       assertThat(binder.next()).isFalse();\n     }\n   }\n+\n+  <T, V extends FieldVector> void testListType(ArrowType arrowType, TriConsumer<V, Integer, T> setValue,\n+                          BiConsumer<V, Integer> setNull, List<T> values) throws SQLException {\n+    int jdbcType = Types.ARRAY;\n+    Schema schema = new Schema(Collections.singletonList(new Field(\"field\", FieldType.nullable(\n+            new ArrowType.List()), Collections.singletonList(\n+            new Field(\"element\", FieldType.notNullable(arrowType), null)\n+    ))));\n+    try (final MockPreparedStatement statement = new MockPreparedStatement();\n+         final VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator)) {\n+      final JdbcParameterBinder binder =\n+          JdbcParameterBinder.builder(statement, root).bindAll().build();\n+      assertThat(binder.next()).isFalse();\n+\n+      @SuppressWarnings(\"unchecked\")\n+      final V vector = (V) root.getVector(0);\n+      final ColumnBinder columnBinder = ColumnBinder.forVector(vector);\n+      assertThat(columnBinder.getJdbcType()).isEqualTo(jdbcType);\n+\n+      setValue.accept(vector, 0, values.get(0));\n+      setValue.accept(vector, 1, values.get(1));\n+      setNull.accept(vector, 2);\n+      root.setRowCount(3);\n+\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isEqualTo(values.get(0));\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isEqualTo(values.get(1));\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isNull();\n+      assertThat(statement.getParamType(1)).isEqualTo(jdbcType);\n+      assertThat(binder.next()).isFalse();\n+\n+      binder.reset();\n+\n+      setNull.accept(vector, 0);\n+      setValue.accept(vector, 1, values.get(2));\n+      setValue.accept(vector, 2, values.get(0));\n+      setValue.accept(vector, 3, values.get(2));\n\nReview Comment:\n   The empty array value isn't being used, since the testers here only access indices 0-2. Maybe change one of these indices to `3`?  \n\n\n\n",
                    "created": "2022-08-18T15:11:41.133+0000",
                    "updated": "2022-08-18T15:11:41.133+0000",
                    "started": "2022-08-18T15:11:41.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801743",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#discussion_r949426997\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinderTest.java:\n##########\n@@ -483,4 +571,105 @@ <T, V extends FieldVector> void testSimpleType(ArrowType arrowType, int jdbcType\n       assertThat(binder.next()).isFalse();\n     }\n   }\n+\n+  <T, V extends FieldVector> void testListType(ArrowType arrowType, TriConsumer<V, Integer, T> setValue,\n+                          BiConsumer<V, Integer> setNull, List<T> values) throws SQLException {\n+    int jdbcType = Types.ARRAY;\n+    Schema schema = new Schema(Collections.singletonList(new Field(\"field\", FieldType.nullable(\n+            new ArrowType.List()), Collections.singletonList(\n+            new Field(\"element\", FieldType.notNullable(arrowType), null)\n+    ))));\n+    try (final MockPreparedStatement statement = new MockPreparedStatement();\n+         final VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator)) {\n+      final JdbcParameterBinder binder =\n+          JdbcParameterBinder.builder(statement, root).bindAll().build();\n+      assertThat(binder.next()).isFalse();\n+\n+      @SuppressWarnings(\"unchecked\")\n+      final V vector = (V) root.getVector(0);\n+      final ColumnBinder columnBinder = ColumnBinder.forVector(vector);\n+      assertThat(columnBinder.getJdbcType()).isEqualTo(jdbcType);\n+\n+      setValue.accept(vector, 0, values.get(0));\n+      setValue.accept(vector, 1, values.get(1));\n+      setNull.accept(vector, 2);\n+      root.setRowCount(3);\n+\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isEqualTo(values.get(0));\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isEqualTo(values.get(1));\n+      assertThat(binder.next()).isTrue();\n+      assertThat(statement.getParamValue(1)).isNull();\n+      assertThat(statement.getParamType(1)).isEqualTo(jdbcType);\n+      assertThat(binder.next()).isFalse();\n+\n+      binder.reset();\n+\n+      setNull.accept(vector, 0);\n+      setValue.accept(vector, 1, values.get(2));\n+      setValue.accept(vector, 2, values.get(0));\n+      setValue.accept(vector, 3, values.get(2));\n\nReview Comment:\n   Thanks you @lidavidm . Test fixed by last commit\n\n\n\n",
                    "created": "2022-08-18T17:43:15.651+0000",
                    "updated": "2022-08-18T17:43:15.651+0000",
                    "started": "2022-08-18T17:43:15.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801778",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/801955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm merged PR #13906:\nURL: https://github.com/apache/arrow/pull/13906\n\n\n",
                    "created": "2022-08-19T12:09:33.208+0000",
                    "updated": "2022-08-19T12:09:33.208+0000",
                    "started": "2022-08-19T12:09:33.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801955",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/802014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#issuecomment-1220738569\n\n   Benchmark runs are scheduled for baseline = 1a34a078b29c3f119c93de10631d26fc0d52739a and contender = b11bc5054e9499bf022003aeb0352f12ddfc61fe. b11bc5054e9499bf022003aeb0352f12ddfc61fe is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/4ecfbaf2dac04549b01d11d91f471e4d...ce6b86a6120342369a5761e84d8bc7b1/)\n   [Failed :arrow_down:0.27% :arrow_up:0.03%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/824efaba06254ad5b33f7afda172f236...7de3d650906e4d7283a0eb674849b5c9/)\n   [Failed :arrow_down:0.82% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/1dfcd406e29e4d4f857770b91d5a24f4...6cc48394e762478f80961c4996813cea/)\n   [Finished :arrow_down:0.46% :arrow_up:0.14%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/0b7dd51da38c4e41b70f676a8b6ab673...678683b8fb4841f1abf66999695f4e84/)\n   Buildkite builds:\n   [Finished] [`b11bc505` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1337)\n   [Failed] [`b11bc505` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1353)\n   [Failed] [`b11bc505` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1335)\n   [Finished] [`b11bc505` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1352)\n   [Finished] [`1a34a078` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1336)\n   [Finished] [`1a34a078` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1352)\n   [Failed] [`1a34a078` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1334)\n   [Finished] [`1a34a078` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1351)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-08-19T14:21:17.553+0000",
                    "updated": "2022-08-19T14:21:17.553+0000",
                    "started": "2022-08-19T14:21:17.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802014",
                    "issueId": "13477042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/worklog/802015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13906:\nURL: https://github.com/apache/arrow/pull/13906#issuecomment-1220738763\n\n   ['Python', 'R'] benchmarks have high level of regressions.\n   [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/1dfcd406e29e4d4f857770b91d5a24f4...6cc48394e762478f80961c4996813cea/)\n   \n\n\n",
                    "created": "2022-08-19T14:21:29.741+0000",
                    "updated": "2022-08-19T14:21:29.741+0000",
                    "started": "2022-08-19T14:21:29.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802015",
                    "issueId": "13477042"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7614868c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7db8755e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35094912[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@b25c868[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ef0b034[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@152c7956[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a92e338[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4f51108a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@648b7844[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@121b4b4a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fedf112[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@28ff7925[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 19 12:09:34 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-19T12:09:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17430/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-08-16T11:23:53.000+0000",
        "updated": "2022-08-19T14:21:29.000+0000",
        "timeoriginalestimate": null,
        "description": "Typical real life Arrow datasets contain List type vectors of primitive type. Looks logically implement default JDBC parameter binders for such vector type or implement some kind on binder code extensibility of core framework via MetaINF/ServiceLocator\r\n\r\nCurrent implementation just [throws UnsupportedOperationException|#L80]]\r\n\r\n\u00a0\r\n{code:java}\r\n  @Override\r\n        \r\n        \r\n            public ColumnBinder visit(ArrowType.List type) {\r\n        \r\n        \r\n              throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\r\n        \r\n        \r\n            } {code}\r\n\u00a0\r\n\r\nMy current implementation patch\u00a0{color:#000000}ColumnBinderArrowTypeVisitor in classpath (to leverage Builder functionality instead of manual vector mapping in code) to return ListBinder{color}\r\n{code:java}\r\n@Override\r\npublic ColumnBinder visit(ArrowType.List type) {\r\n    return new ListBinder((ListVector) vector);\r\n} {code}\r\n{color:#000000}and following code works for me with H2 database and in java stored PostgreSQL {color}{color:#000000}function in PL/Java to bind List parameter to JDBC:{color}\r\n{code:java}\r\npackage org.apache.arrow.adapter.jdbc.binder;\r\n\r\nimport org.apache.arrow.vector.complex.ListVector;\r\nimport org.apache.arrow.vector.complex.impl.UnionListReader;\r\n\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.sql.Types;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class ListBinder extends BaseColumnBinder<ListVector>{\r\n\r\n    private UnionListReader reader;\r\n\r\n    public ListBinder(ListVector vector) {\r\n        this(vector, Types.ARRAY);\r\n    }\r\n\r\n    public ListBinder(ListVector vector, int jdbcType) {\r\n        super(vector, jdbcType);\r\n        reader = vector.getReader();\r\n    }\r\n\r\n    @Override\r\n    public void bind(PreparedStatement statement, int parameterIndex, int rowIndex) throws SQLException {\r\n        reader.setPosition(rowIndex);\r\n        ArrayList sourceArray = (ArrayList) reader.readObject();\r\n        Class aClass = sourceArray.get(0).getClass();\r\n        if(aClass.isAssignableFrom(Long.class)){\r\n            Long[] res = new Long[sourceArray.size()];\r\n            Arrays.setAll(res, sourceArray::get);\r\n            statement.setObject(parameterIndex, res);\r\n        } else\r\n        if(aClass.isAssignableFrom(Integer.class)){\r\n            Integer[] res = new Integer[sourceArray.size()];\r\n            Arrays.setAll(res, sourceArray::get);\r\n            statement.setObject(parameterIndex, res);\r\n        } else\r\n        if(aClass.isAssignableFrom(Short.class)){\r\n            Short[] res = new Short[sourceArray.size()];\r\n            Arrays.setAll(res, sourceArray::get);\r\n            statement.setObject(parameterIndex, res);\r\n        } else\r\n        if(aClass.isAssignableFrom(String.class)){\r\n            String[] res = new String[sourceArray.size()];\r\n            Arrays.setAll(res, sourceArray::get);\r\n            statement.setObject(parameterIndex, res);\r\n        }\r\n    }\r\n}\r\n {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] ListBinder to bind Arrow List type to DB column ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/comment/17580278",
                    "id": "17580278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You don't need to patch the default code: you can manually pass in a Binder instance when building the JdbcParameterBinder.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-16T11:49:42.640+0000",
                    "updated": "2022-08-16T11:49:42.640+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/comment/17580288",
                    "id": "17580288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
                        "name": "igor.suhorukov",
                        "key": "JIRAUSER293905",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Igor Suhorukov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you [~lidavidm] your approach works for manual coding for each dataset, but org.apache.arrow.adapter.jdbc.JdbcParameterBinder.Builder is super useful to reduce efforts to implement mapping of new type for dataset. The same difference like develop program to process data or just allow end users to write SQL querey",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
                        "name": "igor.suhorukov",
                        "key": "JIRAUSER293905",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Igor Suhorukov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-16T12:17:14.559+0000",
                    "updated": "2022-08-16T12:18:57.636+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/comment/17580463",
                    "id": "17580463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We would definitely welcome a PR with List/MapBinder implementations! Otherwise, I don't think I'd have the time to get to this for a while.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-16T20:36:22.064+0000",
                    "updated": "2022-08-16T20:36:22.064+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/comment/17580768",
                    "id": "17580768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
                        "name": "igor.suhorukov",
                        "key": "JIRAUSER293905",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Igor Suhorukov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~lidavidm] \u00a0 got it. Thanks for your time. Lets try from ListBinder. I also asked my friend to assist with PRs he'll look at code on weekends",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
                        "name": "igor.suhorukov",
                        "key": "JIRAUSER293905",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Igor Suhorukov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-17T12:35:46.299+0000",
                    "updated": "2022-08-17T12:35:46.299+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477042/comment/17581815",
                    "id": "17581815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13906\n[https://github.com/apache/arrow/pull/13906]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-19T12:09:34.770+0000",
                    "updated": "2022-08-19T12:09:34.770+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z17snk:",
        "customfield_12314139": null
    }
}