{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13200098",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200098",
    "key": "ARROW-3854",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3854/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200098/worklog/168817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #3014: ARROW-3854: [GLib] Deprecate garrow_gio_{input,output}_stream_get_raw()\nURL: https://github.com/apache/arrow/pull/3014\n \n \n   Because we use `_get_raw()` name for functions that return C++ object.\r\n   \r\n   We can provide getter for raw `GInputStream`/`GOutputStream` via GObject property mechanism. We used the mechanism for `GArrowCompressed{Input,Output}Stream`.\r\n   \r\n   This pull request includes some implementation cleanups (sorry):\r\n   \r\n     * Removed internal `garrow_buffer_input_stream_new_raw_buffer()` API\r\n     * Fixed indent.\r\n     * Changed to use `auto`.\r\n     * Moved `GParamSpec *spec` position.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T15:04:21.427+0000",
                    "updated": "2018-11-22T15:04:21.427+0000",
                    "started": "2018-11-22T15:04:21.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168817",
                    "issueId": "13200098"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200098/worklog/168940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 closed pull request #3014: ARROW-3854: [GLib] Deprecate garrow_gio_{input,output}_stream_get_raw()\nURL: https://github.com/apache/arrow/pull/3014\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/input-stream.cpp b/c_glib/arrow-glib/input-stream.cpp\nindex b22b3ac6ac..69a20b0f71 100644\n--- a/c_glib/arrow-glib/input-stream.cpp\n+++ b/c_glib/arrow-glib/input-stream.cpp\n@@ -113,9 +113,7 @@ G_DEFINE_TYPE_WITH_CODE(GArrowInputStream,\n static void\n garrow_input_stream_finalize(GObject *object)\n {\n-  GArrowInputStreamPrivate *priv;\n-\n-  priv = GARROW_INPUT_STREAM_GET_PRIVATE(object);\n+  auto priv = GARROW_INPUT_STREAM_GET_PRIVATE(object);\n \n   priv->input_stream = nullptr;\n \n@@ -128,9 +126,7 @@ garrow_input_stream_set_property(GObject *object,\n                                  const GValue *value,\n                                  GParamSpec *pspec)\n {\n-  GArrowInputStreamPrivate *priv;\n-\n-  priv = GARROW_INPUT_STREAM_GET_PRIVATE(object);\n+  auto priv = GARROW_INPUT_STREAM_GET_PRIVATE(object);\n \n   switch (prop_id) {\n   case PROP_INPUT_STREAM:\n@@ -164,15 +160,13 @@ garrow_input_stream_init(GArrowInputStream *object)\n static void\n garrow_input_stream_class_init(GArrowInputStreamClass *klass)\n {\n-  GObjectClass *gobject_class;\n-  GParamSpec *spec;\n-\n-  gobject_class = G_OBJECT_CLASS(klass);\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->finalize     = garrow_input_stream_finalize;\n   gobject_class->set_property = garrow_input_stream_set_property;\n   gobject_class->get_property = garrow_input_stream_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_pointer(\"input-stream\",\n                               \"Input stream\",\n                               \"The raw std::shared<arrow::io::InputStream> *\",\n@@ -406,14 +400,13 @@ garrow_buffer_input_stream_init(GArrowBufferInputStream *object)\n static void\n garrow_buffer_input_stream_class_init(GArrowBufferInputStreamClass *klass)\n {\n-  GParamSpec *spec;\n-\n   auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->dispose      = garrow_buffer_input_stream_dispose;\n   gobject_class->set_property = garrow_buffer_input_stream_set_property;\n   gobject_class->get_property = garrow_buffer_input_stream_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_object(\"buffer\",\n                              \"Buffer\",\n                              \"The data\",\n@@ -435,7 +428,7 @@ garrow_buffer_input_stream_new(GArrowBuffer *buffer)\n   auto arrow_buffer = garrow_buffer_get_raw(buffer);\n   auto arrow_buffer_reader =\n     std::make_shared<arrow::io::BufferReader>(arrow_buffer);\n-  return garrow_buffer_input_stream_new_raw_buffer(&arrow_buffer_reader, buffer);\n+  return garrow_buffer_input_stream_new_raw(&arrow_buffer_reader, buffer);\n }\n \n /**\n@@ -567,14 +560,14 @@ namespace garrow {\n     }\n \n     arrow::Status ReadAt(int64_t position, int64_t n_bytes,\n-\t\t\t int64_t *n_read_bytes, void* out) override {\n-\treturn arrow::io::RandomAccessFile::ReadAt(\n-\t    position, n_bytes, n_read_bytes, out);\n+                         int64_t *n_read_bytes, void* out) override {\n+      return arrow::io::RandomAccessFile::ReadAt(\n+        position, n_bytes, n_read_bytes, out);\n     }\n \n     arrow::Status ReadAt(int64_t position, int64_t n_bytes,\n-\t\t\t std::shared_ptr<arrow::Buffer>* out) override {\n-\treturn arrow::io::RandomAccessFile::ReadAt(position, n_bytes, out);\n+                         std::shared_ptr<arrow::Buffer>* out) override {\n+      return arrow::io::RandomAccessFile::ReadAt(position, n_bytes, out);\n     }\n \n     arrow::Status Read(int64_t n_bytes,\n@@ -669,9 +662,72 @@ namespace garrow {\n \n G_BEGIN_DECLS\n \n-G_DEFINE_TYPE(GArrowGIOInputStream,\n-              garrow_gio_input_stream,\n-              GARROW_TYPE_SEEKABLE_INPUT_STREAM);\n+\n+typedef struct GArrowGIOInputStreamPrivate_ {\n+  GInputStream *raw;\n+} GArrowGIOInputStreamPrivate;\n+\n+enum {\n+  PROP_GIO_RAW = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowGIOInputStream,\n+                           garrow_gio_input_stream,\n+                           GARROW_TYPE_SEEKABLE_INPUT_STREAM);\n+\n+#define GARROW_GIO_INPUT_STREAM_GET_PRIVATE(object)     \\\n+  static_cast<GArrowGIOInputStreamPrivate *>(           \\\n+    garrow_gio_input_stream_get_instance_private(       \\\n+      GARROW_GIO_INPUT_STREAM(object)))\n+\n+static void\n+garrow_gio_input_stream_dispose(GObject *object)\n+{\n+  auto priv = GARROW_GIO_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  if (priv->raw) {\n+    g_object_unref(priv->raw);\n+    priv->raw = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_gio_input_stream_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_gio_input_stream_set_property(GObject *object,\n+                                     guint prop_id,\n+                                     const GValue *value,\n+                                     GParamSpec *pspec)\n+{\n+  auto priv = GARROW_GIO_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_GIO_RAW:\n+    priv->raw = G_INPUT_STREAM(g_value_dup_object(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_gio_input_stream_get_property(GObject *object,\n+                                     guint prop_id,\n+                                     GValue *value,\n+                                     GParamSpec *pspec)\n+{\n+  auto priv = GARROW_GIO_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_GIO_RAW:\n+    g_value_set_object(value, priv->raw);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n \n static void\n garrow_gio_input_stream_init(GArrowGIOInputStream *object)\n@@ -681,6 +737,20 @@ garrow_gio_input_stream_init(GArrowGIOInputStream *object)\n static void\n garrow_gio_input_stream_class_init(GArrowGIOInputStreamClass *klass)\n {\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_gio_input_stream_dispose;\n+  gobject_class->set_property = garrow_gio_input_stream_set_property;\n+  gobject_class->get_property = garrow_gio_input_stream_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_object(\"raw\",\n+                             \"Raw\",\n+                             \"The raw GInputStream *\",\n+                             G_TYPE_INPUT_STREAM,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_GIO_RAW, spec);\n }\n \n /**\n@@ -698,6 +768,7 @@ garrow_gio_input_stream_new(GInputStream *gio_input_stream)\n     std::make_shared<garrow::GIOInputStream>(gio_input_stream);\n   auto object = g_object_new(GARROW_TYPE_GIO_INPUT_STREAM,\n                              \"input-stream\", &arrow_input_stream,\n+                             \"raw\", gio_input_stream,\n                              NULL);\n   auto input_stream = GARROW_GIO_INPUT_STREAM(object);\n   return input_stream;\n@@ -710,16 +781,14 @@ garrow_gio_input_stream_new(GInputStream *gio_input_stream)\n  * Returns: (transfer none): The wrapped #GInputStream.\n  *\n  * Since: 0.5.0\n+ *\n+ * Deprecated: 0.12.0: Use GArrowGIOInputStream::raw property instead.\n  */\n GInputStream *\n garrow_gio_input_stream_get_raw(GArrowGIOInputStream *input_stream)\n {\n-  auto arrow_input_stream =\n-    garrow_input_stream_get_raw(GARROW_INPUT_STREAM(input_stream));\n-  auto arrow_gio_input_stream =\n-    std::static_pointer_cast<garrow::GIOInputStream>(arrow_input_stream);\n-  auto gio_input_stream = arrow_gio_input_stream->get_input_stream();\n-  return gio_input_stream;\n+  auto priv = GARROW_GIO_INPUT_STREAM_GET_PRIVATE(input_stream);\n+  return priv->raw;\n }\n \n typedef struct GArrowCompressedInputStreamPrivate_ {\n@@ -809,14 +878,13 @@ garrow_compressed_input_stream_init(GArrowCompressedInputStream *object)\n static void\n garrow_compressed_input_stream_class_init(GArrowCompressedInputStreamClass *klass)\n {\n-  GParamSpec *spec;\n-\n   auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->dispose      = garrow_compressed_input_stream_dispose;\n   gobject_class->set_property = garrow_compressed_input_stream_set_property;\n   gobject_class->get_property = garrow_compressed_input_stream_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_object(\"codec\",\n                              \"Codec\",\n                              \"The codec for the stream\",\n@@ -879,9 +947,7 @@ garrow_input_stream_new_raw(std::shared_ptr<arrow::io::InputStream> *arrow_input\n std::shared_ptr<arrow::io::InputStream>\n garrow_input_stream_get_raw(GArrowInputStream *input_stream)\n {\n-  GArrowInputStreamPrivate *priv;\n-\n-  priv = GARROW_INPUT_STREAM_GET_PRIVATE(input_stream);\n+  auto priv = GARROW_INPUT_STREAM_GET_PRIVATE(input_stream);\n   return priv->input_stream;\n }\n \n@@ -896,14 +962,8 @@ garrow_seekable_input_stream_get_raw(GArrowSeekableInputStream *seekable_input_s\n }\n \n GArrowBufferInputStream *\n-garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader)\n-{\n-  return garrow_buffer_input_stream_new_raw_buffer(arrow_buffer_reader, nullptr);\n-}\n-\n-GArrowBufferInputStream *\n-garrow_buffer_input_stream_new_raw_buffer(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n-                                          GArrowBuffer *buffer)\n+garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n+                                   GArrowBuffer *buffer)\n {\n   auto buffer_input_stream =\n     GARROW_BUFFER_INPUT_STREAM(g_object_new(GARROW_TYPE_BUFFER_INPUT_STREAM,\ndiff --git a/c_glib/arrow-glib/input-stream.h b/c_glib/arrow-glib/input-stream.h\nindex 1a4c9cf47c..9deebd7173 100644\n--- a/c_glib/arrow-glib/input-stream.h\n+++ b/c_glib/arrow-glib/input-stream.h\n@@ -182,7 +182,11 @@ struct _GArrowGIOInputStreamClass\n GType garrow_gio_input_stream_get_type(void) G_GNUC_CONST;\n \n GArrowGIOInputStream *garrow_gio_input_stream_new(GInputStream *gio_input_stream);\n-GInputStream *garrow_gio_input_stream_get_raw(GArrowGIOInputStream *input_stream);\n+#ifndef GARROW_DISABLE_DEPRECATED\n+G_GNUC_DEPRECATED\n+GInputStream *\n+garrow_gio_input_stream_get_raw(GArrowGIOInputStream *input_stream);\n+#endif\n \n #define GARROW_TYPE_COMPRESSED_INPUT_STREAM     \\\n   (garrow_compressed_input_stream_get_type())\ndiff --git a/c_glib/arrow-glib/input-stream.hpp b/c_glib/arrow-glib/input-stream.hpp\nindex 34857a1124..d06d65b251 100644\n--- a/c_glib/arrow-glib/input-stream.hpp\n+++ b/c_glib/arrow-glib/input-stream.hpp\n@@ -31,9 +31,9 @@ std::shared_ptr<arrow::io::InputStream> garrow_input_stream_get_raw(GArrowInputS\n \n std::shared_ptr<arrow::io::RandomAccessFile> garrow_seekable_input_stream_get_raw(GArrowSeekableInputStream *input_stream);\n \n-GArrowBufferInputStream *garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader);\n-GArrowBufferInputStream *garrow_buffer_input_stream_new_raw_buffer(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n-                                                                   GArrowBuffer *buffer);\n+GArrowBufferInputStream *\n+garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n+                                   GArrowBuffer *buffer);\n std::shared_ptr<arrow::io::BufferReader> garrow_buffer_input_stream_get_raw(GArrowBufferInputStream *input_stream);\n \n GArrowMemoryMappedInputStream *garrow_memory_mapped_input_stream_new_raw(std::shared_ptr<arrow::io::MemoryMappedFile> *arrow_memory_mapped_file);\ndiff --git a/c_glib/arrow-glib/output-stream.cpp b/c_glib/arrow-glib/output-stream.cpp\nindex 946ee0be44..aa0a13cb87 100644\n--- a/c_glib/arrow-glib/output-stream.cpp\n+++ b/c_glib/arrow-glib/output-stream.cpp\n@@ -111,9 +111,7 @@ G_DEFINE_TYPE_WITH_CODE(GArrowOutputStream,\n static void\n garrow_output_stream_finalize(GObject *object)\n {\n-  GArrowOutputStreamPrivate *priv;\n-\n-  priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(object);\n+  auto priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(object);\n \n   priv->output_stream = nullptr;\n \n@@ -126,9 +124,7 @@ garrow_output_stream_set_property(GObject *object,\n                                           const GValue *value,\n                                           GParamSpec *pspec)\n {\n-  GArrowOutputStreamPrivate *priv;\n-\n-  priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(object);\n+  auto priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(object);\n \n   switch (prop_id) {\n   case PROP_OUTPUT_STREAM:\n@@ -162,15 +158,13 @@ garrow_output_stream_init(GArrowOutputStream *object)\n static void\n garrow_output_stream_class_init(GArrowOutputStreamClass *klass)\n {\n-  GObjectClass *gobject_class;\n-  GParamSpec *spec;\n-\n-  gobject_class = G_OBJECT_CLASS(klass);\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->finalize     = garrow_output_stream_finalize;\n   gobject_class->set_property = garrow_output_stream_set_property;\n   gobject_class->get_property = garrow_output_stream_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_pointer(\"output-stream\",\n                               \"io::OutputStream\",\n                               \"The raw std::shared<arrow::io::OutputStream> *\",\n@@ -394,18 +388,94 @@ namespace garrow {\n \n G_BEGIN_DECLS\n \n-G_DEFINE_TYPE(GArrowGIOOutputStream,\n-              garrow_gio_output_stream,\n-              GARROW_TYPE_OUTPUT_STREAM);\n+typedef struct GArrowGIOOutputStreamPrivate_ {\n+  GOutputStream *raw;\n+} GArrowGIOOutputStreamPrivate;\n+\n+enum {\n+  PROP_GIO_RAW = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowGIOOutputStream,\n+                           garrow_gio_output_stream,\n+                           GARROW_TYPE_OUTPUT_STREAM);\n+\n+#define GARROW_GIO_OUTPUT_STREAM_GET_PRIVATE(object)    \\\n+  static_cast<GArrowGIOOutputStreamPrivate *>(          \\\n+    garrow_gio_output_stream_get_instance_private(      \\\n+      GARROW_GIO_OUTPUT_STREAM(object)))\n+\n+static void\n+garrow_gio_output_stream_dispose(GObject *object)\n+{\n+  auto priv = GARROW_GIO_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  if (priv->raw) {\n+    g_object_unref(priv->raw);\n+    priv->raw = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_gio_output_stream_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_gio_output_stream_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_GIO_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_GIO_RAW:\n+    priv->raw = G_OUTPUT_STREAM(g_value_dup_object(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_gio_output_stream_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_GIO_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_GIO_RAW:\n+    g_value_set_object(value, priv->raw);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n \n static void\n-garrow_gio_output_stream_init(GArrowGIOOutputStream *gio_output_stream)\n+garrow_gio_output_stream_init(GArrowGIOOutputStream *object)\n {\n }\n \n static void\n garrow_gio_output_stream_class_init(GArrowGIOOutputStreamClass *klass)\n {\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_gio_output_stream_dispose;\n+  gobject_class->set_property = garrow_gio_output_stream_set_property;\n+  gobject_class->get_property = garrow_gio_output_stream_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_object(\"raw\",\n+                             \"Raw\",\n+                             \"The raw GOutputStream *\",\n+                             G_TYPE_OUTPUT_STREAM,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_GIO_RAW, spec);\n }\n \n /**\n@@ -421,6 +491,7 @@ garrow_gio_output_stream_new(GOutputStream *gio_output_stream)\n     std::make_shared<garrow::GIOOutputStream>(gio_output_stream);\n   auto object = g_object_new(GARROW_TYPE_GIO_OUTPUT_STREAM,\n                              \"output-stream\", &arrow_output_stream,\n+                             \"raw\", gio_output_stream,\n                              NULL);\n   auto output_stream = GARROW_GIO_OUTPUT_STREAM(object);\n   return output_stream;\n@@ -433,16 +504,14 @@ garrow_gio_output_stream_new(GOutputStream *gio_output_stream)\n  * Returns: (transfer none): The wrapped #GOutputStream.\n  *\n  * Since: 0.5.0\n+ *\n+ * Deprecated: 0.12.0: Use GArrowGIOOutputStream::raw property instead.\n  */\n GOutputStream *\n garrow_gio_output_stream_get_raw(GArrowGIOOutputStream *output_stream)\n {\n-  auto arrow_output_stream =\n-    garrow_output_stream_get_raw(GARROW_OUTPUT_STREAM(output_stream));\n-  auto arrow_gio_output_stream =\n-    std::static_pointer_cast<garrow::GIOOutputStream>(arrow_output_stream);\n-  auto gio_output_stream = arrow_gio_output_stream->get_output_stream();\n-  return gio_output_stream;\n+  auto priv = GARROW_GIO_OUTPUT_STREAM_GET_PRIVATE(output_stream);\n+  return priv->raw;\n }\n \n typedef struct GArrowCompressedOutputStreamPrivate_ {\n@@ -532,14 +601,13 @@ garrow_compressed_output_stream_init(GArrowCompressedOutputStream *object)\n static void\n garrow_compressed_output_stream_class_init(GArrowCompressedOutputStreamClass *klass)\n {\n-  GParamSpec *spec;\n-\n   auto gobject_class = G_OBJECT_CLASS(klass);\n \n   gobject_class->dispose      = garrow_compressed_output_stream_dispose;\n   gobject_class->set_property = garrow_compressed_output_stream_set_property;\n   gobject_class->get_property = garrow_compressed_output_stream_get_property;\n \n+  GParamSpec *spec;\n   spec = g_param_spec_object(\"codec\",\n                              \"Codec\",\n                              \"The codec for the stream\",\n@@ -603,9 +671,7 @@ garrow_output_stream_new_raw(std::shared_ptr<arrow::io::OutputStream> *arrow_out\n std::shared_ptr<arrow::io::OutputStream>\n garrow_output_stream_get_raw(GArrowOutputStream *output_stream)\n {\n-  GArrowOutputStreamPrivate *priv;\n-\n-  priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(output_stream);\n+  auto priv = GARROW_OUTPUT_STREAM_GET_PRIVATE(output_stream);\n   return priv->output_stream;\n }\n \ndiff --git a/c_glib/arrow-glib/output-stream.h b/c_glib/arrow-glib/output-stream.h\nindex 031865291e..bcfd818955 100644\n--- a/c_glib/arrow-glib/output-stream.h\n+++ b/c_glib/arrow-glib/output-stream.h\n@@ -193,7 +193,11 @@ struct _GArrowGIOOutputStreamClass\n GType garrow_gio_output_stream_get_type(void) G_GNUC_CONST;\n \n GArrowGIOOutputStream *garrow_gio_output_stream_new(GOutputStream *gio_output_stream);\n-GOutputStream *garrow_gio_output_stream_get_raw(GArrowGIOOutputStream *output_stream);\n+#ifndef GARROW_DISABLE_DEPRECATED\n+G_GNUC_DEPRECATED\n+GOutputStream *\n+garrow_gio_output_stream_get_raw(GArrowGIOOutputStream *output_stream);\n+#endif\n \n #define GARROW_TYPE_COMPRESSED_OUTPUT_STREAM    \\\n   (garrow_compressed_output_stream_get_type())\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T22:36:29.178+0000",
                    "updated": "2018-11-22T22:36:29.178+0000",
                    "started": "2018-11-22T22:36:29.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168940",
                    "issueId": "13200098"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@34e1d277[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e886038[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8ef5746[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@452b7fc3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c400776[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54a7c2c0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2680ea75[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@384b4c01[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64ec97c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@eb7e856[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fc568b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4d0c020a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 22 22:36:25 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-22T22:36:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3854/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-22T14:59:13.000+0000",
        "updated": "2018-11-22T22:36:29.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Deprecate garrow_gio_{input,output}_stream_get_raw()",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200098/comment/16696282",
                    "id": "16696282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 3014\n[https://github.com/apache/arrow/pull/3014]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-22T22:36:25.968+0000",
                    "updated": "2018-11-22T22:36:25.968+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00s5s:",
        "customfield_12314139": null
    }
}