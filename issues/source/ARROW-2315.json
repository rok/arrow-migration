{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13145385",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385",
    "key": "ARROW-2315",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12529473",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12529473",
                "type": {
                    "id": "12310360",
                    "name": "Dependent",
                    "inward": "Dependent",
                    "outward": "Dependent",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310360"
                },
                "inwardIssue": {
                    "id": "13122654",
                    "key": "ARROW-1886",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654",
                    "fields": {
                        "summary": "[Python] Add function to \"flatten\" structs within tables",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2315/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@63d7bd13[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@444dab74[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b5bede7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@22e4f1f3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fc7ef44[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2d947687[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79748207[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7c9a8fb3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c37e2ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@621991e4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fa0531a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@176fa44a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 17 15:10:36 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-17T15:10:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2315/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-15T14:34:05.000+0000",
        "updated": "2018-04-17T15:10:36.000+0000",
        "timeoriginalestimate": null,
        "description": "See ARROW-1886. We want to be able to take a StructArray and flatten it into independent field arrays.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Add method to flatten a struct array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385/comment/16400486",
                    "id": "16400486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1755: ARROW-2315: [C++/Python] Flatten struct array\nURL: https://github.com/apache/arrow/pull/1755\n \n \n   Based on PR #1754.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-15T14:37:22.390+0000",
                    "updated": "2018-03-15T14:37:22.390+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385/comment/16407098",
                    "id": "16407098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1755: ARROW-2315: [C++/Python] Flatten struct array\nURL: https://github.com/apache/arrow/pull/1755#issuecomment-374764209\n \n \n   Would like to take a look at this before merging\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T21:32:35.638+0000",
                    "updated": "2018-03-20T21:32:35.638+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385/comment/16426873",
                    "id": "16426873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1755: ARROW-2315: [C++/Python] Flatten struct array\nURL: https://github.com/apache/arrow/pull/1755#issuecomment-378926263\n \n \n   @wesm Do you still want to review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T12:56:20.354+0000",
                    "updated": "2018-04-05T12:56:20.354+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385/comment/16440992",
                    "id": "16440992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 1755\n[https://github.com/apache/arrow/pull/1755]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-17T15:10:35.609+0000",
                    "updated": "2018-04-17T15:10:35.609+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385/comment/16440993",
                    "id": "16440993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou closed pull request #1755: ARROW-2315: [C++/Python] Flatten struct array\nURL: https://github.com/apache/arrow/pull/1755\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 80d64c8712..c3fb04bbcb 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -372,6 +372,53 @@ std::shared_ptr<Array> StructArray::field(int i) const {\n   return boxed_fields_[i];\n }\n \n+Status StructArray::Flatten(MemoryPool* pool, ArrayVector* out) const {\n+  ArrayVector flattened;\n+  std::shared_ptr<Buffer> null_bitmap = data_->buffers[0];\n+\n+  for (auto& child_data : data_->child_data) {\n+    std::shared_ptr<Buffer> flattened_null_bitmap;\n+    int64_t flattened_null_count = kUnknownNullCount;\n+\n+    // Need to adjust for parent offset\n+    if (data_->offset != 0 || data_->length != child_data->length) {\n+      child_data = SliceData(*child_data, data_->offset, data_->length);\n+    }\n+    std::shared_ptr<Buffer> child_null_bitmap = child_data->buffers[0];\n+    const int64_t child_offset = child_data->offset;\n+\n+    // The validity of a flattened datum is the logical AND of the struct\n+    // element's validity and the individual field element's validity.\n+    if (null_bitmap && child_null_bitmap) {\n+      RETURN_NOT_OK(BitmapAnd(pool, child_null_bitmap->data(), child_offset,\n+                              null_bitmap_data_, data_->offset, data_->length,\n+                              child_offset, &flattened_null_bitmap));\n+    } else if (child_null_bitmap) {\n+      flattened_null_bitmap = child_null_bitmap;\n+      flattened_null_count = child_data->null_count;\n+    } else if (null_bitmap) {\n+      if (child_offset == data_->offset) {\n+        flattened_null_bitmap = null_bitmap;\n+      } else {\n+        RETURN_NOT_OK(CopyBitmap(pool, null_bitmap_data_, data_->offset, data_->length,\n+                                 &flattened_null_bitmap));\n+      }\n+      flattened_null_count = data_->null_count;\n+    } else {\n+      flattened_null_count = 0;\n+    }\n+\n+    auto flattened_data = child_data->Copy();\n+    flattened_data->buffers[0] = flattened_null_bitmap;\n+    flattened_data->null_count = flattened_null_count;\n+\n+    flattened.push_back(MakeArray(flattened_data));\n+  }\n+\n+  *out = flattened;\n+  return Status::OK();\n+}\n+\n // ----------------------------------------------------------------------\n // UnionArray\n \ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex 07e7a13252..0005c487a0 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -610,6 +610,12 @@ class ARROW_EXPORT StructArray : public Array {\n   // count adjusted.\n   std::shared_ptr<Array> field(int pos) const;\n \n+  /// \\brief Flatten this array as a vector of arrays, one for each field\n+  ///\n+  /// \\param[in] pool The pool to allocate null bitmaps from, if necessary\n+  /// \\param[out] out The resulting vector of arrays\n+  Status Flatten(MemoryPool* pool, ArrayVector* out) const;\n+\n  private:\n   // For caching boxed child data\n   mutable std::vector<std::shared_ptr<Array>> boxed_fields_;\ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 4c64dea374..ba4d8a32e0 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -18,6 +18,8 @@\n #include <climits>\n #include <cstdint>\n #include <cstring>\n+#include <functional>\n+#include <initializer_list>\n #include <limits>\n #include <memory>\n #include <vector>\n@@ -41,6 +43,58 @@ static void EnsureCpuInfoInitialized() {\n   }\n }\n \n+void WriteVectorToWriter(internal::BitmapWriter& writer, const std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n+                      std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n+  const int64_t length = values.size();\n+  *out_length = length;\n+  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n+  WriteVectorToWriter(writer, values);\n+}\n+\n+#define ASSERT_READER_SET(reader)    \\\n+  do {                               \\\n+    ASSERT_TRUE(reader.IsSet());     \\\n+    ASSERT_FALSE(reader.IsNotSet()); \\\n+    reader.Next();                   \\\n+  } while (false)\n+\n+#define ASSERT_READER_NOT_SET(reader) \\\n+  do {                                \\\n+    ASSERT_FALSE(reader.IsSet());     \\\n+    ASSERT_TRUE(reader.IsNotSet());   \\\n+    reader.Next();                    \\\n+  } while (false)\n+\n+// Assert that a BitmapReader yields the given bit values\n+void ASSERT_READER_VALUES(internal::BitmapReader& reader, std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      ASSERT_READER_SET(reader);\n+    } else {\n+      ASSERT_READER_NOT_SET(reader);\n+    }\n+  }\n+}\n+\n+// Assert equal contents of a memory area and a vector of bytes\n+void ASSERT_BYTES_EQ(const uint8_t* left, const std::vector<uint8_t>& right) {\n+  auto left_array = std::vector<uint8_t>(left, left + right.size());\n+  ASSERT_EQ(std::vector<uint8_t>(std::begin(left_array), std::end(left_array)), right);\n+}\n+\n TEST(BitUtilTests, TestIsMultipleOf64) {\n   using BitUtil::IsMultipleOf64;\n   EXPECT_TRUE(IsMultipleOf64(64));\n@@ -71,6 +125,20 @@ TEST(BitUtilTests, TestNextPower2) {\n   ASSERT_EQ(1LL << 62, NextPower2((1LL << 62) - 1));\n }\n \n+TEST(BitmapReader, NormalOperation) {\n+  std::shared_ptr<Buffer> buffer;\n+  int64_t length;\n+\n+  for (int64_t offset : {0, 1, 3, 5, 7, 8, 12, 13, 21, 38, 75, 120}) {\n+    BitmapFromVector({0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, offset, &buffer,\n+                     &length);\n+    ASSERT_EQ(length, 14);\n+\n+    auto reader = internal::BitmapReader(buffer->mutable_data(), offset, length);\n+    ASSERT_READER_VALUES(reader, {0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1});\n+  }\n+}\n+\n TEST(BitmapReader, DoesNotReadOutOfBounds) {\n   uint8_t bitmap[16] = {0};\n \n@@ -95,6 +163,37 @@ TEST(BitmapReader, DoesNotReadOutOfBounds) {\n   internal::BitmapReader r3(nullptr, 0, 0);\n }\n \n+TEST(BitmapWriter, NormalOperation) {\n+  {\n+    uint8_t bitmap[] = {0, 0, 0, 0};\n+    auto writer = internal::BitmapWriter(bitmap, 0, 12);\n+    WriteVectorToWriter(writer, {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1});\n+    //                      {0b00110110, 0b1010, 0, 0}\n+    ASSERT_BYTES_EQ(bitmap, {0x36, 0x0a, 0, 0});\n+  }\n+  {\n+    uint8_t bitmap[] = {0xff, 0xff, 0xff, 0xff};\n+    auto writer = internal::BitmapWriter(bitmap, 0, 12);\n+    WriteVectorToWriter(writer, {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1});\n+    //                      {0b00110110, 0b11111010, 0xff, 0xff}\n+    ASSERT_BYTES_EQ(bitmap, {0x36, 0xfa, 0xff, 0xff});\n+  }\n+  {\n+    uint8_t bitmap[] = {0, 0, 0, 0};\n+    auto writer = internal::BitmapWriter(bitmap, 3, 12);\n+    WriteVectorToWriter(writer, {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1});\n+    //                      {0b10110000, 0b01010001, 0, 0}\n+    ASSERT_BYTES_EQ(bitmap, {0xb0, 0x51, 0, 0});\n+  }\n+  {\n+    uint8_t bitmap[] = {0, 0, 0, 0};\n+    auto writer = internal::BitmapWriter(bitmap, 20, 12);\n+    WriteVectorToWriter(writer, {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1});\n+    //                      {0, 0, 0b01100000, 0b10100011}\n+    ASSERT_BYTES_EQ(bitmap, {0, 0, 0x60, 0xa3});\n+  }\n+}\n+\n TEST(BitmapWriter, DoesNotWriteOutOfBounds) {\n   uint8_t bitmap[16] = {0};\n \n@@ -128,6 +227,51 @@ TEST(BitmapWriter, DoesNotWriteOutOfBounds) {\n   ASSERT_EQ((length - 5), num_values);\n }\n \n+TEST(BitmapAnd, Aligned) {\n+  std::shared_ptr<Buffer> left, right, out;\n+  int64_t length;\n+\n+  for (int64_t left_offset : {0, 1, 3, 5, 7, 8, 13, 21, 38, 75, 120}) {\n+    BitmapFromVector({0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, left_offset, &left,\n+                     &length);\n+    for (int64_t right_offset : {left_offset, left_offset + 8, left_offset + 40}) {\n+      BitmapFromVector({0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0}, right_offset, &right,\n+                       &length);\n+      for (int64_t out_offset : {left_offset, left_offset + 16, left_offset + 24}) {\n+        ASSERT_OK(BitmapAnd(default_memory_pool(), left->mutable_data(), left_offset,\n+                            right->mutable_data(), right_offset, length, out_offset,\n+                            &out));\n+        auto reader = internal::BitmapReader(out->mutable_data(), out_offset, length);\n+        ASSERT_READER_VALUES(reader, {0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0});\n+      }\n+    }\n+  }\n+}\n+\n+TEST(BitmapAnd, Unaligned) {\n+  std::shared_ptr<Buffer> left, right, out;\n+  int64_t length;\n+  auto offset_values = {0, 1, 3, 5, 7, 8, 13, 21, 38, 75, 120};\n+\n+  for (int64_t left_offset : offset_values) {\n+    BitmapFromVector({0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1}, left_offset, &left,\n+                     &length);\n+\n+    for (int64_t right_offset : offset_values) {\n+      BitmapFromVector({0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0}, right_offset, &right,\n+                       &length);\n+\n+      for (int64_t out_offset : offset_values) {\n+        ASSERT_OK(BitmapAnd(default_memory_pool(), left->mutable_data(), left_offset,\n+                            right->mutable_data(), right_offset, length, out_offset,\n+                            &out));\n+        auto reader = internal::BitmapReader(out->mutable_data(), out_offset, length);\n+        ASSERT_READER_VALUES(reader, {0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0});\n+      }\n+    }\n+  }\n+}\n+\n static inline int64_t SlowCountBits(const uint8_t* data, int64_t bit_offset,\n                                     int64_t length) {\n   int64_t count = 0;\ndiff --git a/cpp/src/arrow/util/bit-util.cc b/cpp/src/arrow/util/bit-util.cc\nindex c77f0d008b..d3b6bb393b 100644\n--- a/cpp/src/arrow/util/bit-util.cc\n+++ b/cpp/src/arrow/util/bit-util.cc\n@@ -172,4 +172,58 @@ bool BitmapEquals(const uint8_t* left, int64_t left_offset, const uint8_t* right\n   return true;\n }\n \n+namespace {\n+\n+void AlignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                      int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                      int64_t length) {\n+  DCHECK_EQ(left_offset % 8, right_offset % 8);\n+  DCHECK_EQ(left_offset % 8, out_offset % 8);\n+\n+  const int64_t nbytes = BitUtil::BytesForBits(length + left_offset);\n+  left += left_offset / 8;\n+  right += right_offset / 8;\n+  out += out_offset / 8;\n+  for (int64_t i = 0; i < nbytes; ++i) {\n+    out[i] = left[i] & right[i];\n+  }\n+}\n+\n+void UnalignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                        int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                        int64_t length) {\n+  auto left_reader = internal::BitmapReader(left, left_offset, length);\n+  auto right_reader = internal::BitmapReader(right, right_offset, length);\n+  auto writer = internal::BitmapWriter(out, out_offset, length);\n+  for (int64_t i = 0; i < length; ++i) {\n+    if (left_reader.IsSet() && right_reader.IsSet()) {\n+      writer.Set();\n+    }\n+    left_reader.Next();\n+    right_reader.Next();\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+}  // namespace\n+\n+Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n+                 const uint8_t* right, int64_t right_offset, int64_t length,\n+                 int64_t out_offset, std::shared_ptr<Buffer>* out_buffer) {\n+  if ((out_offset % 8 == left_offset % 8) && (out_offset % 8 == right_offset % 8)) {\n+    // Fast case: can use bytewise AND\n+    const int64_t phys_bits = length + out_offset;\n+    RETURN_NOT_OK(GetEmptyBitmap(pool, phys_bits, out_buffer));\n+    AlignedBitmapAnd(left, left_offset, right, right_offset,\n+                     (*out_buffer)->mutable_data(), out_offset, length);\n+  } else {\n+    // Unaligned\n+    RETURN_NOT_OK(GetEmptyBitmap(pool, length + out_offset, out_buffer));\n+    UnalignedBitmapAnd(left, left_offset, right, right_offset,\n+                       (*out_buffer)->mutable_data(), out_offset, length);\n+  }\n+  return Status::OK();\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 6649d45d3d..5f171a07ce 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -531,6 +531,11 @@ ARROW_EXPORT\n bool BitmapEquals(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n                   int64_t right_offset, int64_t bit_length);\n \n+ARROW_EXPORT\n+Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n+                 const uint8_t* right, int64_t right_offset, int64_t length,\n+                 int64_t out_offset, std::shared_ptr<Buffer>* out_buffer);\n+\n }  // namespace arrow\n \n #endif  // ARROW_UTIL_BIT_UTIL_H\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 490a37b0f8..c79157d46c 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -1013,6 +1013,30 @@ cdef class DictionaryArray(Array):\n \n cdef class StructArray(Array):\n \n+    def flatten(self, MemoryPool memory_pool=None):\n+        \"\"\"\n+        Flatten this StructArray, returning one individual array for each\n+        field in the struct.\n+\n+        Parameters\n+        ----------\n+        memory_pool : MemoryPool, default None\n+            For memory allocations, if required, otherwise use default pool\n+\n+        Returns\n+        -------\n+        result : List[Array]\n+        \"\"\"\n+        cdef:\n+            vector[shared_ptr[CArray]] arrays\n+            CMemoryPool* pool = maybe_unbox_memory_pool(memory_pool)\n+            CStructArray* sarr = <CStructArray*> self.ap\n+\n+        with nogil:\n+            check_status(sarr.Flatten(pool, &arrays))\n+\n+        return [pyarrow_wrap_array(arr) for arr in arrays]\n+\n     @staticmethod\n     def from_arrays(arrays, names=None):\n         \"\"\"\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 8654c9c63f..70eb9cbb20 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -399,6 +399,8 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n \n         shared_ptr[CArray] field(int pos)\n \n+        CStatus Flatten(CMemoryPool* pool, vector[shared_ptr[CArray]]* out)\n+\n     CStatus ValidateArray(const CArray& array)\n \n     cdef cppclass CChunkedArray\" arrow::ChunkedArray\":\ndiff --git a/python/pyarrow/lib.pxd b/python/pyarrow/lib.pxd\nindex 6f4100fd06..998eeafc63 100644\n--- a/python/pyarrow/lib.pxd\n+++ b/python/pyarrow/lib.pxd\n@@ -254,6 +254,10 @@ cdef class Decimal128Array(FixedSizeBinaryArray):\n     pass\n \n \n+cdef class StructArray(Array):\n+    pass\n+\n+\n cdef class ListArray(Array):\n     pass\n \ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex 4a441fb97f..dbba508ca6 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -778,3 +778,41 @@ def test_invalid_tensor_operation():\n     t = pa.Tensor()\n     with pytest.raises(TypeError):\n         t.to_numpy()\n+\n+\n+def test_struct_array_flatten():\n+    ty = pa.struct([pa.field('x', pa.int16()),\n+                    pa.field('y', pa.float32())])\n+    a = pa.array([(1, 2.5), (3, 4.5), (5, 6.5)], type=ty)\n+    xs, ys = a.flatten()\n+    assert xs.type == pa.int16()\n+    assert ys.type == pa.float32()\n+    assert xs.to_pylist() == [1, 3, 5]\n+    assert ys.to_pylist() == [2.5, 4.5, 6.5]\n+    xs, ys = a[1:].flatten()\n+    assert xs.to_pylist() == [3, 5]\n+    assert ys.to_pylist() == [4.5, 6.5]\n+\n+    a = pa.array([(1, 2.5), None, (3, 4.5)], type=ty)\n+    xs, ys = a.flatten()\n+    assert xs.to_pylist() == [1, None, 3]\n+    assert ys.to_pylist() == [2.5, None, 4.5]\n+    xs, ys = a[1:].flatten()\n+    assert xs.to_pylist() == [None, 3]\n+    assert ys.to_pylist() == [None, 4.5]\n+\n+    a = pa.array([(1, None), (2, 3.5), (None, 4.5)], type=ty)\n+    xs, ys = a.flatten()\n+    assert xs.to_pylist() == [1, 2, None]\n+    assert ys.to_pylist() == [None, 3.5, 4.5]\n+    xs, ys = a[1:].flatten()\n+    assert xs.to_pylist() == [2, None]\n+    assert ys.to_pylist() == [3.5, 4.5]\n+\n+    a = pa.array([(1, None), None, (None, 2.5)], type=ty)\n+    xs, ys = a.flatten()\n+    assert xs.to_pylist() == [1, None, None]\n+    assert ys.to_pylist() == [None, None, 2.5]\n+    xs, ys = a[1:].flatten()\n+    assert xs.to_pylist() == [None, None]\n+    assert ys.to_pylist() == [None, 2.5]\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-17T15:10:36.558+0000",
                    "updated": "2018-04-17T15:10:36.558+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3rchr:",
        "customfield_12314139": null
    }
}