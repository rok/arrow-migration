{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13393506",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506",
    "key": "ARROW-13554",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620559",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620559",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13389639",
                    "key": "ARROW-13338",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389639",
                    "fields": {
                        "summary": "[C++][Dataset] Make async Scanner the default",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620522",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620522",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13393503",
                    "key": "ARROW-13552",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393503",
                    "fields": {
                        "summary": "[C++] Remove deprecated APIs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            },
            {
                "id": "12620560",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620560",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13393328",
                    "key": "ARROW-13542",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393328",
                    "fields": {
                        "summary": "[C++][Compute][Dataset] Add dataset::WriteNode for writing rows from an ExecPlan to disk",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620561",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620561",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13378680",
                    "key": "ARROW-12803",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378680",
                    "fields": {
                        "summary": "[C++] [Dataset] Write dataset with scanner does not support async scan",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13554/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/698184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#issuecomment-997127514\n\n\n   https://issues.apache.org/jira/browse/ARROW-13554\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-18T02:26:02.686+0000",
                    "updated": "2021-12-18T02:26:02.686+0000",
                    "started": "2021-12-18T02:26:02.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698184",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/700693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r774622978\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -2239,10 +2233,6 @@ cdef class Scanner(_Weakrefable):\n     use_threads : bool, default True\n         If enabled, then maximum parallelism will be used determined by\n         the number of available CPU cores.\n-    use_async : bool, default False\n\nReview comment:\n       It seems that in Python, this keyword was not actually deprecated (in docs or deprecation warning)? \r\n   Therefore, we could maybe still temporary just keep this keyword in the signature (without that it does anything, except from raising a warning if specified by the user, or something like that)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-23T14:58:26.976+0000",
                    "updated": "2021-12-23T14:58:26.976+0000",
                    "started": "2021-12-23T14:58:26.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700693",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/703654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r778475838\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -2239,10 +2233,6 @@ cdef class Scanner(_Weakrefable):\n     use_threads : bool, default True\n         If enabled, then maximum parallelism will be used determined by\n         the number of available CPU cores.\n-    use_async : bool, default False\n\nReview comment:\n       I added the parameters back in.  PTAL.  One thing I wasn't sure of...\r\n   \r\n   All of the places the parameter was declared it was a `bint` which means I couldn't change the default to `None` which means there was no good way to tell if the user specified it or not.\r\n   \r\n   So I just made the default True and emit the warning if the user specifies `False`.  However, if a user has:\r\n   \r\n   `dataset.to_table(use_async=True)` they will not get the warning.\r\n   \r\n   Alternatively, I could change the cython type from bint to object.  Then I should be able to warn on both `use_async=True` and `use_async=False`.  Would this possible have any backwards compatibility ramifications?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T00:38:27.533+0000",
                    "updated": "2022-01-05T00:38:27.533+0000",
                    "started": "2022-01-05T00:38:27.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703654",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#issuecomment-1006424708\n\n\n   The only failure remaining is a Java failure.  Unfortunately, the test failure is missing line numbers so I'm not sure exactly what assert is failing (it expects 2 but I can't find any assert expecting 2 in the test case) so I'll try and reproduce it locally.  This is ready for review in the meantime.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T09:52:25.754+0000",
                    "updated": "2022-01-06T09:52:25.754+0000",
                    "started": "2022-01-06T09:52:25.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704485",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779543359\n\n\n\n##########\nFile path: r/R/dataset-scan.R\n##########\n@@ -118,9 +113,6 @@ Scanner$create <- function(dataset,\n   if (use_threads) {\n     scanner_builder$UseThreads()\n   }\n-  if (use_async) {\n\nReview comment:\n       Is there an R equivalent of a deprecation warning we should be raising?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,40 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n+};\n \n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  compute::Expression expression;\n+  std::shared_ptr<Schema> schema;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+///\n+/// expression must return a struct\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromStructExpression(\n+    const compute::Expression& expression, const Schema& dataset_schema);\n \n-  virtual ~ScanTask() = default;\n+/// \\brief Create a ProjectionDescr from expressions/names for each field\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromFieldExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema);\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+/// \\brief Create a default projection referencing fields in the dataset schema\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromNames(\n+    std::vector<std::string> names, const Schema& dataset_schema);\n\nReview comment:\n       Hmm, maybe 1) document the struct itself and 2) make these static methods on the struct? (`ProjectionDescr::FromNames` for instance)\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_test.cc\n##########\n@@ -706,30 +634,6 @@ TEST_P(TestScanner, Head) {\n   AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n-TEST_P(TestScanner, FromReader) {\n\nReview comment:\n       Should this test be kept? The API still exists/is still used and it seems it's not true that the async scanner can't be constructed from a reader.\n\n##########\nFile path: c_glib/arrow-dataset-glib/scanner.cpp\n##########\n@@ -132,95 +113,59 @@ gadataset_scanner_to_table(GADatasetScanner *scanner,\n   }\n }\n \n-\n typedef struct GADatasetScannerBuilderPrivate_ {\n   std::shared_ptr<arrow::dataset::ScannerBuilder> scanner_builder;\n } GADatasetScannerBuilderPrivate;\n \n-enum {\n-  PROP_SCANNER_BUILDER = 1,\n-  PROP_USE_ASYNC,\n-};\n+enum { PROP_SCANNER_BUILDER = 1 };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScannerBuilder,\n-                           gadataset_scanner_builder,\n+G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScannerBuilder, gadataset_scanner_builder,\n                            G_TYPE_OBJECT)\n \n-#define GADATASET_SCANNER_BUILDER_GET_PRIVATE(obj)        \\\n-  static_cast<GADatasetScannerBuilderPrivate *>(          \\\n-    gadataset_scanner_builder_get_instance_private(       \\\n-      GADATASET_SCANNER_BUILDER(obj)))\n+#define GADATASET_SCANNER_BUILDER_GET_PRIVATE(obj) \\\n+  static_cast<GADatasetScannerBuilderPrivate*>(    \\\n+      gadataset_scanner_builder_get_instance_private(GADATASET_SCANNER_BUILDER(obj)))\n \n-static void\n-gadataset_scanner_builder_finalize(GObject *object)\n-{\n+static void gadataset_scanner_builder_finalize(GObject* object) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n   priv->scanner_builder.~shared_ptr();\n   G_OBJECT_CLASS(gadataset_scanner_builder_parent_class)->finalize(object);\n }\n \n-static void\n-gadataset_scanner_builder_set_property(GObject *object,\n-                                       guint prop_id,\n-                                       const GValue *value,\n-                                       GParamSpec *pspec)\n-{\n+static void gadataset_scanner_builder_set_property(GObject* object, guint prop_id,\n+                                                   const GValue* value,\n+                                                   GParamSpec* pspec) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n \n   switch (prop_id) {\n-  case PROP_SCANNER_BUILDER:\n-    priv->scanner_builder =\n-      *static_cast<std::shared_ptr<arrow::dataset::ScannerBuilder> *>(\n-        g_value_get_pointer(value));\n-    break;\n-  case PROP_USE_ASYNC:\n-    garrow::check(nullptr,\n-                  priv->scanner_builder->UseAsync(g_value_get_boolean(value)),\n-                  \"[scanner-builder][use-async][set]\");\n-    break;\n-  default:\n-    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n-    break;\n+    case PROP_SCANNER_BUILDER:\n+      priv->scanner_builder =\n+          *static_cast<std::shared_ptr<arrow::dataset::ScannerBuilder>*>(\n+              g_value_get_pointer(value));\n+      break;\n+    default:\n+      G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+      break;\n   }\n }\n \n-static void\n-gadataset_scanner_builder_init(GADatasetScannerBuilder *object)\n-{\n+static void gadataset_scanner_builder_init(GADatasetScannerBuilder* object) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n-  new(&priv->scanner_builder) std::shared_ptr<arrow::dataset::ScannerBuilder>;\n+  new (&priv->scanner_builder) std::shared_ptr<arrow::dataset::ScannerBuilder>;\n }\n \n-static void\n-gadataset_scanner_builder_class_init(GADatasetScannerBuilderClass *klass)\n-{\n+static void gadataset_scanner_builder_class_init(GADatasetScannerBuilderClass* klass) {\n   auto gobject_class = G_OBJECT_CLASS(klass);\n-  gobject_class->finalize     = gadataset_scanner_builder_finalize;\n+  gobject_class->finalize = gadataset_scanner_builder_finalize;\n   gobject_class->set_property = gadataset_scanner_builder_set_property;\n \n-  GParamSpec *spec;\n-  spec = g_param_spec_pointer(\"scanner-builder\",\n-                              \"Scanner builder\",\n-                              \"The raw \"\n-                              \"std::shared<arrow::dataset::ScannerBuilder> *\",\n-                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n-                                                       G_PARAM_CONSTRUCT_ONLY));\n+  GParamSpec* spec;\n+  spec = g_param_spec_pointer(\n+      \"scanner-builder\", \"Scanner builder\",\n+      \"The raw \"\n+      \"std::shared<arrow::dataset::ScannerBuilder> *\",\n+      static_cast<GParamFlags>(G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));\n   g_object_class_install_property(gobject_class, PROP_SCANNER_BUILDER, spec);\n-\n-  arrow::dataset::ScanOptions default_options;\n-  /**\n-   * GADatasetScannerBuilder:use-async:\n-   *\n-   * Whether or not async mode is used.\n-   *\n-   * Since: 6.0.0\n-   */\n-  spec = g_param_spec_boolean(\"use-async\",\n\nReview comment:\n       Similarly, is there a way to deprecate things here instead of removing it?\n\n##########\nFile path: c_glib/arrow-dataset-glib/scanner.cpp\n##########\n@@ -48,63 +48,47 @@ enum {\n   PROP_SCANNER = 1,\n };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner,\n-                           gadataset_scanner,\n-                           G_TYPE_OBJECT)\n+G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner, gadataset_scanner, G_TYPE_OBJECT)\n \n-#define GADATASET_SCANNER_GET_PRIVATE(obj)        \\\n-  static_cast<GADatasetScannerPrivate *>(         \\\n-    gadataset_scanner_get_instance_private(       \\\n-      GADATASET_SCANNER(obj)))\n+#define GADATASET_SCANNER_GET_PRIVATE(obj) \\\n+  static_cast<GADatasetScannerPrivate*>(   \\\n+      gadataset_scanner_get_instance_private(GADATASET_SCANNER(obj)))\n\nReview comment:\n       Did this get autoformatted somehow? (Not sure if there's an expected style for the GLib bindings though.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T13:26:29.201+0000",
                    "updated": "2022-01-06T13:26:29.201+0000",
                    "started": "2022-01-06T13:26:29.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704532",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779774043\n\n\n\n##########\nFile path: c_glib/arrow-dataset-glib/scanner.cpp\n##########\n@@ -48,63 +48,47 @@ enum {\n   PROP_SCANNER = 1,\n };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner,\n-                           gadataset_scanner,\n-                           G_TYPE_OBJECT)\n+G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner, gadataset_scanner, G_TYPE_OBJECT)\n \n-#define GADATASET_SCANNER_GET_PRIVATE(obj)        \\\n-  static_cast<GADatasetScannerPrivate *>(         \\\n-    gadataset_scanner_get_instance_private(       \\\n-      GADATASET_SCANNER(obj)))\n+#define GADATASET_SCANNER_GET_PRIVATE(obj) \\\n+  static_cast<GADatasetScannerPrivate*>(   \\\n+      gadataset_scanner_get_instance_private(GADATASET_SCANNER(obj)))\n\nReview comment:\n       Please don't format `c_glib/` files automatically.\r\n   `c_glib/` doesn't use auto format tool.\r\n   Please keep the current style as much as possible. \n\n##########\nFile path: c_glib/arrow-dataset-glib/scanner.cpp\n##########\n@@ -132,95 +113,59 @@ gadataset_scanner_to_table(GADatasetScanner *scanner,\n   }\n }\n \n-\n typedef struct GADatasetScannerBuilderPrivate_ {\n   std::shared_ptr<arrow::dataset::ScannerBuilder> scanner_builder;\n } GADatasetScannerBuilderPrivate;\n \n-enum {\n-  PROP_SCANNER_BUILDER = 1,\n-  PROP_USE_ASYNC,\n-};\n+enum { PROP_SCANNER_BUILDER = 1 };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScannerBuilder,\n-                           gadataset_scanner_builder,\n+G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScannerBuilder, gadataset_scanner_builder,\n                            G_TYPE_OBJECT)\n \n-#define GADATASET_SCANNER_BUILDER_GET_PRIVATE(obj)        \\\n-  static_cast<GADatasetScannerBuilderPrivate *>(          \\\n-    gadataset_scanner_builder_get_instance_private(       \\\n-      GADATASET_SCANNER_BUILDER(obj)))\n+#define GADATASET_SCANNER_BUILDER_GET_PRIVATE(obj) \\\n+  static_cast<GADatasetScannerBuilderPrivate*>(    \\\n+      gadataset_scanner_builder_get_instance_private(GADATASET_SCANNER_BUILDER(obj)))\n \n-static void\n-gadataset_scanner_builder_finalize(GObject *object)\n-{\n+static void gadataset_scanner_builder_finalize(GObject* object) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n   priv->scanner_builder.~shared_ptr();\n   G_OBJECT_CLASS(gadataset_scanner_builder_parent_class)->finalize(object);\n }\n \n-static void\n-gadataset_scanner_builder_set_property(GObject *object,\n-                                       guint prop_id,\n-                                       const GValue *value,\n-                                       GParamSpec *pspec)\n-{\n+static void gadataset_scanner_builder_set_property(GObject* object, guint prop_id,\n+                                                   const GValue* value,\n+                                                   GParamSpec* pspec) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n \n   switch (prop_id) {\n-  case PROP_SCANNER_BUILDER:\n-    priv->scanner_builder =\n-      *static_cast<std::shared_ptr<arrow::dataset::ScannerBuilder> *>(\n-        g_value_get_pointer(value));\n-    break;\n-  case PROP_USE_ASYNC:\n-    garrow::check(nullptr,\n-                  priv->scanner_builder->UseAsync(g_value_get_boolean(value)),\n-                  \"[scanner-builder][use-async][set]\");\n-    break;\n-  default:\n-    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n-    break;\n+    case PROP_SCANNER_BUILDER:\n+      priv->scanner_builder =\n+          *static_cast<std::shared_ptr<arrow::dataset::ScannerBuilder>*>(\n+              g_value_get_pointer(value));\n+      break;\n+    default:\n+      G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+      break;\n   }\n }\n \n-static void\n-gadataset_scanner_builder_init(GADatasetScannerBuilder *object)\n-{\n+static void gadataset_scanner_builder_init(GADatasetScannerBuilder* object) {\n   auto priv = GADATASET_SCANNER_BUILDER_GET_PRIVATE(object);\n-  new(&priv->scanner_builder) std::shared_ptr<arrow::dataset::ScannerBuilder>;\n+  new (&priv->scanner_builder) std::shared_ptr<arrow::dataset::ScannerBuilder>;\n }\n \n-static void\n-gadataset_scanner_builder_class_init(GADatasetScannerBuilderClass *klass)\n-{\n+static void gadataset_scanner_builder_class_init(GADatasetScannerBuilderClass* klass) {\n   auto gobject_class = G_OBJECT_CLASS(klass);\n-  gobject_class->finalize     = gadataset_scanner_builder_finalize;\n+  gobject_class->finalize = gadataset_scanner_builder_finalize;\n   gobject_class->set_property = gadataset_scanner_builder_set_property;\n \n-  GParamSpec *spec;\n-  spec = g_param_spec_pointer(\"scanner-builder\",\n-                              \"Scanner builder\",\n-                              \"The raw \"\n-                              \"std::shared<arrow::dataset::ScannerBuilder> *\",\n-                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n-                                                       G_PARAM_CONSTRUCT_ONLY));\n+  GParamSpec* spec;\n+  spec = g_param_spec_pointer(\n+      \"scanner-builder\", \"Scanner builder\",\n+      \"The raw \"\n+      \"std::shared<arrow::dataset::ScannerBuilder> *\",\n+      static_cast<GParamFlags>(G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));\n   g_object_class_install_property(gobject_class, PROP_SCANNER_BUILDER, spec);\n-\n-  arrow::dataset::ScanOptions default_options;\n-  /**\n-   * GADatasetScannerBuilder:use-async:\n-   *\n-   * Whether or not async mode is used.\n-   *\n-   * Since: 6.0.0\n-   */\n-  spec = g_param_spec_boolean(\"use-async\",\n\nReview comment:\n       We can use `g_warning()` for deprecating.\r\n   But we can remove it without deprecating in this case because it was only used internally for now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T18:47:11.262+0000",
                    "updated": "2022-01-06T18:47:11.262+0000",
                    "started": "2022-01-06T18:47:11.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704711",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779806279\n\n\n\n##########\nFile path: c_glib/arrow-dataset-glib/scanner.cpp\n##########\n@@ -48,63 +48,47 @@ enum {\n   PROP_SCANNER = 1,\n };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner,\n-                           gadataset_scanner,\n-                           G_TYPE_OBJECT)\n+G_DEFINE_TYPE_WITH_PRIVATE(GADatasetScanner, gadataset_scanner, G_TYPE_OBJECT)\n \n-#define GADATASET_SCANNER_GET_PRIVATE(obj)        \\\n-  static_cast<GADatasetScannerPrivate *>(         \\\n-    gadataset_scanner_get_instance_private(       \\\n-      GADATASET_SCANNER(obj)))\n+#define GADATASET_SCANNER_GET_PRIVATE(obj) \\\n+  static_cast<GADatasetScannerPrivate*>(   \\\n+      gadataset_scanner_get_instance_private(GADATASET_SCANNER(obj)))\n\nReview comment:\n       Thank you for catching this.  My IDE was overzealous.  I'll revert back to the original formatting.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T19:25:26.815+0000",
                    "updated": "2022-01-06T19:25:26.815+0000",
                    "started": "2022-01-06T19:25:26.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704736",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779896225\n\n\n\n##########\nFile path: r/R/dataset-scan.R\n##########\n@@ -118,9 +113,6 @@ Scanner$create <- function(dataset,\n   if (use_threads) {\n     scanner_builder$UseThreads()\n   }\n-  if (use_async) {\n\nReview comment:\n       @jonkeane thoughts?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T22:03:32.018+0000",
                    "updated": "2022-01-06T22:03:32.018+0000",
                    "started": "2022-01-06T22:03:32.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704811",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779905097\n\n\n\n##########\nFile path: r/R/dataset-scan.R\n##########\n@@ -118,9 +113,6 @@ Scanner$create <- function(dataset,\n   if (use_threads) {\n     scanner_builder$UseThreads()\n   }\n-  if (use_async) {\n\nReview comment:\n       Yeah, we should warn about this. https://github.com/apache/arrow/blob/e64480db51fc9622d02613f3ec60bac34d765092/r/R/deprecated.R#L21 is an example of this.\r\n   \r\n   Something like:\r\n   ```\r\n   .Deprecated(msg = \"Use of 'use_async' is deprecated\")\r\n   ```\r\n   \r\n   With a bit more explanation if we're now totally ignoring it, or what\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T22:21:18.358+0000",
                    "updated": "2022-01-06T22:21:18.358+0000",
                    "started": "2022-01-06T22:21:18.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704817",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779905690\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,40 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n+};\n \n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  compute::Expression expression;\n+  std::shared_ptr<Schema> schema;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+///\n+/// expression must return a struct\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromStructExpression(\n+    const compute::Expression& expression, const Schema& dataset_schema);\n \n-  virtual ~ScanTask() = default;\n+/// \\brief Create a ProjectionDescr from expressions/names for each field\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromFieldExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema);\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+/// \\brief Create a default projection referencing fields in the dataset schema\n+ARROW_DS_EXPORT Result<ProjectionDescr> MakeProjectionFromNames(\n+    std::vector<std::string> names, const Schema& dataset_schema);\n\nReview comment:\n       Good idea.  I did both of these things.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T22:22:41.375+0000",
                    "updated": "2022-01-06T22:22:41.375+0000",
                    "started": "2022-01-06T22:22:41.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704818",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779905880\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_test.cc\n##########\n@@ -706,30 +634,6 @@ TEST_P(TestScanner, Head) {\n   AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n-TEST_P(TestScanner, FromReader) {\n\nReview comment:\n       Good catch.  This test ended up working just fine on an async scanner.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T22:23:04.415+0000",
                    "updated": "2022-01-06T22:23:04.415+0000",
                    "started": "2022-01-06T22:23:04.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704819",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/704831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r779927768\n\n\n\n##########\nFile path: r/R/dataset-scan.R\n##########\n@@ -118,9 +113,6 @@ Scanner$create <- function(dataset,\n   if (use_threads) {\n     scanner_builder$UseThreads()\n   }\n-  if (use_async) {\n\nReview comment:\n       Ok, I've added the fields back in with deprecation warnings.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-06T23:14:14.717+0000",
                    "updated": "2022-01-06T23:14:14.717+0000",
                    "started": "2022-01-06T23:14:14.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "704831",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780263584\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,46 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n-\n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Describes a projection\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  /// \\brief The projection expression itself\n+  /// This expression must be a call to make_struct\n+  compute::Expression expression;\n+  /// \\brief The output schema of the projection.\n \n-  virtual ~ScanTask() = default;\n+  /// This can be calculated from the input schema and the expression but it\n+  /// is cached here for convenience.\n+  std::shared_ptr<Schema> schema;\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+  /// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+  ///\n+  /// expression must return a struct type\n+  static Result<ProjectionDescr> FromStructExpression(\n+      const compute::Expression& expression, const Schema& dataset_schema);\n \n- protected:\n-  ScanTask(std::shared_ptr<ScanOptions> options, std::shared_ptr<Fragment> fragment)\n-      : options_(std::move(options)), fragment_(std::move(fragment)) {}\n+  /// \\brief Create a ProjectionDescr from expressions/names for each field\n+  static Result<ProjectionDescr> FromExpressions(\n+      const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+      const Schema& dataset_schema);\n \n-  std::shared_ptr<ScanOptions> options_;\n-  std::shared_ptr<Fragment> fragment_;\n+  /// \\brief Create a default projection referencing fields in the dataset schema\n+  static Result<ProjectionDescr> FromNames(std::vector<std::string> names,\n+                                           const Schema& dataset_schema);\n+\n+  /// \\brief Make a projection that projects every field in the dataset schema\n+  static Result<ProjectionDescr> Default(const Schema& dataset_schema);\n };\n \n+/// \\brief Utility method to set the projection expression and schema\n+ARROW_DS_EXPORT void SetProjection(ScanOptions* options, ProjectionDescr projection);\n\nReview comment:\n       Now that I think about it, does this also make sense as a method of ScanOptions?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -823,10 +584,77 @@ Result<int64_t> AsyncScanner::CountRows() {\n   return total.load();\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> AsyncScanner::ToRecordBatchReader() {\n+  ARROW_ASSIGN_OR_RAISE(auto it, ScanBatches());\n+  return std::make_shared<ScannerRecordBatchReader>(options()->projected_schema,\n+                                                    std::move(it));\n+}\n+\n const std::shared_ptr<Dataset>& AsyncScanner::dataset() const { return dataset_; }\n \n+Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n }  // namespace\n \n+Result<ProjectionDescr> ProjectionDescr::FromStructExpression(\n+    const compute::Expression& projection, const Schema& dataset_schema) {\n+  ARROW_ASSIGN_OR_RAISE(compute::Expression bound_expression,\n+                        projection.Bind(dataset_schema));\n+\n+  if (bound_expression.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  std::shared_ptr<Schema> projection_schema =\n+      ::arrow::schema(checked_cast<const StructType&>(*bound_expression.type()).fields(),\n+                      dataset_schema.metadata());\n+\n+  return ProjectionDescr{std::move(bound_expression), std::move(projection_schema)};\n+}\n+\n+Result<ProjectionDescr> ProjectionDescr::FromExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema) {\n+  compute::MakeStructOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n\nReview comment:\n       I'll rebase https://github.com/apache/arrow/pull/11704 when this lands.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -823,10 +584,77 @@ Result<int64_t> AsyncScanner::CountRows() {\n   return total.load();\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> AsyncScanner::ToRecordBatchReader() {\n+  ARROW_ASSIGN_OR_RAISE(auto it, ScanBatches());\n+  return std::make_shared<ScannerRecordBatchReader>(options()->projected_schema,\n+                                                    std::move(it));\n+}\n+\n const std::shared_ptr<Dataset>& AsyncScanner::dataset() const { return dataset_; }\n \n+Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n }  // namespace\n \n+Result<ProjectionDescr> ProjectionDescr::FromStructExpression(\n+    const compute::Expression& projection, const Schema& dataset_schema) {\n+  ARROW_ASSIGN_OR_RAISE(compute::Expression bound_expression,\n+                        projection.Bind(dataset_schema));\n+\n+  if (bound_expression.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  std::shared_ptr<Schema> projection_schema =\n+      ::arrow::schema(checked_cast<const StructType&>(*bound_expression.type()).fields(),\n+                      dataset_schema.metadata());\n+\n+  return ProjectionDescr{std::move(bound_expression), std::move(projection_schema)};\n+}\n+\n+Result<ProjectionDescr> ProjectionDescr::FromExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema) {\n+  compute::MakeStructOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n+\n+      // set metadata and nullability for plain field references\n+      ARROW_ASSIGN_OR_RAISE(auto field, ref->GetOne(dataset_schema));\n+      project_options.field_nullability[i] = field->nullable();\n+      project_options.field_metadata[i] = field->metadata();\n+    }\n+  }\n+\n+  return ProjectionDescr::FromStructExpression(\n+      call(\"make_struct\", std::move(exprs), std::move(project_options)), dataset_schema);\n\nReview comment:\n       Should `exprs` be declared as `vector<>` and not `const vector<>&` then?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T13:31:36.500+0000",
                    "updated": "2022-01-07T13:31:36.500+0000",
                    "started": "2022-01-07T13:31:36.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705029",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#issuecomment-1007638718\n\n\n   > Did we file a JIRA for removing the deprecated flags in 8.0.0?\r\n   \r\n   I just created ARROW-15283\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T18:31:29.840+0000",
                    "updated": "2022-01-07T18:31:29.840+0000",
                    "started": "2022-01-07T18:31:29.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705166",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780473351\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -2239,10 +2233,6 @@ cdef class Scanner(_Weakrefable):\n     use_threads : bool, default True\n         If enabled, then maximum parallelism will be used determined by\n         the number of available CPU cores.\n-    use_async : bool, default False\n\nReview comment:\n       This was bugging me so I went ahead and played around with it.  I don't see any consequences if I change `bint use_async=True` to `object use_async = None` and that allows me to emit the deprecation warning on both `use_async=True` and `use_async=False` (i.e. emit a warning if the user uses the flag in any way).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T19:14:31.767+0000",
                    "updated": "2022-01-07T19:14:31.767+0000",
                    "started": "2022-01-07T19:14:31.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705201",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780473574\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -823,10 +584,77 @@ Result<int64_t> AsyncScanner::CountRows() {\n   return total.load();\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> AsyncScanner::ToRecordBatchReader() {\n+  ARROW_ASSIGN_OR_RAISE(auto it, ScanBatches());\n+  return std::make_shared<ScannerRecordBatchReader>(options()->projected_schema,\n+                                                    std::move(it));\n+}\n+\n const std::shared_ptr<Dataset>& AsyncScanner::dataset() const { return dataset_; }\n \n+Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n }  // namespace\n \n+Result<ProjectionDescr> ProjectionDescr::FromStructExpression(\n+    const compute::Expression& projection, const Schema& dataset_schema) {\n+  ARROW_ASSIGN_OR_RAISE(compute::Expression bound_expression,\n+                        projection.Bind(dataset_schema));\n+\n+  if (bound_expression.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  std::shared_ptr<Schema> projection_schema =\n+      ::arrow::schema(checked_cast<const StructType&>(*bound_expression.type()).fields(),\n+                      dataset_schema.metadata());\n+\n+  return ProjectionDescr{std::move(bound_expression), std::move(projection_schema)};\n+}\n+\n+Result<ProjectionDescr> ProjectionDescr::FromExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema) {\n+  compute::MakeStructOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n+\n+      // set metadata and nullability for plain field references\n+      ARROW_ASSIGN_OR_RAISE(auto field, ref->GetOne(dataset_schema));\n+      project_options.field_nullability[i] = field->nullable();\n+      project_options.field_metadata[i] = field->metadata();\n+    }\n+  }\n+\n+  return ProjectionDescr::FromStructExpression(\n+      call(\"make_struct\", std::move(exprs), std::move(project_options)), dataset_schema);\n\nReview comment:\n       Good catch.  Fixed.  All the callers were moving into it anyways.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T19:15:04.605+0000",
                    "updated": "2022-01-07T19:15:04.605+0000",
                    "started": "2022-01-07T19:15:04.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705202",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780475401\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,46 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n-\n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Describes a projection\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  /// \\brief The projection expression itself\n+  /// This expression must be a call to make_struct\n+  compute::Expression expression;\n+  /// \\brief The output schema of the projection.\n \n-  virtual ~ScanTask() = default;\n+  /// This can be calculated from the input schema and the expression but it\n+  /// is cached here for convenience.\n+  std::shared_ptr<Schema> schema;\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+  /// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+  ///\n+  /// expression must return a struct type\n+  static Result<ProjectionDescr> FromStructExpression(\n+      const compute::Expression& expression, const Schema& dataset_schema);\n \n- protected:\n-  ScanTask(std::shared_ptr<ScanOptions> options, std::shared_ptr<Fragment> fragment)\n-      : options_(std::move(options)), fragment_(std::move(fragment)) {}\n+  /// \\brief Create a ProjectionDescr from expressions/names for each field\n+  static Result<ProjectionDescr> FromExpressions(\n+      const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+      const Schema& dataset_schema);\n \n-  std::shared_ptr<ScanOptions> options_;\n-  std::shared_ptr<Fragment> fragment_;\n+  /// \\brief Create a default projection referencing fields in the dataset schema\n+  static Result<ProjectionDescr> FromNames(std::vector<std::string> names,\n+                                           const Schema& dataset_schema);\n+\n+  /// \\brief Make a projection that projects every field in the dataset schema\n+  static Result<ProjectionDescr> Default(const Schema& dataset_schema);\n };\n \n+/// \\brief Utility method to set the projection expression and schema\n+ARROW_DS_EXPORT void SetProjection(ScanOptions* options, ProjectionDescr projection);\n\nReview comment:\n       Yes...but I don't like the idea of \"options\" classes having methods.  I think someday down the road (I keep mentioning ARROW-12311 so maybe then) this will change.  One possible fix would be to have a single `ProjectionDescr` field in `ScanOptions` although, as mentioned elsewhere, I'd like to remove projection options from scan options entirely (changing it instead to \"which columns to load\").\r\n   \r\n   So I think I'd rather leave it in the current incorrect state rather than move it to an intermediate state.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T19:18:29.269+0000",
                    "updated": "2022-01-07T19:18:29.269+0000",
                    "started": "2022-01-07T19:18:29.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705203",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780484531\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,46 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n-\n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Describes a projection\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  /// \\brief The projection expression itself\n+  /// This expression must be a call to make_struct\n+  compute::Expression expression;\n+  /// \\brief The output schema of the projection.\n \n-  virtual ~ScanTask() = default;\n+  /// This can be calculated from the input schema and the expression but it\n+  /// is cached here for convenience.\n+  std::shared_ptr<Schema> schema;\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+  /// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+  ///\n+  /// expression must return a struct type\n+  static Result<ProjectionDescr> FromStructExpression(\n+      const compute::Expression& expression, const Schema& dataset_schema);\n \n- protected:\n-  ScanTask(std::shared_ptr<ScanOptions> options, std::shared_ptr<Fragment> fragment)\n-      : options_(std::move(options)), fragment_(std::move(fragment)) {}\n+  /// \\brief Create a ProjectionDescr from expressions/names for each field\n+  static Result<ProjectionDescr> FromExpressions(\n+      const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+      const Schema& dataset_schema);\n \n-  std::shared_ptr<ScanOptions> options_;\n-  std::shared_ptr<Fragment> fragment_;\n+  /// \\brief Create a default projection referencing fields in the dataset schema\n+  static Result<ProjectionDescr> FromNames(std::vector<std::string> names,\n+                                           const Schema& dataset_schema);\n+\n+  /// \\brief Make a projection that projects every field in the dataset schema\n+  static Result<ProjectionDescr> Default(const Schema& dataset_schema);\n };\n \n+/// \\brief Utility method to set the projection expression and schema\n+ARROW_DS_EXPORT void SetProjection(ScanOptions* options, ProjectionDescr projection);\n\nReview comment:\n       Ah, that's fair.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-07T19:36:01.660+0000",
                    "updated": "2022-01-07T19:36:01.660+0000",
                    "started": "2022-01-07T19:36:01.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705212",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#discussion_r780263584\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,46 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n-\n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Describes a projection\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  /// \\brief The projection expression itself\n+  /// This expression must be a call to make_struct\n+  compute::Expression expression;\n+  /// \\brief The output schema of the projection.\n \n-  virtual ~ScanTask() = default;\n+  /// This can be calculated from the input schema and the expression but it\n+  /// is cached here for convenience.\n+  std::shared_ptr<Schema> schema;\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+  /// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+  ///\n+  /// expression must return a struct type\n+  static Result<ProjectionDescr> FromStructExpression(\n+      const compute::Expression& expression, const Schema& dataset_schema);\n \n- protected:\n-  ScanTask(std::shared_ptr<ScanOptions> options, std::shared_ptr<Fragment> fragment)\n-      : options_(std::move(options)), fragment_(std::move(fragment)) {}\n+  /// \\brief Create a ProjectionDescr from expressions/names for each field\n+  static Result<ProjectionDescr> FromExpressions(\n+      const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+      const Schema& dataset_schema);\n \n-  std::shared_ptr<ScanOptions> options_;\n-  std::shared_ptr<Fragment> fragment_;\n+  /// \\brief Create a default projection referencing fields in the dataset schema\n+  static Result<ProjectionDescr> FromNames(std::vector<std::string> names,\n+                                           const Schema& dataset_schema);\n+\n+  /// \\brief Make a projection that projects every field in the dataset schema\n+  static Result<ProjectionDescr> Default(const Schema& dataset_schema);\n };\n \n+/// \\brief Utility method to set the projection expression and schema\n+ARROW_DS_EXPORT void SetProjection(ScanOptions* options, ProjectionDescr projection);\n\nReview comment:\n       Now that I think about it, does this also make sense as a method of ScanOptions?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -823,10 +584,77 @@ Result<int64_t> AsyncScanner::CountRows() {\n   return total.load();\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> AsyncScanner::ToRecordBatchReader() {\n+  ARROW_ASSIGN_OR_RAISE(auto it, ScanBatches());\n+  return std::make_shared<ScannerRecordBatchReader>(options()->projected_schema,\n+                                                    std::move(it));\n+}\n+\n const std::shared_ptr<Dataset>& AsyncScanner::dataset() const { return dataset_; }\n \n+Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n }  // namespace\n \n+Result<ProjectionDescr> ProjectionDescr::FromStructExpression(\n+    const compute::Expression& projection, const Schema& dataset_schema) {\n+  ARROW_ASSIGN_OR_RAISE(compute::Expression bound_expression,\n+                        projection.Bind(dataset_schema));\n+\n+  if (bound_expression.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  std::shared_ptr<Schema> projection_schema =\n+      ::arrow::schema(checked_cast<const StructType&>(*bound_expression.type()).fields(),\n+                      dataset_schema.metadata());\n+\n+  return ProjectionDescr{std::move(bound_expression), std::move(projection_schema)};\n+}\n+\n+Result<ProjectionDescr> ProjectionDescr::FromExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema) {\n+  compute::MakeStructOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n\nReview comment:\n       I'll rebase https://github.com/apache/arrow/pull/11704 when this lands.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -823,10 +584,77 @@ Result<int64_t> AsyncScanner::CountRows() {\n   return total.load();\n }\n \n+Result<std::shared_ptr<RecordBatchReader>> AsyncScanner::ToRecordBatchReader() {\n+  ARROW_ASSIGN_OR_RAISE(auto it, ScanBatches());\n+  return std::make_shared<ScannerRecordBatchReader>(options()->projected_schema,\n+                                                    std::move(it));\n+}\n+\n const std::shared_ptr<Dataset>& AsyncScanner::dataset() const { return dataset_; }\n \n+Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n }  // namespace\n \n+Result<ProjectionDescr> ProjectionDescr::FromStructExpression(\n+    const compute::Expression& projection, const Schema& dataset_schema) {\n+  ARROW_ASSIGN_OR_RAISE(compute::Expression bound_expression,\n+                        projection.Bind(dataset_schema));\n+\n+  if (bound_expression.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  std::shared_ptr<Schema> projection_schema =\n+      ::arrow::schema(checked_cast<const StructType&>(*bound_expression.type()).fields(),\n+                      dataset_schema.metadata());\n+\n+  return ProjectionDescr{std::move(bound_expression), std::move(projection_schema)};\n+}\n+\n+Result<ProjectionDescr> ProjectionDescr::FromExpressions(\n+    const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+    const Schema& dataset_schema) {\n+  compute::MakeStructOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n+\n+      // set metadata and nullability for plain field references\n+      ARROW_ASSIGN_OR_RAISE(auto field, ref->GetOne(dataset_schema));\n+      project_options.field_nullability[i] = field->nullable();\n+      project_options.field_metadata[i] = field->metadata();\n+    }\n+  }\n+\n+  return ProjectionDescr::FromStructExpression(\n+      call(\"make_struct\", std::move(exprs), std::move(project_options)), dataset_schema);\n\nReview comment:\n       Should `exprs` be declared as `vector<>` and not `const vector<>&` then?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -138,41 +133,46 @@ struct ARROW_DS_EXPORT ScanOptions {\n   // This is used by Fragment implementations to apply the column\n   // sub-selection optimization.\n   std::vector<std::string> MaterializedFields() const;\n-\n-  // Return a threaded or serial TaskGroup according to use_threads.\n-  std::shared_ptr<::arrow::internal::TaskGroup> TaskGroup() const;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment. A\n-/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n-/// must be thread and concurrent safe.\n-class ARROW_DS_EXPORT ScanTask {\n- public:\n-  /// \\brief Iterate through sequence of materialized record batches\n-  /// resulting from the Scan. Execution semantics are encapsulated in the\n-  /// particular ScanTask implementation\n-  virtual Result<RecordBatchIterator> Execute() = 0;\n-  virtual Future<RecordBatchVector> SafeExecute(::arrow::internal::Executor* executor);\n-  virtual Future<> SafeVisit(::arrow::internal::Executor* executor,\n-                             std::function<Status(std::shared_ptr<RecordBatch>)> visitor);\n+/// \\brief Describes a projection\n+struct ARROW_DS_EXPORT ProjectionDescr {\n+  /// \\brief The projection expression itself\n+  /// This expression must be a call to make_struct\n+  compute::Expression expression;\n+  /// \\brief The output schema of the projection.\n \n-  virtual ~ScanTask() = default;\n+  /// This can be calculated from the input schema and the expression but it\n+  /// is cached here for convenience.\n+  std::shared_ptr<Schema> schema;\n \n-  const std::shared_ptr<ScanOptions>& options() const { return options_; }\n-  const std::shared_ptr<Fragment>& fragment() const { return fragment_; }\n+  /// \\brief Create a ProjectionDescr by binding an expression to the dataset schema\n+  ///\n+  /// expression must return a struct type\n+  static Result<ProjectionDescr> FromStructExpression(\n+      const compute::Expression& expression, const Schema& dataset_schema);\n \n- protected:\n-  ScanTask(std::shared_ptr<ScanOptions> options, std::shared_ptr<Fragment> fragment)\n-      : options_(std::move(options)), fragment_(std::move(fragment)) {}\n+  /// \\brief Create a ProjectionDescr from expressions/names for each field\n+  static Result<ProjectionDescr> FromExpressions(\n+      const std::vector<compute::Expression>& exprs, std::vector<std::string> names,\n+      const Schema& dataset_schema);\n \n-  std::shared_ptr<ScanOptions> options_;\n-  std::shared_ptr<Fragment> fragment_;\n+  /// \\brief Create a default projection referencing fields in the dataset schema\n+  static Result<ProjectionDescr> FromNames(std::vector<std::string> names,\n+                                           const Schema& dataset_schema);\n+\n+  /// \\brief Make a projection that projects every field in the dataset schema\n+  static Result<ProjectionDescr> Default(const Schema& dataset_schema);\n };\n \n+/// \\brief Utility method to set the projection expression and schema\n+ARROW_DS_EXPORT void SetProjection(ScanOptions* options, ProjectionDescr projection);\n\nReview comment:\n       Ah, that's fair.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-08T10:10:36.922+0000",
                    "updated": "2022-01-08T10:10:36.922+0000",
                    "started": "2022-01-08T10:10:36.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705472",
                    "issueId": "13393506"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/worklog/705640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #11991:\nURL: https://github.com/apache/arrow/pull/11991#issuecomment-1007638718\n\n\n   > Did we file a JIRA for removing the deprecated flags in 8.0.0?\r\n   \r\n   I just created ARROW-15283\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-08T10:26:52.625+0000",
                    "updated": "2022-01-08T10:26:52.625+0000",
                    "started": "2022-01-08T10:26:52.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "705640",
                    "issueId": "13393506"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@175ef03d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ab349ef[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@578438b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@45c48efa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2258e83e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b06d3db[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ca5a32b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5d77591b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@380b4393[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@75dec742[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64f39e29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@32bac2d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 10 18:26:10 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-10T18:26:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13554/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-08-04T14:22:09.000+0000",
        "updated": "2022-01-12T03:57:27.000+0000",
        "timeoriginalestimate": null,
        "description": "It was already slated for removal in 5.0.0.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Remove deprecated Scanner::Scan",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/comment/17393207",
                    "id": "17393207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~westonpace]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T14:22:33.924+0000",
                    "updated": "2021-08-04T14:22:33.924+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/comment/17393509",
                    "id": "17393509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Agreed.  This will simplify quite a bit and, as you pointed out, it has been communicated for a while now.  I think I can get to this soon as part of the \"write\" exec node.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-05T00:04:06.035+0000",
                    "updated": "2021-08-05T00:04:06.035+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/comment/17460940",
                    "id": "17460940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~westonpace] Do you think this can be done soon?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-16T18:13:24.757+0000",
                    "updated": "2021-12-16T18:13:24.757+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/comment/17460997",
                    "id": "17460997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yes, I think this and ARROW-13338 will be really good to get into 7.0.0.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-16T19:29:11.636+0000",
                    "updated": "2021-12-16T19:29:11.636+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393506/comment/17472213",
                    "id": "17472213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 11991\n[https://github.com/apache/arrow/pull/11991]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-10T18:26:10.202+0000",
                    "updated": "2022-01-10T18:26:10.202+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0tlxc:",
        "customfield_12314139": null
    }
}