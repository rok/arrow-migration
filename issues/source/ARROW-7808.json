{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13284180",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180",
    "key": "ARROW-7808",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616753",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616753",
                "type": {
                    "id": "12310010",
                    "name": "Incorporates",
                    "inward": "is part of",
                    "outward": "incorporates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"
                },
                "inwardIssue": {
                    "id": "13259171",
                    "key": "ARROW-6720",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259171",
                    "fields": {
                        "summary": "[JAVA][C++]Support Parquet Read and Write in Java",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/4",
                            "description": "This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/reopened.png",
                            "name": "Reopened",
                            "id": "4",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
            "name": "zhztheplayer",
            "key": "zhztheplayer",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Hongze Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
            "name": "zhztheplayer",
            "key": "zhztheplayer",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Hongze Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
            "name": "zhztheplayer",
            "key": "zhztheplayer",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Hongze Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 120600,
            "total": 120600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 120600,
            "total": 120600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7808/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 201,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/426913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zhztheplayer opened a new pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030\n\n\n   Add following Datasets APIs to Java:\r\n   \r\n   - DatasetFactory\r\n   - Dataset\r\n   - Scanner\r\n   - ScanTask\r\n   \r\n   Add a native dataset path to bridge c++ Datasets components to Java:\r\n   \r\n   - NativeDatasetFactory\r\n   - NativeDataset\r\n   - NativeScanner\r\n   - NativeScanTask\r\n   \r\n   Add a simple reference `NativeDatasetFactory` implementation, which is already being useful in some scenarios:\r\n   \r\n   - SingleFileDatasetFactory\r\n   - SingleFileDataset\r\n   \r\n   \r\n   Unit tests are based on `SingleFileDataset`/`NativeDatasetFactory`. I may add more test cases under this PR in a time.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T09:44:42.539+0000",
                    "updated": "2020-04-24T09:44:42.539+0000",
                    "started": "2020-04-24T09:44:42.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426913",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/426923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#issuecomment-618919224\n\n\n   https://issues.apache.org/jira/browse/ARROW-7808\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T09:57:59.021+0000",
                    "updated": "2020-04-24T09:57:59.021+0000",
                    "started": "2020-04-24T09:57:59.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426923",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414983499\n\n\n\n##########\nFile path: cpp/src/jni/dataset/concurrent_map.h\n##########\n@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ */\n+\n+#ifndef JNI_ID_TO_MODULE_MAP_H\n+#define JNI_ID_TO_MODULE_MAP_H\n+\n+#include <memory>\n+#include <mutex>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"jni.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n\nReview comment:\n       Please do not copy and paste this file, factor it out to a common place that can be used by all JNI implementations.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:19:30.727+0000",
                    "updated": "2020-04-25T05:19:30.727+0000",
                    "started": "2020-04-25T05:19:30.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427159",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414984380\n\n\n\n##########\nFile path: cpp/src/jni/dataset/jni_wrapper.cpp\n##########\n@@ -0,0 +1,577 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/dataset/file_base.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/filesystem/localfs.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/iterator.h>\n+#include <arrow/filesystem/hdfs.h>\n+#include <arrow/io/api.h>\n+#include <google/protobuf/io/coded_stream.h>\n+#include <google/protobuf/message.h>\n+#include \"concurrent_map.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/cast.h\"\n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"jni/dataset/Types.pb.h\"\n+\n+#include \"org_apache_arrow_dataset_jni_JniWrapper.h\"\n+#include \"org_apache_arrow_dataset_file_JniWrapper.h\"\n+\n+static jclass illegal_access_exception_class;\n+static jclass illegal_argument_exception_class;\n+static jclass runtime_exception_class;\n+\n+static jclass record_batch_handle_class;\n+static jclass record_batch_handle_field_class;\n+static jclass record_batch_handle_buffer_class;\n+\n+static jmethodID record_batch_handle_constructor;\n+static jmethodID record_batch_handle_field_constructor;\n+static jmethodID record_batch_handle_buffer_constructor;\n+\n+static jint JNI_VERSION = JNI_VERSION_1_6;\n+\n+using arrow::jni::ConcurrentMap;\n+\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::DatasetFactory>> dataset_factory_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Dataset>> dataset_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::ScanTask>> scan_task_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Scanner>> scanner_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::RecordBatchIterator>> iterator_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::Buffer>> buffer_holder_;\n+\n+#define JNI_ASSIGN_OR_THROW_NAME(x, y) ARROW_CONCAT(x, y)\n\nReview comment:\n       I don't think these macros are necessary.  you should be able to use a normal (templated) function since you throw an exception instead of return.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:26:07.807+0000",
                    "updated": "2020-04-25T05:26:07.807+0000",
                    "started": "2020-04-25T05:26:07.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427160",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414984900\n\n\n\n##########\nFile path: cpp/src/jni/dataset/jni_wrapper.cpp\n##########\n@@ -0,0 +1,577 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/dataset/file_base.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/filesystem/localfs.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/iterator.h>\n+#include <arrow/filesystem/hdfs.h>\n+#include <arrow/io/api.h>\n+#include <google/protobuf/io/coded_stream.h>\n+#include <google/protobuf/message.h>\n+#include \"concurrent_map.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/cast.h\"\n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"jni/dataset/Types.pb.h\"\n+\n+#include \"org_apache_arrow_dataset_jni_JniWrapper.h\"\n+#include \"org_apache_arrow_dataset_file_JniWrapper.h\"\n+\n+static jclass illegal_access_exception_class;\n+static jclass illegal_argument_exception_class;\n+static jclass runtime_exception_class;\n+\n+static jclass record_batch_handle_class;\n+static jclass record_batch_handle_field_class;\n+static jclass record_batch_handle_buffer_class;\n+\n+static jmethodID record_batch_handle_constructor;\n+static jmethodID record_batch_handle_field_constructor;\n+static jmethodID record_batch_handle_buffer_constructor;\n+\n+static jint JNI_VERSION = JNI_VERSION_1_6;\n+\n+using arrow::jni::ConcurrentMap;\n+\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::DatasetFactory>> dataset_factory_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Dataset>> dataset_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::ScanTask>> scan_task_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Scanner>> scanner_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::RecordBatchIterator>> iterator_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::Buffer>> buffer_holder_;\n+\n+#define JNI_ASSIGN_OR_THROW_NAME(x, y) ARROW_CONCAT(x, y)\n+\n+#define JNI_ASSIGN_OR_THROW_IMPL(t, lhs, rexpr)                             \\\n+  auto t = (rexpr);                                                         \\\n+  if (!t.status().ok()) {                                                   \\\n+    env->ThrowNew(runtime_exception_class, t.status().message().c_str());   \\\n+  }                                                                         \\\n+  lhs = std::move(t).ValueOrDie();\n+\n+#define JNI_ASSIGN_OR_THROW(lhs, rexpr)                                     \\\n+  JNI_ASSIGN_OR_THROW_IMPL(JNI_ASSIGN_OR_THROW_NAME(_tmp_var, __COUNTER__), lhs, rexpr)\n+\n+#define JNI_ASSERT_OK_OR_THROW(expr)                                          \\\n+  do {                                                                        \\\n+    auto _res = (expr);                                                       \\\n+    arrow::Status _st = ::arrow::internal::GenericToStatus(_res);             \\\n+    if (!_st.ok()) {                                                          \\\n+       env->ThrowNew(runtime_exception_class, _st.message().c_str());  \\\n+    }                                                                         \\\n+  } while (false);\n+\n+jclass CreateGlobalClassReference(JNIEnv* env, const char* class_name) {\n+  jclass local_class = env->FindClass(class_name);\n+  jclass global_class = (jclass)env->NewGlobalRef(local_class);\n+  env->DeleteLocalRef(local_class);\n+  return global_class;\n+}\n+\n+jmethodID GetMethodID(JNIEnv* env, jclass this_class, const char* name, const char* sig) {\n+  jmethodID ret = env->GetMethodID(this_class, name, sig);\n+  if (ret == nullptr) {\n+    std::string error_message = \"Unable to find method \" + std::string(name) +\n+        \" within signature\" + std::string(sig);\n+    env->ThrowNew(illegal_access_exception_class, error_message.c_str());\n+  }\n+  return ret;\n+}\n+\n+jint JNI_OnLoad(JavaVM* vm, void* reserved) {\n+  JNIEnv* env;\n+  if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  illegal_access_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/IllegalAccessException;\");\n+  illegal_argument_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/IllegalArgumentException;\");\n+  runtime_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/RuntimeException;\");\n+\n+  record_batch_handle_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle;\");\n+  record_batch_handle_field_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Field;\");\n+  record_batch_handle_buffer_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Buffer;\");\n+\n+  record_batch_handle_constructor = GetMethodID(env, record_batch_handle_class, \"<init>\",\n+                                                \"(J[Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Field;\"\n+                                                \"[Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Buffer;)V\");\n+  record_batch_handle_field_constructor = GetMethodID(env, record_batch_handle_field_class, \"<init>\",\n+                                                      \"(JJ)V\");\n+  record_batch_handle_buffer_constructor = GetMethodID(env, record_batch_handle_buffer_class, \"<init>\",\n+                                                       \"(JJJJ)V\");\n+\n+  env->ExceptionDescribe();\n+\n+  return JNI_VERSION;\n+}\n+\n+\n+void JNI_OnUnload(JavaVM* vm, void* reserved) {\n+  JNIEnv* env;\n+  vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION);\n+  env->DeleteGlobalRef(illegal_access_exception_class);\n+  env->DeleteGlobalRef(illegal_argument_exception_class);\n+  env->DeleteGlobalRef(runtime_exception_class);\n+  env->DeleteGlobalRef(record_batch_handle_class);\n+  env->DeleteGlobalRef(record_batch_handle_field_class);\n+  env->DeleteGlobalRef(record_batch_handle_buffer_class);\n+\n+  dataset_factory_holder_.Clear();\n+  dataset_holder_.Clear();\n+  scan_task_holder_.Clear();\n+  scanner_holder_.Clear();\n+  iterator_holder_.Clear();\n+  buffer_holder_.Clear();\n+}\n+\n+std::shared_ptr<arrow::Schema> SchemaFromColumnNames(\n+    const std::shared_ptr<arrow::Schema>& input, const std::vector<std::string>& column_names) {\n+  std::vector<std::shared_ptr<arrow::Field>> columns;\n+  for (const auto& name : column_names) {\n+    columns.push_back(input->GetFieldByName(name));\n+  }\n+  return std::make_shared<arrow::Schema>(columns);\n+}\n+\n+std::shared_ptr<arrow::dataset::FileFormat> GetFileFormat(JNIEnv *env, jint id) {\n+  switch (id) {\n+    case 0:\n+      return std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    default:\n+      std::string error_message = \"illegal file format id: \" + std::to_string(id);\n+      env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+      return nullptr; // unreachable\n+  }\n+}\n+\n+std::shared_ptr<arrow::fs::FileSystem> GetFileSystem(JNIEnv *env, jint id, std::string path,\n+                                       std::string* out_path) {\n+  switch (id) {\n+    case 0:\n+      *out_path = path;\n+      return std::make_shared<arrow::fs::LocalFileSystem>();\n+    case 1: {\n+      JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::fs::FileSystem> ret, arrow::fs::FileSystemFromUri(path, out_path))\n+      return ret;\n+    }\n+    default:std::string error_message = \"illegal filesystem id: \" + std::to_string(id);\n+      env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+      return nullptr; // unreachable\n+  }\n+}\n+\n+std::string JStringToCString(JNIEnv* env, jstring string) {\n+  jboolean copied;\n+  int32_t length = env->GetStringUTFLength(string);\n+  const char *chars = env->GetStringUTFChars(string, &copied);\n+  std::string str = std::string(chars, length);\n+  // fixme calling ReleaseStringUTFChars if memory leak faced\n+  return str;\n+}\n+\n+std::vector<std::string> ToStringVector(JNIEnv* env, jobjectArray& str_array) {\n+  int length = env->GetArrayLength(str_array);\n+  std::vector<std::string> vector;\n+  for (int i = 0; i < length; i++) {\n+    auto string = (jstring) (env->GetObjectArrayElement(str_array, i));\n+    vector.push_back(JStringToCString(env, string));\n+  }\n+  return vector;\n+}\n+\n+template <typename T>\n+std::vector<T> collect(JNIEnv* env, arrow::Iterator<T> itr) {\n+  std::vector<T> vector;\n+  while(true) {\n+    JNI_ASSIGN_OR_THROW(T t, itr.Next())\n+    if (!t) {\n+      break;\n+    }\n+    vector.push_back(t);\n+  }\n+  return vector;\n+}\n+\n+// FIXME: COPIED FROM intel/master on which this branch is not rebased yet\n+// FIXME: https://github.com/Intel-bigdata/arrow/blob/02502a4eb59834c2471dd629e77dbeed19559f68/cpp/src/jni/jni_common.h#L239-L254\n+jbyteArray ToSchemaByteArray(JNIEnv* env, std::shared_ptr<arrow::Schema> schema) {\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::Buffer> buffer,\n+      arrow::ipc::SerializeSchema(*schema.get(), nullptr, arrow::default_memory_pool()))\n+\n+  jbyteArray out = env->NewByteArray(buffer->size());\n+  auto src = reinterpret_cast<const jbyte*>(buffer->data());\n+  env->SetByteArrayRegion(out, 0, buffer->size(), src);\n+  return out;\n+}\n+\n+// FIXME: COPIED FROM intel/master on which this branch is not rebased yet\n\nReview comment:\n       it looks like there are a lot of FIXMEs can you address those?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:28:52.694+0000",
                    "updated": "2020-04-25T05:28:52.694+0000",
                    "started": "2020-04-25T05:28:52.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427161",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414985230\n\n\n\n##########\nFile path: cpp/src/jni/dataset/jni_wrapper.cpp\n##########\n@@ -0,0 +1,577 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/dataset/file_base.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/filesystem/localfs.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/iterator.h>\n+#include <arrow/filesystem/hdfs.h>\n+#include <arrow/io/api.h>\n+#include <google/protobuf/io/coded_stream.h>\n+#include <google/protobuf/message.h>\n+#include \"concurrent_map.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/cast.h\"\n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"jni/dataset/Types.pb.h\"\n+\n+#include \"org_apache_arrow_dataset_jni_JniWrapper.h\"\n+#include \"org_apache_arrow_dataset_file_JniWrapper.h\"\n+\n+static jclass illegal_access_exception_class;\n+static jclass illegal_argument_exception_class;\n+static jclass runtime_exception_class;\n+\n+static jclass record_batch_handle_class;\n+static jclass record_batch_handle_field_class;\n+static jclass record_batch_handle_buffer_class;\n+\n+static jmethodID record_batch_handle_constructor;\n+static jmethodID record_batch_handle_field_constructor;\n+static jmethodID record_batch_handle_buffer_constructor;\n+\n+static jint JNI_VERSION = JNI_VERSION_1_6;\n+\n+using arrow::jni::ConcurrentMap;\n+\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::DatasetFactory>> dataset_factory_holder_;\n\nReview comment:\n       this still strikes me as a bad pattern.\r\n   \r\n   https://stackoverflow.com/questions/26375215/c-shared-ptr-and-java-native-object-ownership/26377515 seems better.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:30:46.703+0000",
                    "updated": "2020-04-25T05:30:46.703+0000",
                    "started": "2020-04-25T05:30:46.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427162",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414986335\n\n\n\n##########\nFile path: cpp/src/jni/dataset/proto/Types.proto\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+syntax = \"proto2\";\n+package types;\n+\n+option java_package = \"org.apache.arrow.dataset\";\n\nReview comment:\n       why is this file being introduced?  \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:36:02.077+0000",
                    "updated": "2020-04-25T05:36:02.077+0000",
                    "started": "2020-04-25T05:36:02.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427163",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414986841\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/file/JniWrapper.java\n##########\n@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.file;\n+\n+import org.apache.arrow.dataset.jni.JniLoader;\n+\n+/**\n+ * JniWrapper for filesystem based {@link org.apache.arrow.dataset.source.Dataset} implementations.\n+ */\n+public class JniWrapper {\n+\n\nReview comment:\n       private constructor?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:37:05.835+0000",
                    "updated": "2020-04-25T05:37:05.835+0000",
                    "started": "2020-04-25T05:37:05.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427164",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414986958\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/filter/Filter.java\n##########\n@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.filter;\n+\n+// todo filter tree implementation\n\nReview comment:\n       leave this out if it isn't implemented.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:37:59.597+0000",
                    "updated": "2020-04-25T05:37:59.597+0000",
                    "started": "2020-04-25T05:37:59.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427165",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414987154\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/jni/JniWrapper.java\n##########\n@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.jni;\n+\n+/**\n+ * JNI wrapper for Datasets API's native implementation.\n+ */\n+public class JniWrapper {\n+\n+  private static final JniWrapper INSTANCE = new JniWrapper();\n+\n+  public static JniWrapper get() {\n+    return INSTANCE;\n+  }\n+\n+  private JniWrapper() {\n+    JniLoader.get().ensureLoaded();\n+  }\n+\n+  public native void closeDatasetFactory(long datasetFactoryId);\n\nReview comment:\n       these methods need javadoc.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:39:13.809+0000",
                    "updated": "2020-04-25T05:39:13.809+0000",
                    "started": "2020-04-25T05:39:13.809+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427166",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414987685\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/scanner/ScanTask.java\n##########\n@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.scanner;\n+\n+import java.util.Iterator;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * Read record batches from a range of a single data fragment. A\n+ * ScanTask is meant to be a unit of work to be dispatched. The implementation\n+ * must be thread and concurrent safe.\n+ */\n+public interface ScanTask {\n+\n+  /**\n+   * Creates and returns a {@link Itr} instance.\n+   */\n+  Itr scan();\n+\n+  /**\n+   * The iterator implementation for {@link VectorSchemaRoot}s.\n+   */\n+  interface Itr extends Iterator<VectorSchemaRoot>, AutoCloseable {\n\nReview comment:\n       can we call this \"Iterator\"?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:42:55.402+0000",
                    "updated": "2020-04-25T05:42:55.402+0000",
                    "started": "2020-04-25T05:42:55.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427167",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414987799\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/scanner/ScanTask.java\n##########\n@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.scanner;\n+\n+import java.util.Iterator;\n+\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * Read record batches from a range of a single data fragment. A\n+ * ScanTask is meant to be a unit of work to be dispatched. The implementation\n+ * must be thread and concurrent safe.\n+ */\n+public interface ScanTask {\n+\n+  /**\n+   * Creates and returns a {@link Itr} instance.\n+   */\n+  Itr scan();\n+\n+  /**\n+   * The iterator implementation for {@link VectorSchemaRoot}s.\n+   */\n+  interface Itr extends Iterator<VectorSchemaRoot>, AutoCloseable {\n+    // FIXME VectorSchemaRoot is not actually something ITERABLE. Using a reader convention instead.\n\nReview comment:\n       Fix this?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:43:38.978+0000",
                    "updated": "2020-04-25T05:43:38.978+0000",
                    "started": "2020-04-25T05:43:38.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427168",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414987860\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/dataset/source/DatasetFactory.java\n##########\n@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.source;\n+\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+/**\n+ * DataSourceDiscovery provides a way to inspect a DataSource potential\n+ * schema before materializing it. Thus, the user can peek the schema for\n+ * data sources and decide on a unified schema.\n+ */\n+public interface DatasetFactory {\n+\n+  Schema inspect();\n+\n\nReview comment:\n       javadoc.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:44:02.735+0000",
                    "updated": "2020-04-25T05:44:02.735+0000",
                    "started": "2020-04-25T05:44:02.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427169",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414988086\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/memory/NativeUnderlingMemory.java\n##########\n@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.dataset.jni.JniWrapper;\n+\n+/**\n+ * AllocationManager implementation for Native allocated memory.\n+ */\n+public class NativeUnderlingMemory extends AllocationManager {\n\nReview comment:\n       this should probably be in a different common package if we want to wrap the C++ allocator.  It isn't clear to me that we should do this because we lose java native heap caps IIUC.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:45:33.928+0000",
                    "updated": "2020-04-25T05:45:33.928+0000",
                    "started": "2020-04-25T05:45:33.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427170",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414988443\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/util/SchemaUtils.java\n##########\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.channels.Channels;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageChannelReader;\n+import org.apache.arrow.vector.ipc.message.MessageResult;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ByteArrayReadableSeekableByteChannel;\n+\n+/**\n+ * Schema utility class including serialization and deserialization.\n+ */\n+public class SchemaUtils {\n\nReview comment:\n       this probably belongs in the vector package.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:47:37.744+0000",
                    "updated": "2020-04-25T05:47:37.744+0000",
                    "started": "2020-04-25T05:47:37.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427171",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414988474\n\n\n\n##########\nFile path: java/dataset/src/main/java/org/apache/arrow/util/SchemaUtils.java\n##########\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.channels.Channels;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ReadChannel;\n+import org.apache.arrow.vector.ipc.WriteChannel;\n+import org.apache.arrow.vector.ipc.message.MessageChannelReader;\n+import org.apache.arrow.vector.ipc.message.MessageResult;\n+import org.apache.arrow.vector.ipc.message.MessageSerializer;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ByteArrayReadableSeekableByteChannel;\n+\n+/**\n+ * Schema utility class including serialization and deserialization.\n+ */\n+public class SchemaUtils {\n+  private static final SchemaUtils INSTANCE = new SchemaUtils();\n+\n+  public static SchemaUtils get() {\n+    return INSTANCE;\n+  }\n+\n+  private SchemaUtils() {\n+\n+  }\n+\n+  /**\n+   * Deserialize Arrow schema from byte array.\n+   */\n+  public Schema deserialize(byte[] bytes, BufferAllocator allocator) throws IOException {\n\nReview comment:\n       why not make these static methods? instead of using a singleton pattern?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:48:01.591+0000",
                    "updated": "2020-04-25T05:48:01.591+0000",
                    "started": "2020-04-25T05:48:01.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427172",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414988755\n\n\n\n##########\nFile path: java/dataset/src/test/java/org/apache/arrow/util/SchemaUtilsTest.java\n##########\n@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.util;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SchemaUtilsTest {\n+\n+  private static Field field(String name, boolean nullable, ArrowType type, Field... children) {\n+    return new Field(name, new FieldType(nullable, type, null, null), asList(children));\n+  }\n+\n+  @Test\n+  public void testSerializationAndDeserialization() throws IOException {\n+    Schema schema = new Schema(asList(\n+        field(\"a\", false, new ArrowType.Null()),\n+        field(\"b\", true, new ArrowType.Utf8()),\n+        field(\"c\", true, new ArrowType.Binary()))\n+    );\n+\n+    byte[] serialized = SchemaUtils.get().serialize(schema);\n+    Schema deserialized = SchemaUtils.get().deserialize(serialized, new RootAllocator(Long.MAX_VALUE));\n+    Assert.assertEquals(schema, deserialized);\n\nReview comment:\n       generally, I think we static import assertEquals.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:49:25.545+0000",
                    "updated": "2020-04-25T05:49:25.545+0000",
                    "started": "2020-04-25T05:49:25.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427173",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414988831\n\n\n\n##########\nFile path: java/pom.xml\n##########\n@@ -369,24 +369,24 @@\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.6.2</version>\n-          <configuration>\n-            <compilerArgs>\n-              <arg>-XDcompilePolicy=simple</arg>\n-              <arg>-Xplugin:ErrorProne</arg>\n-            </compilerArgs>\n-            <annotationProcessorPaths>\n-              <path>\n-                <groupId>com.google.errorprone</groupId>\n-                <artifactId>error_prone_core</artifactId>\n-                <version>2.3.3</version>\n-              </path>\n-              <path>\n-                <groupId>org.immutables</groupId>\n-                <artifactId>value</artifactId>\n-                <version>2.8.2</version>\n-              </path>\n-            </annotationProcessorPaths>\n-          </configuration>\n+<!--          <configuration>-->\n\nReview comment:\n       revert this?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:49:49.320+0000",
                    "updated": "2020-04-25T05:49:49.320+0000",
                    "started": "2020-04-25T05:49:49.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427174",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414989258\n\n\n\n##########\nFile path: java/dataset/src/test/java/org/apache/arrow/dataset/jni/NativeDatasetTest.java\n##########\n@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.dataset.jni;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.arrow.dataset.DatasetTypes;\n+import org.apache.arrow.dataset.file.FileFormat;\n+import org.apache.arrow.dataset.file.FileSystem;\n+import org.apache.arrow.dataset.file.SingleFileDatasetFactory;\n+import org.apache.arrow.dataset.filter.Filter;\n+import org.apache.arrow.dataset.filter.FilterImpl;\n+import org.apache.arrow.dataset.scanner.ScanOptions;\n+import org.apache.arrow.dataset.scanner.ScanTask;\n+import org.apache.arrow.dataset.scanner.Scanner;\n+import org.apache.arrow.dataset.source.Dataset;\n+import org.apache.arrow.dataset.source.DatasetFactory;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class NativeDatasetTest {\n+\n+  private String sampleParquetPath() {\n+    return NativeDatasetTest.class.getResource(File.separator + \"userdata.parquet\").getPath();\n\nReview comment:\n       please don't check the binary file into this repo.  It would be better to generate a file on the fly, so readers of the test can understand what data exists there.  If a standalone parquet file is really needed [arrow-testing](https://github.com/apache/arrow-testing) is the place to put it\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:52:45.957+0000",
                    "updated": "2020-04-25T05:52:45.957+0000",
                    "started": "2020-04-25T05:52:45.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427175",
                    "issueId": "13284180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/worklog/427176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7030:\nURL: https://github.com/apache/arrow/pull/7030#discussion_r414989937\n\n\n\n##########\nFile path: cpp/src/jni/dataset/jni_wrapper.cpp\n##########\n@@ -0,0 +1,577 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/dataset/file_base.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/filesystem/localfs.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/iterator.h>\n+#include <arrow/filesystem/hdfs.h>\n+#include <arrow/io/api.h>\n+#include <google/protobuf/io/coded_stream.h>\n+#include <google/protobuf/message.h>\n+#include \"concurrent_map.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/cast.h\"\n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"jni/dataset/Types.pb.h\"\n+\n+#include \"org_apache_arrow_dataset_jni_JniWrapper.h\"\n+#include \"org_apache_arrow_dataset_file_JniWrapper.h\"\n+\n+static jclass illegal_access_exception_class;\n+static jclass illegal_argument_exception_class;\n+static jclass runtime_exception_class;\n+\n+static jclass record_batch_handle_class;\n+static jclass record_batch_handle_field_class;\n+static jclass record_batch_handle_buffer_class;\n+\n+static jmethodID record_batch_handle_constructor;\n+static jmethodID record_batch_handle_field_constructor;\n+static jmethodID record_batch_handle_buffer_constructor;\n+\n+static jint JNI_VERSION = JNI_VERSION_1_6;\n+\n+using arrow::jni::ConcurrentMap;\n+\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::DatasetFactory>> dataset_factory_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Dataset>> dataset_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::ScanTask>> scan_task_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::dataset::Scanner>> scanner_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::RecordBatchIterator>> iterator_holder_;\n+static ConcurrentMap<std::shared_ptr<arrow::Buffer>> buffer_holder_;\n+\n+#define JNI_ASSIGN_OR_THROW_NAME(x, y) ARROW_CONCAT(x, y)\n+\n+#define JNI_ASSIGN_OR_THROW_IMPL(t, lhs, rexpr)                             \\\n+  auto t = (rexpr);                                                         \\\n+  if (!t.status().ok()) {                                                   \\\n+    env->ThrowNew(runtime_exception_class, t.status().message().c_str());   \\\n+  }                                                                         \\\n+  lhs = std::move(t).ValueOrDie();\n+\n+#define JNI_ASSIGN_OR_THROW(lhs, rexpr)                                     \\\n+  JNI_ASSIGN_OR_THROW_IMPL(JNI_ASSIGN_OR_THROW_NAME(_tmp_var, __COUNTER__), lhs, rexpr)\n+\n+#define JNI_ASSERT_OK_OR_THROW(expr)                                          \\\n+  do {                                                                        \\\n+    auto _res = (expr);                                                       \\\n+    arrow::Status _st = ::arrow::internal::GenericToStatus(_res);             \\\n+    if (!_st.ok()) {                                                          \\\n+       env->ThrowNew(runtime_exception_class, _st.message().c_str());  \\\n+    }                                                                         \\\n+  } while (false);\n+\n+jclass CreateGlobalClassReference(JNIEnv* env, const char* class_name) {\n+  jclass local_class = env->FindClass(class_name);\n+  jclass global_class = (jclass)env->NewGlobalRef(local_class);\n+  env->DeleteLocalRef(local_class);\n+  return global_class;\n+}\n+\n+jmethodID GetMethodID(JNIEnv* env, jclass this_class, const char* name, const char* sig) {\n+  jmethodID ret = env->GetMethodID(this_class, name, sig);\n+  if (ret == nullptr) {\n+    std::string error_message = \"Unable to find method \" + std::string(name) +\n+        \" within signature\" + std::string(sig);\n+    env->ThrowNew(illegal_access_exception_class, error_message.c_str());\n+  }\n+  return ret;\n+}\n+\n+jint JNI_OnLoad(JavaVM* vm, void* reserved) {\n+  JNIEnv* env;\n+  if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  illegal_access_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/IllegalAccessException;\");\n+  illegal_argument_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/IllegalArgumentException;\");\n+  runtime_exception_class =\n+      CreateGlobalClassReference(env, \"Ljava/lang/RuntimeException;\");\n+\n+  record_batch_handle_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle;\");\n+  record_batch_handle_field_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Field;\");\n+  record_batch_handle_buffer_class =\n+      CreateGlobalClassReference(env, \"Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Buffer;\");\n+\n+  record_batch_handle_constructor = GetMethodID(env, record_batch_handle_class, \"<init>\",\n+                                                \"(J[Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Field;\"\n+                                                \"[Lorg/apache/arrow/dataset/jni/NativeRecordBatchHandle$Buffer;)V\");\n+  record_batch_handle_field_constructor = GetMethodID(env, record_batch_handle_field_class, \"<init>\",\n+                                                      \"(JJ)V\");\n+  record_batch_handle_buffer_constructor = GetMethodID(env, record_batch_handle_buffer_class, \"<init>\",\n+                                                       \"(JJJJ)V\");\n+\n+  env->ExceptionDescribe();\n+\n+  return JNI_VERSION;\n+}\n+\n+\n+void JNI_OnUnload(JavaVM* vm, void* reserved) {\n+  JNIEnv* env;\n+  vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION);\n+  env->DeleteGlobalRef(illegal_access_exception_class);\n+  env->DeleteGlobalRef(illegal_argument_exception_class);\n+  env->DeleteGlobalRef(runtime_exception_class);\n+  env->DeleteGlobalRef(record_batch_handle_class);\n+  env->DeleteGlobalRef(record_batch_handle_field_class);\n+  env->DeleteGlobalRef(record_batch_handle_buffer_class);\n+\n+  dataset_factory_holder_.Clear();\n+  dataset_holder_.Clear();\n+  scan_task_holder_.Clear();\n+  scanner_holder_.Clear();\n+  iterator_holder_.Clear();\n+  buffer_holder_.Clear();\n+}\n+\n+std::shared_ptr<arrow::Schema> SchemaFromColumnNames(\n+    const std::shared_ptr<arrow::Schema>& input, const std::vector<std::string>& column_names) {\n+  std::vector<std::shared_ptr<arrow::Field>> columns;\n+  for (const auto& name : column_names) {\n+    columns.push_back(input->GetFieldByName(name));\n+  }\n+  return std::make_shared<arrow::Schema>(columns);\n+}\n+\n+std::shared_ptr<arrow::dataset::FileFormat> GetFileFormat(JNIEnv *env, jint id) {\n+  switch (id) {\n+    case 0:\n+      return std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    default:\n+      std::string error_message = \"illegal file format id: \" + std::to_string(id);\n+      env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+      return nullptr; // unreachable\n+  }\n+}\n+\n+std::shared_ptr<arrow::fs::FileSystem> GetFileSystem(JNIEnv *env, jint id, std::string path,\n+                                       std::string* out_path) {\n+  switch (id) {\n+    case 0:\n+      *out_path = path;\n+      return std::make_shared<arrow::fs::LocalFileSystem>();\n+    case 1: {\n+      JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::fs::FileSystem> ret, arrow::fs::FileSystemFromUri(path, out_path))\n+      return ret;\n+    }\n+    default:std::string error_message = \"illegal filesystem id: \" + std::to_string(id);\n+      env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+      return nullptr; // unreachable\n+  }\n+}\n+\n+std::string JStringToCString(JNIEnv* env, jstring string) {\n+  jboolean copied;\n+  int32_t length = env->GetStringUTFLength(string);\n+  const char *chars = env->GetStringUTFChars(string, &copied);\n+  std::string str = std::string(chars, length);\n+  // fixme calling ReleaseStringUTFChars if memory leak faced\n+  return str;\n+}\n+\n+std::vector<std::string> ToStringVector(JNIEnv* env, jobjectArray& str_array) {\n+  int length = env->GetArrayLength(str_array);\n+  std::vector<std::string> vector;\n+  for (int i = 0; i < length; i++) {\n+    auto string = (jstring) (env->GetObjectArrayElement(str_array, i));\n+    vector.push_back(JStringToCString(env, string));\n+  }\n+  return vector;\n+}\n+\n+template <typename T>\n+std::vector<T> collect(JNIEnv* env, arrow::Iterator<T> itr) {\n+  std::vector<T> vector;\n+  while(true) {\n+    JNI_ASSIGN_OR_THROW(T t, itr.Next())\n+    if (!t) {\n+      break;\n+    }\n+    vector.push_back(t);\n+  }\n+  return vector;\n+}\n+\n+// FIXME: COPIED FROM intel/master on which this branch is not rebased yet\n+// FIXME: https://github.com/Intel-bigdata/arrow/blob/02502a4eb59834c2471dd629e77dbeed19559f68/cpp/src/jni/jni_common.h#L239-L254\n+jbyteArray ToSchemaByteArray(JNIEnv* env, std::shared_ptr<arrow::Schema> schema) {\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::Buffer> buffer,\n+      arrow::ipc::SerializeSchema(*schema.get(), nullptr, arrow::default_memory_pool()))\n+\n+  jbyteArray out = env->NewByteArray(buffer->size());\n+  auto src = reinterpret_cast<const jbyte*>(buffer->data());\n+  env->SetByteArrayRegion(out, 0, buffer->size(), src);\n+  return out;\n+}\n+\n+// FIXME: COPIED FROM intel/master on which this branch is not rebased yet\n+// FIXME: https://github.com/Intel-bigdata/arrow/blob/02502a4eb59834c2471dd629e77dbeed19559f68/cpp/src/jni/jni_common.h#L256-L272\n+std::shared_ptr<arrow::Schema> FromSchemaByteArray(JNIEnv* env, jbyteArray schemaBytes) {\n+  arrow::ipc::DictionaryMemo in_memo;\n+  int schemaBytes_len = env->GetArrayLength(schemaBytes);\n+  jbyte* schemaBytes_data = env->GetByteArrayElements(schemaBytes, 0);\n+  auto serialized_schema =\n+      std::make_shared<arrow::Buffer>((uint8_t*)schemaBytes_data, schemaBytes_len);\n+  arrow::io::BufferReader buf_reader(serialized_schema);\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::Schema> schema, arrow::ipc::ReadSchema(&buf_reader, &in_memo))\n+  env->ReleaseByteArrayElements(schemaBytes, schemaBytes_data, JNI_ABORT);\n+  return schema;\n+}\n+\n+bool ParseProtobuf(uint8_t* buf, int bufLen, google::protobuf::Message* msg) {\n+    google::protobuf::io::CodedInputStream cis(buf, bufLen);\n+    cis.SetRecursionLimit(1000);\n+    return msg->ParseFromCodedStream(&cis);\n+}\n+\n+void releaseFilterInput(jbyteArray condition_arr, jbyte* condition_bytes, JNIEnv* env) {\n+  env->ReleaseByteArrayElements(condition_arr, condition_bytes, JNI_ABORT);\n+}\n+\n+// fixme in development. Not all node types considered.\n+std::shared_ptr<arrow::dataset::Expression> translateNode(types::TreeNode node, JNIEnv* env) {\n+  if (node.has_fieldnode()) {\n+    const types::FieldNode& f_node = node.fieldnode();\n+    const std::string& name = f_node.name();\n+    return std::make_shared<arrow::dataset::FieldExpression>(name);\n+  }\n+  if (node.has_intnode()) {\n+    const types::IntNode& int_node = node.intnode();\n+    int32_t val = int_node.value();\n+    return std::make_shared<arrow::dataset::ScalarExpression>(std::make_shared<arrow::Int32Scalar>(val));\n+  }\n+  if (node.has_longnode()) {\n+    const types::LongNode& long_node = node.longnode();\n+    int64_t val = long_node.value();\n+    return std::make_shared<arrow::dataset::ScalarExpression>(std::make_shared<arrow::Int64Scalar>(val));\n+  }\n+  if (node.has_floatnode()) {\n+    const types::FloatNode& float_node = node.floatnode();\n+    float_t val = float_node.value();\n+    return std::make_shared<arrow::dataset::ScalarExpression>(std::make_shared<arrow::FloatScalar>(val));\n+  }\n+  if (node.has_doublenode()) {\n+    const types::DoubleNode& double_node = node.doublenode();\n+    double_t val = double_node.value();\n+    return std::make_shared<arrow::dataset::ScalarExpression>(std::make_shared<arrow::DoubleScalar>(val));\n+  }\n+  if (node.has_booleannode()) {\n+    const types::BooleanNode& boolean_node = node.booleannode();\n+    bool val = boolean_node.value();\n+    return std::make_shared<arrow::dataset::ScalarExpression>(std::make_shared<arrow::BooleanScalar>(val));\n+  }\n+  if (node.has_andnode()) {\n+    const types::AndNode& and_node = node.andnode();\n+    const types::TreeNode& left_arg = and_node.leftarg();\n+    const types::TreeNode& right_arg = and_node.rightarg();\n+    return std::make_shared<arrow::dataset::AndExpression>(translateNode(left_arg, env), translateNode(right_arg, env));\n+  }\n+  if (node.has_ornode()) {\n+    const types::OrNode& or_node = node.ornode();\n+    const types::TreeNode& left_arg = or_node.leftarg();\n+    const types::TreeNode& right_arg = or_node.rightarg();\n+    return std::make_shared<arrow::dataset::OrExpression>(translateNode(left_arg, env), translateNode(right_arg, env));\n+  }\n+  if (node.has_cpnode()) {\n+    const types::ComparisonNode& cp_node = node.cpnode();\n+    const std::string& op_name = cp_node.opname();\n+    arrow::compute::CompareOperator op;\n+    if (op_name == \"equal\") {\n+      op = arrow::compute::CompareOperator::EQUAL;\n+    } else if (op_name == \"greaterThan\") {\n+      op = arrow::compute::CompareOperator::GREATER;\n+    } else if (op_name == \"greaterThanOrEqual\") {\n+      op = arrow::compute::CompareOperator::GREATER_EQUAL;\n+    } else if (op_name == \"lessThan\") {\n+      op = arrow::compute::CompareOperator::LESS;\n+    } else if (op_name == \"lessThanOrEqual\") {\n+      op = arrow::compute::CompareOperator::LESS_EQUAL;\n+    } else {\n+      std::string error_message = \"Unknown operation name in comparison node\";\n+      env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+      return nullptr; // unreachable\n+    }\n+    const types::TreeNode& left_arg = cp_node.leftarg();\n+    const types::TreeNode& right_arg = cp_node.rightarg();\n+    return std::make_shared<arrow::dataset::ComparisonExpression>(op,\n+        translateNode(left_arg, env), translateNode(right_arg, env));\n+  }\n+  if (node.has_notnode()) {\n+    const types::NotNode& not_node = node.notnode();\n+    const ::types::TreeNode& child = not_node.args();\n+    std::shared_ptr<arrow::dataset::Expression> translatedChild = translateNode(child, env);\n+    return std::make_shared<arrow::dataset::NotExpression>(translatedChild);\n+  }\n+  if (node.has_isvalidnode()) {\n+    const types::IsValidNode& is_valid_node = node.isvalidnode();\n+    const ::types::TreeNode& child = is_valid_node.args();\n+    std::shared_ptr<arrow::dataset::Expression> translatedChild = translateNode(child, env);\n+    return std::make_shared<arrow::dataset::IsValidExpression>(translatedChild);\n+  }\n+  std::string error_message = \"Unknown node type\";\n+  env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+  return nullptr; // unreachable\n+}\n+\n+std::shared_ptr<arrow::dataset::Expression> translateFilter(types::Condition condition, JNIEnv* env) {\n+  const types::TreeNode& tree_node = condition.root();\n+  return translateNode(tree_node, env);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    closeDatasetFactory\n+ * Signature: (J)V\n+ */\n+JNIEXPORT void JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_closeDatasetFactory\n+    (JNIEnv *, jobject, jlong id) {\n+  dataset_factory_holder_.Erase(id);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    inspectSchema\n+ * Signature: (J)[B\n+ */\n+JNIEXPORT jbyteArray JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_inspectSchema\n+    (JNIEnv* env, jobject, jlong dataset_factor_id) {\n+  std::shared_ptr<arrow::dataset::DatasetFactory> d\n+      = dataset_factory_holder_.Lookup(dataset_factor_id);\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::Schema> schema, d->Inspect())\n+  return ToSchemaByteArray(env, schema);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    createDataset\n+ * Signature: (J[B)J\n+ */\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_createDataset\n+    (JNIEnv* env, jobject, jlong dataset_factory_id, jbyteArray schema_bytes) {\n+  std::shared_ptr<arrow::dataset::DatasetFactory> d\n+      = dataset_factory_holder_.Lookup(dataset_factory_id);\n+  std::shared_ptr<arrow::Schema> schema;\n+  schema = FromSchemaByteArray(env, schema_bytes);\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::dataset::Dataset> dataset, d->Finish(schema))\n+  return dataset_holder_.Insert(dataset);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    closeDataset\n+ * Signature: (J)V\n+ */\n+JNIEXPORT void JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_closeDataset\n+    (JNIEnv *, jobject, jlong id) {\n+  dataset_holder_.Erase(id);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    createScanner\n+ * Signature: (J[Ljava/lang/String;[BJ)J\n+ */\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_createScanner\n+    (JNIEnv* env, jobject, jlong dataset_id, jobjectArray columns,\n+        jbyteArray filter, jlong batch_size) {\n+  std::shared_ptr<arrow::dataset::ScanContext> context = std::make_shared<arrow::dataset::ScanContext>();\n+  std::shared_ptr<arrow::dataset::Dataset> dataset = dataset_holder_.Lookup(dataset_id);\n+  JNI_ASSIGN_OR_THROW(std::shared_ptr<arrow::dataset::ScannerBuilder> scanner_builder, dataset->NewScan())\n+\n+  std::vector<std::string> column_vector = ToStringVector(env, columns);\n+  JNI_ASSERT_OK_OR_THROW(scanner_builder->Project(column_vector));\n+  JNI_ASSERT_OK_OR_THROW(scanner_builder->BatchSize(batch_size));\n+\n+  // initialize filters\n+  jsize exprs_len = env->GetArrayLength(filter);\n+  jbyte* exprs_bytes = env->GetByteArrayElements(filter, 0);\n+  types::Condition condition;\n+  if (!ParseProtobuf(reinterpret_cast<uint8_t*>(exprs_bytes), exprs_len, &condition)) {\n+    releaseFilterInput(filter, exprs_bytes, env);\n+    std::string error_message = \"bad protobuf message\";\n+    env->ThrowNew(illegal_argument_exception_class, error_message.c_str());\n+  }\n+  if (condition.has_root()) {\n+    JNI_ASSERT_OK_OR_THROW(scanner_builder->Filter(translateFilter(condition, env)));\n+  }\n+  JNI_ASSIGN_OR_THROW(auto scanner, scanner_builder->Finish())\n+  jlong id = scanner_holder_.Insert(scanner);\n+  releaseFilterInput(filter, exprs_bytes, env);\n+  return id;\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    getSchemaFromScanner\n+ * Signature: (J)[B\n+ */\n+JNIEXPORT jbyteArray JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_getSchemaFromScanner\n+    (JNIEnv* env, jobject, jlong scanner_id) {\n+  std::shared_ptr<arrow::Schema> schema = scanner_holder_.Lookup(scanner_id)->schema();\n+  return ToSchemaByteArray(env, schema);\n+}\n+\n+/*\n+ * Class:     org_apache_arrow_dataset_jni_JniWrapper\n+ * Method:    getScanTasksFromScanner\n+ * Signature: (J)[J\n+ */\n+JNIEXPORT jlongArray JNICALL Java_org_apache_arrow_dataset_jni_JniWrapper_getScanTasksFromScanner\n+    (JNIEnv* env, jobject, jlong scanner_id) {\n+  std::shared_ptr<arrow::dataset::Scanner> scanner = scanner_holder_.Lookup(scanner_id);\n+  JNI_ASSIGN_OR_THROW(arrow::dataset::ScanTaskIterator itr, scanner->Scan())\n+  std::vector<std::shared_ptr<arrow::dataset::ScanTask>> vector = collect(env, std::move(itr));\n\nReview comment:\n       it seems like a a bad idea to collect an iterator if the intention is for the iterator to provide laziness?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T05:56:44.241+0000",
                    "updated": "2020-04-25T05:56:44.241+0000",
                    "started": "2020-04-25T05:56:44.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427176",
                    "issueId": "13284180"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 120600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@44815c60[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70fdc4a2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13d2fb79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d94f575[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f77350b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6455bb01[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60d88dc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4acdf3f2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c6458cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@752071f3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51b24c13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@744577b4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 120600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 09 16:59:25 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-09T16:59:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7808/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2020-02-10T02:24:34.000+0000",
        "updated": "2022-07-13T13:27:00.000+0000",
        "timeoriginalestimate": null,
        "description": "Porting following C++ Datasets APIs to Java: \r\n* DataSource \r\n* DataSourceDiscovery \r\n* DataFragment \r\n* Dataset\r\n* Scanner \r\n* ScanTask \r\n* ScanOptions ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "33.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 120600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java][Dataset] Implement Datasets Java API ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17033341",
                    "id": "17033341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "Thanks for opening this issue. \r\nPersonally, I would like to see these features added to Java code base.\r\nBut I am not sure if the community are willing to support them. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-02-10T02:39:59.511+0000",
                    "updated": "2020-02-10T02:39:59.511+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17033357",
                    "id": "17033357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The major goal is to adopt existing C++ file formats in Java code (maybe via JNI bridge). To have the Datasets APIs implemented in Java is the most reasonable approach as users would be able to access any of the layers defined in C++ Datasets API. Could others in the community please reconfirm this proposal (I recall that we have a discussion for this months ago)? And I can file PRs after then.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-10T03:42:24.993+0000",
                    "updated": "2020-02-10T03:42:24.993+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17034055",
                    "id": "17034055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We are interested in bridging the C++ implementation of Parquet in particular to Java. But I agree, supporting JNI bindings to a large API might be difficult.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-02-11T00:59:49.722+0000",
                    "updated": "2020-02-11T00:59:49.722+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17036068",
                    "id": "17036068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yes the C++ Parquet reader is useful for a lot of users including us. Now some new features are only available with Datasets, for example, ARROW-6952. With Java API bridged Java users would be able to use the functionalities in their code easily without going down to JNI/C++.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-13T09:36:14.169+0000",
                    "updated": "2020-02-13T09:36:14.169+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17038781",
                    "id": "17038781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think the mail list conversation decided on try to do a very small shim 1 or 2 methods not a full 1-1 JNI mapping?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-18T04:36:02.949+0000",
                    "updated": "2020-02-18T04:36:02.949+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17039672",
                    "id": "17039672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I am not pretty sure but based on the mail discussion I would think of mapping 1 or 2 methods via JNI is not final solution but something we can get started with. And, as for format Parquet, users may need access to different Datasets layers such as DataFragments for Parquet files, ScanTasks for RowGroups, even one may need to decide if C++ level post-scan filter should be enabled/disabled, if partition filter should be applied, and so on. One or two methods can not cover all of this.\r\n\r\nAnd maintaining a JNI-based Datasets API may not be a heavy workload, because on Java side, things are just mirrored to some basical Datasets concepts like DataSource, DataFragment, and should keep away from re-implementing low-level logic like scaning, projecting, filtering, etc. But everything in C++ could be available in Java which is important to many users.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-19T03:07:44.345+0000",
                    "updated": "2020-02-19T03:07:44.345+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17040606",
                    "id": "17040606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~fsaintjacques]\u00a0I think you weighed in the mailing list discussion, what are your thoughts on this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-20T03:48:55.419+0000",
                    "updated": "2020-02-20T03:48:55.419+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17041100",
                    "id": "17041100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The dataset API is not stable; a full 1:1 mapping will be *more* work to maintain. For example https://issues.apache.org/jira/browse/ARROW-7886 would remove Source and SourceFactory altogether, which would necessitate refactoring both the JNI binding and the Java which uses it. I recommend exposing only classes which are directly useful for a minimal use case, then exposing classes as they become necessary in follow ups.\r\n\r\n[~fsaintjacques]'s recommendation on the mailing list would be an excellent starting point. Alternatively, I recommend following the initial R binding work: https://github.com/romainfrancois/arrow/blob/9dfba2ea8949a0a0a17393976a97d3a34dc63d39/r/R/dataset.R\r\n This minimally exposes Source, Dataset, Scanner, and the corresponding factories. Scans result in a materialized Table (so ScanTasks, Fragments, etc may remain hidden) and take full advantage of predicate/projection push down.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-02-20T15:56:34.597+0000",
                    "updated": "2020-02-20T15:56:34.597+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17041231",
                    "id": "17041231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I concur with [~bkietz]\u00a0here, prefer a high-level approach, e.g. it should start with the factory, dataset and getting the result of a scan, then you can expose more and more of the inner classes, instead of 1-1 with all the classes.\r\n\r\nAlso note that a JNI bridge means one more maintenance burden; we already did a bunch of renames and it was cumbersome to do it for each \"native\" binding too, e.g. DataSource is now called Source.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-02-20T18:43:16.609+0000",
                    "updated": "2020-02-20T18:43:16.609+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17074387",
                    "id": "17074387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks guys for your suggestions! And so sorry for such a late reply. I've been busy on some other stuffs and now I am continuing to work on this. Actually in my organization we have been maintaining an runnable implementation[1] for several months, it may not be completely ready for making an upstream PR but still be showing my main designs.\r\n\r\nI see your suggestion with the preference of high-level approach, with which actually I agree. In my current implementation, there might be some classes that look like something \"lower level\" in Java, such as DataFragment[2], or ScanTask[3], but further developers don't ever have to make implementations for specific source formats - we have NativeDataFragment[4] or NativeScanTask[5] to cover all cases. The same design is applied to DataSource[6][7] so we only have to bridge c++ DataSourceDiscovery implementations in further development. Here is an example[8] from us to add an arrow::dataset::SingleFileDataSource and use it from Java.\r\n\r\nAnd I know in the newest upstream code C++ API has been reworked a lot (the remove of DataSource, rename of DataSourceDiscovery and so on). So there should be some extra work to me to make things match during rebasing.\r\n\r\nSorry again for the delay, and any thoughts please let me know. Thanks.\r\n\r\n[1] [https://github.com/zhztheplayer/arrow-1/commits/ARROW-7808]\r\n [2] [https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/fragment/DataFragment.java]\r\n [3] [https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/scanner/ScanTask.java]\r\n [4] [https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeDataFragment.java]\r\n [5] [https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeScanTask.java]\r\n [6] [https://github.com/zhztheplayer/arrow-1/commit/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8#diff-deea6cb88ea63d76f71b7b4cfd173206]\r\n [7] [https://github.com/zhztheplayer/arrow-1/blob/b2e98bfaf24565a6b23ecd36b9c3c2c264be51f8/java/dataset/src/main/java/org/apache/arrow/dataset/jni/NativeDataSource.java]\r\n [8] [https://github.com/zhztheplayer/arrow-1/commit/7cb13b96e81fd153c4ad9c68aff00f032abb5110]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-04-03T08:06:43.917+0000",
                    "updated": "2020-04-03T08:06:43.917+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17226439",
                    "id": "17226439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I've temporarily marked this with target release 3.0.0 as most of the codes are finished with reviewing except for JNI-based memory pool part. We can put off to later version any time we think is needed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zhztheplayer",
                        "name": "zhztheplayer",
                        "key": "zhztheplayer",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hongze Zhang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-11-05T01:11:55.592+0000",
                    "updated": "2020-11-05T01:11:55.592+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284180/comment/17281882",
                    "id": "17281882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 7030\n[https://github.com/apache/arrow/pull/7030]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-02-09T16:59:25.852+0000",
                    "updated": "2021-02-09T16:59:25.852+0000"
                }
            ],
            "maxResults": 12,
            "total": 12,
            "startAt": 0
        },
        "customfield_12311820": "0|z0baxs:",
        "customfield_12314139": null
    }
}