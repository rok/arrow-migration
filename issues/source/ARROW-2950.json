{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13175850",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850",
    "key": "ARROW-2950",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2950/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355\n \n \n   Remove unused, little-used, ill-named or duplicate APIs.\r\n   Reconcile some implementations (e.g. CountLeadingZeros / Log2).\r\n   \r\n   Requires https://github.com/apache/parquet-cpp/pull/483\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T14:13:23.971+0000",
                    "updated": "2018-08-01T14:13:23.971+0000",
                    "started": "2018-08-01T14:13:23.970+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129696",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-409590830\n \n \n   Does this conflict at all with the Arrow version upgrade in parquet-cpp in https://github.com/apache/parquet-cpp/pull/467? Maybe that project's CI is only affected \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T14:17:29.051+0000",
                    "updated": "2018-08-01T14:17:29.051+0000",
                    "started": "2018-08-01T14:17:29.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129699",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-409592219\n \n \n   @wesm I'm not sure I understand your question. Why would it conflict?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T14:21:18.641+0000",
                    "updated": "2018-08-01T14:21:18.641+0000",
                    "started": "2018-08-01T14:21:18.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129701",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-409593050\n \n \n   I guess I'll have my answer once the CI for https://github.com/apache/parquet-cpp/pull/483 runs, since it's building against an old version of Arrow from December\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T14:23:41.501+0000",
                    "updated": "2018-08-01T14:23:41.501+0000",
                    "started": "2018-08-01T14:23:41.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129702",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-409603029\n \n \n   ```\r\n   In file included from /home/travis/build/apache/parquet-cpp/src/parquet/arrow/record_reader.cc:33:0:\r\n   /home/travis/build/apache/parquet-cpp/src/parquet/encoding-internal.h: In member function \u2018int parquet::PlainDecoder<parquet::DataType<(parquet::Type::type)0u> >::Decode(uint8_t*, int)\u2019:\r\n   /home/travis/build/apache/parquet-cpp/src/parquet/encoding-internal.h:154:5: error: \u2018FirstTimeBitmapWriter\u2019 is not a member of \u2018arrow::internal\u2019\r\n        ::arrow::internal::FirstTimeBitmapWriter bit_writer(buffer, 0, max_values);\r\n        ^\r\n   /home/travis/build/apache/parquet-cpp/src/parquet/encoding-internal.h:160:9: error: \u2018bit_writer\u2019 was not declared in this scope\r\n            bit_writer.Set();\r\n            ^\r\n   /home/travis/build/apache/parquet-cpp/src/parquet/encoding-internal.h:162:7: error: \u2018bit_writer\u2019 was not declared in this scope\r\n          bit_writer.Next();\r\n          ^\r\n   /home/travis/build/apache/parquet-cpp/src/parquet/encoding-internal.h:164:5: error: \u2018bit_writer\u2019 was not declared in this scope\r\n        bit_writer.Finish();\r\n        ^\r\n   make[2]: *** [CMakeFiles/parquet_objlib.dir/src/parquet/arrow/record_reader.cc.o] Error 1\r\n   make[2]: *** Waiting for unfinished jobs....\r\n   make[1]: *** [CMakeFiles/parquet_objlib.dir/all] Error 2\r\n   make: *** [all] Error 2\r\n   +exit 1\r\n   ```\r\n   \r\n   I'm looking at PARQUET-1308 right now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T14:52:25.685+0000",
                    "updated": "2018-08-01T14:52:25.685+0000",
                    "started": "2018-08-01T14:52:25.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129716",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/129722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-409606644\n \n \n   @wesm Yes I saw that, and pushed a fix ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-01T15:02:44.990+0000",
                    "updated": "2018-08-01T15:02:44.990+0000",
                    "started": "2018-08-01T15:02:44.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "129722",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207335051\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -166,148 +115,93 @@ static inline bool IsMultipleOf64(int64_t n) { return (n & 63) == 0; }\n \n static inline bool IsMultipleOf8(int64_t n) { return (n & 7) == 0; }\n \n-/// Returns the ceil of value/divisor\n-static inline int64_t Ceil(int64_t value, int64_t divisor) {\n-  return value / divisor + (value % divisor != 0);\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor'\n-inline int64_t RoundUp(int64_t value, int64_t factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor'\n+static inline int64_t RoundUp(int64_t value, int64_t factor) {\n   return (value + (factor - 1)) / factor * factor;\n }\n \n-/// Returns 'value' rounded down to the nearest multiple of 'factor'\n-static inline int64_t RoundDown(int64_t value, int64_t factor) {\n-  return (value / factor) * factor;\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor' when factor is\n-/// a power of two\n-static inline int RoundUpToPowerOf2(int value, int factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor' when factor\n+// is a power of two.\n+// The result is undefined on overflow, i.e. if `value > 2**64 - factor`,\n+// since we cannot return the correct result which would be 2**64.\n+static inline int64_t RoundUpToPowerOf2(int64_t value, int64_t factor) {\n   // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n   return (value + (factor - 1)) & ~(factor - 1);\n }\n \n-static inline int RoundDownToPowerOf2(int value, int factor) {\n-  // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n-  return value & ~(factor - 1);\n-}\n-\n-/// Specialized round up and down functions for frequently used factors,\n-/// like 8 (bits->bytes), 32 (bits->i32), and 64 (bits->i64).\n-/// Returns the rounded up number of bytes that fit the number of bits.\n-static inline uint32_t RoundUpNumBytes(uint32_t bits) { return (bits + 7) >> 3; }\n-\n-/// Returns the rounded down number of bytes that fit the number of bits.\n-static inline uint32_t RoundDownNumBytes(uint32_t bits) { return bits >> 3; }\n-\n-/// Returns the rounded up to 32 multiple. Used for conversions of bits to i32.\n-static inline uint32_t RoundUpNumi32(uint32_t bits) { return (bits + 31) >> 5; }\n-\n-/// Returns the rounded up 32 multiple.\n-static inline uint32_t RoundDownNumi32(uint32_t bits) { return bits >> 5; }\n-\n-/// Returns the rounded up to 64 multiple. Used for conversions of bits to i64.\n-static inline uint32_t RoundUpNumi64(uint32_t bits) { return (bits + 63) >> 6; }\n-\n-/// Returns the rounded down to 64 multiple.\n-static inline uint32_t RoundDownNumi64(uint32_t bits) { return bits >> 6; }\n-\n-template <int64_t ROUND_TO>\n-static inline int64_t RoundToPowerOfTwo(int64_t num) {\n-  // TODO(wesm): is this definitely needed?\n-  // DCHECK_GE(num, 0);\n-  constexpr int64_t force_carry_addend = ROUND_TO - 1;\n-  constexpr int64_t truncate_bitmask = ~(ROUND_TO - 1);\n-  constexpr int64_t max_roundable_num = std::numeric_limits<int64_t>::max() - ROUND_TO;\n-  if (num <= max_roundable_num) {\n-    return (num + force_carry_addend) & truncate_bitmask;\n-  }\n-  // handle overflow case.  This should result in a malloc error upstream\n-  return num;\n-}\n-\n-static inline int64_t RoundUpToMultipleOf64(int64_t num) {\n-  return RoundToPowerOfTwo<64>(num);\n-}\n-\n static inline int64_t RoundUpToMultipleOf8(int64_t num) {\n-  return RoundToPowerOfTwo<8>(num);\n-}\n-\n-/// Non hw accelerated pop count.\n-/// TODO: we don't use this in any perf sensitive code paths currently.  There\n-/// might be a much faster way to implement this.\n-static inline int PopcountNoHw(uint64_t x) {\n-  int count = 0;\n-  for (; x != 0; ++count) x &= x - 1;\n-  return count;\n-}\n-\n-/// Returns the number of set bits in x\n-static inline int Popcount(uint64_t x) {\n \n Review comment:\n   We will want to popcount at some point (e.g. computing null counts fast on validity bitmaps). But I guess we can add new implementations when the time comes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T18:51:10.323+0000",
                    "updated": "2018-08-02T18:51:10.323+0000",
                    "started": "2018-08-02T18:51:10.323+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130583",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207335455\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -430,12 +345,7 @@ class BitmapReader {\n     }\n   }\n \n-#if defined(_MSC_VER)\n-  // MSVC is finicky about this cast\n   bool IsSet() const { return (current_byte_ & (1 << bit_offset_)) != 0; }\n \n Review comment:\n   Any idea if this will be slower on gcc/clang? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T18:51:10.331+0000",
                    "updated": "2018-08-02T18:51:10.331+0000",
                    "started": "2018-08-02T18:51:10.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130584",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207334242\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.cc\n ##########\n @@ -35,17 +35,19 @@\n \n namespace arrow {\n \n-void BitUtil::FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n+namespace BitUtil {\n+\n+static void FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n \n Review comment:\n   I've heard that using anonymous namespaces is preferable to `static`, because Clang/LLVM can do extra optimizations in some cases. I've been trying to stop using static except for static inline functions and static class members\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T18:51:10.334+0000",
                    "updated": "2018-08-02T18:51:10.334+0000",
                    "started": "2018-08-02T18:51:10.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130585",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207335674\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -647,6 +557,13 @@ void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n // ----------------------------------------------------------------------\n // Bitmap utilities\n \n+/// Allocate a zero-initialized bitmap buffer\n+///\n+/// \\param[in] pool memory pool to allocate memory from\n+/// \\param[in] length size in bits of bitmap to allocate\n+/// \\param[out] result the resulting buffer\n+///\n+/// \\return Status message\n ARROW_EXPORT\n Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* result);\n \n Review comment:\n   I could even see this going into arrow/buffer.h; seems slightly out of place here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T18:51:10.465+0000",
                    "updated": "2018-08-02T18:51:10.465+0000",
                    "started": "2018-08-02T18:51:10.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130586",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207347615\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.cc\n ##########\n @@ -35,17 +35,19 @@\n \n namespace arrow {\n \n-void BitUtil::FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n+namespace BitUtil {\n+\n+static void FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n \n Review comment:\n   I'm a bit surprised, but I can do the change.\r\n   (note: I found https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions which doesn't mention a perf difference)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T19:34:52.114+0000",
                    "updated": "2018-08-02T19:34:52.114+0000",
                    "started": "2018-08-02T19:34:52.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130596",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207347862\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -166,148 +115,93 @@ static inline bool IsMultipleOf64(int64_t n) { return (n & 63) == 0; }\n \n static inline bool IsMultipleOf8(int64_t n) { return (n & 7) == 0; }\n \n-/// Returns the ceil of value/divisor\n-static inline int64_t Ceil(int64_t value, int64_t divisor) {\n-  return value / divisor + (value % divisor != 0);\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor'\n-inline int64_t RoundUp(int64_t value, int64_t factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor'\n+static inline int64_t RoundUp(int64_t value, int64_t factor) {\n   return (value + (factor - 1)) / factor * factor;\n }\n \n-/// Returns 'value' rounded down to the nearest multiple of 'factor'\n-static inline int64_t RoundDown(int64_t value, int64_t factor) {\n-  return (value / factor) * factor;\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor' when factor is\n-/// a power of two\n-static inline int RoundUpToPowerOf2(int value, int factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor' when factor\n+// is a power of two.\n+// The result is undefined on overflow, i.e. if `value > 2**64 - factor`,\n+// since we cannot return the correct result which would be 2**64.\n+static inline int64_t RoundUpToPowerOf2(int64_t value, int64_t factor) {\n   // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n   return (value + (factor - 1)) & ~(factor - 1);\n }\n \n-static inline int RoundDownToPowerOf2(int value, int factor) {\n-  // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n-  return value & ~(factor - 1);\n-}\n-\n-/// Specialized round up and down functions for frequently used factors,\n-/// like 8 (bits->bytes), 32 (bits->i32), and 64 (bits->i64).\n-/// Returns the rounded up number of bytes that fit the number of bits.\n-static inline uint32_t RoundUpNumBytes(uint32_t bits) { return (bits + 7) >> 3; }\n-\n-/// Returns the rounded down number of bytes that fit the number of bits.\n-static inline uint32_t RoundDownNumBytes(uint32_t bits) { return bits >> 3; }\n-\n-/// Returns the rounded up to 32 multiple. Used for conversions of bits to i32.\n-static inline uint32_t RoundUpNumi32(uint32_t bits) { return (bits + 31) >> 5; }\n-\n-/// Returns the rounded up 32 multiple.\n-static inline uint32_t RoundDownNumi32(uint32_t bits) { return bits >> 5; }\n-\n-/// Returns the rounded up to 64 multiple. Used for conversions of bits to i64.\n-static inline uint32_t RoundUpNumi64(uint32_t bits) { return (bits + 63) >> 6; }\n-\n-/// Returns the rounded down to 64 multiple.\n-static inline uint32_t RoundDownNumi64(uint32_t bits) { return bits >> 6; }\n-\n-template <int64_t ROUND_TO>\n-static inline int64_t RoundToPowerOfTwo(int64_t num) {\n-  // TODO(wesm): is this definitely needed?\n-  // DCHECK_GE(num, 0);\n-  constexpr int64_t force_carry_addend = ROUND_TO - 1;\n-  constexpr int64_t truncate_bitmask = ~(ROUND_TO - 1);\n-  constexpr int64_t max_roundable_num = std::numeric_limits<int64_t>::max() - ROUND_TO;\n-  if (num <= max_roundable_num) {\n-    return (num + force_carry_addend) & truncate_bitmask;\n-  }\n-  // handle overflow case.  This should result in a malloc error upstream\n-  return num;\n-}\n-\n-static inline int64_t RoundUpToMultipleOf64(int64_t num) {\n-  return RoundToPowerOfTwo<64>(num);\n-}\n-\n static inline int64_t RoundUpToMultipleOf8(int64_t num) {\n-  return RoundToPowerOfTwo<8>(num);\n-}\n-\n-/// Non hw accelerated pop count.\n-/// TODO: we don't use this in any perf sensitive code paths currently.  There\n-/// might be a much faster way to implement this.\n-static inline int PopcountNoHw(uint64_t x) {\n-  int count = 0;\n-  for (; x != 0; ++count) x &= x - 1;\n-  return count;\n-}\n-\n-/// Returns the number of set bits in x\n-static inline int Popcount(uint64_t x) {\n \n Review comment:\n   popcount is already used for computing null counts in `CountSetBits`. But those specific wrappers were unused.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T19:35:46.887+0000",
                    "updated": "2018-08-02T19:35:46.887+0000",
                    "started": "2018-08-02T19:35:46.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130597",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207347926\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -430,12 +345,7 @@ class BitmapReader {\n     }\n   }\n \n-#if defined(_MSC_VER)\n-  // MSVC is finicky about this cast\n   bool IsSet() const { return (current_byte_ & (1 << bit_offset_)) != 0; }\n \n Review comment:\n   That sounds unlikely to me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T19:36:01.144+0000",
                    "updated": "2018-08-02T19:36:01.144+0000",
                    "started": "2018-08-02T19:36:01.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130598",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/130599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#discussion_r207348004\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -647,6 +557,13 @@ void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n // ----------------------------------------------------------------------\n // Bitmap utilities\n \n+/// Allocate a zero-initialized bitmap buffer\n+///\n+/// \\param[in] pool memory pool to allocate memory from\n+/// \\param[in] length size in bits of bitmap to allocate\n+/// \\param[out] result the resulting buffer\n+///\n+/// \\return Status message\n ARROW_EXPORT\n Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* result);\n \n Review comment:\n   Agreed, I'll try that out.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T19:36:16.136+0000",
                    "updated": "2018-08-02T19:36:16.136+0000",
                    "started": "2018-08-02T19:36:16.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130599",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/131878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-411067134\n \n \n   I started renaming `GetEmptyBitmap` to `AllocateEmptyBitmap` out of consistency with other buffer allocation functions, unfortunately we would have to keep a deprecated `GetEmptyBitmap` for parquet-cpp. What do you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-07T14:02:23.744+0000",
                    "updated": "2018-08-07T14:02:23.744+0000",
                    "started": "2018-08-07T14:02:23.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131878",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/131906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-411099568\n \n \n   Sad =/ `Allocate` makes more sense. Hopefully the parquet-cpp mess will be resolved in the near future\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-07T15:33:22.864+0000",
                    "updated": "2018-08-07T15:33:22.864+0000",
                    "started": "2018-08-07T15:33:22.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131906",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/131928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-411116659\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=h1) Report\n   > Merging [#2355](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9f0a63d5854e50b0414e6295e1a50d2b9abe87d4?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `98.24%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2355/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2355      +/-   ##\n   ==========================================\n   - Coverage   84.71%   84.69%   -0.02%     \n   ==========================================\n     Files         293      293              \n     Lines       45471    45438      -33     \n   ==========================================\n   - Hits        38519    38485      -34     \n   - Misses       6911     6912       +1     \n     Partials       41       41\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/buffer.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWZmZXIuaA==) | `95.69% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmNj) | `97.11% <100%> (-0.11%)` | :arrow_down: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `74.43% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `98.81% <100%> (+0.3%)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `99.44% <100%> (-0.02%)` | :arrow_down: |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/rle-encoding-test.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3JsZS1lbmNvZGluZy10ZXN0LmNj) | `98.49% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-stream-utils.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC1zdHJlYW0tdXRpbHMuaA==) | `95.94% <100%> (+0.02%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-internal.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1pbnRlcm5hbC5jYw==) | `89.77% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=footer). Last update [9f0a63d...2553331](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-07T16:22:57.088+0000",
                    "updated": "2018-08-07T16:22:57.088+0000",
                    "started": "2018-08-07T16:22:57.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131928",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/131929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355#issuecomment-411116659\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=h1) Report\n   > Merging [#2355](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9f0a63d5854e50b0414e6295e1a50d2b9abe87d4?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `98.24%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2355/graphs/tree.svg?src=pr&height=150&width=650&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2355      +/-   ##\n   ==========================================\n   - Coverage   84.71%   84.69%   -0.02%     \n   ==========================================\n     Files         293      293              \n     Lines       45471    45438      -33     \n   ==========================================\n   - Hits        38519    38485      -34     \n   - Misses       6911     6912       +1     \n     Partials       41       41\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/buffer.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWZmZXIuaA==) | `95.69% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `98.81% <100%> (+0.3%)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `74.43% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmNj) | `97.11% <100%> (-0.11%)` | :arrow_down: |\n   | [cpp/src/arrow/util/bit-stream-utils.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC1zdHJlYW0tdXRpbHMuaA==) | `95.94% <100%> (+0.02%)` | :arrow_up: |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-internal.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1pbnRlcm5hbC5jYw==) | `89.77% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `99.44% <100%> (-0.02%)` | :arrow_down: |\n   | [cpp/src/arrow/util/rle-encoding.h](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3JsZS1lbmNvZGluZy5o) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/2355/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=footer). Last update [9f0a63d...2553331](https://codecov.io/gh/apache/arrow/pull/2355?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-07T16:23:09.212+0000",
                    "updated": "2018-08-07T16:23:09.212+0000",
                    "started": "2018-08-07T16:23:09.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131929",
                    "issueId": "13175850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/worklog/132427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2355: ARROW-2950: [C++] Clean up util/bit-util.h\nURL: https://github.com/apache/arrow/pull/2355\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex 8b78762ed0..702b819c53 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -2893,7 +2893,7 @@ TEST_F(TestListArray, TestFromArrays) {\n   test::AssertArraysEqual(expected3, *list3);\n \n   // Check that the last offset bit is zero\n-  ASSERT_TRUE(BitUtil::BitNotSet(list3->null_bitmap()->data(), length + 1));\n+  ASSERT_FALSE(BitUtil::GetBit(list3->null_bitmap()->data(), length + 1));\n \n   ListArray expected4(list_type, length, offsets2->data()->buffers[1], values,\n                       offsets4->data()->buffers[0], 1);\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex 7d2679336a..a2d1d5ecf2 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -204,7 +204,7 @@ class ARROW_EXPORT Array {\n   /// \\brief Return true if value at index is null. Does not boundscheck\n   bool IsNull(int64_t i) const {\n     return null_bitmap_data_ != NULLPTR &&\n-           BitUtil::BitNotSet(null_bitmap_data_, i + data_->offset);\n+           !BitUtil::GetBit(null_bitmap_data_, i + data_->offset);\n   }\n \n   /// \\brief Return true if value at index is valid (not null). Does not\ndiff --git a/cpp/src/arrow/buffer.cc b/cpp/src/arrow/buffer.cc\nindex 1303534145..91b0002fcc 100644\n--- a/cpp/src/arrow/buffer.cc\n+++ b/cpp/src/arrow/buffer.cc\n@@ -173,4 +173,19 @@ Status AllocateResizableBuffer(const int64_t size,\n   return AllocateResizableBuffer(default_memory_pool(), size, out);\n }\n \n+Status AllocateEmptyBitmap(MemoryPool* pool, int64_t length,\n+                           std::shared_ptr<Buffer>* out) {\n+  RETURN_NOT_OK(AllocateBuffer(pool, BitUtil::BytesForBits(length), out));\n+  memset((*out)->mutable_data(), 0, static_cast<size_t>((*out)->size()));\n+  return Status::OK();\n+}\n+\n+Status AllocateEmptyBitmap(int64_t length, std::shared_ptr<Buffer>* out) {\n+  return AllocateEmptyBitmap(default_memory_pool(), length, out);\n+}\n+\n+Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* out) {\n+  return AllocateEmptyBitmap(pool, length, out);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/buffer.h b/cpp/src/arrow/buffer.h\nindex ea4637c15b..486f04633b 100644\n--- a/cpp/src/arrow/buffer.h\n+++ b/cpp/src/arrow/buffer.h\n@@ -260,6 +260,34 @@ Status AllocateResizableBuffer(MemoryPool* pool, const int64_t size,\n ARROW_EXPORT\n Status AllocateResizableBuffer(const int64_t size, std::shared_ptr<ResizableBuffer>* out);\n \n+/// \\brief Allocate a zero-initialized bitmap buffer from a memory pool\n+///\n+/// \\param[in] pool memory pool to allocate memory from\n+/// \\param[in] length size in bits of bitmap to allocate\n+/// \\param[out] out the resulting buffer\n+///\n+/// \\return Status message\n+ARROW_EXPORT\n+Status AllocateEmptyBitmap(MemoryPool* pool, int64_t length,\n+                           std::shared_ptr<Buffer>* out);\n+\n+/// \\brief Allocate a zero-initialized bitmap buffer from the default memory pool\n+///\n+/// \\param[in] length size in bits of bitmap to allocate\n+/// \\param[out] out the resulting buffer\n+///\n+/// \\return Status message\n+ARROW_EXPORT\n+Status AllocateEmptyBitmap(int64_t length, std::shared_ptr<Buffer>* out);\n+\n+/// \\deprecated Use AllocateEmptyBitmap instead.\n+ARROW_DEPRECATED(\"Use AllocateEmptyBitmap instead\")\n+ARROW_EXPORT\n+Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* out);\n+\n+// ----------------------------------------------------------------------\n+// Buffer builder classes\n+\n /// \\class BufferBuilder\n /// \\brief A class for incrementally building a contiguous chunk of in-memory data\n class ARROW_EXPORT BufferBuilder {\ndiff --git a/cpp/src/arrow/ipc/json-internal.cc b/cpp/src/arrow/ipc/json-internal.cc\nindex df1dcbc16b..d58bc964cc 100644\n--- a/cpp/src/arrow/ipc/json-internal.cc\n+++ b/cpp/src/arrow/ipc/json-internal.cc\n@@ -961,7 +961,7 @@ class ArrayReader {\n     int length = static_cast<int>(is_valid.size());\n \n     std::shared_ptr<Buffer> out_buffer;\n-    RETURN_NOT_OK(GetEmptyBitmap(pool_, length, &out_buffer));\n+    RETURN_NOT_OK(AllocateEmptyBitmap(pool_, length, &out_buffer));\n     uint8_t* bitmap = out_buffer->mutable_data();\n \n     *null_count = 0;\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex ccd4ad7a6c..fff0ee10b6 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -141,7 +141,7 @@ static inline Status GetBitmapFromVector(const std::vector<T>& is_valid,\n   size_t length = is_valid.size();\n \n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(GetEmptyBitmap(default_memory_pool(), length, &buffer));\n+  RETURN_NOT_OK(AllocateEmptyBitmap(length, &buffer));\n \n   uint8_t* bitmap = buffer->mutable_data();\n   for (size_t i = 0; i < static_cast<size_t>(length); ++i) {\ndiff --git a/cpp/src/arrow/util/bit-stream-utils.h b/cpp/src/arrow/util/bit-stream-utils.h\nindex 8c1f067874..c6b345a872 100644\n--- a/cpp/src/arrow/util/bit-stream-utils.h\n+++ b/cpp/src/arrow/util/bit-stream-utils.h\n@@ -51,7 +51,7 @@ class BitWriter {\n   /// The number of current bytes written, including the current byte (i.e. may include a\n   /// fraction of a byte). Includes buffered values.\n   int bytes_written() const {\n-    return byte_offset_ + static_cast<int>(BitUtil::Ceil(bit_offset_, 8));\n+    return byte_offset_ + static_cast<int>(BitUtil::BytesForBits(bit_offset_));\n   }\n   uint8_t* buffer() const { return buffer_; }\n   int buffer_len() const { return max_bytes_; }\n@@ -148,7 +148,8 @@ class BitReader {\n   /// Returns the number of bytes left in the stream, not including the current\n   /// byte (i.e., there may be an additional fraction of a byte).\n   int bytes_left() {\n-    return max_bytes_ - (byte_offset_ + static_cast<int>(BitUtil::Ceil(bit_offset_, 8)));\n+    return max_bytes_ -\n+           (byte_offset_ + static_cast<int>(BitUtil::BytesForBits(bit_offset_)));\n   }\n \n   /// Maximum byte length of a vlq encoded int\n@@ -190,7 +191,7 @@ inline bool BitWriter::PutValue(uint64_t v, int num_bits) {\n }\n \n inline void BitWriter::Flush(bool align) {\n-  int num_bytes = static_cast<int>(BitUtil::Ceil(bit_offset_, 8));\n+  int num_bytes = static_cast<int>(BitUtil::BytesForBits(bit_offset_));\n   DCHECK_LE(byte_offset_ + num_bytes, max_bytes_);\n   memcpy(buffer_ + byte_offset_, &buffered_values_, num_bytes);\n \n@@ -355,7 +356,7 @@ inline int BitReader::GetBatch(int num_bits, T* v, int batch_size) {\n template <typename T>\n inline bool BitReader::GetAligned(int num_bytes, T* v) {\n   DCHECK_LE(num_bytes, static_cast<int>(sizeof(T)));\n-  int bytes_read = static_cast<int>(BitUtil::Ceil(bit_offset_, 8));\n+  int bytes_read = static_cast<int>(BitUtil::BytesForBits(bit_offset_));\n   if (ARROW_PREDICT_FALSE(byte_offset_ + bytes_read + num_bytes > max_bytes_))\n     return false;\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex e13902b709..87202fcc20 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -38,12 +38,6 @@\n \n namespace arrow {\n \n-static void EnsureCpuInfoInitialized() {\n-  if (!CpuInfo::initialized()) {\n-    CpuInfo::Init();\n-  }\n-}\n-\n template <class BitmapWriter>\n void WriteVectorToWriter(BitmapWriter& writer, const std::vector<int> values) {\n   for (const auto& value : values) {\n@@ -61,7 +55,7 @@ void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n                       std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n   const int64_t length = values.size();\n   *out_length = length;\n-  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  ASSERT_OK(AllocateEmptyBitmap(length + bit_offset, out_buffer));\n   auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n   WriteVectorToWriter(writer, values);\n }\n@@ -456,18 +450,18 @@ TEST(BitUtilTests, TestCopyBitmap) {\n   }\n }\n \n-TEST(BitUtil, Ceil) {\n-  EXPECT_EQ(BitUtil::Ceil(0, 1), 0);\n-  EXPECT_EQ(BitUtil::Ceil(1, 1), 1);\n-  EXPECT_EQ(BitUtil::Ceil(1, 2), 1);\n-  EXPECT_EQ(BitUtil::Ceil(1, 8), 1);\n-  EXPECT_EQ(BitUtil::Ceil(7, 8), 1);\n-  EXPECT_EQ(BitUtil::Ceil(8, 8), 1);\n-  EXPECT_EQ(BitUtil::Ceil(9, 8), 2);\n-  EXPECT_EQ(BitUtil::Ceil(9, 9), 1);\n-  EXPECT_EQ(BitUtil::Ceil(10000000000, 10), 1000000000);\n-  EXPECT_EQ(BitUtil::Ceil(10, 10000000000), 1);\n-  EXPECT_EQ(BitUtil::Ceil(100000000000, 10000000000), 10);\n+TEST(BitUtil, CeilDiv) {\n+  EXPECT_EQ(BitUtil::CeilDiv(0, 1), 0);\n+  EXPECT_EQ(BitUtil::CeilDiv(1, 1), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(1, 2), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(1, 8), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(7, 8), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(8, 8), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(9, 8), 2);\n+  EXPECT_EQ(BitUtil::CeilDiv(9, 9), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(10000000000, 10), 1000000000);\n+  EXPECT_EQ(BitUtil::CeilDiv(10, 10000000000), 1);\n+  EXPECT_EQ(BitUtil::CeilDiv(100000000000, 10000000000), 10);\n }\n \n TEST(BitUtil, RoundUp) {\n@@ -482,31 +476,6 @@ TEST(BitUtil, RoundUp) {\n   EXPECT_EQ(BitUtil::RoundUp(100000000000, 10000000000), 100000000000);\n }\n \n-TEST(BitUtil, RoundDown) {\n-  EXPECT_EQ(BitUtil::RoundDown(0, 1), 0);\n-  EXPECT_EQ(BitUtil::RoundDown(1, 1), 1);\n-  EXPECT_EQ(BitUtil::RoundDown(1, 2), 0);\n-  EXPECT_EQ(BitUtil::RoundDown(6, 2), 6);\n-  EXPECT_EQ(BitUtil::RoundDown(7, 3), 6);\n-  EXPECT_EQ(BitUtil::RoundDown(9, 9), 9);\n-  EXPECT_EQ(BitUtil::RoundDown(10000000001, 10), 10000000000);\n-  EXPECT_EQ(BitUtil::RoundDown(10, 10000000000), 0);\n-  EXPECT_EQ(BitUtil::RoundDown(100000000000, 10000000000), 100000000000);\n-}\n-\n-TEST(BitUtil, Popcount) {\n-  EnsureCpuInfoInitialized();\n-\n-  EXPECT_EQ(BitUtil::Popcount(BOOST_BINARY(0 1 0 1 0 1 0 1)), 4);\n-  EXPECT_EQ(BitUtil::PopcountNoHw(BOOST_BINARY(0 1 0 1 0 1 0 1)), 4);\n-  EXPECT_EQ(BitUtil::Popcount(BOOST_BINARY(1 1 1 1 0 1 0 1)), 6);\n-  EXPECT_EQ(BitUtil::PopcountNoHw(BOOST_BINARY(1 1 1 1 0 1 0 1)), 6);\n-  EXPECT_EQ(BitUtil::Popcount(BOOST_BINARY(1 1 1 1 1 1 1 1)), 8);\n-  EXPECT_EQ(BitUtil::PopcountNoHw(BOOST_BINARY(1 1 1 1 1 1 1 1)), 8);\n-  EXPECT_EQ(BitUtil::Popcount(0), 0);\n-  EXPECT_EQ(BitUtil::PopcountNoHw(0), 0);\n-}\n-\n TEST(BitUtil, TrailingBits) {\n   EXPECT_EQ(BitUtil::TrailingBits(BOOST_BINARY(1 1 1 1 1 1 1 1), 0), 0);\n   EXPECT_EQ(BitUtil::TrailingBits(BOOST_BINARY(1 1 1 1 1 1 1 1), 1), 1);\n@@ -549,47 +518,71 @@ TEST(BitUtil, Log2) {\n   EXPECT_EQ(BitUtil::Log2(3), 2);\n   EXPECT_EQ(BitUtil::Log2(4), 2);\n   EXPECT_EQ(BitUtil::Log2(5), 3);\n+  EXPECT_EQ(BitUtil::Log2(8), 3);\n+  EXPECT_EQ(BitUtil::Log2(9), 4);\n   EXPECT_EQ(BitUtil::Log2(INT_MAX), 31);\n   EXPECT_EQ(BitUtil::Log2(UINT_MAX), 32);\n   EXPECT_EQ(BitUtil::Log2(ULLONG_MAX), 64);\n }\n \n+TEST(BitUtil, NumRequiredBits) {\n+  EXPECT_EQ(BitUtil::NumRequiredBits(0), 0);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(1), 1);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(2), 2);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(3), 2);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(4), 3);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(5), 3);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(7), 3);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(8), 4);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(9), 4);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(UINT_MAX - 1), 32);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(UINT_MAX), 32);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(static_cast<uint64_t>(UINT_MAX) + 1), 33);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(ULLONG_MAX / 2), 63);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(ULLONG_MAX / 2 + 1), 64);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(ULLONG_MAX - 1), 64);\n+  EXPECT_EQ(BitUtil::NumRequiredBits(ULLONG_MAX), 64);\n+}\n+\n+#define U32(x) static_cast<uint32_t>(x)\n+#define U64(x) static_cast<uint64_t>(x)\n+\n+TEST(BitUtil, CountLeadingZeros) {\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(0)), 32);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(1)), 31);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(2)), 30);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(3)), 30);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(4)), 29);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(7)), 29);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(8)), 28);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(UINT_MAX / 2)), 1);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(UINT_MAX / 2 + 1)), 0);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U32(UINT_MAX)), 0);\n+\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(0)), 64);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(1)), 63);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(2)), 62);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(3)), 62);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(4)), 61);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(7)), 61);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(8)), 60);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(UINT_MAX)), 32);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(UINT_MAX) + 1), 31);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(ULLONG_MAX / 2)), 1);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(ULLONG_MAX / 2 + 1)), 0);\n+  EXPECT_EQ(BitUtil::CountLeadingZeros(U64(ULLONG_MAX)), 0);\n+}\n+\n+#undef U32\n+#undef U64\n+\n TEST(BitUtil, RoundUpToPowerOf2) {\n   EXPECT_EQ(BitUtil::RoundUpToPowerOf2(7, 8), 8);\n   EXPECT_EQ(BitUtil::RoundUpToPowerOf2(8, 8), 8);\n   EXPECT_EQ(BitUtil::RoundUpToPowerOf2(9, 8), 16);\n }\n \n-TEST(BitUtil, RoundDownToPowerOf2) {\n-  EXPECT_EQ(BitUtil::RoundDownToPowerOf2(7, 8), 0);\n-  EXPECT_EQ(BitUtil::RoundDownToPowerOf2(8, 8), 8);\n-  EXPECT_EQ(BitUtil::RoundDownToPowerOf2(9, 8), 8);\n-}\n-\n-TEST(BitUtil, RoundUpDown) {\n-  EXPECT_EQ(BitUtil::RoundUpNumBytes(7), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumBytes(8), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumBytes(9), 2);\n-  EXPECT_EQ(BitUtil::RoundDownNumBytes(7), 0);\n-  EXPECT_EQ(BitUtil::RoundDownNumBytes(8), 1);\n-  EXPECT_EQ(BitUtil::RoundDownNumBytes(9), 1);\n-\n-  EXPECT_EQ(BitUtil::RoundUpNumi32(31), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumi32(32), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumi32(33), 2);\n-  EXPECT_EQ(BitUtil::RoundDownNumi32(31), 0);\n-  EXPECT_EQ(BitUtil::RoundDownNumi32(32), 1);\n-  EXPECT_EQ(BitUtil::RoundDownNumi32(33), 1);\n-\n-  EXPECT_EQ(BitUtil::RoundUpNumi64(63), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumi64(64), 1);\n-  EXPECT_EQ(BitUtil::RoundUpNumi64(65), 2);\n-  EXPECT_EQ(BitUtil::RoundDownNumi64(63), 0);\n-  EXPECT_EQ(BitUtil::RoundDownNumi64(64), 1);\n-  EXPECT_EQ(BitUtil::RoundDownNumi64(65), 1);\n-}\n-\n-void TestZigZag(int32_t v) {\n+static void TestZigZag(int32_t v) {\n   uint8_t buffer[BitReader::MAX_VLQ_BYTE_LEN];\n   BitWriter writer(buffer, sizeof(buffer));\n   BitReader reader(buffer, sizeof(buffer));\ndiff --git a/cpp/src/arrow/util/bit-util.cc b/cpp/src/arrow/util/bit-util.cc\nindex e8f47bb87d..0d2929e187 100644\n--- a/cpp/src/arrow/util/bit-util.cc\n+++ b/cpp/src/arrow/util/bit-util.cc\n@@ -35,7 +35,11 @@\n \n namespace arrow {\n \n-void BitUtil::FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n+namespace BitUtil {\n+\n+namespace {\n+\n+void FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits) {\n   for (size_t i = 0; i < bytes.size(); ++i) {\n     if (bytes[i] > 0) {\n       SetBit(bits, i);\n@@ -43,9 +47,11 @@ void BitUtil::FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits\n   }\n }\n \n-Status BitUtil::BytesToBits(const std::vector<uint8_t>& bytes, MemoryPool* pool,\n-                            std::shared_ptr<Buffer>* out) {\n-  int64_t bit_length = BitUtil::BytesForBits(bytes.size());\n+}  // namespace\n+\n+Status BytesToBits(const std::vector<uint8_t>& bytes, MemoryPool* pool,\n+                   std::shared_ptr<Buffer>* out) {\n+  int64_t bit_length = BytesForBits(bytes.size());\n \n   std::shared_ptr<Buffer> buffer;\n   RETURN_NOT_OK(AllocateBuffer(pool, bit_length, &buffer));\n@@ -57,6 +63,8 @@ Status BitUtil::BytesToBits(const std::vector<uint8_t>& bytes, MemoryPool* pool,\n   return Status::OK();\n }\n \n+}  // namespace BitUtil\n+\n int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length) {\n   constexpr int64_t pop_len = sizeof(uint64_t) * 8;\n \n@@ -98,16 +106,10 @@ int64_t CountSetBits(const uint8_t* data, int64_t bit_offset, int64_t length) {\n   return count;\n }\n \n-Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* result) {\n-  RETURN_NOT_OK(AllocateBuffer(pool, BitUtil::BytesForBits(length), result));\n-  memset((*result)->mutable_data(), 0, static_cast<size_t>((*result)->size()));\n-  return Status::OK();\n-}\n-\n Status CopyBitmap(MemoryPool* pool, const uint8_t* data, int64_t offset, int64_t length,\n                   std::shared_ptr<Buffer>* out) {\n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(GetEmptyBitmap(pool, length, &buffer));\n+  RETURN_NOT_OK(AllocateEmptyBitmap(pool, length, &buffer));\n   uint8_t* dest = buffer->mutable_data();\n \n   int64_t byte_offset = offset / 8;\n@@ -137,7 +139,7 @@ Status CopyBitmap(MemoryPool* pool, const uint8_t* data, int64_t offset, int64_t\n \n   for (int64_t i = length; i < length + bits_to_zero; ++i) {\n     // Both branches may copy extra bits - unsetting to match specification.\n-    BitUtil::SetBitTo(dest, i, false);\n+    BitUtil::ClearBit(dest, i);\n   }\n \n   *out = buffer;\n@@ -214,12 +216,12 @@ Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n   if ((out_offset % 8 == left_offset % 8) && (out_offset % 8 == right_offset % 8)) {\n     // Fast case: can use bytewise AND\n     const int64_t phys_bits = length + out_offset;\n-    RETURN_NOT_OK(GetEmptyBitmap(pool, phys_bits, out_buffer));\n+    RETURN_NOT_OK(AllocateEmptyBitmap(pool, phys_bits, out_buffer));\n     AlignedBitmapAnd(left, left_offset, right, right_offset,\n                      (*out_buffer)->mutable_data(), out_offset, length);\n   } else {\n     // Unaligned\n-    RETURN_NOT_OK(GetEmptyBitmap(pool, length + out_offset, out_buffer));\n+    RETURN_NOT_OK(AllocateEmptyBitmap(pool, length + out_offset, out_buffer));\n     UnalignedBitmapAnd(left, left_offset, right, right_offset,\n                        (*out_buffer)->mutable_data(), out_offset, length);\n   }\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 6c06d9c030..d36ea5d5dd 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -69,6 +69,10 @@\n \n namespace arrow {\n \n+class Buffer;\n+class MemoryPool;\n+class Status;\n+\n namespace detail {\n \n template <typename Integer>\n@@ -78,79 +82,24 @@ typename std::make_unsigned<Integer>::type as_unsigned(Integer x) {\n \n }  // namespace detail\n \n-class Buffer;\n-class MemoryPool;\n-class MutableBuffer;\n-class Status;\n-\n namespace BitUtil {\n \n //\n-// Utilities for reading and writing individual bits by their index\n-// in a memory area.\n+// Bit-related computations on integer values\n //\n \n-// Bitmask selecting the k-th bit in a byte\n-static constexpr uint8_t kBitmask[] = {1, 2, 4, 8, 16, 32, 64, 128};\n-\n-// the bitwise complement version of kBitmask\n-static constexpr uint8_t kFlippedBitmask[] = {254, 253, 251, 247, 239, 223, 191, 127};\n-\n-// Bitmask selecting the (k - 1) preceding bits in a byte\n-static constexpr uint8_t kPrecedingBitmask[] = {0, 1, 3, 7, 15, 31, 63, 127};\n-\n-// the bitwise complement version of kPrecedingBitmask\n-static constexpr uint8_t kTrailingBitmask[] = {255, 254, 252, 248, 240, 224, 192, 128};\n-\n-static inline int64_t CeilByte(int64_t size) { return (size + 7) & ~7; }\n-\n-static inline int64_t BytesForBits(int64_t size) { return CeilByte(size) / 8; }\n-\n-static inline int64_t Ceil2Bytes(int64_t size) { return (size + 15) & ~15; }\n-\n-static inline bool GetBit(const uint8_t* bits, int64_t i) {\n-  return (bits[i / 8] & kBitmask[i % 8]) != 0;\n-}\n-\n-static inline bool BitNotSet(const uint8_t* bits, int64_t i) {\n-  return (bits[i / 8] & kBitmask[i % 8]) == 0;\n-}\n-\n-static inline void ClearBit(uint8_t* bits, int64_t i) {\n-  bits[i / 8] &= kFlippedBitmask[i % 8];\n-}\n-\n-static inline void SetBit(uint8_t* bits, int64_t i) { bits[i / 8] |= kBitmask[i % 8]; }\n-\n-/// Set bit if is_set is true, but cannot clear bit\n-static inline void SetArrayBit(uint8_t* bits, int i, bool is_set) {\n-  if (is_set) {\n-    SetBit(bits, i);\n-  }\n-}\n-\n-static inline void SetBitTo(uint8_t* bits, int64_t i, bool bit_is_set) {\n-  // https://graphics.stanford.edu/~seander/bithacks.html\n-  // \"Conditionally set or clear bits without branching\"\n-  // NOTE: this seems to confuse Valgrind as it reads from potentially\n-  // uninitialized memory\n-  bits[i / 8] ^= static_cast<uint8_t>(-static_cast<uint8_t>(bit_is_set) ^ bits[i / 8]) &\n-                 kBitmask[i % 8];\n+// Returns the ceil of value/divisor\n+static inline int64_t CeilDiv(int64_t value, int64_t divisor) {\n+  return value / divisor + (value % divisor != 0);\n }\n \n-// Returns the minimum number of bits needed to represent the value of 'x'\n-static inline int NumRequiredBits(uint64_t x) {\n-  for (int i = 63; i >= 0; --i) {\n-    if (x & (UINT64_C(1) << i)) return i + 1;\n-  }\n-  return 0;\n-}\n+static inline int64_t BytesForBits(int64_t bits) { return (bits + 7) >> 3; }\n \n-/// Returns the smallest power of two that contains v. Taken from\n-/// http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n-/// TODO: Pick a better name, as it is not clear what happens when the input is\n-/// already a power of two.\n+// Returns the smallest power of two that contains v.  If v is already a\n+// power of two, it is returned as is.\n static inline int64_t NextPower2(int64_t n) {\n+  // Taken from\n+  // http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n   n--;\n   n |= n >> 1;\n   n |= n >> 2;\n@@ -166,105 +115,29 @@ static inline bool IsMultipleOf64(int64_t n) { return (n & 63) == 0; }\n \n static inline bool IsMultipleOf8(int64_t n) { return (n & 7) == 0; }\n \n-/// Returns the ceil of value/divisor\n-static inline int64_t Ceil(int64_t value, int64_t divisor) {\n-  return value / divisor + (value % divisor != 0);\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor'\n-inline int64_t RoundUp(int64_t value, int64_t factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor'\n+static inline int64_t RoundUp(int64_t value, int64_t factor) {\n   return (value + (factor - 1)) / factor * factor;\n }\n \n-/// Returns 'value' rounded down to the nearest multiple of 'factor'\n-static inline int64_t RoundDown(int64_t value, int64_t factor) {\n-  return (value / factor) * factor;\n-}\n-\n-/// Returns 'value' rounded up to the nearest multiple of 'factor' when factor is\n-/// a power of two\n-static inline int RoundUpToPowerOf2(int value, int factor) {\n+// Returns 'value' rounded up to the nearest multiple of 'factor' when factor\n+// is a power of two.\n+// The result is undefined on overflow, i.e. if `value > 2**64 - factor`,\n+// since we cannot return the correct result which would be 2**64.\n+static inline int64_t RoundUpToPowerOf2(int64_t value, int64_t factor) {\n   // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n   return (value + (factor - 1)) & ~(factor - 1);\n }\n \n-static inline int RoundDownToPowerOf2(int value, int factor) {\n-  // DCHECK((factor > 0) && ((factor & (factor - 1)) == 0));\n-  return value & ~(factor - 1);\n-}\n-\n-/// Specialized round up and down functions for frequently used factors,\n-/// like 8 (bits->bytes), 32 (bits->i32), and 64 (bits->i64).\n-/// Returns the rounded up number of bytes that fit the number of bits.\n-static inline uint32_t RoundUpNumBytes(uint32_t bits) { return (bits + 7) >> 3; }\n-\n-/// Returns the rounded down number of bytes that fit the number of bits.\n-static inline uint32_t RoundDownNumBytes(uint32_t bits) { return bits >> 3; }\n-\n-/// Returns the rounded up to 32 multiple. Used for conversions of bits to i32.\n-static inline uint32_t RoundUpNumi32(uint32_t bits) { return (bits + 31) >> 5; }\n-\n-/// Returns the rounded up 32 multiple.\n-static inline uint32_t RoundDownNumi32(uint32_t bits) { return bits >> 5; }\n-\n-/// Returns the rounded up to 64 multiple. Used for conversions of bits to i64.\n-static inline uint32_t RoundUpNumi64(uint32_t bits) { return (bits + 63) >> 6; }\n-\n-/// Returns the rounded down to 64 multiple.\n-static inline uint32_t RoundDownNumi64(uint32_t bits) { return bits >> 6; }\n-\n-template <int64_t ROUND_TO>\n-static inline int64_t RoundToPowerOfTwo(int64_t num) {\n-  // TODO(wesm): is this definitely needed?\n-  // DCHECK_GE(num, 0);\n-  constexpr int64_t force_carry_addend = ROUND_TO - 1;\n-  constexpr int64_t truncate_bitmask = ~(ROUND_TO - 1);\n-  constexpr int64_t max_roundable_num = std::numeric_limits<int64_t>::max() - ROUND_TO;\n-  if (num <= max_roundable_num) {\n-    return (num + force_carry_addend) & truncate_bitmask;\n-  }\n-  // handle overflow case.  This should result in a malloc error upstream\n-  return num;\n-}\n-\n-static inline int64_t RoundUpToMultipleOf64(int64_t num) {\n-  return RoundToPowerOfTwo<64>(num);\n-}\n-\n static inline int64_t RoundUpToMultipleOf8(int64_t num) {\n-  return RoundToPowerOfTwo<8>(num);\n-}\n-\n-/// Non hw accelerated pop count.\n-/// TODO: we don't use this in any perf sensitive code paths currently.  There\n-/// might be a much faster way to implement this.\n-static inline int PopcountNoHw(uint64_t x) {\n-  int count = 0;\n-  for (; x != 0; ++count) x &= x - 1;\n-  return count;\n+  return RoundUpToPowerOf2(num, 8);\n }\n \n-/// Returns the number of set bits in x\n-static inline int Popcount(uint64_t x) {\n-#ifdef ARROW_USE_SSE\n-  if (ARROW_PREDICT_TRUE(CpuInfo::IsSupported(CpuInfo::POPCNT))) {\n-    return POPCNT_popcnt_u64(x);\n-  } else {\n-    return PopcountNoHw(x);\n-  }\n-#else\n-  return PopcountNoHw(x);\n-#endif\n-}\n-\n-// Compute correct population count for various-width signed integers\n-template <typename T>\n-static inline int PopcountSigned(T v) {\n-  // Converting to same-width unsigned then extending preserves the bit pattern.\n-  return BitUtil::Popcount(detail::as_unsigned(v));\n+static inline int64_t RoundUpToMultipleOf64(int64_t num) {\n+  return RoundUpToPowerOf2(num, 64);\n }\n \n-/// Returns the 'num_bits' least-significant bits of 'v'.\n+// Returns the 'num_bits' least-significant bits of 'v'.\n static inline uint64_t TrailingBits(uint64_t v, int num_bits) {\n   if (ARROW_PREDICT_FALSE(num_bits == 0)) return 0;\n   if (ARROW_PREDICT_FALSE(num_bits >= 64)) return v;\n@@ -272,42 +145,63 @@ static inline uint64_t TrailingBits(uint64_t v, int num_bits) {\n   return (v << n) >> n;\n }\n \n-/// Returns ceil(log2(x)).\n-/// TODO: this could be faster if we use __builtin_clz.  Fix this if this ever shows up\n-/// in a hot path.\n-static inline int Log2(uint64_t x) {\n-  // DCHECK_GT(x, 0);\n-  if (x == 1) return 0;\n-  // Compute result = ceil(log2(x))\n-  //                = floor(log2(x - 1)) + 1, for x > 1\n-  // by finding the position of the most significant bit (1-indexed) of x - 1\n-  // (floor(log2(n)) = MSB(n) (0-indexed))\n-  --x;\n-  int result = 1;\n-  while (x >>= 1) ++result;\n-  return result;\n+/// \\brief Count the number of leading zeros in an unsigned integer.\n+static inline int CountLeadingZeros(uint32_t value) {\n+#if defined(__clang__) || defined(__GNUC__)\n+  if (value == 0) return 32;\n+  return static_cast<int>(__builtin_clz(value));\n+#elif defined(_MSC_VER)\n+  unsigned long index;                                               // NOLINT\n+  if (_BitScanReverse(&index, static_cast<unsigned long>(value))) {  // NOLINT\n+    return 31 - static_cast<int>(index);\n+  } else {\n+    return 32;\n+  }\n+#else\n+  int bitpos = 0;\n+  while (value != 0) {\n+    value >>= 1;\n+    ++bitpos;\n+  }\n+  return 32 - bitpos;\n+#endif\n }\n \n-/// \\brief Count the number of leading zeros in a 32 bit integer.\n-static inline int64_t CountLeadingZeros(uint32_t value) {\n-// DCHECK_NE(value, 0);\n+static inline int CountLeadingZeros(uint64_t value) {\n #if defined(__clang__) || defined(__GNUC__)\n-  return static_cast<int64_t>(__builtin_clz(value));\n+  if (value == 0) return 64;\n+  return static_cast<int>(__builtin_clzl(value));\n #elif defined(_MSC_VER)\n-  unsigned long index;                                         // NOLINT\n-  _BitScanReverse(&index, static_cast<unsigned long>(value));  // NOLINT\n-  return 31LL - static_cast<int64_t>(index);\n+  unsigned long index;                     // NOLINT\n+  if (_BitScanReverse64(&index, value)) {  // NOLINT\n+    return 63 - static_cast<int>(index);\n+  } else {\n+    return 64;\n+  }\n #else\n-  int64_t bitpos = 0;\n+  int bitpos = 0;\n   while (value != 0) {\n     value >>= 1;\n     ++bitpos;\n   }\n-  return 32LL - bitpos;\n+  return 64 - bitpos;\n #endif\n }\n \n-/// Swaps the byte order (i.e. endianess)\n+// Returns the minimum number of bits needed to represent an unsigned value\n+static inline int NumRequiredBits(uint64_t x) { return 64 - CountLeadingZeros(x); }\n+\n+// Returns ceil(log2(x)).\n+static inline int Log2(uint64_t x) {\n+  // DCHECK_GT(x, 0);\n+  return NumRequiredBits(x - 1);\n+}\n+\n+//\n+// Byte-swap 16-bit, 32-bit and 64-bit values\n+//\n+\n+// Swap the byte order (i.e. endianess)\n static inline int64_t ByteSwap(int64_t value) { return ARROW_BYTE_SWAP64(value); }\n static inline uint64_t ByteSwap(uint64_t value) {\n   return static_cast<uint64_t>(ARROW_BYTE_SWAP64(value));\n@@ -324,7 +218,7 @@ static inline uint16_t ByteSwap(uint16_t value) {\n   return static_cast<uint16_t>(ByteSwap(static_cast<int16_t>(value)));\n }\n \n-/// Write the swapped bytes into dst. Src and st cannot overlap.\n+// Write the swapped bytes into dst. Src and dst cannot overlap.\n static inline void ByteSwap(void* dst, const void* src, int len) {\n   switch (len) {\n     case 1:\n@@ -350,8 +244,7 @@ static inline void ByteSwap(void* dst, const void* src, int len) {\n   }\n }\n \n-/// Converts to big endian format (if not already in big endian) from the\n-/// machine's native endian format.\n+// Convert to little/big endian format from the machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n                                                  int16_t, uint16_t>>\n@@ -370,9 +263,15 @@ template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t,\n static inline T ToBigEndian(T value) {\n   return value;\n }\n+\n+template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n+                                                 int16_t, uint16_t>>\n+static inline T ToLittleEndian(T value) {\n+  return ByteSwap(value);\n+}\n #endif\n \n-/// Converts from big endian format to the machine's native endian format.\n+// Convert from big/little endian format to the machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n template <typename T, typename = EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t,\n                                                  int16_t, uint16_t>>\n@@ -399,16 +298,32 @@ static inline T FromLittleEndian(T value) {\n }\n #endif\n \n-// Logical right shift for signed integer types\n-// This is needed because the C >> operator does arithmetic right shift\n-// Negative shift amounts lead to undefined behavior\n-template <typename T>\n-static T ShiftRightLogical(T v, int shift) {\n-  // Conversion to unsigned ensures most significant bits always filled with 0's\n-  return detail::as_unsigned(v) >> shift;\n+//\n+// Utilities for reading and writing individual bits by their index\n+// in a memory area.\n+//\n+\n+// Bitmask selecting the k-th bit in a byte\n+static constexpr uint8_t kBitmask[] = {1, 2, 4, 8, 16, 32, 64, 128};\n+\n+// the bitwise complement version of kBitmask\n+static constexpr uint8_t kFlippedBitmask[] = {254, 253, 251, 247, 239, 223, 191, 127};\n+\n+// Bitmask selecting the (k - 1) preceding bits in a byte\n+static constexpr uint8_t kPrecedingBitmask[] = {0, 1, 3, 7, 15, 31, 63, 127};\n+\n+// the bitwise complement version of kPrecedingBitmask\n+static constexpr uint8_t kTrailingBitmask[] = {255, 254, 252, 248, 240, 224, 192, 128};\n+\n+static inline bool GetBit(const uint8_t* bits, int64_t i) {\n+  return (bits[i / 8] & kBitmask[i % 8]) != 0;\n+}\n+\n+static inline void ClearBit(uint8_t* bits, int64_t i) {\n+  bits[i / 8] &= kFlippedBitmask[i % 8];\n }\n \n-void FillBitsFromBytes(const std::vector<uint8_t>& bytes, uint8_t* bits);\n+static inline void SetBit(uint8_t* bits, int64_t i) { bits[i / 8] |= kBitmask[i % 8]; }\n \n /// \\brief Convert vector of bytes to bitmap buffer\n ARROW_EXPORT\n@@ -430,12 +345,7 @@ class BitmapReader {\n     }\n   }\n \n-#if defined(_MSC_VER)\n-  // MSVC is finicky about this cast\n   bool IsSet() const { return (current_byte_ & (1 << bit_offset_)) != 0; }\n-#else\n-  bool IsSet() const { return current_byte_ & (1 << bit_offset_); }\n-#endif\n \n   bool IsNotSet() const { return (current_byte_ & (1 << bit_offset_)) == 0; }\n \n@@ -647,9 +557,6 @@ void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n // ----------------------------------------------------------------------\n // Bitmap utilities\n \n-ARROW_EXPORT\n-Status GetEmptyBitmap(MemoryPool* pool, int64_t length, std::shared_ptr<Buffer>* result);\n-\n /// Copy a bit range of an existing bitmap\n ///\n /// \\param[in] pool memory pool to allocate memory from\ndiff --git a/cpp/src/arrow/util/rle-encoding-test.cc b/cpp/src/arrow/util/rle-encoding-test.cc\nindex 09bcb1a21c..a6583bd20a 100644\n--- a/cpp/src/arrow/util/rle-encoding-test.cc\n+++ b/cpp/src/arrow/util/rle-encoding-test.cc\n@@ -101,7 +101,7 @@ TEST(BitArray, TestBool) {\n \n // Writes 'num_vals' values with width 'bit_width' and reads them back.\n void TestBitArrayValues(int bit_width, int num_vals) {\n-  int len = static_cast<int>(BitUtil::Ceil(bit_width * num_vals, 8));\n+  int len = static_cast<int>(BitUtil::BytesForBits(bit_width * num_vals));\n   EXPECT_GT(len, 0);\n   const uint64_t mod = bit_width == 64 ? 1 : 1LL << bit_width;\n \n@@ -281,14 +281,15 @@ TEST(Rle, SpecificSequences) {\n   }\n \n   for (int width = 9; width <= MAX_WIDTH; ++width) {\n-    ValidateRle(values, width, NULL, 2 * (1 + static_cast<int>(BitUtil::Ceil(width, 8))));\n+    ValidateRle(values, width, NULL,\n+                2 * (1 + static_cast<int>(BitUtil::CeilDiv(width, 8))));\n   }\n \n   // Test 100 0's and 1's alternating\n   for (int i = 0; i < 100; ++i) {\n     values[i] = i % 2;\n   }\n-  int num_groups = static_cast<int>(BitUtil::Ceil(100, 8));\n+  int num_groups = static_cast<int>(BitUtil::CeilDiv(100, 8));\n   expected_buffer[0] = static_cast<uint8_t>((num_groups << 1) | 1);\n   for (int i = 1; i <= 100 / 8; ++i) {\n     expected_buffer[i] = BOOST_BINARY(1 0 1 0 1 0 1 0);\n@@ -299,9 +300,9 @@ TEST(Rle, SpecificSequences) {\n   // num_groups and expected_buffer only valid for bit width = 1\n   ValidateRle(values, 1, expected_buffer, 1 + num_groups);\n   for (int width = 2; width <= MAX_WIDTH; ++width) {\n-    int num_values = static_cast<int>(BitUtil::Ceil(100, 8)) * 8;\n+    int num_values = static_cast<int>(BitUtil::CeilDiv(100, 8)) * 8;\n     ValidateRle(values, width, NULL,\n-                1 + static_cast<int>(BitUtil::Ceil(width * num_values, 8)));\n+                1 + static_cast<int>(BitUtil::CeilDiv(width * num_values, 8)));\n   }\n }\n \ndiff --git a/cpp/src/arrow/util/rle-encoding.h b/cpp/src/arrow/util/rle-encoding.h\nindex f343b74cc7..8d9ac1d11e 100644\n--- a/cpp/src/arrow/util/rle-encoding.h\n+++ b/cpp/src/arrow/util/rle-encoding.h\n@@ -169,10 +169,11 @@ class RleEncoder {\n   static int MinBufferSize(int bit_width) {\n     /// 1 indicator byte and MAX_VALUES_PER_LITERAL_RUN 'bit_width' values.\n     int max_literal_run_size =\n-        1 + static_cast<int>(BitUtil::Ceil(MAX_VALUES_PER_LITERAL_RUN * bit_width, 8));\n+        1 +\n+        static_cast<int>(BitUtil::BytesForBits(MAX_VALUES_PER_LITERAL_RUN * bit_width));\n     /// Up to MAX_VLQ_BYTE_LEN indicator and a single 'bit_width' value.\n     int max_repeated_run_size =\n-        BitReader::MAX_VLQ_BYTE_LEN + static_cast<int>(BitUtil::Ceil(bit_width, 8));\n+        BitReader::MAX_VLQ_BYTE_LEN + static_cast<int>(BitUtil::BytesForBits(bit_width));\n     return std::max(max_literal_run_size, max_repeated_run_size);\n   }\n \n@@ -181,17 +182,16 @@ class RleEncoder {\n     // For a bit_width > 1, the worst case is the repetition of \"literal run of length 8\n     // and then a repeated run of length 8\".\n     // 8 values per smallest run, 8 bits per byte\n-    // int bytes_per_run = BitUtil::Ceil(bit_width * 8, 8);\n     int bytes_per_run = bit_width;\n-    int num_runs = static_cast<int>(BitUtil::Ceil(num_values, 8));\n+    int num_runs = static_cast<int>(BitUtil::CeilDiv(num_values, 8));\n     int literal_max_size = num_runs + num_runs * bytes_per_run;\n \n     // In the very worst case scenario, the data is a concatenation of repeated\n     // runs of 8 values. Repeated run has a 1 byte varint followed by the\n     // bit-packed repeated value\n-    int min_repeated_run_size = 1 + static_cast<int>(BitUtil::Ceil(bit_width, 8));\n+    int min_repeated_run_size = 1 + static_cast<int>(BitUtil::BytesForBits(bit_width));\n     int repeated_max_size =\n-        static_cast<int>(BitUtil::Ceil(num_values, 8)) * min_repeated_run_size;\n+        static_cast<int>(BitUtil::CeilDiv(num_values, 8)) * min_repeated_run_size;\n \n     return std::max(literal_max_size, repeated_max_size);\n   }\n@@ -436,7 +436,7 @@ bool RleDecoder::NextCounts() {\n   } else {\n     repeat_count_ = indicator_value >> 1;\n     bool result =\n-        bit_reader_.GetAligned<T>(static_cast<int>(BitUtil::Ceil(bit_width_, 8)),\n+        bit_reader_.GetAligned<T>(static_cast<int>(BitUtil::CeilDiv(bit_width_, 8)),\n                                   reinterpret_cast<T*>(&current_value_));\n     DCHECK(result);\n   }\n@@ -513,7 +513,7 @@ inline void RleEncoder::FlushRepeatedRun() {\n   int32_t indicator_value = repeat_count_ << 1 | 0;\n   result &= bit_writer_.PutVlqInt(indicator_value);\n   result &= bit_writer_.PutAligned(current_value_,\n-                                   static_cast<int>(BitUtil::Ceil(bit_width_, 8)));\n+                                   static_cast<int>(BitUtil::CeilDiv(bit_width_, 8)));\n   DCHECK(result);\n   num_buffered_values_ = 0;\n   repeat_count_ = 0;\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T16:34:28.628+0000",
                    "updated": "2018-08-08T16:34:28.628+0000",
                    "started": "2018-08-08T16:34:28.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132427",
                    "issueId": "13175850"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53491bf6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37207824[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13b25c97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@27e7f79d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62d1de3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@119bf331[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10cc4371[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@88f05ea[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64c30aeb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2a0f7f39[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58aa76c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@287a9868[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 08 16:34:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-08T16:34:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2950/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-31T14:20:25.000+0000",
        "updated": "2018-08-08T16:34:28.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently {{bit-util.h}} has a lot of very similar functions, some possibly unused. It would be nice to do a clean-up pass.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Clean up util/bit-util.h",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175850/comment/16573466",
                    "id": "16573466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2355\n[https://github.com/apache/arrow/pull/2355]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-08T16:34:21.773+0000",
                    "updated": "2018-08-08T16:34:21.773+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wivr:",
        "customfield_12314139": null
    }
}