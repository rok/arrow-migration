{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13474575",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575",
    "key": "ARROW-17276",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333774",
                "id": "12333774",
                "name": "Integration",
                "description": "Issues related to integration / compatibility tests between implementations"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17276/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request, #13806:\nURL: https://github.com/apache/arrow/pull/13806\n\n   With this, the Go implementation finally fully supports IPC handling for All the Arrow DataTypes!\n\n\n",
                    "created": "2022-08-05T16:34:02.564+0000",
                    "updated": "2022-08-05T16:34:02.564+0000",
                    "started": "2022-08-05T16:34:02.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798479",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#issuecomment-1206640705\n\n   https://issues.apache.org/jira/browse/ARROW-17276\n\n\n",
                    "created": "2022-08-05T16:34:23.441+0000",
                    "updated": "2022-08-05T16:34:23.441+0000",
                    "started": "2022-08-05T16:34:23.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798480",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#issuecomment-1206640804\n\n   Pinging @wolfeidau for the last in this series of changes to get Go support for data types :)\n\n\n",
                    "created": "2022-08-05T16:34:30.161+0000",
                    "updated": "2022-08-05T16:34:30.161+0000",
                    "started": "2022-08-05T16:34:30.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798481",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wolfeidau commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r939185208\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,45 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\tnBuffers := 2\n\nReview Comment:\n   Maybe a small comment on what 2 and 3 represent here.\n\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -381,6 +382,7 @@ func (src *ipcSource) buffer(i int) *memory.Buffer {\n \tif !src.meta.Buffers(&buf, i) {\n \t\tpanic(\"buffer index out of bound\")\n\nReview Comment:\n   Again prefix this with \"arrow: \"?\n\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,45 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\tnBuffers := 2\n+\tif dt.Mode() == arrow.DenseMode {\n+\t\tnBuffers = 3\n+\t}\n+\n+\tfield, buffers := ctx.loadCommon(dt.ID(), nBuffers)\n+\tif field.NullCount() != 0 && buffers[0] != nil {\n+\t\tpanic(\"cannot read pre-1.0.0 union array with top-level validity bitmap\")\n\nReview Comment:\n   Prefix this with \"arrow: \"?\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -574,6 +577,100 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\t}\n \t\tw.depth++\n \n+\tcase *arrow.SparseUnionType:\n+\t\toffset, length := arr.Data().Offset(), arr.Len()\n+\t\tarr := arr.(*array.SparseUnion)\n+\t\ttypeCodes := getTruncatedBuffer(int64(offset), int64(length), int32(unsafe.Sizeof(arrow.UnionTypeCode(0))), arr.TypeCodes())\n+\t\tp.body = append(p.body, typeCodes)\n+\n+\t\tw.depth--\n+\t\tfor i := 0; i < arr.NumFields(); i++ {\n+\t\t\terr := w.visit(p, arr.Field(i))\n+\t\t\tif err != nil {\n+\t\t\t\treturn fmt.Errorf(\"could not visit field %d of sparse union array: %w\", i, err)\n+\t\t\t}\n+\t\t}\n+\t\tw.depth++\n+\tcase *arrow.DenseUnionType:\n+\t\toffset, length := arr.Data().Offset(), arr.Len()\n+\t\tarr := arr.(*array.DenseUnion)\n+\t\ttypeCodes := getTruncatedBuffer(int64(offset), int64(length), int32(unsafe.Sizeof(arrow.UnionTypeCode(0))), arr.TypeCodes())\n+\t\tp.body = append(p.body, typeCodes)\n+\n+\t\tw.depth--\n+\t\tdt := arr.UnionType()\n+\n+\t\t// union type codes are not necessarily 0-indexed\n+\t\tmaxCode := dt.MaxTypeCode()\n+\n+\t\t// allocate an array of child offsets. Set all to -1 to indicate we\n+\t\t// haven't observed a first occurrence of a particular child yet\n+\t\toffsets := make([]int32, maxCode+1)\n+\t\tlengths := make([]int32, maxCode+1)\n+\t\toffsets[0], lengths[0] = -1, 0\n+\t\tfor i := 1; i < len(offsets); i *= 2 {\n+\t\t\tcopy(offsets[i:], offsets[:i])\n+\t\t\tcopy(lengths[i:], lengths[:i])\n+\t\t}\n+\n+\t\tvar valueOffsets *memory.Buffer\n+\t\tif offset != 0 {\n+\t\t\t// this case sucks. Because the offsets are different for each\n+\t\t\t// child array, when we have a sliced array, we need to re-base\n+\t\t\t// the value offsets for each array! ew.\n+\n\nReview Comment:\n   From this comment it almost feels like you want to make a smaller function for this so it can be tested in isolation.\r\n   \r\n   Feels like it could be super hard to track down in this case statement.\n\n\n\n",
                    "created": "2022-08-05T20:14:08.514+0000",
                    "updated": "2022-08-05T20:14:08.514+0000",
                    "started": "2022-08-05T20:14:08.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798536",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r939217901\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,45 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\tnBuffers := 2\n\nReview Comment:\n   added\n\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,45 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\tnBuffers := 2\n+\tif dt.Mode() == arrow.DenseMode {\n+\t\tnBuffers = 3\n+\t}\n+\n+\tfield, buffers := ctx.loadCommon(dt.ID(), nBuffers)\n+\tif field.NullCount() != 0 && buffers[0] != nil {\n+\t\tpanic(\"cannot read pre-1.0.0 union array with top-level validity bitmap\")\n\nReview Comment:\n   prefixed\n\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -381,6 +382,7 @@ func (src *ipcSource) buffer(i int) *memory.Buffer {\n \tif !src.meta.Buffers(&buf, i) {\n \t\tpanic(\"buffer index out of bound\")\n\nReview Comment:\n   prefixed\n\n\n\n",
                    "created": "2022-08-05T20:52:12.454+0000",
                    "updated": "2022-08-05T20:52:12.454+0000",
                    "started": "2022-08-05T20:52:12.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798545",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#issuecomment-1206855746\n\n   Thanks for the lookover @wolfeidau !\n\n\n",
                    "created": "2022-08-05T20:53:11.797+0000",
                    "updated": "2022-08-05T20:53:11.797+0000",
                    "started": "2022-08-05T20:53:11.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798547",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r939218404\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -574,6 +577,100 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\t}\n \t\tw.depth++\n \n+\tcase *arrow.SparseUnionType:\n+\t\toffset, length := arr.Data().Offset(), arr.Len()\n+\t\tarr := arr.(*array.SparseUnion)\n+\t\ttypeCodes := getTruncatedBuffer(int64(offset), int64(length), int32(unsafe.Sizeof(arrow.UnionTypeCode(0))), arr.TypeCodes())\n+\t\tp.body = append(p.body, typeCodes)\n+\n+\t\tw.depth--\n+\t\tfor i := 0; i < arr.NumFields(); i++ {\n+\t\t\terr := w.visit(p, arr.Field(i))\n+\t\t\tif err != nil {\n+\t\t\t\treturn fmt.Errorf(\"could not visit field %d of sparse union array: %w\", i, err)\n+\t\t\t}\n+\t\t}\n+\t\tw.depth++\n+\tcase *arrow.DenseUnionType:\n+\t\toffset, length := arr.Data().Offset(), arr.Len()\n+\t\tarr := arr.(*array.DenseUnion)\n+\t\ttypeCodes := getTruncatedBuffer(int64(offset), int64(length), int32(unsafe.Sizeof(arrow.UnionTypeCode(0))), arr.TypeCodes())\n+\t\tp.body = append(p.body, typeCodes)\n+\n+\t\tw.depth--\n+\t\tdt := arr.UnionType()\n+\n+\t\t// union type codes are not necessarily 0-indexed\n+\t\tmaxCode := dt.MaxTypeCode()\n+\n+\t\t// allocate an array of child offsets. Set all to -1 to indicate we\n+\t\t// haven't observed a first occurrence of a particular child yet\n+\t\toffsets := make([]int32, maxCode+1)\n+\t\tlengths := make([]int32, maxCode+1)\n+\t\toffsets[0], lengths[0] = -1, 0\n+\t\tfor i := 1; i < len(offsets); i *= 2 {\n+\t\t\tcopy(offsets[i:], offsets[:i])\n+\t\t\tcopy(lengths[i:], lengths[:i])\n+\t\t}\n+\n+\t\tvar valueOffsets *memory.Buffer\n+\t\tif offset != 0 {\n+\t\t\t// this case sucks. Because the offsets are different for each\n+\t\t\t// child array, when we have a sliced array, we need to re-base\n+\t\t\t// the value offsets for each array! ew.\n+\n\nReview Comment:\n   created new function `rebaseDenseUnionValueOffsets`\n\n\n\n",
                    "created": "2022-08-05T20:53:12.871+0000",
                    "updated": "2022-08-05T20:53:12.871+0000",
                    "started": "2022-08-05T20:53:12.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798548",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940165319\n\n\n##########\ngo/arrow/internal/arrdata/arrdata.go:\n##########\n@@ -935,6 +935,64 @@ func makeExtensionRecords() []arrow.Record {\n \treturn recs\n }\n \n+func makeUnionRecords() []arrow.Record {\n+\tmem := memory.NewGoAllocator()\n+\n+\tunionFields := []arrow.Field{\n+\t\t{Name: \"u0\", Type: arrow.PrimitiveTypes.Int32, Nullable: true},\n+\t\t{Name: \"u1\", Type: arrow.PrimitiveTypes.Uint8, Nullable: true},\n+\t}\n+\n+\ttypeCodes := []arrow.UnionTypeCode{5, 10}\n+\tsparseType := arrow.SparseUnionOf(unionFields, typeCodes)\n+\tdenseType := arrow.DenseUnionOf(unionFields, typeCodes)\n+\n+\tschema := arrow.NewSchema([]arrow.Field{\n+\t\t{Name: \"sparse\", Type: sparseType, Nullable: true},\n+\t\t{Name: \"dense\", Type: denseType, Nullable: true},\n+\t}, nil)\n+\n+\tsparseChildren := make([]arrow.Array, 4)\n+\tdenseChildren := make([]arrow.Array, 4)\n+\n+\tconst length = 7\n+\n+\ttypeIDsBuffer := memory.NewBufferBytes(arrow.Uint8Traits.CastToBytes([]uint8{5, 10, 5, 5, 10, 10, 5}))\n+\tsparseChildren[0] = arrayOf(mem, []int32{0, 1, 2, 3, 4, 5, 6}, nil)\n+\tdefer sparseChildren[0].Release()\n+\tsparseChildren[1] = arrayOf(mem, []uint8{10, 11, 12, 13, 14, 15, 16}, nil)\n+\tdefer sparseChildren[1].Release()\n+\tsparseChildren[2] = arrayOf(mem, []int32{0, -1, -2, -3, -4, -5, -6}, nil)\n+\tdefer sparseChildren[2].Release()\n+\tsparseChildren[3] = arrayOf(mem, []uint8{100, 101, 102, 103, 104, 105, 106}, nil)\n+\tdefer sparseChildren[3].Release()\n+\n+\tdenseChildren[0] = arrayOf(mem, []int32{0, 2, 3, 7}, nil)\n+\tdefer denseChildren[0].Release()\n+\tdenseChildren[1] = arrayOf(mem, []uint8{11, 14, 15}, nil)\n+\tdefer denseChildren[1].Release()\n+\tdenseChildren[2] = arrayOf(mem, []int32{0, -2, -3, -7}, nil)\n+\tdefer denseChildren[2].Release()\n+\tdenseChildren[3] = arrayOf(mem, []uint8{101, 104, 105}, nil)\n+\tdefer denseChildren[3].Release()\n\nReview Comment:\n   Should you add some nulls in at least some of these child arrays?\n\n\n\n##########\ngo/arrow/internal/arrjson/arrjson.go:\n##########\n@@ -1152,6 +1176,31 @@ func arrayFromJSON(mem memory.Allocator, dt arrow.DataType, arr Array) arrow.Arr\n \t\tdefer indices.Release()\n \t\treturn array.NewData(dt, indices.Len(), indices.Buffers(), indices.Children(), indices.NullN(), indices.Offset())\n \n+\tcase arrow.UnionType:\n+\t\tfields := make([]arrow.ArrayData, len(dt.Fields()))\n+\t\tfor i, f := range dt.Fields() {\n+\t\t\tchild := arrayFromJSON(mem, f.Type, arr.Children[i])\n+\t\t\tdefer child.Release()\n+\t\t\tfields[i] = child\n+\t\t}\n+\n+\t\ttypeIdBuf := memory.NewBufferBytes(arrow.Int8Traits.CastToBytes(arr.TypeID))\n+\t\tdefer typeIdBuf.Release()\n+\t\tbuffers := []*memory.Buffer{nil, typeIdBuf}\n+\t\tif dt.Mode() == arrow.DenseMode {\n+\t\t\tvar offsets []byte\n+\t\t\tif arr.Offset == nil {\n+\t\t\t\toffsets = []byte{}\n\nReview Comment:\n   Does that actually happen?\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -478,23 +479,25 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\treturn nil\n \t}\n \n-\tswitch arr.NullN() {\n-\tcase 0:\n-\t\t// there are no null values, drop the null bitmap\n-\t\tp.body = append(p.body, nil)\n-\tdefault:\n-\t\tdata := arr.Data()\n-\t\tvar bitmap *memory.Buffer\n-\t\tif data.NullN() == data.Len() {\n-\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n-\t\t\tbitmap = memory.NewResizableBuffer(w.mem)\n-\t\t\tminLength := paddedLength(bitutil.BytesForBits(int64(data.Len())), kArrowAlignment)\n-\t\t\tbitmap.Resize(int(minLength))\n-\t\t} else {\n-\t\t\t// otherwise truncate and copy the bits\n-\t\t\tbitmap = newTruncatedBitmap(w.mem, int64(data.Offset()), int64(data.Len()), data.Buffers()[0])\n+\tif hasValidityBitmap(arr.DataType().ID(), currentMetadataVersion) {\n+\t\tswitch arr.NullN() {\n+\t\tcase 0:\n+\t\t\t// there are no null values, drop the null bitmap\n+\t\t\tp.body = append(p.body, nil)\n+\t\tdefault:\n+\t\t\tdata := arr.Data()\n+\t\t\tvar bitmap *memory.Buffer\n+\t\t\tif data.NullN() == data.Len() {\n+\t\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n\nReview Comment:\n   By \"unset\", do you mean zero-initialized?\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,34 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// offsets may not be ascending, so we need to find out the start offset for each child\n\nReview Comment:\n   I filed ARROW-17339.\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,34 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// offsets may not be ascending, so we need to find out the start offset for each child\n\nReview Comment:\n   The [spec](https://arrow.apache.org/docs/format/Columnar.html#dense-union) says:\r\n   > The respective offsets for each child value array must be in order / increasing.\n\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,47 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\t// Sparse unions have 2 buffers (a nil validity bitmap, and the type ids)\n+\tnBuffers := 2\n+\t// Dense unions have a third buffer, the offsets\n+\tif dt.Mode() == arrow.DenseMode {\n+\t\tnBuffers = 3\n+\t}\n+\n+\tfield, buffers := ctx.loadCommon(dt.ID(), nBuffers)\n+\tif field.NullCount() != 0 && buffers[0] != nil {\n+\t\tpanic(\"arrow/ipc: cannot read pre-1.0.0 union array with top-level validity bitmap\")\n+\t}\n+\n+\tswitch field.Length() {\n+\tcase 0:\n+\t\tbuffers = append(buffers, memory.NewBufferBytes([]byte{}))\n\nReview Comment:\n   Is this the type codes buffer?\n\n\n\n##########\ngo/arrow/internal/arrjson/arrjson_test.go:\n##########\n@@ -5085,3 +5086,352 @@ func makeExtensionsWantJSONs() string {\n   ]\n }`\n }\n+\n+func makeUnionWantJSONs() string {\n\nReview Comment:\n   Perhaps make some of the child entries null? VALIDITY seems to be always 1 below.\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,34 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// offsets may not be ascending, so we need to find out the start offset for each child\n\nReview Comment:\n   I see you basically copied the C++ implementation. I'll open a JIRA to simplify it.\n\n\n\n",
                    "created": "2022-08-08T12:50:54.662+0000",
                    "updated": "2022-08-08T12:50:54.662+0000",
                    "started": "2022-08-08T12:50:54.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798928",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940351554\n\n\n##########\ngo/arrow/internal/arrjson/arrjson.go:\n##########\n@@ -1152,6 +1176,31 @@ func arrayFromJSON(mem memory.Allocator, dt arrow.DataType, arr Array) arrow.Arr\n \t\tdefer indices.Release()\n \t\treturn array.NewData(dt, indices.Len(), indices.Buffers(), indices.Children(), indices.NullN(), indices.Offset())\n \n+\tcase arrow.UnionType:\n+\t\tfields := make([]arrow.ArrayData, len(dt.Fields()))\n+\t\tfor i, f := range dt.Fields() {\n+\t\t\tchild := arrayFromJSON(mem, f.Type, arr.Children[i])\n+\t\t\tdefer child.Release()\n+\t\t\tfields[i] = child\n+\t\t}\n+\n+\t\ttypeIdBuf := memory.NewBufferBytes(arrow.Int8Traits.CastToBytes(arr.TypeID))\n+\t\tdefer typeIdBuf.Release()\n+\t\tbuffers := []*memory.Buffer{nil, typeIdBuf}\n+\t\tif dt.Mode() == arrow.DenseMode {\n+\t\t\tvar offsets []byte\n+\t\t\tif arr.Offset == nil {\n+\t\t\t\toffsets = []byte{}\n\nReview Comment:\n   It happens in the case of an empty array, which i found when it crashed during archery integration testing lol.\n\n\n\n",
                    "created": "2022-08-08T15:06:05.126+0000",
                    "updated": "2022-08-08T15:06:05.126+0000",
                    "started": "2022-08-08T15:06:05.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798979",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940352533\n\n\n##########\ngo/arrow/internal/arrjson/arrjson_test.go:\n##########\n@@ -5085,3 +5086,352 @@ func makeExtensionsWantJSONs() string {\n   ]\n }`\n }\n+\n+func makeUnionWantJSONs() string {\n\nReview Comment:\n   The top level validity of a union array should always be all 1's (since the top level validity bitmap is always left out for a union array). But i can definitely make some of the children entries null.\n\n\n\n",
                    "created": "2022-08-08T15:07:00.199+0000",
                    "updated": "2022-08-08T15:07:00.199+0000",
                    "started": "2022-08-08T15:07:00.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798980",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940353513\n\n\n##########\ngo/arrow/ipc/file_reader.go:\n##########\n@@ -617,6 +626,47 @@ func (ctx *arrayLoaderContext) loadStruct(dt *arrow.StructType) arrow.ArrayData\n \treturn array.NewData(dt, int(field.Length()), buffers, subs, int(field.NullCount()), 0)\n }\n \n+func (ctx *arrayLoaderContext) loadUnion(dt arrow.UnionType) arrow.ArrayData {\n+\t// Sparse unions have 2 buffers (a nil validity bitmap, and the type ids)\n+\tnBuffers := 2\n+\t// Dense unions have a third buffer, the offsets\n+\tif dt.Mode() == arrow.DenseMode {\n+\t\tnBuffers = 3\n+\t}\n+\n+\tfield, buffers := ctx.loadCommon(dt.ID(), nBuffers)\n+\tif field.NullCount() != 0 && buffers[0] != nil {\n+\t\tpanic(\"arrow/ipc: cannot read pre-1.0.0 union array with top-level validity bitmap\")\n+\t}\n+\n+\tswitch field.Length() {\n+\tcase 0:\n+\t\tbuffers = append(buffers, memory.NewBufferBytes([]byte{}))\n\nReview Comment:\n   yes. In the case of an empty array the type codes buffer is empty.\n\n\n\n",
                    "created": "2022-08-08T15:07:55.255+0000",
                    "updated": "2022-08-08T15:07:55.255+0000",
                    "started": "2022-08-08T15:07:55.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798981",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940354360\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -478,23 +479,25 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\treturn nil\n \t}\n \n-\tswitch arr.NullN() {\n-\tcase 0:\n-\t\t// there are no null values, drop the null bitmap\n-\t\tp.body = append(p.body, nil)\n-\tdefault:\n-\t\tdata := arr.Data()\n-\t\tvar bitmap *memory.Buffer\n-\t\tif data.NullN() == data.Len() {\n-\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n-\t\t\tbitmap = memory.NewResizableBuffer(w.mem)\n-\t\t\tminLength := paddedLength(bitutil.BytesForBits(int64(data.Len())), kArrowAlignment)\n-\t\t\tbitmap.Resize(int(minLength))\n-\t\t} else {\n-\t\t\t// otherwise truncate and copy the bits\n-\t\t\tbitmap = newTruncatedBitmap(w.mem, int64(data.Offset()), int64(data.Len()), data.Buffers()[0])\n+\tif hasValidityBitmap(arr.DataType().ID(), currentMetadataVersion) {\n+\t\tswitch arr.NullN() {\n+\t\tcase 0:\n+\t\t\t// there are no null values, drop the null bitmap\n+\t\t\tp.body = append(p.body, nil)\n+\t\tdefault:\n+\t\t\tdata := arr.Data()\n+\t\t\tvar bitmap *memory.Buffer\n+\t\t\tif data.NullN() == data.Len() {\n+\t\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n\nReview Comment:\n   yes. \"unset\" as in no values have been set\n\n\n\n",
                    "created": "2022-08-08T15:08:40.478+0000",
                    "updated": "2022-08-08T15:08:40.478+0000",
                    "started": "2022-08-08T15:08:40.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798983",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/798985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940355986\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,34 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// offsets may not be ascending, so we need to find out the start offset for each child\n\nReview Comment:\n   Yea i thought that was strange too. Given filing that card, i'll simplify this to take advantage of assuming the offsets are monotonically increasing.\n\n\n\n",
                    "created": "2022-08-08T15:10:10.457+0000",
                    "updated": "2022-08-08T15:10:10.457+0000",
                    "started": "2022-08-08T15:10:10.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798985",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940388621\n\n\n##########\ngo/arrow/internal/arrdata/arrdata.go:\n##########\n@@ -935,6 +935,64 @@ func makeExtensionRecords() []arrow.Record {\n \treturn recs\n }\n \n+func makeUnionRecords() []arrow.Record {\n+\tmem := memory.NewGoAllocator()\n+\n+\tunionFields := []arrow.Field{\n+\t\t{Name: \"u0\", Type: arrow.PrimitiveTypes.Int32, Nullable: true},\n+\t\t{Name: \"u1\", Type: arrow.PrimitiveTypes.Uint8, Nullable: true},\n+\t}\n+\n+\ttypeCodes := []arrow.UnionTypeCode{5, 10}\n+\tsparseType := arrow.SparseUnionOf(unionFields, typeCodes)\n+\tdenseType := arrow.DenseUnionOf(unionFields, typeCodes)\n+\n+\tschema := arrow.NewSchema([]arrow.Field{\n+\t\t{Name: \"sparse\", Type: sparseType, Nullable: true},\n+\t\t{Name: \"dense\", Type: denseType, Nullable: true},\n+\t}, nil)\n+\n+\tsparseChildren := make([]arrow.Array, 4)\n+\tdenseChildren := make([]arrow.Array, 4)\n+\n+\tconst length = 7\n+\n+\ttypeIDsBuffer := memory.NewBufferBytes(arrow.Uint8Traits.CastToBytes([]uint8{5, 10, 5, 5, 10, 10, 5}))\n+\tsparseChildren[0] = arrayOf(mem, []int32{0, 1, 2, 3, 4, 5, 6}, nil)\n+\tdefer sparseChildren[0].Release()\n+\tsparseChildren[1] = arrayOf(mem, []uint8{10, 11, 12, 13, 14, 15, 16}, nil)\n+\tdefer sparseChildren[1].Release()\n+\tsparseChildren[2] = arrayOf(mem, []int32{0, -1, -2, -3, -4, -5, -6}, nil)\n+\tdefer sparseChildren[2].Release()\n+\tsparseChildren[3] = arrayOf(mem, []uint8{100, 101, 102, 103, 104, 105, 106}, nil)\n+\tdefer sparseChildren[3].Release()\n+\n+\tdenseChildren[0] = arrayOf(mem, []int32{0, 2, 3, 7}, nil)\n+\tdefer denseChildren[0].Release()\n+\tdenseChildren[1] = arrayOf(mem, []uint8{11, 14, 15}, nil)\n+\tdefer denseChildren[1].Release()\n+\tdenseChildren[2] = arrayOf(mem, []int32{0, -2, -3, -7}, nil)\n+\tdefer denseChildren[2].Release()\n+\tdenseChildren[3] = arrayOf(mem, []uint8{101, 104, 105}, nil)\n+\tdefer denseChildren[3].Release()\n\nReview Comment:\n   nulls added\n\n\n\n",
                    "created": "2022-08-08T15:41:07.274+0000",
                    "updated": "2022-08-08T15:41:07.274+0000",
                    "started": "2022-08-08T15:41:07.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799002",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940388900\n\n\n##########\ngo/arrow/internal/arrjson/arrjson_test.go:\n##########\n@@ -5085,3 +5086,352 @@ func makeExtensionsWantJSONs() string {\n   ]\n }`\n }\n+\n+func makeUnionWantJSONs() string {\n\nReview Comment:\n   updated with child nulls\n\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -478,23 +479,25 @@ func (w *recordEncoder) visit(p *Payload, arr arrow.Array) error {\n \t\treturn nil\n \t}\n \n-\tswitch arr.NullN() {\n-\tcase 0:\n-\t\t// there are no null values, drop the null bitmap\n-\t\tp.body = append(p.body, nil)\n-\tdefault:\n-\t\tdata := arr.Data()\n-\t\tvar bitmap *memory.Buffer\n-\t\tif data.NullN() == data.Len() {\n-\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n-\t\t\tbitmap = memory.NewResizableBuffer(w.mem)\n-\t\t\tminLength := paddedLength(bitutil.BytesForBits(int64(data.Len())), kArrowAlignment)\n-\t\t\tbitmap.Resize(int(minLength))\n-\t\t} else {\n-\t\t\t// otherwise truncate and copy the bits\n-\t\t\tbitmap = newTruncatedBitmap(w.mem, int64(data.Offset()), int64(data.Len()), data.Buffers()[0])\n+\tif hasValidityBitmap(arr.DataType().ID(), currentMetadataVersion) {\n+\t\tswitch arr.NullN() {\n+\t\tcase 0:\n+\t\t\t// there are no null values, drop the null bitmap\n+\t\t\tp.body = append(p.body, nil)\n+\t\tdefault:\n+\t\t\tdata := arr.Data()\n+\t\t\tvar bitmap *memory.Buffer\n+\t\t\tif data.NullN() == data.Len() {\n+\t\t\t\t// every value is null, just use a new unset bitmap to avoid the expense of copying\n\nReview Comment:\n   changed comment to say \"zero-initialized\" so it's clearer\n\n\n\n",
                    "created": "2022-08-08T15:41:27.335+0000",
                    "updated": "2022-08-08T15:41:27.335+0000",
                    "started": "2022-08-08T15:41:27.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799004",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940389700\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,34 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// offsets may not be ascending, so we need to find out the start offset for each child\n\nReview Comment:\n   simplified logic so now we can do only 1 loop through and when we find the -1 for the offset we have found the initial offset for that child and use that as our zero offset.\n\n\n\n",
                    "created": "2022-08-08T15:42:12.353+0000",
                    "updated": "2022-08-08T15:42:12.353+0000",
                    "started": "2022-08-08T15:42:12.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799005",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#discussion_r940393279\n\n\n##########\ngo/arrow/ipc/writer.go:\n##########\n@@ -724,6 +796,33 @@ func (w *recordEncoder) getZeroBasedValueOffsets(arr arrow.Array) (*memory.Buffe\n \treturn voffsets, nil\n }\n \n+func (w *recordEncoder) rebaseDenseUnionValueOffsets(arr *array.DenseUnion, offsets, lengths []int32) *memory.Buffer {\n+\t// this case sucks. Because the offsets are different for each\n+\t// child array, when we have a sliced array, we need to re-base\n+\t// the value offsets for each array! ew.\n+\tunshiftedOffsets := arr.RawValueOffsets()\n+\tcodes := arr.RawTypeCodes()\n+\n+\tshiftedOffsetsBuf := memory.NewResizableBuffer(w.mem)\n+\tshiftedOffsetsBuf.Resize(arrow.Int32Traits.BytesRequired(arr.Len()))\n+\tshiftedOffsets := arrow.Int32Traits.CastFromBytes(shiftedOffsetsBuf.Bytes())\n+\n+\t// compute shifted offsets by subtracting child offset\n+\tfor i, c := range codes {\n+\t\tif offsets[c] == -1 {\n+\t\t\t// offsets are guaranteed to be increasing according to the spec\n+\t\t\t// so the first offset we find for a child is the initial offset\n+\t\t\t// and will become the \"0\" for this child.\n+\t\t\toffsets[c] = unshiftedOffsets[i]\n+\t\t\tshiftedOffsets[i] = 0\n+\t\t} else {\n+\t\t\tshiftedOffsets[i] = unshiftedOffsets[i] - offsets[c]\n+\t\t}\n+\t\tlengths[c] = maxI32(lengths[c], shiftedOffsets[i]+1)\n+\t}\n\nReview Comment:\n   Looks great! This may serve as an inspiration for Arrow C++, in turn :-)\n\n\n\n",
                    "created": "2022-08-08T15:45:47.564+0000",
                    "updated": "2022-08-08T15:45:47.564+0000",
                    "started": "2022-08-08T15:45:47.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799007",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade merged PR #13806:\nURL: https://github.com/apache/arrow/pull/13806\n\n\n",
                    "created": "2022-08-08T17:20:44.986+0000",
                    "updated": "2022-08-08T17:20:44.986+0000",
                    "started": "2022-08-08T17:20:44.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799038",
                    "issueId": "13474575"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/worklog/799125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13806:\nURL: https://github.com/apache/arrow/pull/13806#issuecomment-1208718211\n\n   Benchmark runs are scheduled for baseline = b1d36c026df7838669742800591b5c4454af9a81 and contender = d171b6c35481ccfffe398a288c2c2f8a9ee1123c. d171b6c35481ccfffe398a288c2c2f8a9ee1123c is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/f517ed2a9a4948fc97bffe4864df492a...b261272178124722b93262f4123bf17f/)\n   [Failed :arrow_down:0.17% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/9efeed726ed24d8aacafa9cd431a93b5...fbd7a2ea470245de9a8213c4e2b64539/)\n   [Finished :arrow_down:0.27% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ebb2bf9e80f44df19b5942fb13ebe823...3ce269dbf70e48cb8153b3563ed840d7/)\n   [Finished :arrow_down:0.18% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4ab73096b76c40ba8a23b2ca0ddd0cbe...ec58c47e43634e3ead1c2f3c3f3b367a/)\n   Buildkite builds:\n   [Finished] [`d171b6c3` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1273)\n   [Finished] [`d171b6c3` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1285)\n   [Finished] [`d171b6c3` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1268)\n   [Finished] [`d171b6c3` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1287)\n   [Finished] [`b1d36c02` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1272)\n   [Failed] [`b1d36c02` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1284)\n   [Finished] [`b1d36c02` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1267)\n   [Finished] [`b1d36c02` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1286)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-08-08T23:22:44.619+0000",
                    "updated": "2022-08-08T23:22:44.619+0000",
                    "started": "2022-08-08T23:22:44.619+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799125",
                    "issueId": "13474575"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@32ebdb80[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e98e90b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2530afbd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@cc9daa1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4701c26d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54aff5c4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74c2e5ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@361c3540[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fc78b44[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@546d40ad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37611836[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@60008daf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 08 17:20:45 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-08T17:20:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17276/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-01T20:03:37.000+0000",
        "updated": "2022-08-08T23:22:44.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go][Integration] Implement IPC handling for Union Arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474575/comment/17576913",
                    "id": "17576913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13806\n[https://github.com/apache/arrow/pull/13806]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-08T17:20:45.712+0000",
                    "updated": "2022-08-08T17:20:45.712+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z17dio:",
        "customfield_12314139": null
    }
}