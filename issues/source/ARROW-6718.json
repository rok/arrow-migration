{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13259153",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153",
    "key": "ARROW-6718",
    "fields": {
        "parent": {
            "id": "13259152",
            "key": "ARROW-6717",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13259152",
            "fields": {
                "summary": "[Rust] Support stable Rust",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/6",
            "id": "6",
            "description": "The problem isn't valid and it can't be fixed.",
            "name": "Invalid"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12587268",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12587268",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13301444",
                    "key": "ARROW-8610",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13301444",
                    "fields": {
                        "summary": "[Rust] DivideByZero when running arrow crate when simd feature is disabled",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6718/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/427099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037\n\n\n   This removes the dependency on packed_simd. I initially thought that boolean kernels were slower than with explicit SIMD, but this was a false alarm as the benchmarks weren't comparing SIMD vs non-SIMD.\r\n   \r\n   While doing this, I noticed that the `divide` kernel appears to be unsound, as it checks if a null is 0 (which can be true when the default data behind the bitmask is 0).\r\n   \r\n   Below is the performance comparison:\r\n   \r\n   <details>\r\n   <summary>From 0.15.0 to 0.16.0</summary>\r\n   \r\n   ```rust\r\n        Running target/release/deps/arithmetic_kernels-ba6ab3db9f184b40\r\n   add 512                 time:   [15.565 us 15.623 us 15.694 us]\r\n                           change: [-66.359% -66.104% -65.861%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   add 512 simd            time:   [14.939 us 16.768 us 18.744 us]\r\n                           change: [+1.4006% +6.0795% +11.131%] (p = 0.02 < 0.05)\r\n                           Performance has regressed.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     1 (1.00%) high mild\r\n     8 (8.00%) high severe\r\n   \r\n   subtract 512            time:   [15.659 us 15.727 us 15.799 us]\r\n                           change: [-65.994% -65.847% -65.690%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   \r\n   subtract 512 simd       time:   [14.003 us 14.119 us 14.284 us]\r\n                           change: [-4.9276% -3.2446% -1.6479%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   multiply 512            time:   [15.774 us 15.824 us 15.875 us]\r\n                           change: [-65.694% -65.526% -65.352%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   multiply 512 simd       time:   [14.299 us 14.458 us 14.681 us]\r\n                           change: [-0.9771% -0.0444% +0.9882%] (p = 0.93 > 0.05)\r\n                           No change in performance detected.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   divide 512              time:   [16.690 us 16.731 us 16.774 us]\r\n                           change: [-65.394% -65.012% -64.701%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   divide 512 simd         time:   [16.098 us 16.147 us 16.202 us]\r\n                           change: [-3.6005% -2.6939% -1.9439%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   sum 512 no simd         time:   [7.1888 us 7.2836 us 7.4349 us]\r\n                           change: [-1.2993% -0.2501% +1.2521%] (p = 0.73 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   limit 512, 256 no simd  time:   [6.8801 us 6.9257 us 6.9792 us]\r\n                           change: [-3.8909% -2.7450% -1.6742%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     2 (2.00%) high mild\r\n     7 (7.00%) high severe\r\n   \r\n   limit 512, 512 no simd  time:   [6.8552 us 6.9007 us 6.9552 us]\r\n                           change: [-36.783% -31.294% -25.031%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/array_from_vec-9acb1269f64e7733\r\n   array_from_vec 128      time:   [418.62 ns 423.66 ns 430.30 ns]\r\n                           change: [-2.2547% -0.6846% +0.9641%] (p = 0.48 > 0.05)\r\n                           No change in performance detected.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     3 (3.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   array_from_vec 256      time:   [659.91 ns 661.68 ns 663.62 ns]\r\n                           change: [-2.1474% -1.6329% -1.1820%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   array_from_vec 512      time:   [1.1200 us 1.1244 us 1.1304 us]\r\n                           change: [-2.9911% -2.3466% -1.7654%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running target/release/deps/boolean_kernels-25e7d12fe4fd7f63\r\n   and                     time:   [51.779 us 51.928 us 52.109 us]\r\n                           change: [-0.4891% -0.0148% +0.4579%] (p = 0.95 > 0.05)\r\n                           No change in performance detected.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   and simd                time:   [10.417 us 10.561 us 10.831 us]\r\n                           change: [-5.4340% -4.3339% -2.6810%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   or                      time:   [52.372 us 52.663 us 52.978 us]\r\n                           change: [-1.0637% -0.3796% +0.3087%] (p = 0.30 > 0.05)\r\n                           No change in performance detected.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     6 (6.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   or simd                 time:   [10.330 us 10.366 us 10.404 us]\r\n                           change: [-9.4316% -7.8623% -6.4004%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   not                     time:   [28.368 us 28.506 us 28.684 us]\r\n                           change: [-1.4424% -0.5625% +0.4723%] (p = 0.25 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   not simd                time:   [5.3160 us 5.3966 us 5.5020 us]\r\n                           change: [-3.9861% -3.2280% -2.1942%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n        Running target/release/deps/builder-3c9f08ea07165746\r\n   bench_primitive         time:   [3.8598 ms 3.8751 ms 3.8926 ms]\r\n                           thrpt:  [1.0035 GiB/s 1.0080 GiB/s 1.0120 GiB/s]\r\n                    change:\r\n                           time:   [-5.4645% -3.0955% -1.0229%] (p = 0.00 < 0.05)\r\n                           thrpt:  [+1.0334% +3.1944% +5.7803%]\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   bench_bool              time:   [2.5218 ms 2.5568 ms 2.6091 ms]\r\n                           thrpt:  [191.64 MiB/s 195.55 MiB/s 198.27 MiB/s]\r\n                    change:\r\n                           time:   [-4.0174% -3.2203% -2.2971%] (p = 0.00 < 0.05)\r\n                           thrpt:  [+2.3511% +3.3275% +4.1855%]\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/cast_kernels-28d78edc8dd97880\r\n   cast int32 to int32 512 time:   [382.90 ns 385.84 ns 389.83 ns]\r\n                           change: [+12.520% +19.250% +27.267%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   \r\n   cast int32 to uint32 512\r\n                           time:   [14.323 us 14.362 us 14.403 us]\r\n                           change: [-2.6982% -2.1982% -1.7082%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast int32 to float32 512\r\n                           time:   [14.892 us 15.000 us 15.112 us]\r\n                           change: [-0.1973% +0.3037% +0.8193%] (p = 0.26 > 0.05)\r\n                           No change in performance detected.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast int32 to float64 512\r\n                           time:   [14.827 us 14.904 us 14.993 us]\r\n                           change: [-3.4069% -2.2322% -1.1900%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast int32 to int64 512 time:   [14.756 us 14.803 us 14.852 us]\r\n                           change: [-1.8245% -1.2044% -0.5979%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   cast float32 to int32 512\r\n                           time:   [15.831 us 15.953 us 16.136 us]\r\n                           change: [+1.2994% +2.0176% +2.9286%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high severe\r\n   \r\n   cast float64 to float32 512\r\n                           time:   [15.355 us 15.443 us 15.534 us]\r\n                           change: [-0.6370% +0.0148% +0.7769%] (p = 0.97 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast float64 to uint64 512\r\n                           time:   [15.283 us 15.339 us 15.402 us]\r\n                           change: [-6.0895% -4.3975% -2.8328%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast int64 to int32 512 time:   [14.008 us 14.053 us 14.102 us]\r\n                           change: [-8.6791% -7.2588% -5.9678%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast date64 to date32 512\r\n                           time:   [16.473 us 16.673 us 16.943 us]\r\n                           change: [+0.6577% +1.4106% +2.2966%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     2 (2.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   cast date32 to date64 512\r\n                           time:   [16.043 us 16.125 us 16.211 us]\r\n                           change: [-1.9078% -1.0437% -0.0086%] (p = 0.02 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast time32s to time32ms 512\r\n                           time:   [1.2209 us 1.2430 us 1.2806 us]\r\n                           change: [-0.2161% +0.8401% +2.0102%] (p = 0.16 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     2 (2.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   cast time32s to time64us 512\r\n                           time:   [16.159 us 16.238 us 16.344 us]\r\n                           change: [-2.0200% -1.3127% -0.5458%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast time64ns to time32s 512\r\n                           time:   [18.420 us 18.485 us 18.558 us]\r\n                           change: [-3.2611% -2.8053% -2.3354%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   cast timestamp_ns to timestamp_s 512\r\n                           time:   [464.73 ns 465.98 ns 467.25 ns]\r\n                           change: [+2.4127% +3.5905% +4.5861%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast timestamp_ms to timestamp_ns 512\r\n                           time:   [1.8519 us 1.8637 us 1.8805 us]\r\n                           change: [+1.8917% +2.6618% +3.4497%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high severe\r\n   \r\n   cast timestamp_ms to i64 512\r\n                           time:   [620.77 ns 625.18 ns 632.26 ns]\r\n                           change: [+0.3064% +1.3612% +2.6592%] (p = 0.02 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/comparison_kernels-ac9079b90aba41c8\r\n   eq 512                  time:   [15.227 us 15.269 us 15.314 us]\r\n                           change: [-65.188% -65.051% -64.916%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   eq 512 simd             time:   [16.285 us 16.382 us 16.503 us]\r\n                           change: [-4.4614% -1.4725% +2.5033%] (p = 0.49 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   neq 512                 time:   [15.396 us 15.550 us 15.813 us]\r\n                           change: [-67.464% -66.399% -65.402%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   neq 512 simd            time:   [16.248 us 16.348 us 16.477 us]\r\n                           change: [-5.7272% -5.0473% -4.3194%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   lt 512                  time:   [15.544 us 15.617 us 15.705 us]\r\n                           change: [-63.654% -63.364% -63.078%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     3 (3.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   lt 512 simd             time:   [16.309 us 16.502 us 16.796 us]\r\n                           change: [-7.1156% -5.4121% -3.7540%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   lt_eq 512               time:   [16.197 us 16.797 us 17.577 us]\r\n                           change: [-62.842% -60.475% -57.947%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 16 outliers among 100 measurements (16.00%)\r\n     2 (2.00%) high mild\r\n     14 (14.00%) high severe\r\n   \r\n   lt_eq 512 simd          time:   [16.391 us 16.549 us 16.755 us]\r\n                           change: [-4.1794% -2.5540% -0.5409%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     4 (4.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   gt 512                  time:   [15.320 us 15.386 us 15.469 us]\r\n                           change: [-64.783% -64.475% -64.077%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   gt 512 simd             time:   [16.428 us 16.579 us 16.824 us]\r\n                           change: [-5.8809% -4.9818% -4.0636%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   gt_eq 512               time:   [15.373 us 15.423 us 15.476 us]\r\n                           change: [-65.439% -65.034% -64.706%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   gt_eq 512 simd          time:   [16.248 us 16.405 us 16.662 us]\r\n                           change: [-7.7800% -5.5240% -3.7804%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running target/release/deps/csv_writer-b937777743b12b28\r\n   record_batches_to_csv   time:   [183.57 us 193.17 us 204.93 us]\r\n                           change: [-17.694% -4.8343% +8.9742%] (p = 0.51 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/take_kernels-f3cc4f1980a08edc\r\n   take u8 256             time:   [21.429 us 21.479 us 21.532 us]\r\n                           change: [+4.0275% +4.5102% +5.0289%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     4 (4.00%) high mild\r\n   \r\n   take u8 512             time:   [39.899 us 40.042 us 40.204 us]\r\n                           change: [-1.1695% -0.6056% -0.0752%] (p = 0.03 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     5 (5.00%) high mild\r\n   \r\n   take u8 1024            time:   [79.301 us 79.561 us 79.828 us]\r\n                           change: [-1.6327% -1.0495% -0.4431%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   \r\n   take i32 256            time:   [21.631 us 21.722 us 21.818 us]\r\n                           change: [+3.5975% +4.3668% +5.1918%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high severe\r\n   \r\n   take i32 512            time:   [41.232 us 41.427 us 41.642 us]\r\n                           change: [-3.7463% -3.3208% -2.9106%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   take i32 1024           time:   [80.877 us 81.279 us 81.730 us]\r\n                           change: [-5.3008% -4.6572% -3.9401%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     1 (1.00%) low mild\r\n     5 (5.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   take bool 256           time:   [23.209 us 23.288 us 23.377 us]\r\n                           change: [-3.4634% -2.9723% -2.4941%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   take bool 512           time:   [45.849 us 46.050 us 46.268 us]\r\n                           change: [-2.0658% -1.3602% -0.7648%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   take bool 1024          time:   [90.650 us 91.065 us 91.501 us]\r\n                           change: [-1.0199% -0.4763% +0.1308%] (p = 0.09 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     5 (5.00%) high mild\r\n     1 (1.00%) high severe\r\n   ```\r\n   </details>  \r\n   \r\n   0.16.0 included the change that I made to autovectorize some compute kernels. This mainly resulted in non-SIMD kernels having a smaller performance gap (from 50-60% slower to 10-20% slower).\r\n   \r\n   <details>\r\n   <summary>From 0.16.0 to no `packed_simd`</summary>\r\n   \r\n   ```rust\r\n        Running target/release/deps/arithmetic_kernels-d263bafe1ecab93d\r\n   add 512                 time:   [16.502 us 16.676 us 16.925 us]\r\n                           change: [+5.7488% +7.2699% +9.9557%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   add 512 simd            time:   [16.679 us 16.836 us 17.066 us]\r\n                           change: [+4.7016% +10.619% +16.149%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   subtract 512            time:   [16.786 us 17.005 us 17.282 us]\r\n                           change: [+6.8124% +7.9200% +9.2584%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 13 outliers among 100 measurements (13.00%)\r\n     8 (8.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   subtract 512 simd       time:   [16.667 us 16.839 us 17.063 us]\r\n                           change: [+17.579% +19.217% +20.952%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) high mild\r\n     6 (6.00%) high severe\r\n   \r\n   multiply 512            time:   [17.637 us 19.687 us 21.976 us]\r\n                           change: [+7.2304% +12.033% +19.261%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     1 (1.00%) high mild\r\n     9 (9.00%) high severe\r\n   \r\n   multiply 512 simd       time:   [16.551 us 16.631 us 16.720 us]\r\n                           change: [+14.169% +15.372% +16.456%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   divide 512              time:   [17.315 us 17.365 us 17.419 us]\r\n                           change: [+3.4441% +3.9221% +4.4103%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   divide 512 simd         time:   [17.266 us 17.326 us 17.388 us]\r\n                           change: [+6.7777% +7.2835% +7.7956%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     4 (4.00%) high mild\r\n   \r\n   sum 512 no simd         time:   [8.5583 us 8.6700 us 8.8042 us]\r\n                           change: [+17.027% +18.834% +20.593%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   limit 512, 256 no simd  time:   [7.3637 us 7.4095 us 7.4616 us]\r\n                           change: [+5.2888% +6.4103% +7.5328%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high severe\r\n   \r\n   limit 512, 512 no simd  time:   [7.3472 us 7.3736 us 7.4017 us]\r\n                           change: [+5.8054% +6.9044% +7.9027%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running target/release/deps/array_from_vec-6e44aa2d195a3b96\r\n   array_from_vec 128      time:   [431.24 ns 433.22 ns 435.41 ns]\r\n                           change: [-0.6088% +1.3213% +2.9253%] (p = 0.15 > 0.05)\r\n                           No change in performance detected.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   array_from_vec 256      time:   [681.05 ns 686.51 ns 694.58 ns]\r\n                           change: [+2.8104% +3.3521% +3.9589%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   array_from_vec 512      time:   [1.1477 us 1.1523 us 1.1576 us]\r\n                           change: [+1.8839% +2.3623% +2.8052%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n        Running target/release/deps/boolean_kernels-2fceb4e9cf7f69d5\r\n   and                     time:   [49.531 us 49.661 us 49.796 us]\r\n                           change: [-5.3433% -4.8688% -4.3550%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   and simd                time:   [9.2264 us 9.4280 us 9.7238 us]\r\n                           change: [-12.786% -10.898% -8.7337%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     4 (4.00%) high mild\r\n     6 (6.00%) high severe\r\n   \r\n   or                      time:   [49.827 us 50.029 us 50.253 us]\r\n                           change: [-5.2611% -4.5904% -3.9306%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   or simd                 time:   [9.1050 us 9.1360 us 9.1669 us]\r\n                           change: [-13.413% -12.471% -11.459%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     2 (2.00%) low mild\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   not                     time:   [26.908 us 27.048 us 27.226 us]\r\n                           change: [-5.7470% -4.5050% -3.0267%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   not simd                time:   [4.9087 us 4.9665 us 5.0441 us]\r\n                           change: [-9.5757% -8.4957% -7.3691%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     2 (2.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n        Running target/release/deps/builder-47e9dfab54e83426\r\n   Benchmarking bench_primitive: Warming up for 3.0000 s\r\n   Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 20.7s or reduce sample count to 30.\r\n   bench_primitive         time:   [4.0583 ms 4.0759 ms 4.0959 ms]\r\n                           thrpt:  [976.58 MiB/s 981.38 MiB/s 985.64 MiB/s]\r\n                    change:\r\n                           time:   [+3.6774% +4.9561% +5.9081%] (p = 0.00 < 0.05)\r\n                           thrpt:  [-5.5785% -4.7220% -3.5469%]\r\n                           Performance has regressed.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     8 (8.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   Benchmarking bench_bool: Warming up for 3.0000 s\r\n   Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 13.3s or reduce sample count to 40.\r\n   bench_bool              time:   [2.6125 ms 2.6395 ms 2.6794 ms]\r\n                           thrpt:  [186.61 MiB/s 189.43 MiB/s 191.39 MiB/s]\r\n                    change:\r\n                           time:   [+2.4849% +3.4680% +4.3829%] (p = 0.00 < 0.05)\r\n                           thrpt:  [-4.1989% -3.3517% -2.4246%]\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n        Running target/release/deps/cast_kernels-c9770d72fe9b204b\r\n   cast int32 to int32 512 time:   [360.61 ns 363.39 ns 367.77 ns]\r\n                           change: [-25.632% -21.210% -16.494%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high severe\r\n   \r\n   cast int32 to uint32 512\r\n                           time:   [14.567 us 14.603 us 14.645 us]\r\n                           change: [+0.9026% +1.3147% +1.7565%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     4 (4.00%) high mild\r\n   \r\n   cast int32 to float32 512\r\n                           time:   [14.972 us 15.117 us 15.275 us]\r\n                           change: [+0.4208% +1.2079% +2.0879%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     5 (5.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast int32 to float64 512\r\n                           time:   [14.929 us 14.996 us 15.077 us]\r\n                           change: [+0.4568% +0.9965% +1.5083%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast int32 to int64 512 time:   [14.880 us 14.920 us 14.961 us]\r\n                           change: [-0.0546% +0.3857% +0.8089%] (p = 0.08 > 0.05)\r\n                           No change in performance detected.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   cast float32 to int32 512\r\n                           time:   [16.245 us 16.334 us 16.439 us]\r\n                           change: [+1.8067% +2.7560% +3.6900%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     4 (4.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   cast float64 to float32 512\r\n                           time:   [15.802 us 15.852 us 15.905 us]\r\n                           change: [+1.9591% +2.7809% +3.4604%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast float64 to uint64 512\r\n                           time:   [16.293 us 16.333 us 16.374 us]\r\n                           change: [+6.0229% +6.4724% +6.9067%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   \r\n   cast int64 to int32 512 time:   [14.526 us 14.591 us 14.668 us]\r\n                           change: [+4.2376% +4.7904% +5.2952%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   cast date64 to date32 512\r\n                           time:   [16.931 us 17.066 us 17.226 us]\r\n                           change: [+1.0479% +2.0576% +2.9920%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     4 (4.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   cast date32 to date64 512\r\n                           time:   [16.583 us 16.648 us 16.713 us]\r\n                           change: [+2.7951% +3.6554% +4.3566%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   cast time32s to time32ms 512\r\n                           time:   [2.1082 us 2.1162 us 2.1253 us]\r\n                           change: [+69.447% +71.604% +73.385%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast time32s to time64us 512\r\n                           time:   [17.054 us 17.121 us 17.197 us]\r\n                           change: [+5.1406% +5.8858% +6.5773%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast time64ns to time32s 512\r\n                           time:   [19.334 us 19.544 us 19.791 us]\r\n                           change: [+5.1059% +6.0233% +6.9969%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     4 (4.00%) high mild\r\n     6 (6.00%) high severe\r\n   \r\n   cast timestamp_ns to timestamp_s 512\r\n                           time:   [555.04 ns 560.31 ns 567.19 ns]\r\n                           change: [+35.093% +43.293% +50.432%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   \r\n   cast timestamp_ms to timestamp_ns 512\r\n                           time:   [2.4111 us 2.4192 us 2.4283 us]\r\n                           change: [+29.614% +30.468% +31.257%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast timestamp_ms to i64 512\r\n                           time:   [692.68 ns 695.43 ns 698.67 ns]\r\n                           change: [+10.064% +11.531% +12.672%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     4 (4.00%) high mild\r\n   \r\n        Running target/release/deps/comparison_kernels-0133fee8f9747e38\r\n   eq 512                  time:   [17.686 us 17.944 us 18.310 us]\r\n                           change: [+14.993% +15.993% +17.578%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     2 (2.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   eq 512 simd             time:   [17.859 us 17.937 us 18.016 us]\r\n                           change: [+2.0950% +6.1522% +9.2180%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   neq 512                 time:   [17.483 us 17.547 us 17.625 us]\r\n                           change: [+12.430% +13.250% +13.942%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     5 (5.00%) high mild\r\n   \r\n   neq 512 simd            time:   [17.413 us 17.522 us 17.678 us]\r\n                           change: [+6.9202% +8.2899% +10.309%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   lt 512                  time:   [17.710 us 17.893 us 18.162 us]\r\n                           change: [+13.270% +14.421% +15.629%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   lt 512 simd             time:   [17.684 us 17.790 us 17.921 us]\r\n                           change: [+6.6510% +8.3058% +9.8628%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     3 (3.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   lt_eq 512               time:   [17.597 us 17.660 us 17.728 us]\r\n                           change: [-7.2662% -0.7635% +5.7716%] (p = 0.83 > 0.05)\r\n                           No change in performance detected.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   lt_eq 512 simd          time:   [17.625 us 17.713 us 17.819 us]\r\n                           change: [+4.9823% +7.0228% +8.8962%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   gt 512                  time:   [17.603 us 17.890 us 18.252 us]\r\n                           change: [+12.682% +14.159% +15.481%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   gt 512 simd             time:   [17.557 us 17.724 us 17.914 us]\r\n                           change: [+5.7046% +6.8432% +8.2057%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     2 (2.00%) high mild\r\n     6 (6.00%) high severe\r\n   \r\n   gt_eq 512               time:   [17.544 us 17.610 us 17.684 us]\r\n                           change: [+14.041% +16.179% +19.229%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     4 (4.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   gt_eq 512 simd          time:   [17.749 us 18.011 us 18.395 us]\r\n                           change: [+8.8024% +10.461% +12.459%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/csv_writer-9387f0497783e820\r\n   record_batches_to_csv   time:   [179.16 us 189.32 us 202.58 us]\r\n                           change: [-11.723% -3.6958% +5.6507%] (p = 0.42 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n        Running target/release/deps/take_kernels-0b0e071e2159c546\r\n   take u8 256             time:   [21.422 us 21.507 us 21.598 us]\r\n                           change: [-0.4883% -0.0299% +0.4050%] (p = 0.88 > 0.05)\r\n                           No change in performance detected.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     3 (3.00%) high mild\r\n   \r\n   take u8 512             time:   [41.737 us 41.850 us 41.971 us]\r\n                           change: [+3.9654% +4.4028% +4.8348%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   take u8 1024            time:   [83.299 us 84.170 us 85.421 us]\r\n                           change: [+5.2941% +6.1255% +7.3670%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   take i32 256            time:   [21.295 us 21.428 us 21.594 us]\r\n                           change: [-3.7994% -2.8372% -1.8433%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   take i32 512            time:   [41.618 us 41.774 us 41.956 us]\r\n                           change: [+0.1984% +0.7887% +1.4393%] (p = 0.01 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   take i32 1024           time:   [83.318 us 85.386 us 87.753 us]\r\n                           change: [+2.6187% +4.5585% +6.8482%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 13 outliers among 100 measurements (13.00%)\r\n     1 (1.00%) high mild\r\n     12 (12.00%) high severe\r\n   \r\n   take bool 256           time:   [23.326 us 23.391 us 23.460 us]\r\n                           change: [-0.1620% +0.3110% +0.7507%] (p = 0.19 > 0.05)\r\n                           No change in performance detected.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) low severe\r\n   \r\n   take bool 512           time:   [47.138 us 47.325 us 47.518 us]\r\n                           change: [+3.1552% +3.8603% +4.7518%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high severe\r\n   \r\n   take bool 1024          time:   [91.152 us 91.459 us 91.783 us]\r\n                           change: [-0.0296% +0.5257% +1.0275%] (p = 0.05 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   ```\r\n   </details>  \r\n   \r\n   * Arithmetic kernels are slower by up to 20%\r\n   * Boolean kernels are faster by 5-10%\r\n   * Comparison kernels are slower by up to 8% (ignore the non-simd ones)\r\n   * Cast kernels regress by varying degrees, with a few functions being around 40% slower. When I wrote the cast kernels, I had to pick the faster options when casting temporal types, so I'd need to revisit these to fix the extreme perf drops.\r\n   \r\n   ## Are the perf drops worth it?\r\n   \r\n   I suppose it'll boil down to whether getting closer to stable Rust (without feature flags) is worth the slight performance drop.\r\n   \r\n   ## Outstanding work to do\r\n   \r\n   - [ ] Remove some benchmarks that become redundant (SIMD vs non-SIMD)\r\n   - [ ] Fix the divide by zero error\r\n   - [ ] Tweak temporal casts to find faster options\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T21:11:54.559+0000",
                    "updated": "2020-04-24T21:11:54.559+0000",
                    "started": "2020-04-24T21:11:54.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427099",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/427101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-619242490\n\n\n   https://issues.apache.org/jira/browse/ARROW-6718\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T21:17:17.991+0000",
                    "updated": "2020-04-24T21:17:17.991+0000",
                    "started": "2020-04-24T21:17:17.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427101",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/427402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-619629922\n\n\n   removing packed_simd would also make this bug obsolete: https://issues.apache.org/jira/browse/ARROW-8598\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T21:46:09.548+0000",
                    "updated": "2020-04-26T21:46:09.548+0000",
                    "started": "2020-04-26T21:46:09.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427402",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/427438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-619678035\n\n\n   Thanks @nevi-me.  I re-created everything locally and I don't see a reason to keep `packed_simd` in light of these results.\r\n   \r\n   Also the future of packed_simd is unclear and it's one less dependency on nightly, now we just need specialization on stable...\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T02:42:43.618+0000",
                    "updated": "2020-04-27T02:42:43.618+0000",
                    "started": "2020-04-27T02:42:43.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427438",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-621983970\n\n\n   Hi,\r\n   I thought I would do some profiling yesterday (before packed_simd is removed) and noticed that a lot of time in `simd_compare_op` is spent in this loop here: https://github.com/apache/arrow/blob/master/rust/arrow/src/compute/kernels/comparison.rs#L236\r\n   ```\r\n           for i in 0..lanes {\r\n               result.append(T::mask_get(&simd_result, i))?;\r\n           }\r\n   ``` \r\n   I attempted to change this to use `mask.bitmask().to_byte_slice()` instead of `mask_get`;\r\n   this was looking promising performance-wise before I attempted to change the arrow code by adding\r\n   ```\r\n   fn bitmask(mask: &Self::SimdMask) -> &[u8] {\r\n                   unsafe { let bits = mask.bitmask(); bits.to_byte_slice() }\r\n               }\r\n   ```\r\n   to the `impl ArrowNumericType` section of the `make_numeric_type` macro and changing `simd_compare_op` to \r\n   ```\r\n   //...\r\n   // notice this has changed to a MutableBuffer\r\n   let mut result = MutableBuffer::new(left.len() * mem::size_of::<bool>());\r\n   for i in (0..left.len()).step_by(lanes) {\r\n           let simd_left = T::load(left.value_slice(i, lanes));\r\n           let simd_right = T::load(right.value_slice(i, lanes));\r\n           let simd_result = op(simd_left, simd_right);\r\n           // this line is added\r\n           result.write(T::bitmask(&simd_result));\r\n           // this is the old code commented out\r\n           // for i in 0..lanes {\r\n           //     result.append(T::mask_get(&simd_result, i))?;\r\n           // }\r\n       }\r\n   //...\r\n   \r\n   ```\r\n   \r\n    but this doesn't compile because of error `returns a value referencing data owned by the current function`;  I have been doing mostly C# recently so was hoping you might be able to help.\r\n   \r\n   @nevi-me  @paddyhoran \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-30T17:08:32.642+0000",
                    "updated": "2020-04-30T17:08:32.642+0000",
                    "started": "2020-04-30T17:08:32.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429140",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov edited a comment on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-621983970\n\n\n   Hi,\r\n   I thought I would do some profiling yesterday (to help make sure packed_simd is not removed prematurely) and noticed that a lot of time in `simd_compare_op` is spent in this loop here: https://github.com/apache/arrow/blob/master/rust/arrow/src/compute/kernels/comparison.rs#L236\r\n   ```\r\n           for i in 0..lanes {\r\n               result.append(T::mask_get(&simd_result, i))?;\r\n           }\r\n   ``` \r\n   I attempted to change this to use `mask.bitmask().to_byte_slice()` instead of `mask_get`;\r\n   this was looking promising performance-wise before I attempted to change the arrow code by adding\r\n   ```\r\n   fn bitmask(mask: &Self::SimdMask) -> &[u8] {\r\n                   unsafe { let bits = mask.bitmask(); bits.to_byte_slice() }\r\n               }\r\n   ```\r\n   to the `impl ArrowNumericType` section of the `make_numeric_type` macro and changing `simd_compare_op` to \r\n   ```\r\n   //...\r\n   // notice this has changed to a MutableBuffer\r\n   let mut result = MutableBuffer::new(left.len() * mem::size_of::<bool>());\r\n   for i in (0..left.len()).step_by(lanes) {\r\n           let simd_left = T::load(left.value_slice(i, lanes));\r\n           let simd_right = T::load(right.value_slice(i, lanes));\r\n           let simd_result = op(simd_left, simd_right);\r\n           // this line is added\r\n           result.write(T::bitmask(&simd_result));\r\n           // this is the old code commented out\r\n           // for i in 0..lanes {\r\n           //     result.append(T::mask_get(&simd_result, i))?;\r\n           // }\r\n       }\r\n   //...\r\n   \r\n   ```\r\n   \r\n    but this doesn't compile because of error `returns a value referencing data owned by the current function`;  I have been doing mostly C# recently so was hoping you might be able to help.\r\n   \r\n   @nevi-me  @paddyhoran \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-30T17:20:08.078+0000",
                    "updated": "2020-04-30T17:20:08.078+0000",
                    "started": "2020-04-30T17:20:08.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429150",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov edited a comment on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-621983970\n\n\n   Hi,\r\n   I thought I would do some profiling yesterday (to help make sure packed_simd is not removed prematurely) and noticed that a lot of time in `simd_compare_op` is spent in this loop here: https://github.com/apache/arrow/blob/master/rust/arrow/src/compute/kernels/comparison.rs#L236\r\n   ```\r\n           for i in 0..lanes {\r\n               result.append(T::mask_get(&simd_result, i))?;\r\n           }\r\n   ``` \r\n   I attempted to change this to use `mask.bitmask().to_byte_slice()` instead of `mask_get`;\r\n   this was looking promising performance-wise before I attempted to change the arrow code by adding\r\n   ```\r\n   fn bitmask(mask: &Self::SimdMask) -> &[u8] {\r\n                   unsafe { let bits = mask.bitmask(); bits.to_byte_slice() }\r\n               }\r\n   ```\r\n   to the `impl ArrowNumericType` section of the `make_numeric_type` macro and changing `simd_compare_op` to \r\n   ```\r\n   //...\r\n   // notice this has changed to a MutableBuffer\r\n   let mut result = MutableBuffer::new(left.len() * mem::size_of::<bool>());\r\n   for i in (0..left.len()).step_by(lanes) {\r\n           let simd_left = T::load(left.value_slice(i, lanes));\r\n           let simd_right = T::load(right.value_slice(i, lanes));\r\n           let simd_result = op(simd_left, simd_right);\r\n           // this line is added\r\n           result.write(T::bitmask(&simd_result));\r\n           // this is the old code commented out\r\n           // for i in 0..lanes {\r\n           //     result.append(T::mask_get(&simd_result, i))?;\r\n           // }\r\n       }\r\n   //...\r\n   \r\n   ```\r\n   \r\n    ~~but this doesn't compile because of error `returns a value referencing data owned by the current function`;  I have been doing mostly C# recently so was hoping you might be able to help.~~\r\n   I got it to compile by changing to:\r\n   ```\r\n   fn bitmask<F>(mask: &Self::SimdMask, mut action: F) where F: FnMut(&[u8]) {\r\n                   action(mask.bitmask().to_byte_slice());\r\n               }\r\n   ```\r\n   and\r\n   ```\r\n   for i in (0..left.len()).step_by(lanes) {\r\n           let simd_left = T::load(left.value_slice(i, lanes));\r\n           let simd_right = T::load(right.value_slice(i, lanes));\r\n           let simd_result = op(simd_left, simd_right);\r\n           T::bitmask(&simd_result, |b| { result.write(b); });\r\n           // for i in 0..lanes {\r\n           //     result.append(T::mask_get(&simd_result, i))?;\r\n           // }\r\n       }\r\n   ```\r\n   \r\n   this led to a significant performance improvement:\r\n   ```\r\n   filter with arrow SIMD\r\n                           time:   [2.0026 ms 2.0091 ms 2.0172 ms]\r\n                           change: [-70.479% -68.776% -67.260%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   ```\r\n   \r\n   \r\n   @nevi-me  @paddyhoran any thoughts how to improve this further?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-30T21:11:33.829+0000",
                    "updated": "2020-04-30T21:11:33.829+0000",
                    "started": "2020-04-30T21:11:33.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429259",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622272292\n\n\n   This definitely looks great from # of code deduction :D , but yeah it will be better if we can keep the perf loss minimum. \r\n   \r\n   > Also the future of packed_simd is unclear and it's one less dependency on nightly, now we just need specialization on stable...\r\n   \r\n   I'm not seeing a light from this tunnel yet - maybe we could try to replace it with `[min_specialization](https://github.com/rust-lang/rust/pull/68970)` which seems more promising in terms of stabilization. But I found very little documentation on this so far.\r\n   \r\n   Another way is to rewrite the code (I think it is mostly used in Parquet encoder/decoder and Arrow array builders?). It is tedious work but I think it should be do-able.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-01T06:44:44.861+0000",
                    "updated": "2020-05-01T06:44:44.861+0000",
                    "started": "2020-05-01T06:44:44.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429387",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622889198\n\n\n   Hi @yordan-pavlov, we want to remove packed_simd due to the uncertainty with it being stabilised soon. We so far found that if we optimise some non-SIMD code, we don't lose a lot of performance relative to the explicit SIMD code. \r\n   \r\n   It'd be great if we could see where we could further improve the non-SIMD functions\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-02T08:45:24.129+0000",
                    "updated": "2020-05-02T08:45:24.129+0000",
                    "started": "2020-05-02T08:45:24.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429791",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622928732\n\n\n   hi @nevi-me , I would love to have arrow use stable rust. (but I also want high performance)\r\n   \r\n   I have been working on some benchmarks which compare performance of filtering of in-memory data implemented in different ways, including for-loop, iterator, arrow without SIMD, arrow with SIMD, etc. I have also done pretty much the same benchmarks for .net core and rust.\r\n   \r\n   I hope to find some time to publish those benchmarks in the next few days, but it does look like the rust compiler is very good in auto-vectorization. So far the best performance I have  managed to produce with arrow and SIMD (357.53 us) is only about twice as fast as filtering using an iterator without arrow (654.22 us) but is about four times faster than filtering with arrow and loops (1.2704 ms) and many times faster than filtering with arrow using compute::no_simd_compare_op (8.4308 ms).\r\n   \r\n   Yes, SIMD is a lot of work, but at the moment gives the best performance. I wonder if the SIMD features could be moved to another library separate from the core arrow library. \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-02T09:58:55.996+0000",
                    "updated": "2020-05-02T09:58:55.996+0000",
                    "started": "2020-05-02T09:58:55.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429803",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622931053\n\n\n   That's interesting, and how are other benchmarks affected, or are you only focusing on filter? To the extent that there's overlap with `take()`, it would be interesting to also see how that kernel is affected.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-02T10:19:46.965+0000",
                    "updated": "2020-05-02T10:19:46.965+0000",
                    "started": "2020-05-02T10:19:46.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429804",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622947442\n\n\n   @nevi-me I have only focused on filtering so far; I will probably implement benchmarks for other operations once I have fully explored filtering.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-02T12:39:23.332+0000",
                    "updated": "2020-05-02T12:39:23.332+0000",
                    "started": "2020-05-02T12:39:23.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429821",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-622984619\n\n\n   > Yes, SIMD is a lot of work, but at the moment gives the best performance. I wonder if the SIMD features could be moved to another library separate from the core arrow library.\r\n   \r\n   @yordan-pavlov when you say SIMD you mean the \"simd\" feature (packed_simd), right?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-02T17:07:11.192+0000",
                    "updated": "2020-05-02T17:07:11.192+0000",
                    "started": "2020-05-02T17:07:11.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429850",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-623106920\n\n\n   > @yordan-pavlov when you say SIMD you mean the \"simd\" feature (packed_simd), right?\r\n   @paddyhoran yes that's what I meant, apologies if it was unclear\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-03T13:02:35.595+0000",
                    "updated": "2020-05-03T13:02:35.595+0000",
                    "started": "2020-05-03T13:02:35.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429935",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/429936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov edited a comment on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-623106920\n\n\n   > @yordan-pavlov when you say SIMD you mean the \"simd\" feature (packed_simd), right?\r\n   \r\n   @paddyhoran yes that's what I meant, apologies if it was unclear\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-03T13:02:48.976+0000",
                    "updated": "2020-05-03T13:02:48.976+0000",
                    "started": "2020-05-03T13:02:48.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "429936",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/430426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-623718293\n\n\n   hi @nevi-me ,\r\n   I have just published the filtering benchmark here: \r\n   https://github.com/yordan-pavlov/arrow-benchmark/blob/master/rust/arrow_benchmark/src/main.rs\r\n   \r\n   I hope it will be useful in benchmarking and improving arrow performance.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-04T21:31:36.298+0000",
                    "updated": "2020-05-04T21:31:36.298+0000",
                    "started": "2020-05-04T21:31:36.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "430426",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/430847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov edited a comment on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-623718293\n\n\n   hi @nevi-me ,\r\n   I have just published the filtering benchmark here: \r\n   https://github.com/yordan-pavlov/arrow-benchmark/blob/master/rust/arrow_benchmark/src/main.rs\r\n   \r\n   I hope it will be useful in benchmarking and improving arrow performance.\r\n   In summary, my filtering benchmarks show that from a performance perspective, using arrow only makes sense together with SIMD. And this is only after making a couple of changes to improve performance and also enable comparison of an array with a scalar value. Using arrow without SIMD currently appears to be significantly slower than a much simpler loop or iterator implementation.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-05T18:56:51.065+0000",
                    "updated": "2020-05-05T18:56:51.065+0000",
                    "started": "2020-05-05T18:56:51.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "430847",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/431366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-624828880\n\n\n   So, I'm not sure now about removing SIMD altogether.  It took me some time to add all the SIMD features but I don't pretend to be an expert on it.  I'd hate to remove all the SIMD code only to realize that someone smarter than I could have improved it (like @yordan-pavlov).\r\n   \r\n   I think we shouldn't use it by default because it requires nightly, #7057 changes it to be opt-in.\r\n   \r\n   I would love to remove some of the code if it's not required though.  @yordan-pavlov I think the best way to move this forward is if you can contribute to the benchmarks for the main arrow repo.  Then we can look at removing the SIMD code piece by piece to ensure we don't have performance regressions.\r\n   \r\n   Thoughts?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-06T18:56:24.093+0000",
                    "updated": "2020-05-06T18:56:24.093+0000",
                    "started": "2020-05-06T18:56:24.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "431366",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/431400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov commented on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-624864888\n\n\n   I agree with @paddyhoran - if the goal is just to enable the use of arrow with stable rust, it would be reasonable to just not enable the SIMD feature by default, but still keep it so it is available as a choice for those users who need the best performance possible.\r\n   \r\n   A lot of work has gone into the SIMD feature already and it would be a shame to remove it prematurely, without doing enough benchmarking.\r\n   \r\n   Furthermore, I think Rust could have a great future in the big data space and I think this project could play an important part. But SIMD is important in big data. So we should be looking to have SIMD stabilized (in Rust) rather than remove it. If SIMD is removed from arrow, what killer feature would motivate its stabilization in Rust? \r\n   \r\n   For convenience here are the results from my filtering benchmarks:\r\n   | Benchmark                       | Time      |\r\n   | ------------------------------- | --------- |\r\n   | filter with loop                | 567.78 us |\r\n   | filter with iter                | 671.40 us |\r\n   | filter with arrow loop          | 1.2900 ms |\r\n   | filter with arrow NO SIMD       | 8.5939 ms |\r\n   | filter with arrow SIMD (array)  | 599.05 us |\r\n   | filter with arrow SIMD (scalar) | 381.38 us |\r\n   \r\n   In the table above we can see that SIMD filtering (against scalar values) is 49% faster than a loop, and 76% faster than an iterator implementation. This could mean a difference between waiting 12h or 7h for a job to complete. So I think more benchmarking, profiling and performance improvements have to be done before it can be decided with confidence to remove SIMD (or not).\r\n   \r\n   The source code for the benchmarks used to produce the results about is here:\r\n   https://github.com/yordan-pavlov/arrow-benchmark/blob/master/rust/arrow_benchmark/src/main.rs\r\n   \r\n   I am happy to contribute benchmarks, I just have to figure out how / if they would fit in the main arrow repo.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-06T20:12:25.245+0000",
                    "updated": "2020-05-06T20:12:25.245+0000",
                    "started": "2020-05-06T20:12:25.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "431400",
                    "issueId": "13259153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/worklog/431401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yordan-pavlov edited a comment on pull request #7037:\nURL: https://github.com/apache/arrow/pull/7037#issuecomment-624864888\n\n\n   I agree with @paddyhoran - if the goal is just to enable the use of arrow with stable Rust, it would be reasonable to just not enable the SIMD feature by default, but still keep it so it is available as a choice for those users who need the best performance possible.\r\n   \r\n   A lot of work has gone into the SIMD feature already and it would be a shame to remove it prematurely, without doing enough benchmarking.\r\n   \r\n   Furthermore, I think Rust could have a great future in the big data space and I think this project could play an important part. But SIMD is important in big data. So we should be looking to have SIMD stabilized (in Rust) rather than remove it. If SIMD is removed from arrow, what killer feature would motivate its stabilization in Rust? \r\n   \r\n   For convenience here are the results from my filtering benchmarks:\r\n   | Benchmark                       | Time      |\r\n   | ------------------------------- | --------- |\r\n   | filter with loop                | 567.78 us |\r\n   | filter with iter                | 671.40 us |\r\n   | filter with arrow loop          | 1.2900 ms |\r\n   | filter with arrow NO SIMD       | 8.5939 ms |\r\n   | filter with arrow SIMD (array)  | 599.05 us |\r\n   | filter with arrow SIMD (scalar) | 381.38 us |\r\n   \r\n   In the table above we can see that SIMD filtering (against scalar values) is 49% faster than a loop, and 76% faster than an iterator implementation. This could mean a difference between waiting 12h or 7h for a job to complete. So I think more benchmarking, profiling and performance improvements have to be done before it can be decided with confidence to remove SIMD (or not).\r\n   \r\n   The source code for the benchmarks used to produce the results about is here:\r\n   https://github.com/yordan-pavlov/arrow-benchmark/blob/master/rust/arrow_benchmark/src/main.rs\r\n   \r\n   I am happy to contribute benchmarks, I just have to figure out how / if they would fit in the main arrow repo.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-06T20:12:59.399+0000",
                    "updated": "2020-05-06T20:12:59.399+0000",
                    "started": "2020-05-06T20:12:59.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "431401",
                    "issueId": "13259153"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@15c80190[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3490521e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e7ea4ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@38c817d8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a52c5c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@e4fbb0f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@756f0d91[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@d61b233[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31211a9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@42455872[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fcbd62e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4fbb15ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 26 11:24:26 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-26T11:24:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6718/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2019-09-26T23:37:38.000+0000",
        "updated": "2021-04-26T11:24:29.000+0000",
        "timeoriginalestimate": null,
        "description": "See [https://github.com/rust-lang/rfcs/pull/2366] for more info on stabilization of this crate.\r\n\r\n\u00a0\r\n{code:java}\r\nerror[E0554]: `#![feature]` may not be used on the stable release channel\r\n   --> /home/andy/.cargo/registry/src/github.com-1ecc6299db9ec823/packed_simd-0.3.3/src/lib.rs:202:1\r\n    |\r\n202 | / #![feature(\r\n203 | |     repr_simd,\r\n204 | |     const_fn,\r\n205 | |     platform_intrinsics,\r\n...   |\r\n215 | |     custom_inner_attributes\r\n216 | | )]\r\n    | |__^\r\n {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] packed_simd requires nightly ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/comment/17002089",
                    "id": "17002089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "If everyone's happy with the performance of arithmetic and compute kernels after the improvements to the non-SIMD functions (ARROW-7460), I'd like to propose removing packed_simd [~paddyhoran]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2019-12-23T04:13:36.550+0000",
                    "updated": "2019-12-23T04:13:36.550+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/comment/17002842",
                    "id": "17002842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I would love to get back on stable.\u00a0 I added a feature to disable explicit SIMD to try and make progress toward this goal.\u00a0 Although the main thing we need is specialization on stable.\r\n\r\n\u00a0\r\n\r\nIf we can get the same level of performance then I'm all for removing packed_simd.\u00a0 At the time we adopted it, the author was trying to get it adopted into std.\u00a0 Since then he has stopped driving this forward until other features land.\r\n\r\n\u00a0\r\n\r\nI'll take a look in the next few days to compare performance, etc.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-24T13:47:15.418+0000",
                    "updated": "2019-12-24T13:47:15.418+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/comment/17205093",
                    "id": "17205093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=batmanaod",
                        "name": "batmanaod",
                        "key": "batmanaod",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=batmanaod&avatarId=39871",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=batmanaod&avatarId=39871",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=batmanaod&avatarId=39871",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=batmanaod&avatarId=39871"
                        },
                        "displayName": "Kyle Strand",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "There is now a portable-SIMD Rust language working group: https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html\r\n\r\nTheir goal is to make \"a portable SIMD API available to stable Rust users.\" We should follow their progress and adopt their recommendations.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=batmanaod",
                        "name": "batmanaod",
                        "key": "batmanaod",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=batmanaod&avatarId=39871",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=batmanaod&avatarId=39871",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=batmanaod&avatarId=39871",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=batmanaod&avatarId=39871"
                        },
                        "displayName": "Kyle Strand",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-30T22:58:09.616+0000",
                    "updated": "2020-09-30T22:58:09.616+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259153/comment/17332038",
                    "id": "17332038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Migrated to github: https://github.com/apache/arrow-rs/issues/54",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-26T11:24:26.990+0000",
                    "updated": "2021-04-26T11:24:26.990+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z072e0:",
        "customfield_12314139": null
    }
}