{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13247798",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798",
    "key": "ARROW-6069",
    "fields": {
        "parent": {
            "id": "13205055",
            "key": "ARROW-4059",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13205055",
            "fields": {
                "summary": "[Rust] Parquet/Arrow Integration",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6069/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/287902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997\n \n \n   Converter is used convert record reader's content to arrow primitive array.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-02T12:49:36.807+0000",
                    "updated": "2019-08-02T12:49:36.807+0000",
                    "started": "2019-08-02T12:49:36.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "287902",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/287904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#issuecomment-517688469\n \n \n   @sunchao @nevi-me @andygrove  Please take a look when you get a chance.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-02T12:52:36.309+0000",
                    "updated": "2019-08-02T12:52:36.309+0000",
                    "started": "2019-08-02T12:52:36.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "287904",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/288667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#issuecomment-518068711\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=h1) Report\n   > Merging [#4997](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8558e6cba729e4aff4882e7aa88b5f8a53b63dd0?src=pr&el=desc) will **decrease** coverage by `4.78%`.\n   > The diff coverage is `95.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4997/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4997       +/-   ##\n   ===========================================\n   - Coverage   87.56%   82.78%    -4.79%     \n   ===========================================\n     Files        1003       88      -915     \n     Lines      143269    25518   -117751     \n     Branches     1418        0     -1418     \n   ===========================================\n   - Hits       125458    21124   -104334     \n   + Misses      17449     4394    -13055     \n   + Partials      362        0      -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/parquet/src/util/test\\_common/page\\_util.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy91dGlsL3Rlc3RfY29tbW9uL3BhZ2VfdXRpbC5ycw==) | `85.18% <100%> (+1.18%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/record\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9yZWNvcmRfcmVhZGVyLnJz) | `90.25% <100%> (+0.48%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/converter.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9jb252ZXJ0ZXIucnM=) | `94.2% <94.2%> (\u00f8)` | |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/arrow/array/builder\\_decimal.cc](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX2RlY2ltYWwuY2M=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | ... and [910 more](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=footer). Last update [8558e6c...74c55f5](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-05T03:01:56.899+0000",
                    "updated": "2019-08-05T03:01:56.899+0000",
                    "started": "2019-08-05T03:01:56.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "288667",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310155883\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n \n Review comment:\n   Please consolidate these imports :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-05T16:19:34.804+0000",
                    "updated": "2019-08-05T16:19:34.804+0000",
                    "started": "2019-08-05T16:19:34.803+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289039",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310684431\n \n \n\n ##########\n File path: rust/parquet/src/util/test_common/page_util.rs\n ##########\n @@ -155,3 +157,21 @@ impl DataPageBuilder for DataPageBuilderImpl {\n         }\n     }\n }\n+\n+pub struct InMemoryPageReader {\n \n Review comment:\n   Do we need to document this test page reader?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-05T16:19:34.839+0000",
                    "updated": "2019-08-05T16:19:34.839+0000",
                    "started": "2019-08-05T16:19:34.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289040",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310680847\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,293 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n+/// arrow's native type. In this case, we need to iterate over values in record reader\n+/// and convert parquet value into arrow value one by one.\n \n Review comment:\n   Is the performance different if say you build an `Int32Array`, and then use the `cast` kernels to convert to an appropriate type? If a cast works out faster, then we could drop the `Converter` and remain with `DirectConverter`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-05T16:19:34.880+0000",
                    "updated": "2019-08-05T16:19:34.880+0000",
                    "started": "2019-08-05T16:19:34.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289041",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310836176\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,293 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n+/// arrow's native type. In this case, we need to iterate over values in record reader\n+/// and convert parquet value into arrow value one by one.\n \n Review comment:\n   Good point! Will try to use cast kernel.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T00:02:00.359+0000",
                    "updated": "2019-08-06T00:02:00.359+0000",
                    "started": "2019-08-06T00:02:00.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289271",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310943318\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n \n Review comment:\n   Thanks for pointing this out. But I used `cargo fmt` and it doesn't change anything. So I'm confusing how to consolidate these? Or should we just leave these formatting things to `cargo fmt`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T08:35:34.713+0000",
                    "updated": "2019-08-06T08:35:34.713+0000",
                    "started": "2019-08-06T08:35:34.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289529",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310943406\n \n \n\n ##########\n File path: rust/parquet/src/util/test_common/page_util.rs\n ##########\n @@ -155,3 +157,21 @@ impl DataPageBuilder for DataPageBuilderImpl {\n         }\n     }\n }\n+\n+pub struct InMemoryPageReader {\n \n Review comment:\n   Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T08:35:46.571+0000",
                    "updated": "2019-08-06T08:35:46.571+0000",
                    "started": "2019-08-06T08:35:46.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289530",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#issuecomment-518068711\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=h1) Report\n   > Merging [#4997](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8558e6cba729e4aff4882e7aa88b5f8a53b63dd0?src=pr&el=desc) will **decrease** coverage by `4.79%`.\n   > The diff coverage is `97.05%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4997/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4997       +/-   ##\n   ===========================================\n   - Coverage   87.56%   82.77%     -4.8%     \n   ===========================================\n     Files        1003       88      -915     \n     Lines      143269    25499   -117770     \n     Branches     1418        0     -1418     \n   ===========================================\n   - Hits       125458    21106   -104352     \n   + Misses      17449     4393    -13056     \n   + Partials      362        0      -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/parquet/src/util/test\\_common/page\\_util.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy91dGlsL3Rlc3RfY29tbW9uL3BhZ2VfdXRpbC5ycw==) | `85.18% <100%> (+1.18%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/record\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9yZWNvcmRfcmVhZGVyLnJz) | `90.25% <100%> (+0.48%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/converter.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9jb252ZXJ0ZXIucnM=) | `95.91% <95.91%> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `75.91% <0%> (-0.24%)` | :arrow_down: |\n   | [rust/datafusion/src/execution/limit.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vbGltaXQucnM=) | `78.26% <0%> (\u00f8)` | :arrow_up: |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `64.81% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | ... and [913 more](https://codecov.io/gh/apache/arrow/pull/4997/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=footer). Last update [8558e6c...fb32fe8](https://codecov.io/gh/apache/arrow/pull/4997?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T12:19:03.940+0000",
                    "updated": "2019-08-06T12:19:03.940+0000",
                    "started": "2019-08-06T12:19:03.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289626",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310725503\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,293 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n+/// arrow's native type. In this case, we need to iterate over values in record reader\n+/// and convert parquet value into arrow value one by one.\n+pub struct BuilderConverter<ParquetType, ArrowType> {\n+    _parquet_marker: PhantomData<ParquetType>,\n+    _arrow_marker: PhantomData<ArrowType>,\n+}\n+\n+impl<ParquetType, ArrowType> Converter<ParquetType>\n+    for BuilderConverter<ParquetType, ArrowType>\n+where\n+    ParquetType: DataType,\n+    ArrowType: ArrowPrimitiveType,\n+    <ParquetType as DataType>::T: ConvertAs<<ArrowType as ArrowPrimitiveType>::Native>,\n+{\n+    fn convert(record_reader: &mut RecordReader<ParquetType>) -> Result<Arc<Array>> {\n+        let num_values = record_reader.num_values();\n+        let mut builder = BufferBuilder::<ArrowType>::new(num_values);\n+\n+        let records_data = record_reader.consume_record_data();\n+        let data_slice = unsafe {\n+            from_raw_parts(\n+                transmute::<*const u8, *mut ParquetType::T>(records_data.raw_data()),\n+                num_values,\n+            )\n+        };\n+        for d in data_slice {\n+            builder.append(d.clone().convert_as())?;\n+        }\n+        std::mem::drop(records_data);\n \n Review comment:\n   Hmm. Will this get dropped automatically when it goes out of scope?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:00.054+0000",
                    "updated": "2019-08-06T15:34:00.054+0000",
                    "started": "2019-08-06T15:34:00.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289787",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310233402\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n \n Review comment:\n   nit: same as above, `This method` is unnecessary here. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:02.619+0000",
                    "updated": "2019-08-06T15:34:02.619+0000",
                    "started": "2019-08-06T15:34:02.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289788",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310233678\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n \n Review comment:\n   nit: better to use capital letters when appropriate, e.g., `Parquet`, `Arrow`, `Rust`, same for other places.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:04.440+0000",
                    "updated": "2019-08-06T15:34:04.440+0000",
                    "started": "2019-08-06T15:34:04.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289789",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310234073\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n \n Review comment:\n   Does this need to be public?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:04.540+0000",
                    "updated": "2019-08-06T15:34:04.540+0000",
                    "started": "2019-08-06T15:34:04.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289790",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r311131410\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n \n Review comment:\n   You can replace these imports with star import to save some space, although I'm not sure what's the recommended style for this (in Java usually it's not recommended to have star imports).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:04.547+0000",
                    "updated": "2019-08-06T15:34:04.547+0000",
                    "started": "2019-08-06T15:34:04.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289791",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310233402\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n \n Review comment:\n   nit: same as above, `This method` is unnecessary here. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:13.823+0000",
                    "updated": "2019-08-06T15:34:13.823+0000",
                    "started": "2019-08-06T15:34:13.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289792",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310233678\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n \n Review comment:\n   nit: better to use capital letters when appropriate, e.g., `Parquet`, `Arrow`, `Rust`, same for other places.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:18.487+0000",
                    "updated": "2019-08-06T15:34:18.487+0000",
                    "started": "2019-08-06T15:34:18.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289793",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310234073\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n \n Review comment:\n   Does this need to be public?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:22.293+0000",
                    "updated": "2019-08-06T15:34:22.293+0000",
                    "started": "2019-08-06T15:34:22.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289794",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r310725503\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,293 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n+use arrow::datatypes::Float32Type;\n+use arrow::datatypes::Float64Type;\n+use arrow::datatypes::Int16Type;\n+use arrow::datatypes::Int32Type;\n+use arrow::datatypes::Int64Type;\n+use arrow::datatypes::Int8Type;\n+use arrow::datatypes::UInt16Type;\n+use arrow::datatypes::UInt32Type;\n+use arrow::datatypes::UInt64Type;\n+use arrow::datatypes::UInt8Type;\n+\n+/// A converter is used to consume record reader's content and convert it to arrow\n+/// primitive array.\n+pub trait Converter<T: DataType> {\n+    /// This method converts record reader's buffered content into arrow array.\n+    fn convert(record_reader: &mut RecordReader<T>) -> Result<Arc<Array>>;\n+}\n+\n+/// Trait for value to value conversion. This is similar to `std::convert::Into` in std\n+/// lib. Due to the limitation of rust compiler, we can't implement trait\n+/// `std::convert::Into` for primitives types.\n+pub trait ConvertAs<T> {\n+    /// This method does value to value conversion.\n+    fn convert_as(self) -> T;\n+}\n+\n+impl<T> ConvertAs<T> for T {\n+    fn convert_as(self) -> T {\n+        self\n+    }\n+}\n+\n+macro_rules! convert_as {\n+    ($src_type: ty, $dest_type: ty) => {\n+        impl ConvertAs<$dest_type> for $src_type {\n+            fn convert_as(self) -> $dest_type {\n+                self as $dest_type\n+            }\n+        }\n+    };\n+}\n+\n+convert_as!(i32, i8);\n+convert_as!(i32, i16);\n+convert_as!(i32, u8);\n+convert_as!(i32, u16);\n+convert_as!(i32, u32);\n+\n+/// Builder converter is used when parquet's data type is different from\n+/// arrow's native type. In this case, we need to iterate over values in record reader\n+/// and convert parquet value into arrow value one by one.\n+pub struct BuilderConverter<ParquetType, ArrowType> {\n+    _parquet_marker: PhantomData<ParquetType>,\n+    _arrow_marker: PhantomData<ArrowType>,\n+}\n+\n+impl<ParquetType, ArrowType> Converter<ParquetType>\n+    for BuilderConverter<ParquetType, ArrowType>\n+where\n+    ParquetType: DataType,\n+    ArrowType: ArrowPrimitiveType,\n+    <ParquetType as DataType>::T: ConvertAs<<ArrowType as ArrowPrimitiveType>::Native>,\n+{\n+    fn convert(record_reader: &mut RecordReader<ParquetType>) -> Result<Arc<Array>> {\n+        let num_values = record_reader.num_values();\n+        let mut builder = BufferBuilder::<ArrowType>::new(num_values);\n+\n+        let records_data = record_reader.consume_record_data();\n+        let data_slice = unsafe {\n+            from_raw_parts(\n+                transmute::<*const u8, *mut ParquetType::T>(records_data.raw_data()),\n+                num_values,\n+            )\n+        };\n+        for d in data_slice {\n+            builder.append(d.clone().convert_as())?;\n+        }\n+        std::mem::drop(records_data);\n \n Review comment:\n   Hmm. Will this get dropped automatically when it goes out of scope?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T15:34:32.630+0000",
                    "updated": "2019-08-06T15:34:32.630+0000",
                    "started": "2019-08-06T15:34:32.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289795",
                    "issueId": "13247798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/worklog/289834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4997: ARROW-6069: [Rust] [Parquet] Add converter.\nURL: https://github.com/apache/arrow/pull/4997#discussion_r311159997\n \n \n\n ##########\n File path: rust/parquet/src/arrow/converter.rs\n ##########\n @@ -0,0 +1,276 @@\n+use crate::arrow::record_reader::RecordReader;\n+use crate::data_type::DataType;\n+use arrow::array::Array;\n+use std::convert::From;\n+use std::slice::from_raw_parts;\n+use std::sync::Arc;\n+\n+use crate::errors::Result;\n+use arrow::array::BufferBuilder;\n+use arrow::array::BufferBuilderTrait;\n+use arrow::datatypes::ArrowPrimitiveType;\n+\n+use arrow::array::ArrayDataBuilder;\n+use arrow::array::PrimitiveArray;\n+use std::marker::PhantomData;\n+use std::mem::transmute;\n+\n+use crate::data_type::BoolType;\n+use crate::data_type::DoubleType as ParquetDoubleType;\n+use crate::data_type::FloatType as ParquetFloatType;\n+use crate::data_type::Int32Type as ParquetInt32Type;\n+use crate::data_type::Int64Type as ParquetInt64Type;\n+use arrow::datatypes::BooleanType;\n \n Review comment:\n   cargo fmt won't have an issue, but it's better to keep imports nested as it reduces LOC, and would consistent with the rest of the code base\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-06T16:32:56.614+0000",
                    "updated": "2019-08-06T16:32:56.614+0000",
                    "started": "2019-08-06T16:32:56.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "289834",
                    "issueId": "13247798"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5246d95a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d1470fa[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fb08840[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@617dbcec[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a5e7f74[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@12e5101[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a673bec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@36717a90[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fbd16f5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ce8f25a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f531470[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@12cb4ef0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 09 09:07:35 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-09T09:07:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6069/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-30T08:25:44.000+0000",
        "updated": "2019-09-05T23:28:47.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [Parquet] Implement Converter to convert record reader to arrow primitive array.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247798/comment/16903729",
                    "id": "16903729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 4997\n[https://github.com/apache/arrow/pull/4997]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2019-08-09T09:07:35.789+0000",
                    "updated": "2019-08-09T09:07:35.789+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z055d4:",
        "customfield_12314139": null
    }
}