{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377084",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084",
    "key": "ARROW-12675",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12675/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/596511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world opened a new pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321\n\n\n   For serial CSV readers track the absolute row number and report it in errors encountered during parsing or converting.\r\n   \r\n   I did try to get row numbers for the parallel reader but the only way I thought that could work would be to add delimiter counting to the Chunker but that seemed to add more complexity than I wanted to.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-14T05:38:46.029+0000",
                    "updated": "2021-05-14T05:38:46.029+0000",
                    "started": "2021-05-14T05:38:46.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596511",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/596512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-841020552\n\n\n   https://issues.apache.org/jira/browse/ARROW-12675\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-14T05:38:59.815+0000",
                    "updated": "2021-05-14T05:38:59.815+0000",
                    "started": "2021-05-14T05:38:59.814+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596512",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/599294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r635318248\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -974,6 +976,36 @@ def read_csv(self, *args, validate_full=True, **kwargs):\n         table.validate(full=validate_full)\n         return table\n \n+    def test_row_numbers_in_errors(self):\n+        \"\"\" Row numbers are only correctly counted in serial reads \"\"\"\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n\nReview comment:\n       Is there a particular reason to only test without the header row? It'd be good to check that that gets handled properly too.\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -1004,7 +1016,7 @@ Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n     const ParseOptions& parse_options, const ConvertOptions& convert_options) {\n   std::shared_ptr<BaseStreamingReader> reader;\n   reader = std::make_shared<SerialStreamingReader>(\n-      io_context, cpu_executor, input, read_options, parse_options, convert_options);\n+      io_context, cpu_executor, input, read_options, parse_options, convert_options, true);\n\nReview comment:\n       ```suggestion\r\n         io_context, cpu_executor, input, read_options, parse_options, convert_options, /*count_rows=*/true);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/csv/parser_test.cc\n##########\n@@ -623,5 +643,48 @@ TEST(BlockParser, QuotedEscape) {\n   }\n }\n \n+TEST(BlockParser, RowNumberAppendedToError) {\n+  auto options = ParseOptions::Defaults();\n+  auto csv = \"a,b,c\\nd,e,f\\ng,h,i\\n\";\n+  {\n+    BlockParser parser(options, -1, 0);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 2 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_NE(std::string::npos, status.message().find(\"Row 1: Bad value\"))\n+        << status.message();\n\nReview comment:\n       You can do something like `EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid, ::testing::HasSubstr(\"Row 1: Bad value\", status)`\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -888,9 +899,10 @@ class AsyncThreadedTableReader\n                            std::shared_ptr<io::InputStream> input,\n                            const ReadOptions& read_options,\n                            const ParseOptions& parse_options,\n-                           const ConvertOptions& convert_options, Executor* cpu_executor)\n+                           const ConvertOptions& convert_options,\n+                           Executor* cpu_executor)\n       : BaseTableReader(std::move(io_context), input, read_options, parse_options,\n-                        convert_options),\n+                        convert_options, false),\n\nReview comment:\n       ```suggestion\r\n                           convert_options, /*count_rows=*/false),\r\n   ```\n\n##########\nFile path: cpp/src/arrow/csv/parser_test.cc\n##########\n@@ -623,5 +643,48 @@ TEST(BlockParser, QuotedEscape) {\n   }\n }\n \n+TEST(BlockParser, RowNumberAppendedToError) {\n+  auto options = ParseOptions::Defaults();\n+  auto csv = \"a,b,c\\nd,e,f\\ng,h,i\\n\";\n+  {\n+    BlockParser parser(options, -1, 0);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 2 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_NE(std::string::npos, status.message().find(\"Row 1: Bad value\"))\n+        << status.message();\n+  }\n+\n+  {\n+    BlockParser parser(options, -1, 100);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 3 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_NE(std::string::npos, status.message().find(\"Row 102: Bad value\"))\n+        << status.message();\n+  }\n+\n+  // No first row specified should not append row information\n+  {\n+    BlockParser parser(options, -1, -1);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 3 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_EQ(std::string::npos, status.message().find(\"Row\")) << status.message();\n\nReview comment:\n       And here you can use `::testing::Not(::testing::HasSubstr())`\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -888,9 +899,10 @@ class AsyncThreadedTableReader\n                            std::shared_ptr<io::InputStream> input,\n                            const ReadOptions& read_options,\n                            const ParseOptions& parse_options,\n-                           const ConvertOptions& convert_options, Executor* cpu_executor)\n+                           const ConvertOptions& convert_options,\n+                           Executor* cpu_executor)\n       : BaseTableReader(std::move(io_context), input, read_options, parse_options,\n-                        convert_options),\n+                        convert_options, false),\n\nReview comment:\n       (and maybe note that the parallel reader cannot count rows yet)\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -500,6 +510,7 @@ class ReaderMixin {\n \n   // Number of columns in the CSV file\n   int32_t num_csv_cols_ = -1;\n+  int64_t num_rows_;\n\nReview comment:\n       nit: maybe something more like `last_row_number_` or `num_seen_rows_` and a comment noting `-1` means we aren't tracking the row count?\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -992,7 +1004,7 @@ Result<std::shared_ptr<TableReader>> MakeTableReader(\n         io_context, input, read_options, parse_options, convert_options, cpu_executor);\n   } else {\n     reader = std::make_shared<SerialTableReader>(io_context, input, read_options,\n-                                                 parse_options, convert_options);\n+                                                 parse_options, convert_options, true);\n\nReview comment:\n       ```suggestion\r\n                                                    parse_options, convert_options, /*count_rows=*/true);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -1004,7 +1016,7 @@ Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n     const ParseOptions& parse_options, const ConvertOptions& convert_options) {\n   std::shared_ptr<BaseStreamingReader> reader;\n   reader = std::make_shared<SerialStreamingReader>(\n-      io_context, cpu_executor, input, read_options, parse_options, convert_options);\n+      io_context, cpu_executor, input, read_options, parse_options, convert_options, true);\n\nReview comment:\n       (will probably need to be reformatted here)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-19T14:59:53.710+0000",
                    "updated": "2021-05-19T14:59:53.710+0000",
                    "started": "2021-05-19T14:59:53.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599294",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/599381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r635433863\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -974,6 +976,36 @@ def read_csv(self, *args, validate_full=True, **kwargs):\n         table.validate(full=validate_full)\n         return table\n \n+    def test_row_numbers_in_errors(self):\n+        \"\"\" Row numbers are only correctly counted in serial reads \"\"\"\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n\nReview comment:\n       I did that to work with the skip rows tests so that I knew what the row names were otherwise the row names are random values. I'll add some which do not skip rows and uses the headers from the csv.\n\n##########\nFile path: cpp/src/arrow/csv/parser_test.cc\n##########\n@@ -623,5 +643,48 @@ TEST(BlockParser, QuotedEscape) {\n   }\n }\n \n+TEST(BlockParser, RowNumberAppendedToError) {\n+  auto options = ParseOptions::Defaults();\n+  auto csv = \"a,b,c\\nd,e,f\\ng,h,i\\n\";\n+  {\n+    BlockParser parser(options, -1, 0);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 2 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_NE(std::string::npos, status.message().find(\"Row 1: Bad value\"))\n+        << status.message();\n+  }\n+\n+  {\n+    BlockParser parser(options, -1, 100);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 3 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_NE(std::string::npos, status.message().find(\"Row 102: Bad value\"))\n+        << status.message();\n+  }\n+\n+  // No first row specified should not append row information\n+  {\n+    BlockParser parser(options, -1, -1);\n+    ASSERT_NO_FATAL_FAILURE(AssertParseOk(parser, csv));\n+    int row = 0;\n+    auto status = parser.VisitColumn(\n+        0, [row](const uint8_t* data, uint32_t size, bool quoted) mutable -> Status {\n+          return ++row == 3 ? Status::Invalid(\"Bad value\") : Status::OK();\n+        });\n+    ASSERT_RAISES(Invalid, status);\n+    ASSERT_EQ(std::string::npos, status.message().find(\"Row\")) << status.message();\n\nReview comment:\n       Sorry I didn't know gmock was used by arrow so I only used gtest features\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-19T18:06:04.410+0000",
                    "updated": "2021-05-19T18:06:04.410+0000",
                    "started": "2021-05-19T18:06:04.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599381",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/599424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r635534220\n\n\n\n##########\nFile path: cpp/src/arrow/csv/parser_test.cc\n##########\n@@ -536,22 +537,42 @@ TEST(BlockParser, QuotesSpecial) {\n TEST(BlockParser, MismatchingNumColumns) {\n   uint32_t out_size;\n   {\n-    BlockParser parser(ParseOptions::Defaults());\n+    BlockParser parser(ParseOptions::Defaults(), -1, 0 /* first_row */);\n     auto csv = MakeCSVData({\"a,b\\nc\\n\"});\n     Status st = Parse(parser, csv, &out_size);\n     ASSERT_RAISES(Invalid, st);\n+    ASSERT_NE(std::string::npos,\n+              st.message().find(\"CSV parse error: Row 1: Expected 2 columns, got 1: c\"))\n+        << st.message();\n   }\n   {\n-    BlockParser parser(ParseOptions::Defaults(), 2 /* num_cols */);\n+    BlockParser parser(ParseOptions::Defaults(), 2 /* num_cols */, 0 /* first_row */);\n     auto csv = MakeCSVData({\"a\\n\"});\n     Status st = Parse(parser, csv, &out_size);\n     ASSERT_RAISES(Invalid, st);\n+    ASSERT_NE(std::string::npos,\n+              st.message().find(\"CSV parse error: Row 0: Expected 2 columns, got 1: a\"))\n+        << st.message();\n   }\n   {\n-    BlockParser parser(ParseOptions::Defaults(), 2 /* num_cols */);\n+    BlockParser parser(ParseOptions::Defaults(), 2 /* num_cols */, 50 /* first_row */);\n     auto csv = MakeCSVData({\"a,b,c\\n\"});\n     Status st = Parse(parser, csv, &out_size);\n     ASSERT_RAISES(Invalid, st);\n+    ASSERT_NE(\n+        std::string::npos,\n+        st.message().find(\"CSV parse error: Row 50: Expected 2 columns, got 3: a,b,c\"))\n+        << st.message();\n+  }\n+  // No row number\n+  {\n+    BlockParser parser(ParseOptions::Defaults(), 2 /* num_cols */, -1);\n+    auto csv = MakeCSVData({\"a\\n\"});\n+    Status st = Parse(parser, csv, &out_size);\n+    ASSERT_RAISES(Invalid, st);\n+    ASSERT_NE(std::string::npos,\n+              st.message().find(\"CSV parse error: Expected 2 columns, got 1: a\"))\n\nReview comment:\n       Sorry, just a nit, you can use gmock in this block of tests too.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-19T19:46:01.900+0000",
                    "updated": "2021-05-19T19:46:01.900+0000",
                    "started": "2021-05-19T19:46:01.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599424",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/599800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-845117528\n\n\n   Antoine, could you take a quick look here as you're more familiar with the CSV parser? The changes here look minimally invasive + having the extra error context would be nice.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-20T13:24:00.990+0000",
                    "updated": "2021-05-20T13:24:00.990+0000",
                    "started": "2021-05-20T13:24:00.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599800",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r639580493\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -974,6 +976,56 @@ def read_csv(self, *args, validate_full=True, **kwargs):\n         table.validate(full=validate_full)\n         return table\n \n+    def test_row_numbers_in_errors(self):\n+        \"\"\" Row numbers are only correctly counted in serial reads \"\"\"\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32(), \"d\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        with pytest.raises(pa.ArrowInvalid,\n+                           match=\"Row 102: Expected 4 columns, got 2\"):\n+            self.read_bytes(csv_bad_columns, read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message = (\"In CSV column #0: Row 102: \" +\n\nReview comment:\n       This should probably be \"Row #102\", no?\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -319,11 +319,12 @@ class ReaderMixin {\n  public:\n   ReaderMixin(io::IOContext io_context, std::shared_ptr<io::InputStream> input,\n               const ReadOptions& read_options, const ParseOptions& parse_options,\n-              const ConvertOptions& convert_options)\n+              const ConvertOptions& convert_options, bool count_rows)\n       : io_context_(std::move(io_context)),\n         read_options_(read_options),\n         parse_options_(parse_options),\n         convert_options_(convert_options),\n+        num_rows_seen_(count_rows ? 1 : -1),\n\nReview comment:\n       This is weird. Why not have a separate member `bool count_rows_`?\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -52,18 +52,20 @@ def generate_col_names():\n             yield first + second\n \n \n-def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n'):\n+def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n', write_names=True):\n     arr = np.random.RandomState(42).randint(0, 1000, size=(num_cols, num_rows))\n-    col_names = list(itertools.islice(generate_col_names(), num_cols))\n     csv = io.StringIO()\n-    csv.write(\",\".join(col_names))\n+    if write_names:\n+        col_names = list(itertools.islice(generate_col_names(), num_cols))\n+        csv.write(\",\".join(col_names))\n     csv.write(linesep)\n     for row in arr.T:\n         csv.write(\",\".join(map(str, row)))\n         csv.write(linesep)\n     csv = csv.getvalue().encode()\n     columns = [pa.array(a, type=pa.int64()) for a in arr]\n-    expected = pa.Table.from_arrays(columns, col_names)\n+    expected = pa.Table.from_arrays(\n+        columns, col_names) if write_names else None\n\nReview comment:\n       I'm not sure what the condition is for here?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -51,7 +51,7 @@ Result<std::unordered_set<std::string>> GetColumnNames(\n     const csv::ParseOptions& parse_options, util::string_view first_block,\n     MemoryPool* pool) {\n   uint32_t parsed_size = 0;\n-  csv::BlockParser parser(pool, parse_options, /*num_cols=*/-1,\n+  csv::BlockParser parser(pool, parse_options, /*num_cols=*/-1, /*num_rows=*/0,\n\nReview comment:\n       Are you sure `num_rows` is the argument name?\n\n##########\nFile path: cpp/src/arrow/csv/parser.cc\n##########\n@@ -35,14 +35,21 @@ using detail::ParsedValueDesc;\n \n namespace {\n \n-Status ParseError(const char* message) {\n-  return Status::Invalid(\"CSV parse error: \", message);\n+template <typename... Args>\n+Status ParseError(Args&&... args) {\n+  return Status::Invalid(\"CSV parse error: \", std::forward<Args>(args)...);\n }\n \n-Status MismatchingColumns(int32_t expected, int32_t actual) {\n-  char s[50];\n-  snprintf(s, sizeof(s), \"Expected %d columns, got %d\", expected, actual);\n-  return ParseError(s);\n+Status MismatchingColumns(int32_t expected, int32_t actual, int64_t row_num,\n+                          util::string_view row) {\n+  if (row.length() > 100) {\n+    row = row.substr(0, 96);\n\nReview comment:\n       It probably isn't great to show a truncated row without mentioning that it is truncated.\n\n##########\nFile path: cpp/src/arrow/csv/parser.h\n##########\n@@ -63,19 +63,24 @@ class ARROW_EXPORT DataBatch {\n   uint32_t num_bytes() const { return parsed_size_; }\n \n   template <typename Visitor>\n-  Status VisitColumn(int32_t col_index, Visitor&& visit) const {\n+  Status VisitColumn(int32_t col_index, int64_t first_row, Visitor&& visit) const {\n     using detail::ParsedValueDesc;\n \n+    int64_t row = first_row;\n     for (size_t buf_index = 0; buf_index < values_buffers_.size(); ++buf_index) {\n       const auto& values_buffer = values_buffers_[buf_index];\n       const auto values = reinterpret_cast<const ParsedValueDesc*>(values_buffer->data());\n       const auto max_pos =\n           static_cast<int32_t>(values_buffer->size() / sizeof(ParsedValueDesc)) - 1;\n-      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_) {\n+      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_, ++row) {\n         auto start = values[pos].offset;\n         auto stop = values[pos + 1].offset;\n         auto quoted = values[pos + 1].quoted;\n-        ARROW_RETURN_NOT_OK(visit(parsed_ + start, stop - start, quoted));\n+        Status status = visit(parsed_ + start, stop - start, quoted);\n+        if (ARROW_PREDICT_FALSE(first_row >= 0 && !status.ok())) {\n\nReview comment:\n       Suggestion:\r\n   ```c++\r\n   if (ARROW_PREDICT_FALSE(!status.ok())) {\r\n     if (first_row >= 0) {\r\n       status = ...\r\n     }\r\n     return status;\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T10:10:17.504+0000",
                    "updated": "2021-05-26T10:10:17.504+0000",
                    "started": "2021-05-26T10:10:17.504+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602226",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r639783428\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -52,18 +52,20 @@ def generate_col_names():\n             yield first + second\n \n \n-def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n'):\n+def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n', write_names=True):\n     arr = np.random.RandomState(42).randint(0, 1000, size=(num_cols, num_rows))\n-    col_names = list(itertools.islice(generate_col_names(), num_cols))\n     csv = io.StringIO()\n-    csv.write(\",\".join(col_names))\n+    if write_names:\n+        col_names = list(itertools.islice(generate_col_names(), num_cols))\n+        csv.write(\",\".join(col_names))\n     csv.write(linesep)\n     for row in arr.T:\n         csv.write(\",\".join(map(str, row)))\n         csv.write(linesep)\n     csv = csv.getvalue().encode()\n     columns = [pa.array(a, type=pa.int64()) for a in arr]\n-    expected = pa.Table.from_arrays(columns, col_names)\n+    expected = pa.Table.from_arrays(\n+        columns, col_names) if write_names else None\n\nReview comment:\n       If write_names is false then col_names is not set so the Table cannot be created. I'll change this to be a condition on col_names because that is a bit more obvious\n\n##########\nFile path: cpp/src/arrow/csv/parser.cc\n##########\n@@ -35,14 +35,21 @@ using detail::ParsedValueDesc;\n \n namespace {\n \n-Status ParseError(const char* message) {\n-  return Status::Invalid(\"CSV parse error: \", message);\n+template <typename... Args>\n+Status ParseError(Args&&... args) {\n+  return Status::Invalid(\"CSV parse error: \", std::forward<Args>(args)...);\n }\n \n-Status MismatchingColumns(int32_t expected, int32_t actual) {\n-  char s[50];\n-  snprintf(s, sizeof(s), \"Expected %d columns, got %d\", expected, actual);\n-  return ParseError(s);\n+Status MismatchingColumns(int32_t expected, int32_t actual, int64_t row_num,\n+                          util::string_view row) {\n+  if (row.length() > 100) {\n+    row = row.substr(0, 96);\n\nReview comment:\n       Sorry about that the ellipse was accidentally removed when I added the row_num to the output\n\n##########\nFile path: cpp/src/arrow/csv/parser.h\n##########\n@@ -63,19 +63,24 @@ class ARROW_EXPORT DataBatch {\n   uint32_t num_bytes() const { return parsed_size_; }\n \n   template <typename Visitor>\n-  Status VisitColumn(int32_t col_index, Visitor&& visit) const {\n+  Status VisitColumn(int32_t col_index, int64_t first_row, Visitor&& visit) const {\n     using detail::ParsedValueDesc;\n \n+    int64_t row = first_row;\n     for (size_t buf_index = 0; buf_index < values_buffers_.size(); ++buf_index) {\n       const auto& values_buffer = values_buffers_[buf_index];\n       const auto values = reinterpret_cast<const ParsedValueDesc*>(values_buffer->data());\n       const auto max_pos =\n           static_cast<int32_t>(values_buffer->size() / sizeof(ParsedValueDesc)) - 1;\n-      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_) {\n+      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_, ++row) {\n         auto start = values[pos].offset;\n         auto stop = values[pos + 1].offset;\n         auto quoted = values[pos + 1].quoted;\n-        ARROW_RETURN_NOT_OK(visit(parsed_ + start, stop - start, quoted));\n+        Status status = visit(parsed_ + start, stop - start, quoted);\n+        if (ARROW_PREDICT_FALSE(first_row >= 0 && !status.ok())) {\n\nReview comment:\n       ARROW_RETURN_NOT_OK adds the extra context when that is enabled so I think it would be better to keep that around or add a new macro which doesn't check status just adds the context and returns when it is enabled\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -319,11 +319,12 @@ class ReaderMixin {\n  public:\n   ReaderMixin(io::IOContext io_context, std::shared_ptr<io::InputStream> input,\n               const ReadOptions& read_options, const ParseOptions& parse_options,\n-              const ConvertOptions& convert_options)\n+              const ConvertOptions& convert_options, bool count_rows)\n       : io_context_(std::move(io_context)),\n         read_options_(read_options),\n         parse_options_(parse_options),\n         convert_options_(convert_options),\n+        num_rows_seen_(count_rows ? 1 : -1),\n\nReview comment:\n       Just to reduce the number of member variables. Using a separate bool might be a bit clearer but it doesn't simplify the code any and you end up having one variable indicating if another variable is being used and using -1/<0 to indicate disabled is common enough I didn't think it obfuscated the intent too much.\r\n   \r\n   If you feel strongly there should be two member variables to track row count I can make that change.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T15:16:53.030+0000",
                    "updated": "2021-05-26T15:16:53.030+0000",
                    "started": "2021-05-26T15:16:53.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602393",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r639829796\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -52,18 +52,20 @@ def generate_col_names():\n             yield first + second\n \n \n-def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n'):\n+def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n', write_names=True):\n     arr = np.random.RandomState(42).randint(0, 1000, size=(num_cols, num_rows))\n-    col_names = list(itertools.islice(generate_col_names(), num_cols))\n     csv = io.StringIO()\n-    csv.write(\",\".join(col_names))\n+    if write_names:\n+        col_names = list(itertools.islice(generate_col_names(), num_cols))\n+        csv.write(\",\".join(col_names))\n     csv.write(linesep)\n     for row in arr.T:\n         csv.write(\",\".join(map(str, row)))\n         csv.write(linesep)\n     csv = csv.getvalue().encode()\n     columns = [pa.array(a, type=pa.int64()) for a in arr]\n-    expected = pa.Table.from_arrays(columns, col_names)\n+    expected = pa.Table.from_arrays(\n+        columns, col_names) if write_names else None\n\nReview comment:\n       Or you can set `col_names` unconditionally, which will be less fragile IMO.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T15:18:32.102+0000",
                    "updated": "2021-05-26T15:18:32.102+0000",
                    "started": "2021-05-26T15:18:32.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602394",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r639830246\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -319,11 +319,12 @@ class ReaderMixin {\n  public:\n   ReaderMixin(io::IOContext io_context, std::shared_ptr<io::InputStream> input,\n               const ReadOptions& read_options, const ParseOptions& parse_options,\n-              const ConvertOptions& convert_options)\n+              const ConvertOptions& convert_options, bool count_rows)\n       : io_context_(std::move(io_context)),\n         read_options_(read_options),\n         parse_options_(parse_options),\n         convert_options_(convert_options),\n+        num_rows_seen_(count_rows ? 1 : -1),\n\nReview comment:\n       Having separate member variables would be clearer IMO.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T15:19:05.230+0000",
                    "updated": "2021-05-26T15:19:05.230+0000",
                    "started": "2021-05-26T15:19:05.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602395",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r639830892\n\n\n\n##########\nFile path: cpp/src/arrow/csv/parser.h\n##########\n@@ -63,19 +63,24 @@ class ARROW_EXPORT DataBatch {\n   uint32_t num_bytes() const { return parsed_size_; }\n \n   template <typename Visitor>\n-  Status VisitColumn(int32_t col_index, Visitor&& visit) const {\n+  Status VisitColumn(int32_t col_index, int64_t first_row, Visitor&& visit) const {\n     using detail::ParsedValueDesc;\n \n+    int64_t row = first_row;\n     for (size_t buf_index = 0; buf_index < values_buffers_.size(); ++buf_index) {\n       const auto& values_buffer = values_buffers_[buf_index];\n       const auto values = reinterpret_cast<const ParsedValueDesc*>(values_buffer->data());\n       const auto max_pos =\n           static_cast<int32_t>(values_buffer->size() / sizeof(ParsedValueDesc)) - 1;\n-      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_) {\n+      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_, ++row) {\n         auto start = values[pos].offset;\n         auto stop = values[pos + 1].offset;\n         auto quoted = values[pos + 1].quoted;\n-        ARROW_RETURN_NOT_OK(visit(parsed_ + start, stop - start, quoted));\n+        Status status = visit(parsed_ + start, stop - start, quoted);\n+        if (ARROW_PREDICT_FALSE(first_row >= 0 && !status.ok())) {\n\nReview comment:\n       Ah, you're right. But you should still ensure that `!status.ok()` is the first condition inside `ARROW_PREDICT_FALSE`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T15:19:42.163+0000",
                    "updated": "2021-05-26T15:19:42.163+0000",
                    "started": "2021-05-26T15:19:42.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602396",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r640037240\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -52,18 +52,20 @@ def generate_col_names():\n             yield first + second\n \n \n-def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n'):\n+def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n', write_names=True):\n     arr = np.random.RandomState(42).randint(0, 1000, size=(num_cols, num_rows))\n-    col_names = list(itertools.islice(generate_col_names(), num_cols))\n     csv = io.StringIO()\n-    csv.write(\",\".join(col_names))\n+    if write_names:\n+        col_names = list(itertools.islice(generate_col_names(), num_cols))\n+        csv.write(\",\".join(col_names))\n     csv.write(linesep)\n     for row in arr.T:\n         csv.write(\",\".join(map(str, row)))\n         csv.write(linesep)\n     csv = csv.getvalue().encode()\n     columns = [pa.array(a, type=pa.int64()) for a in arr]\n-    expected = pa.Table.from_arrays(columns, col_names)\n+    expected = pa.Table.from_arrays(\n+        columns, col_names) if write_names else None\n\nReview comment:\n       But then the column names returned by the csv parser may be different than the table or is that not an issue?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T18:50:40.318+0000",
                    "updated": "2021-05-26T18:50:40.318+0000",
                    "started": "2021-05-26T18:50:40.318+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602489",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r640038839\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -52,18 +52,20 @@ def generate_col_names():\n             yield first + second\n \n \n-def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n'):\n+def make_random_csv(num_cols=2, num_rows=10, linesep='\\r\\n', write_names=True):\n     arr = np.random.RandomState(42).randint(0, 1000, size=(num_cols, num_rows))\n-    col_names = list(itertools.islice(generate_col_names(), num_cols))\n     csv = io.StringIO()\n-    csv.write(\",\".join(col_names))\n+    if write_names:\n+        col_names = list(itertools.islice(generate_col_names(), num_cols))\n+        csv.write(\",\".join(col_names))\n     csv.write(linesep)\n     for row in arr.T:\n         csv.write(\",\".join(map(str, row)))\n         csv.write(linesep)\n     csv = csv.getvalue().encode()\n     columns = [pa.array(a, type=pa.int64()) for a in arr]\n-    expected = pa.Table.from_arrays(columns, col_names)\n+    expected = pa.Table.from_arrays(\n+        columns, col_names) if write_names else None\n\nReview comment:\n       Well, the test should ensure that the column names are the same.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T18:53:12.128+0000",
                    "updated": "2021-05-26T18:53:12.128+0000",
                    "started": "2021-05-26T18:53:12.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602491",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r640039477\n\n\n\n##########\nFile path: cpp/src/arrow/csv/parser.h\n##########\n@@ -63,19 +63,24 @@ class ARROW_EXPORT DataBatch {\n   uint32_t num_bytes() const { return parsed_size_; }\n \n   template <typename Visitor>\n-  Status VisitColumn(int32_t col_index, Visitor&& visit) const {\n+  Status VisitColumn(int32_t col_index, int64_t first_row, Visitor&& visit) const {\n     using detail::ParsedValueDesc;\n \n+    int64_t row = first_row;\n     for (size_t buf_index = 0; buf_index < values_buffers_.size(); ++buf_index) {\n       const auto& values_buffer = values_buffers_[buf_index];\n       const auto values = reinterpret_cast<const ParsedValueDesc*>(values_buffer->data());\n       const auto max_pos =\n           static_cast<int32_t>(values_buffer->size() / sizeof(ParsedValueDesc)) - 1;\n-      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_) {\n+      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_, ++row) {\n         auto start = values[pos].offset;\n         auto stop = values[pos + 1].offset;\n         auto quoted = values[pos + 1].quoted;\n-        ARROW_RETURN_NOT_OK(visit(parsed_ + start, stop - start, quoted));\n+        Status status = visit(parsed_ + start, stop - start, quoted);\n+        if (ARROW_PREDICT_FALSE(first_row >= 0 && !status.ok())) {\n\nReview comment:\n       I updated it to be almost what you suggested but I kept the ARROW_RETURN_NOT_OK around status. If there is a desire to add an ARROW_RETURN_WITh_CONTEXT macro I am happy to add that and modify the other macros to use it. It only gets rid of a duplicate status.ok() check which isn't much overhead so probably not really worth it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T18:54:05.509+0000",
                    "updated": "2021-05-26T18:54:05.509+0000",
                    "started": "2021-05-26T18:54:05.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602492",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-849563094\n\n\n   @ursabot please benchmark\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T11:42:52.235+0000",
                    "updated": "2021-05-27T11:42:52.235+0000",
                    "started": "2021-05-27T11:42:52.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602907",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-849563333\n\n\n   Benchmark runs are scheduled for baseline = 861b5dad14e609f042d7f32ba3926e91e232ba92 and contender = fe786901b776e7830b71081df91e157651b8e3dc. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-large-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/93a0fc9ee82344919718876aaa25da63...bc61a35c3cd74e59ba6889fd981f2b3b/)\n   [Scheduled] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/3064ea0890064684b676b9ae0023d61d...03dd0355ce7449bbbaf57e62f022ad7d/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/808690002da441d5a964b8a3c3e95894...f178cac0047648aaa9d6ba7a4d75bd57/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1f9c9be0ccb640bcae27f6d7dcfb094a...195af935006c45568bf56d92917c1038/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T11:43:17.386+0000",
                    "updated": "2021-05-27T11:43:17.386+0000",
                    "started": "2021-05-27T11:43:17.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602908",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#discussion_r640546470\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -51,7 +51,7 @@ Result<std::unordered_set<std::string>> GetColumnNames(\n     const csv::ParseOptions& parse_options, util::string_view first_block,\n     MemoryPool* pool) {\n   uint32_t parsed_size = 0;\n-  csv::BlockParser parser(pool, parse_options, /*num_cols=*/-1,\n+  csv::BlockParser parser(pool, parse_options, /*num_cols=*/-1, /*first_row=*/0,\n\nReview comment:\n       Should this be 1, as is done in the CSV reader?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T11:46:44.045+0000",
                    "updated": "2021-05-27T11:46:44.045+0000",
                    "started": "2021-05-27T11:46:44.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602910",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-849563333\n\n\n   Benchmark runs are scheduled for baseline = 861b5dad14e609f042d7f32ba3926e91e232ba92 and contender = fe786901b776e7830b71081df91e157651b8e3dc. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-large-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/93a0fc9ee82344919718876aaa25da63...bc61a35c3cd74e59ba6889fd981f2b3b/)\n   [Finished :arrow_down:75.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/3064ea0890064684b676b9ae0023d61d...03dd0355ce7449bbbaf57e62f022ad7d/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/808690002da441d5a964b8a3c3e95894...f178cac0047648aaa9d6ba7a4d75bd57/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1f9c9be0ccb640bcae27f6d7dcfb094a...195af935006c45568bf56d92917c1038/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T11:56:22.082+0000",
                    "updated": "2021-05-27T11:56:22.082+0000",
                    "started": "2021-05-27T11:56:22.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602915",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-849563333\n\n\n   Benchmark runs are scheduled for baseline = 861b5dad14e609f042d7f32ba3926e91e232ba92 and contender = fe786901b776e7830b71081df91e157651b8e3dc. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Failed :arrow_down:0.0% :arrow_up:33.33%] [ec2-t3-large-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/93a0fc9ee82344919718876aaa25da63...bc61a35c3cd74e59ba6889fd981f2b3b/)\n   [Finished :arrow_down:75.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/3064ea0890064684b676b9ae0023d61d...03dd0355ce7449bbbaf57e62f022ad7d/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/808690002da441d5a964b8a3c3e95894...f178cac0047648aaa9d6ba7a4d75bd57/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1f9c9be0ccb640bcae27f6d7dcfb094a...195af935006c45568bf56d92917c1038/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T12:01:23.911+0000",
                    "updated": "2021-05-27T12:01:23.911+0000",
                    "started": "2021-05-27T12:01:23.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602920",
                    "issueId": "13377084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/worklog/602939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10321:\nURL: https://github.com/apache/arrow/pull/10321#issuecomment-849563333\n\n\n   Benchmark runs are scheduled for baseline = 861b5dad14e609f042d7f32ba3926e91e232ba92 and contender = fe786901b776e7830b71081df91e157651b8e3dc. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Failed :arrow_down:0.0% :arrow_up:33.33%] [ec2-t3-large-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/93a0fc9ee82344919718876aaa25da63...bc61a35c3cd74e59ba6889fd981f2b3b/)\n   [Finished :arrow_down:75.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/3064ea0890064684b676b9ae0023d61d...03dd0355ce7449bbbaf57e62f022ad7d/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/808690002da441d5a964b8a3c3e95894...f178cac0047648aaa9d6ba7a4d75bd57/)\n   [Finished :arrow_down:5.06% :arrow_up:5.61%] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1f9c9be0ccb640bcae27f6d7dcfb094a...195af935006c45568bf56d92917c1038/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-27T12:28:32.468+0000",
                    "updated": "2021-05-27T12:28:32.468+0000",
                    "started": "2021-05-27T12:28:32.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602939",
                    "issueId": "13377084"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@43e8482e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7392c7e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c80c240[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2944d72[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d2a4864[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@725aea70[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3882a4b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@18dd9106[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@379b9311[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@12b7f6f8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fbd3f7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4b1cdc2b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 27 15:53:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-27T15:53:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12675/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-05-06T19:23:52.000+0000",
        "updated": "2021-05-27T15:54:34.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently if an error occurs while parsing a CSV file the absolute line/row number is not part of the error message. Without the line number it can be very hard to determine where the incorrect value is especially in vary large files.\r\n\r\nIt would be good if the reader and parser could keep track of the row number and maybe line number when new lines are allowed in values so that they can be included in error message.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] CSV should include line/row numbers in parsing error messages",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377084/comment/17352582",
                    "id": "17352582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10321\n[https://github.com/apache/arrow/pull/10321]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-05-27T15:53:49.616+0000",
                    "updated": "2021-05-27T15:53:49.616+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qsrs:",
        "customfield_12314139": null
    }
}