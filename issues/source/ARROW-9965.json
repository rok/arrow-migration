{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326894",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894",
    "key": "ARROW-9965",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
            "name": "josiahyan",
            "key": "josiahyan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Josiah",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
            "name": "josiahyan",
            "key": "josiahyan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Josiah",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9965/votes",
            "votes": 0,
            "hasVoted": false
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 37800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f3564ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32f775d3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eb16e0b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37e1dde3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49240668[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@93f5b4a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c4bad50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@57c71ff[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c82307e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1f94d3af[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e54cc20[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@18c1b99c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 28 02:09:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-28T02:09:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9965/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-10T15:17:01.000+0000",
        "updated": "2020-09-28T15:14:50.000+0000",
        "timeoriginalestimate": null,
        "description": "It turns out that setSafe performs a very expensive integer division when trying to compute buffer capacity; specifically, it divides by the field size, which isn't hardcoded. Although it is typically a power of 2 for alignment reasons, this doesn't compile down to a bitshift.\r\n\r\nThis is done here: https://github.com/apache/arrow/blob/175c53d0b17708312bfd1494c65824f690a6cc9a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java#L189\r\n \r\nForcing a bitshift operation results in a large speedup in benchmarks. When turning off bounds checks (which affects another portion of set), microbenchmarks indicate that setting the elements of a vector via setSafe is increased by ~174% (almost 3 times faster). With bounds checks on, this is reduced to a 73% increase (Amdahl's).\r\n\r\nWe use setSafe right now in a hot loop to set Arrow vectors in an internal data-intensive service (for now), although in the future, we would prefer a more specialized vector append interface to skip all the other indirection and bit manipulation instructions, while not directly manipulating the exposed (native) memory.\r\n\r\nHere is the detailed analysis:\r\nTests were run on a machine with an Intel 8700k. Compiled with JDK 8, and run with the latest repo-provided JDK 14 on Ubuntu 20.04.\r\n{code}\r\nBenchmark results with arrow.enable_unsafe_memory_access=false, patch NOT applied\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=false\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\n*snip*\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 13.853 \u00b1 0.058 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 15.045 \u00b1 0.040 us/op\r\nIntBenchmarks.setWithWriter avgt 15 21.621 \u00b1 0.197 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=false, patch applied\r\n\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=false\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\n*snip*\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 7.964 \u00b1 0.030 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 9.145 \u00b1 0.031 us/op\r\nIntBenchmarks.setWithWriter avgt 15 8.029 \u00b1 0.051 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=true, patch NOT applied\r\n\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=true\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectl\r\n\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 9.563 \u00b1 0.335 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 9.266 \u00b1 0.064 us/op\r\nIntBenchmarks.setWithWriter avgt 15 18.806 \u00b1 0.154 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=true, patch applied\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=true\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 3.490 \u00b1 0.175 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 3.806 \u00b1 0.015 us/op\r\nIntBenchmarks.setWithWriter avgt 15 5.490 \u00b1 0.304 us/op\r\n{code}\r\n\r\nI determined this by running the built-in Arrow JMH benchmarks on an 8700k. I left the CPU frequency scaling in the default state. The numbers seemed off for setting a value. I reran the benchmarks with the `prof=perfasm` option in JMH, which emitted annotated assembly for detected hotspots. Here is the relevant section:\r\n\r\n{code}\r\n0.06% \u2502 \u2502\u2502 0x00007f5a7f7beb6f: mov 0x30(%r12,%rsi,8),%rax ; implicit exception: dispatches to 0x00007f5a7f7bef28\r\n\u2502 \u2502\u2502 ;*getfield length {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.memory.ArrowBuf::capacity@1 (line 138)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@4 (line 189)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n0.14% \u2502 \u2502\u2502 0x00007f5a7f7beb74: movsxd 0x10(%r12,%rdi,8),%rcx ;*i2l {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@11 (line 189)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n*snip*\r\n1.43% \u2502\u2502 \u2502 \u2502\u2502 0x00007f5a7f7beb9b: idivq %rcx,%rax ;*ldiv {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@12 (line 189)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n68.16% \u2502\u2502 \u2198 \u2502\u2502 0x00007f5a7f7beb9e: cmp $0x7fffffff,%rax\r\n\u2502\u2502 \u2502\u2502 0x00007f5a7f7beba5: jnle 0x7f5a7f7bec8c ;*ifgt {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502\u2502 \u2502\u2502 ; - java.lang.Math::min@3 (line 1552)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.memory.util.LargeMemoryUtil::capAtMaxInt@4 (line 44)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@13 (line 189)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n{code}\r\n\r\nThe hot instruction is misattributed, probably due to event instruction skid. But integer division is known to be expensive to implement. We can verify this with Agner Fog's instruction tables: https://www.agner.org/optimize/instruction_tables.pdf . Searching for idiv gives high numbers in the table provided, as expected.\r\n\r\nAfter noting all of this, we can apply the following patch, which produces the speedup as above:\r\n{code}\r\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\nindex ee47f6dd8..0c9a57bf9 100644\r\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\n@@ -47,6 +47,7 @@ import io.netty.util.internal.PlatformDependent;\r\npublic abstract class BaseFixedWidthVector extends BaseValueVector\r\nimplements FixedWidthVector, FieldVector, VectorDefinitionSetter {\r\nprivate final int typeWidth;\r\n+ private final int typeWidthAsExactBitShiftOrNegOne;\r\n\r\nprotected int lastValueCapacity;\r\n\r\n@@ -66,6 +67,7 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\npublic BaseFixedWidthVector(Field field, final BufferAllocator allocator, final int typeWidth) {\r\nsuper(allocator);\r\nthis.typeWidth = typeWidth;\r\n+ this.typeWidthAsExactBitShiftOrNegOne = log2ExactOrNeg1(typeWidth);\r\nthis.field = field;\r\nvalueCount = 0;\r\nallocationMonitor = 0;\r\n@@ -186,7 +188,13 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\n}\r\n\r\nprivate int getValueBufferValueCapacity() {\r\n- return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n+ if (typeWidthAsExactBitShiftOrNegOne == -1) {\r\n+ // Slow path - integral division is very very expensive, and code here is part of\r\n+ // setSafe's hot loop\r\n+ // The JVM did not optimize integral division into bit shifts\r\n+ return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n+ }\r\n+ return capAtMaxInt(valueBuffer.capacity() >> typeWidthAsExactBitShiftOrNegOne);\r\n}\r\n\r\nprivate int getValidityBufferValueCapacity() {\r\n@@ -903,4 +911,12 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\nreturn visitor.visit(this, value);\r\n}\r\n\r\n+ private int log2ExactOrNeg1(int x) {\r\n+ final boolean isPowerOfTwo = x > 0 & (x & (x - 1)) == 0;\r\n+ if (!isPowerOfTwo) {\r\n+ return -1;\r\n+ }\r\n+ return (Integer.SIZE - 1) - Integer.numberOfLeadingZeros(x);\r\n+ }\r\n+\r\n}\r\n{code}\r\n\r\nAttached is the generated assembly as printed by JMH, before and after. I renamed some variables for clarity after generating the results, but the logic is unchanged.\r\n\r\nI also did a quick test with JDK 8 - this was where I originally ran the benchmarks. The idiv instruction was present there too.\r\n\r\nAn initial version of this patch cached the value - this produces about the same speedup.\r\n\r\nAre people fine with this approach?",
        "customfield_10010": null,
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Buffer capacity calculations are slow for fixed-width vectors",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "customfield_12311820": "0|z0ihkg:",
        "customfield_12314139": null
    }
}