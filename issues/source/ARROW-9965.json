{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326894",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894",
    "key": "ARROW-9965",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
            "name": "josiahyan",
            "key": "josiahyan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Josiah",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
            "name": "josiahyan",
            "key": "josiahyan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Josiah",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9965/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 63,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan opened a new pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214\n\n\n   It turns out that setSafe performs a very expensive integer division when trying to compute buffer capacity; specifically, it divides by the field size, which isn't hardcoded. Although it is typically a power of 2, this doesn't compile down to a bitshift.\r\n   \r\n   Special-casing and forcing a bitshift operation results in a ~300% increase in benchmarks that use a hot loop to set Arrow vectors. We have a similar use-case in an internal data-intensive service.\r\n   \r\n   Benchmark results with arrow.enable_unsafe_memory_access=true\r\n   \r\n   Before:\r\n   ```\r\n   Benchmark Mode Cnt Score Error Units\r\n   IntBenchmarks.setIntDirectly avgt 15 9.563 \u00b1 0.335 us/op\r\n   IntBenchmarks.setWithValueHolder avgt 15 9.266 \u00b1 0.064 us/op\r\n   IntBenchmarks.setWithWriter avgt 15 18.806 \u00b1 0.154 us/op\r\n   ```\r\n   \r\n   After:\r\n   ```\r\n   Benchmark Mode Cnt Score Error Units\r\n   IntBenchmarks.setIntDirectly avgt 15 3.490 \u00b1 0.175 us/op\r\n   IntBenchmarks.setWithValueHolder avgt 15 3.806 \u00b1 0.015 us/op\r\n   IntBenchmarks.setWithWriter avgt 15 5.490 \u00b1 0.304 us/op\r\n   ```\r\n   \r\n   See https://issues.apache.org/jira/browse/ARROW-9965 for further benchmarks, and an analysis of the root cause of the slowdown.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T00:41:10.285+0000",
                    "updated": "2020-09-18T00:41:10.285+0000",
                    "started": "2020-09-18T00:41:10.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486016",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-694578807\n\n\n   @lidavidm \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T00:42:16.147+0000",
                    "updated": "2020-09-18T00:42:16.147+0000",
                    "started": "2020-09-18T00:42:16.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486017",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-694595193\n\n\n   https://issues.apache.org/jira/browse/ARROW-9965\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T01:28:51.565+0000",
                    "updated": "2020-09-18T01:28:51.565+0000",
                    "started": "2020-09-18T01:28:51.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486026",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-694850013\n\n\n   > +1, integration test failure is unrelated.\r\n   > \r\n   > @liyafan82 since you're also working in this space, what do you think of the optimization here? I think it's an easy win and will help the non-nullable vector case too.\r\n   \r\n   @josiahyan Thanks for providing the patch. This is a problem that needs to be addressed. \r\n   \r\n   I am a little surprised that JIT failed to transform the integer divistion to a right shift, as it can be easily deduced that the type width for an IntVector is always 4. \r\n   \r\n   This change improves the peformance by saving the number of bits to shift and use a if branch to check if shift operations applies.\r\n   \r\n   I am thinking about another way: can we simply save the value/validity buffer capacities? so we can further improve the performance by avoiding the if branch in `getValueBufferValueCapacity` and the if branch in  `capAtMaxInt`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T12:54:31.427+0000",
                    "updated": "2020-09-18T12:54:31.427+0000",
                    "started": "2020-09-18T12:54:31.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486201",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-695114615\n\n\n   @liyafan82 Thanks for taking a look!\r\n   \r\n   > I am a little surprised that JIT failed to transform the integer divistion to a right shift, as it can be easily deduced that the type width for an IntVector is always 4.\r\n   I was pretty surprised too - it turned out that a huge chunk of cycles that we spent serializing data was devoted to this (BaseFixedWidthVector capacity bounds checking) + ArrowBuf bounds checking. This held true across the two/three JDK versions I used, across servers. It was not immediately evident where all the cycles are going on a Java-level profiler, but if you pull out the assembly, I think its quite clear (see the linked JIRA).\r\n   \r\n   > I am thinking about another way: can we simply save the value/validity buffer capacities? so we can further improve the performance by avoiding the if branch in getValueBufferValueCapacity and the if branch in capAtMaxInt\r\n   I did this for a prototype internally - I think this is faster, but if done before even calling setSafe, implicitly assumes that no-one else is writing to the ArrowBuf.\r\n   \r\n   If I remember correctly, if we read the capacities directly and do these checks in getValueBufferValueCapacity, deeper in the setSafe call, performance was marginally comparable (at least within <20%?). However, this needs to be checked again. I wasn't too concerned about this, as we run with arrow.enable_unsafe_memory_access=false` set. We might have been able to make it faster on this front of checking the capacity, but its waaaay into diminishing returns (for us at least).\r\n   \r\n   We also lost a lot of performance over keeping `arrow.enable_unsafe_memory_access=false`, and I was wondering if there was a better way of eliminating all bounds checks, both on the BaseFixedWidthVector, and in ArrowBuf.chk.\r\n   \r\n   When we run our production code with `arrow.enable_unsafe_memory_access=false`, the breakdowns of the setSafe CPU usage (before this patch) according to an async sampling profiler are as following:\r\n   \r\n   53% for handleSafe (which this patch is expected to remove the majority of)\r\n   ~30% for the ArrowBuf.chk checks in the `set(index, value)` code.\r\n   \r\n   I was thinking that if we had a specialized vector append API, that guaranteed ownership of the buffer, we could throw out all of these bounds checks safely (in handleSafe, and ArrowBuf.chk), as well as have a restricted API to optimize building buffers out of. Something like the original [IntWriter](https://arrow.apache.org/docs/java/reference/org/apache/arrow/vector/complex/writer/BaseWriter.ScalarWriter.html) interface, but with stronger ownership semantics around the ArrowBuf? Is that something you think is possible/desirable?\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T22:33:19.540+0000",
                    "updated": "2020-09-18T22:33:19.540+0000",
                    "started": "2020-09-18T22:33:19.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486416",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan edited a comment on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-695114615\n\n\n   @liyafan82 Thanks for taking a look!\r\n   \r\n   > I am a little surprised that JIT failed to transform the integer divistion to a right shift, as it can be easily deduced that the type width for an IntVector is always 4.\r\n   \r\n   I was pretty surprised too - it turned out that a huge chunk of cycles that we spent serializing data was devoted to this (BaseFixedWidthVector capacity bounds checking) + ArrowBuf bounds checking. This held true across the two/three JDK versions I used, across servers. It was not immediately evident where all the cycles are going on a Java-level profiler, but if you pull out the assembly, I think its quite clear (see the linked JIRA).\r\n   \r\n   > I am thinking about another way: can we simply save the value/validity buffer capacities? so we can further improve the performance by avoiding the if branch in getValueBufferValueCapacity and the if branch in capAtMaxInt\r\n   I did this for a prototype internally - I think this is faster, but if done before even calling setSafe, implicitly assumes that no-one else is writing to the ArrowBuf.\r\n   \r\n   If I remember correctly, if we read the capacities directly and do these checks in getValueBufferValueCapacity, deeper in the setSafe call, performance was marginally comparable (at least within <20%?). However, this needs to be checked again. I wasn't too concerned about this, as we run with arrow.enable_unsafe_memory_access=false` set. We might have been able to make it faster on this front of checking the capacity, but its waaaay into diminishing returns (for us at least).\r\n   \r\n   We also lost a lot of performance over keeping `arrow.enable_unsafe_memory_access=false`, and I was wondering if there was a better way of eliminating all bounds checks, both on the BaseFixedWidthVector, and in ArrowBuf.chk.\r\n   \r\n   When we run our production code with `arrow.enable_unsafe_memory_access=false`, the breakdowns of the setSafe CPU usage (before this patch) according to an async sampling profiler are as following:\r\n   \r\n   53% for handleSafe (which this patch is expected to remove the majority of)\r\n   ~30% for the ArrowBuf.chk checks in the `set(index, value)` code.\r\n   \r\n   I was thinking that if we had a specialized vector append API, that guaranteed ownership of the buffer, we could throw out all of these bounds checks safely (in handleSafe, and ArrowBuf.chk), as well as have a restricted API to optimize building buffers out of. Something like the original [IntWriter](https://arrow.apache.org/docs/java/reference/org/apache/arrow/vector/complex/writer/BaseWriter.ScalarWriter.html) interface, but with stronger ownership semantics around the ArrowBuf? Is that something you think is possible/desirable?\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T22:46:57.421+0000",
                    "updated": "2020-09-18T22:46:57.421+0000",
                    "started": "2020-09-18T22:46:57.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486421",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan edited a comment on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-695114615\n\n\n   @liyafan82 Thanks for taking a look!\r\n   \r\n   > I am a little surprised that JIT failed to transform the integer divistion to a right shift, as it can be easily deduced that the type width for an IntVector is always 4.\r\n   \r\n   I was pretty surprised too - it turned out that a huge chunk of cycles that we spent serializing data was devoted to this (BaseFixedWidthVector capacity bounds checking) + ArrowBuf bounds checking. This held true across the two/three JDK versions I used, across servers. It was not immediately evident where all the cycles are going on a Java-level profiler, but if you pull out the assembly, I think its quite clear (see the linked JIRA).\r\n   \r\n   > I am thinking about another way: can we simply save the value/validity buffer capacities? so we can further improve the performance by avoiding the if branch in getValueBufferValueCapacity and the if branch in capAtMaxInt\r\n   \r\n   I did this for a prototype internally - I think this is faster, but if done before even calling setSafe, implicitly assumes that no-one else is writing to the ArrowBuf.\r\n   \r\n   If I remember correctly, if we read the capacities directly and do these checks in getValueBufferValueCapacity, deeper in the setSafe call, performance was marginally comparable (at least within <20%?). However, this needs to be checked again. I wasn't too concerned about this, as we run with arrow.enable_unsafe_memory_access=false` set. We might have been able to make it faster on this front of checking the capacity, but its waaaay into diminishing returns (for us at least).\r\n   \r\n   We also lost a lot of performance over keeping `arrow.enable_unsafe_memory_access=false`, and I was wondering if there was a better way of eliminating all bounds checks, both on the BaseFixedWidthVector, and in ArrowBuf.chk.\r\n   \r\n   When we run our production code with `arrow.enable_unsafe_memory_access=false`, the breakdowns of the setSafe CPU usage (before this patch) according to an async sampling profiler are as following:\r\n   \r\n   53% for handleSafe (which this patch is expected to remove the majority of)\r\n   ~30% for the ArrowBuf.chk checks in the `set(index, value)` code.\r\n   \r\n   I was thinking that if we had a specialized vector append API, that guaranteed ownership of the buffer, we could throw out all of these bounds checks safely (in handleSafe, and ArrowBuf.chk), as well as have a restricted API to optimize building buffers out of. Something like the original [IntWriter](https://arrow.apache.org/docs/java/reference/org/apache/arrow/vector/complex/writer/BaseWriter.ScalarWriter.html) interface, but with stronger ownership semantics around the ArrowBuf? Is that something you think is possible/desirable?\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T23:05:59.364+0000",
                    "updated": "2020-09-18T23:05:59.364+0000",
                    "started": "2020-09-18T23:05:59.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486426",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-695122375\n\n\n   > I am thinking about another way: can we simply save the value/validity buffer capacities? so we can further improve the performance by avoiding the if branch in getValueBufferValueCapacity and the if branch in capAtMaxInt\r\n   \r\n   Let me check again on this; I might be wrong about the performance differences and safety if we aggressively cache; it was something I gave less thought to because of our specific use case (`arrow.enable_unsafe_memory_access=false`), but it might be more beneficial to do in general.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T23:07:32.680+0000",
                    "updated": "2020-09-18T23:07:32.680+0000",
                    "started": "2020-09-18T23:07:32.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486427",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-695873809\n\n\n   @josiahyan Thank you for the additional details. \r\n   \r\n   I think one of your concern is that, the underlying buffers can be changed unintentionally, which lefts the vector in an inconsistent state (Please correct me if my understanding is incorrect, or if I have missed something). \r\n   \r\n   IMO, we encourage users to manipulate vectors through standard APIs (e.g. get/set/setSafe, etc. ). However, unintended manipulations are always possible, because the getXXXBuffer APIs are there. More fundamentally, the buffers are all based on off-heap memory, so if the user has the memory address, they can manipulate the buffer data at will. \r\n   \r\n   So I think what we should do is to design and implement the APIs to try making vectors in a consistent state, and if the vector falls into an inconsistent state, we should trap it with minimal cost. \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T02:19:47.081+0000",
                    "updated": "2020-09-21T02:19:47.081+0000",
                    "started": "2020-09-21T02:19:47.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486738",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/486877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696065926\n\n\n   Yep, I'm worried that the buffers can be changed unintentionally/intentionally, and as you pointed out, needs to be always checked for and trapped.\r\n   \r\n   I'm wondering if the overhead of these checks are just inherent in such a flexible API, and quite significant (for ArrowBuf without flipping the `arrow.enable_unsafe_memory_access=false` flag globally, it does consume ~30% of CPU when `setSafe`ing), and worth removing for the general use-case. (where this by a Builder API that defers generalization, or a special (local) ArrowBuf mode if possible).\r\n   \r\n   We could jump into the unsafe APIs, like [this](https://github.com/apache/iceberg/issues/9#issuecomment-517486998) [code](https://github.com/apache/iceberg/blob/master/arrow/src/main/java/org/apache/iceberg/arrow/vectorized/parquet/VectorizedParquetDefinitionLevelReader.java#L107), but a more generic out-of-the-box solution that makes the happy path for serialization easy would be nice. Ideally, we'd remove at least ~70% of the CPU cost of calling `setSafe` before this patch, for users that only want to append data, with an eye towards pushing it down even more given the simpler code.\r\n   \r\n   I'm less familiar with the Arrow code than I'd like to be though (right now), and I'm not sure if there are other ways around this that don't involve doing `arrow.enable_unsafe_memory_access=true`, and various other tweaks. There is  inherent value in keeping only one or two (high level) interfaces for building Arrow buffers, and optimizing for the common use case.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T11:54:20.977+0000",
                    "updated": "2020-09-21T11:54:20.977+0000",
                    "started": "2020-09-21T11:54:20.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486877",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696361215\n\n\n   @josiahyan , out of curiosity, were other patterns impactful to perf (further specialization say, per vector type) or were they basically the same improvement as this generic implementation?\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T20:38:24.556+0000",
                    "updated": "2020-09-21T20:38:24.556+0000",
                    "started": "2020-09-21T20:38:24.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487255",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696381588\n\n\n   @jacques-n I haven't done very much investigation on other speedups - I just happened to notice performance irregularities as compared to our other (legacy) codepaths, and realized that we were spending a significant number of cycles dividing integers. If you're referring to the linked code, I have nothing to do with the Iceberg project. I just happened to chance upon this code.\r\n   \r\n   I haven't investigated further patterns, although I'd want to do that in the future, time permitting.\r\n   \r\n   I think it would be possible to measure the upper bound of performance, and address some of the questions (including that) in this discussion, if we did the following benchmarks side-by-side over the given variants:\r\n   * the original IntBenchmarks\r\n   * save the value/validity buffer capacities outside arrow code, and then manually resize, calling .set\r\n   * save the overall value capacity in BaseFixedWidthVector.getValueCapacity, and force recomputation based on valueBuffer.capacity()/validityBuffer.capacity() (what I understand of @liyafan82 's suggestion that avoids invalidation issues around the underlying buffers)\r\n   * Call the despecialized putLong directly (The code that was linked in Iceberg) \r\n   \r\n   The second option should highlight the upper bound of performance reachable by aggressively caching.\r\n   The last option should highlight the upper bound of performance reachable by de-specialization (and therefore removing the virtual call chain).\r\n   \r\n   I'll write and run these later today.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T21:15:59.781+0000",
                    "updated": "2020-09-21T21:15:59.781+0000",
                    "started": "2020-09-21T21:15:59.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487273",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan edited a comment on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696381588\n\n\n   @jacques-n I haven't done very much investigation on other speedups - I just happened to notice performance irregularities as compared to our other (legacy) codepaths, and realized that we were spending a significant number of cycles dividing integers. If you're referring to the linked code, I have nothing to do with the Iceberg project. I just happened to chance upon this code.\r\n   \r\n   I haven't investigated further patterns, although I'd want to do that in the future, time permitting.\r\n   \r\n   I think it would be possible to measure the upper bound of performance, and address some of the questions (including that) in this discussion, if we did the following benchmarks side-by-side over the given variants:\r\n   * the original IntBenchmarks\r\n   * save the value/validity buffer capacities outside arrow code, and then manually resize, calling .set\r\n   * save the overall value capacity in BaseFixedWidthVector.getValueCapacity, and force recomputation based on valueBuffer.capacity()/validityBuffer.capacity() (what I understand of @liyafan82 's suggestion that avoids invalidation issues around the underlying buffers)\r\n   * Call the specialized putLong directly (The code that was linked in Iceberg) \r\n   \r\n   The second option should highlight the upper bound of performance reachable by aggressively caching.\r\n   The last option should highlight the upper bound of performance reachable by de-specialization (and therefore removing the virtual call chain).\r\n   \r\n   I'll write and run these later today.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T23:24:53.398+0000",
                    "updated": "2020-09-21T23:24:53.398+0000",
                    "started": "2020-09-21T23:24:53.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487334",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696450195\n\n\n   Here are the results of my testing. I'm not really that familiar with Arrow, and some of the code is sloppy, so please check that what I'm doing matches up with your expectations! I didn't check whether the benchmarks were really measuring something realistic either (although I have no specific reason to doubt that).\r\n   \r\n   All benchmarks were compiled and run on the repo-provided java-14-openjdk-amd64 on Ubuntu 20.04. I've disabled HT, CPU freq scaling, but did not pin CPU cores.\r\n   \r\n   Representative CLI invocation:\r\n   ```\r\n   java -Darrow.enable_unsafe_memory_access=true -jar ../arrow/java/performance/target/benchmarks.jar '.*IntBenchmarks.setIntDirectly' -w 2 -r 2 -f 2`\r\n   \r\n   # JMH version: 1.21\r\n   # VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n   # VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n   # VM options: -Darrow.enable_unsafe_memory_access=true\r\n   # Warmup: 5 iterations, 2 s each\r\n   # Measurement: 5 iterations, 2 s each\r\n   # Timeout: 10 min per iteration\r\n   # Threads: 1 thread, will synchronize iterations\r\n   # Benchmark mode: Average time, time/op\r\n   # Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\n   ```\r\n   \r\n   * Option 1: the original IntBenchmarks\r\n   * Option 2: save the value/validity buffer capacities in a wrapper around IntVector, and then manually resize, calling .set\r\n   * Option 3: save the overall value capacity in BaseFixedWidthVector.getValueCapacity, and force recomputation based on valueBuffer.capacity() and validityBuffer.capacity() (what I understand of @liyafan82 's suggestion that avoids invalidation issues around the underlying buffers)\r\n   * Option 4: Call the despecialized putLong directly (The code that was linked in Iceberg, with more code to handle validity buffer)\r\n   \r\n   master w/o this patch: `IntBenchmarks.setIntDirectly  avgt   10  11.605 \u00b1 0.433  us/op`\r\n   Option 1: `IntBenchmarks.setIntDirectly   avgt   10  4.670 \u00b1 0.095  us/op`\r\n   Option 2: `IntBenchmarks.setIntDirectlyWithSpecializedWriterCachedCapacities  avgt   10  2.228 \u00b1 0.073  us/op`\r\n   Option 3: `IntBenchmarks.setIntDirectly  avgt   10  3.446 \u00b1 0.022  us/op`\r\n   Option 4: `IntBenchmarks.setIntDirectlyDirectlyWithPutInt  avgt   10  1.887 \u00b1 0.009  us/op`\r\n   \r\n   Code for Option 1:\r\n   This patch, with the master benchmark code, as extracted:\r\n   ```\r\n   +@State(Scope.Benchmark)\r\n   +public class IntBenchmarks {\r\n   +\r\n   +  private static final int VECTOR_LENGTH = 1024;\r\n   +\r\n   +  private static final int ALLOCATOR_CAPACITY = 1024 * 1024;\r\n   +\r\n   +  private BufferAllocator allocator;\r\n   +\r\n   +  private IntVector vector;\r\n   +\r\n   +  @Setup\r\n   +  public void prepare() {\r\n   +    allocator = new RootAllocator(ALLOCATOR_CAPACITY);\r\n   +    vector = new IntVector(\"vector\", allocator);\r\n   +    vector.allocateNew(VECTOR_LENGTH);\r\n   +    vector.setValueCount(VECTOR_LENGTH);\r\n   +  }\r\n   ...\r\n   +  @Benchmark\r\n   +  @BenchmarkMode(Mode.AverageTime)\r\n   +  @OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n   +  public void setIntDirectly() {\r\n   +    for (int i = 0; i < VECTOR_LENGTH; i++) {\r\n   +      vector.setSafe(i, i % 3 == 0 ? 0 : 1, i);\r\n   +    }\r\n   +  }\r\n   ```\r\n   \r\n   Code for Option 2:\r\n   ```\r\n   diff --git a/java/performance/src/main/java/org/apache/arrow/vector/CapacityCachingIntVector.java b/java/performance/src/main/java/org/apache/arrow/vector/CapacityCachingIntVector.java\r\n   new file mode 100644\r\n   index 000000000..c4201dea8\r\n   --- /dev/null\r\n   +++ b/java/performance/src/main/java/org/apache/arrow/vector/CapacityCachingIntVector.java\r\n   @@ -0,0 +1,27 @@\r\n   +package org.apache.arrow.vector;\r\n   +\r\n   +public class CapacityCachingIntVector {\r\n   +    private final IntVector backingVector;\r\n   +    private long backingVectorCachedCapacity;\r\n   +\r\n   +    public CapacityCachingIntVector(IntVector backing) {\r\n   +        this.backingVector = backing;\r\n   +        synchronizeCapacity();\r\n   +    }\r\n   +\r\n   +    public void setSafe(int index, int isSet, int value) {\r\n   +        if (index >= backingVectorCachedCapacity) {\r\n   +            // unlikely\r\n   +            this.backingVector.setSafe(index, isSet, value);  // force a resize\r\n   +            synchronizeCapacity();\r\n   +            return;\r\n   +        }\r\n   +        // likely\r\n   +        this.backingVector.set(index, isSet, value);\r\n   +        return;\r\n   +    }\r\n   +\r\n   +    private void synchronizeCapacity() {\r\n   +        backingVectorCachedCapacity = backingVector.getValueCapacity();\r\n   +    }\r\n   +}\r\n   ```\r\n   \r\n   Code for Option 3:\r\n   ```\r\n   @@ -182,11 +187,19 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\n       */\r\n      @Override\r\n      public int getValueCapacity() {\r\n   -    return Math.min(getValueBufferValueCapacity(), getValidityBufferValueCapacity());\r\n   +    final long valueBufferCapacity = valueBuffer.capacity();\r\n   +    final long validityBufferCapacity = validityBuffer.capacity();\r\n   +    if (underlyingValueBufferCapacityCached != valueBufferCapacity || underlyingValidityBufferCapacityCached != validityBufferCapacity) {\r\n   +      // trap modification\r\n   +      underlyingValueBufferCapacityCached = valueBufferCapacity;\r\n   +      underlyingValidityBufferCapacityCached = validityBufferCapacity;\r\n   +      valueCapacityCached = Math.min(getValueBufferValueCapacity(), getValidityBufferValueCapacity());\r\n   +    }\r\n   +    return valueCapacityCached;\r\n      }\r\n    \r\n      private int getValueBufferValueCapacity() {\r\n   -    return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n   +      return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n      }\r\n   ```\r\n   \r\n   Code for Option 4:\r\n   ```\r\n   +  @Benchmark\r\n   +  @BenchmarkMode(Mode.AverageTime)\r\n   +  @OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n   +  public void setIntDirectlyDirectlyWithPutInt() {\r\n   +    ArrowBuf dataBuffer = vector.getDataBuffer();\r\n   +    ArrowBuf validityBuffer = vector.getValidityBuffer();\r\n   +    long validityBatch = 0;\r\n   +    int i;\r\n   +    for (i = 0; i < VECTOR_LENGTH; i++) {\r\n   +      if (i % 64 == 0 && i != 0) {\r\n   +        // time to flush to validity buffer\r\n   +        // this implementation does not consider endianness, it only emulates flushing an incrementally built bit vector\r\n   +        validityBuffer.setLong((i - 1)>> 3, validityBatch);\r\n   +      }\r\n   +      dataBuffer.setInt(IntVector.TYPE_WIDTH * i, i);\r\n   +      validityBatch = (validityBatch << 1) | (i % 3 == 0 ? 0 : 1);\r\n   +    }\r\n   +    if (i % 64 > 0) {\r\n   +      // time to flush to validity buffer\r\n   +      // this implementation does not consider endianness or OOB access, it only emulates flushing an incrementally built bit vector\r\n   +      validityBuffer.setLong(i >> 3, validityBatch);\r\n   +    }\r\n   +  }\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:25:35.357+0000",
                    "updated": "2020-09-22T00:25:35.357+0000",
                    "started": "2020-09-22T00:25:35.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487350",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696452697\n\n\n   @lidavidm @liyafan82 @jacques-n \r\n   Interpreting the results:\r\n   This patch could be improved (performance wise) by more aggressive caching (option 3), at the potential expense of additional state, for an additional 35% speedup above this submitted patch. @liyafan82 @lidavidm I was wrong about the performance gain - I guess this speedup might be worth having? Please let me know if you prefer this variant, subject to the given tradeoff. I'll clean it up and resubmit if so.\r\n   \r\n   An append-only interface, trivially implemented, but assuming buffer ownership (Option 3), could get (up to) an additional 54% above the improved version of this patch.\r\n   \r\n   A type specialized variant, presumably created by templating out the various types (Option 4), could get (up to, these are very very rough results, it hasn't been verified where this speedup is coming from, it might just be the bit setting code) 18% above the specialized append-only interface.\r\n   \r\n   It might be possible to dive into the ASM to figure out what's actually being generated, but that might be a tad extreme for now (and unstable).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:35:07.035+0000",
                    "updated": "2020-09-22T00:35:07.035+0000",
                    "started": "2020-09-22T00:35:07.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487355",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan edited a comment on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696452697\n\n\n   @lidavidm @liyafan82 @jacques-n \r\n   Interpreting the results:\r\n   This patch could be improved (performance wise) by more aggressive caching (option 3), at the potential expense of additional state, for an additional 35% speedup above this submitted patch. @liyafan82 @lidavidm I was wrong about the performance gain - I guess this speedup might be worth having? Please let me know if you prefer this variant, subject to the given tradeoff. I'll clean it up and resubmit if so.\r\n   \r\n   An append-only interface, trivially implemented, but assuming buffer ownership (Option 2), could get (up to) an additional 54% above the improved version of this patch.\r\n   \r\n   A type specialized variant, presumably created by templating out the various types (Option 4), could get (up to, these are very very rough results, it hasn't been verified where this speedup is coming from, it might just be the bit setting code) 18% above the specialized append-only interface.\r\n   \r\n   It might be possible to dive into the ASM to figure out what's actually being generated, but that might be a tad extreme for now (and unstable).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:35:30.248+0000",
                    "updated": "2020-09-22T00:35:30.248+0000",
                    "started": "2020-09-22T00:35:30.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487356",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696453930\n\n\n   > @lidavidm @liyafan82 @jacques-n\r\n   > Interpreting the results:\r\n   > This patch could be improved (performance wise) by more aggressive caching (option 3), at the potential expense of additional state, for an additional 35% speedup above this submitted patch. @liyafan82 @lidavidm I was wrong about the performance gain - I guess this speedup might be worth having? Please let me know if you prefer this variant, subject to the given tradeoff. I'll clean it up and resubmit if so.\r\n   > \r\n   > An append-only interface, trivially implemented, but assuming buffer ownership (Option 3), could get (up to) an additional 54% above the improved version of this patch.\r\n   > \r\n   > A type specialized variant, presumably created by templating out the various types (Option 4), could get (up to, these are very very rough results, it hasn't been verified where this speedup is coming from, it might just be the bit setting code) 18% above the specialized append-only interface.\r\n   > \r\n   > It might be possible to dive into the ASM to figure out what's actually being generated, but that might be a tad extreme for now (and unstable).\r\n   \r\n   I'm not clear why you're attracted to option 3 over option 2. \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:40:16.008+0000",
                    "updated": "2020-09-22T00:40:16.008+0000",
                    "started": "2020-09-22T00:40:16.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487358",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696455205\n\n\n   Sorry, did you mean the specialized append interface (as Option 2), that assumes buffer ownership? I mislabeled the options in the paragraph you quoted (now corrected).\r\n   \r\n   I'm not familiar with the code, but I don't think it's safe to implement, if users can access the underlying buffers via `getDataBuffer()`? Option 2 was proposed as the (final) potentially desired interface that wasn't possible without more significant changes.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:46:07.597+0000",
                    "updated": "2020-09-22T00:46:07.597+0000",
                    "started": "2020-09-22T00:46:07.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487363",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "josiahyan commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696456877\n\n\n   *Option 2 being the best case of the append-only builder style interface; something like IntWriter, where direct access to the buffer was not permissible, and so its safe to do capacity checks like that.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T00:53:43.277+0000",
                    "updated": "2020-09-22T00:53:43.277+0000",
                    "started": "2020-09-22T00:53:43.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487373",
                    "issueId": "13326894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/worklog/487377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8214:\nURL: https://github.com/apache/arrow/pull/8214#issuecomment-696458726\n\n\n   I think there are two opportunities here - simply optimizing setSafe, which can be done by either specializing for the power-of-two size where possible, or by caching sizes (option 1/option 3); and considering a separate builder API that can also provide performance improvements, which I think can be considered separately.\r\n   \r\n   As for whether to cache sizes (option 3) or optimize for power-of-two lengths only, I would prefer to cache sizes as it's more general and as shown here, faster in microbenchmarks. However there could ecosystem code that expects to be able to reallocate buffers manually - if so, this would be a breaking change, and so I'd rather take the smaller/guaranteed win.\r\n   \r\n   (Option 4 is essentially inlining an optimized builder API into the benchmark, no?)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T01:02:11.208+0000",
                    "updated": "2020-09-22T01:02:11.208+0000",
                    "started": "2020-09-22T01:02:11.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487377",
                    "issueId": "13326894"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 37800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@17b77795[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@376e9033[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56e9b26e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@15c55f88[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eb9162b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@37b59580[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cd42bda[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@135208d7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@652c5cd8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7eaecc68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73a9b29c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@70be088e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 28 02:09:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-28T02:09:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9965/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-10T15:17:01.000+0000",
        "updated": "2020-09-28T15:14:50.000+0000",
        "timeoriginalestimate": null,
        "description": "It turns out that setSafe performs a very expensive integer division when trying to compute buffer capacity; specifically, it divides by the field size, which isn't hardcoded. Although it is typically a power of 2 for alignment reasons, this doesn't compile down to a bitshift.\r\n\r\nThis is done here: https://github.com/apache/arrow/blob/175c53d0b17708312bfd1494c65824f690a6cc9a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java#L189\r\n \r\nForcing a bitshift operation results in a large speedup in benchmarks. When turning off bounds checks (which affects another portion of set), microbenchmarks indicate that setting the elements of a vector via setSafe is increased by ~174% (almost 3 times faster). With bounds checks on, this is reduced to a 73% increase (Amdahl's).\r\n\r\nWe use setSafe right now in a hot loop to set Arrow vectors in an internal data-intensive service (for now), although in the future, we would prefer a more specialized vector append interface to skip all the other indirection and bit manipulation instructions, while not directly manipulating the exposed (native) memory.\r\n\r\nHere is the detailed analysis:\r\nTests were run on a machine with an Intel 8700k. Compiled with JDK 8, and run with the latest repo-provided JDK 14 on Ubuntu 20.04.\r\n{code}\r\nBenchmark results with arrow.enable_unsafe_memory_access=false, patch NOT applied\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=false\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\n*snip*\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 13.853 \u00b1 0.058 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 15.045 \u00b1 0.040 us/op\r\nIntBenchmarks.setWithWriter avgt 15 21.621 \u00b1 0.197 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=false, patch applied\r\n\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=false\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\n*snip*\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 7.964 \u00b1 0.030 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 9.145 \u00b1 0.031 us/op\r\nIntBenchmarks.setWithWriter avgt 15 8.029 \u00b1 0.051 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=true, patch NOT applied\r\n\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=true\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectl\r\n\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 9.563 \u00b1 0.335 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 9.266 \u00b1 0.064 us/op\r\nIntBenchmarks.setWithWriter avgt 15 18.806 \u00b1 0.154 us/op\r\n\r\nBenchmark results with arrow.enable_unsafe_memory_access=true, patch applied\r\n# JMH version: 1.21\r\n# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7-Ubuntu-1ubuntu1\r\n# VM invoker: /usr/lib/jvm/java-14-openjdk-amd64/bin/java\r\n# VM options: -Darrow.enable_unsafe_memory_access=true\r\n# Warmup: 5 iterations, 10 s each\r\n# Measurement: 5 iterations, 10 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.apache.arrow.vector.IntBenchmarks.setIntDirectly\r\nBenchmark Mode Cnt Score Error Units\r\nIntBenchmarks.setIntDirectly avgt 15 3.490 \u00b1 0.175 us/op\r\nIntBenchmarks.setWithValueHolder avgt 15 3.806 \u00b1 0.015 us/op\r\nIntBenchmarks.setWithWriter avgt 15 5.490 \u00b1 0.304 us/op\r\n{code}\r\n\r\nI determined this by running the built-in Arrow JMH benchmarks on an 8700k. I left the CPU frequency scaling in the default state. The numbers seemed off for setting a value. I reran the benchmarks with the `prof=perfasm` option in JMH, which emitted annotated assembly for detected hotspots. Here is the relevant section:\r\n\r\n{code}\r\n0.06% \u2502 \u2502\u2502 0x00007f5a7f7beb6f: mov 0x30(%r12,%rsi,8),%rax ; implicit exception: dispatches to 0x00007f5a7f7bef28\r\n\u2502 \u2502\u2502 ;*getfield length {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.memory.ArrowBuf::capacity@1 (line 138)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@4 (line 189)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n0.14% \u2502 \u2502\u2502 0x00007f5a7f7beb74: movsxd 0x10(%r12,%rdi,8),%rcx ;*i2l {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@11 (line 189)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n*snip*\r\n1.43% \u2502\u2502 \u2502 \u2502\u2502 0x00007f5a7f7beb9b: idivq %rcx,%rax ;*ldiv {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@12 (line 189)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502\u2502 \u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n68.16% \u2502\u2502 \u2198 \u2502\u2502 0x00007f5a7f7beb9e: cmp $0x7fffffff,%rax\r\n\u2502\u2502 \u2502\u2502 0x00007f5a7f7beba5: jnle 0x7f5a7f7bec8c ;*ifgt {reexecute=0 rethrow=0 return_oop=0}\r\n\u2502\u2502 \u2502\u2502 ; - java.lang.Math::min@3 (line 1552)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.memory.util.LargeMemoryUtil::capAtMaxInt@4 (line 44)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueBufferValueCapacity@13 (line 189)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::getValueCapacity@1 (line 185)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.BaseFixedWidthVector::handleSafe@2 (line 817)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntVector::setSafe@2 (line 223)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.IntBenchmarks::setWithValueHolder@51 (line 77)\r\n\u2502\u2502 \u2502\u2502 ; - org.apache.arrow.vector.generated.IntBenchmarks_setWithValueHolder_jmhTest::setWithValueHolder_avgt_jmhStub@15 (line 234)\r\n{code}\r\n\r\nThe hot instruction is misattributed, probably due to event instruction skid. But integer division is known to be expensive to implement. We can verify this with Agner Fog's instruction tables: https://www.agner.org/optimize/instruction_tables.pdf . Searching for idiv gives high numbers in the table provided, as expected.\r\n\r\nAfter noting all of this, we can apply the following patch, which produces the speedup as above:\r\n{code}\r\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\nindex ee47f6dd8..0c9a57bf9 100644\r\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\r\n@@ -47,6 +47,7 @@ import io.netty.util.internal.PlatformDependent;\r\npublic abstract class BaseFixedWidthVector extends BaseValueVector\r\nimplements FixedWidthVector, FieldVector, VectorDefinitionSetter {\r\nprivate final int typeWidth;\r\n+ private final int typeWidthAsExactBitShiftOrNegOne;\r\n\r\nprotected int lastValueCapacity;\r\n\r\n@@ -66,6 +67,7 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\npublic BaseFixedWidthVector(Field field, final BufferAllocator allocator, final int typeWidth) {\r\nsuper(allocator);\r\nthis.typeWidth = typeWidth;\r\n+ this.typeWidthAsExactBitShiftOrNegOne = log2ExactOrNeg1(typeWidth);\r\nthis.field = field;\r\nvalueCount = 0;\r\nallocationMonitor = 0;\r\n@@ -186,7 +188,13 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\n}\r\n\r\nprivate int getValueBufferValueCapacity() {\r\n- return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n+ if (typeWidthAsExactBitShiftOrNegOne == -1) {\r\n+ // Slow path - integral division is very very expensive, and code here is part of\r\n+ // setSafe's hot loop\r\n+ // The JVM did not optimize integral division into bit shifts\r\n+ return capAtMaxInt(valueBuffer.capacity() / typeWidth);\r\n+ }\r\n+ return capAtMaxInt(valueBuffer.capacity() >> typeWidthAsExactBitShiftOrNegOne);\r\n}\r\n\r\nprivate int getValidityBufferValueCapacity() {\r\n@@ -903,4 +911,12 @@ public abstract class BaseFixedWidthVector extends BaseValueVector\r\nreturn visitor.visit(this, value);\r\n}\r\n\r\n+ private int log2ExactOrNeg1(int x) {\r\n+ final boolean isPowerOfTwo = x > 0 & (x & (x - 1)) == 0;\r\n+ if (!isPowerOfTwo) {\r\n+ return -1;\r\n+ }\r\n+ return (Integer.SIZE - 1) - Integer.numberOfLeadingZeros(x);\r\n+ }\r\n+\r\n}\r\n{code}\r\n\r\nAttached is the generated assembly as printed by JMH, before and after. I renamed some variables for clarity after generating the results, but the logic is unchanged.\r\n\r\nI also did a quick test with JDK 8 - this was where I originally ran the benchmarks. The idiv instruction was present there too.\r\n\r\nAn initial version of this patch cached the value - this produces about the same speedup.\r\n\r\nAre people fine with this approach?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 37800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13011340",
                "id": "13011340",
                "filename": "after_patch_profile_prof_perfasm_unsafe_true",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
                    "name": "josiahyan",
                    "key": "josiahyan",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                    },
                    "displayName": "Josiah",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2020-09-10T15:19:24.801+0000",
                "size": 483616,
                "mimeType": "text/html",
                "content": "https://issues.apache.org/jira/secure/attachment/13011340/after_patch_profile_prof_perfasm_unsafe_true"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13011339",
                "id": "13011339",
                "filename": "before_patch_profile_prof_perfasm_unsafe_true",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=josiahyan",
                    "name": "josiahyan",
                    "key": "josiahyan",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                    },
                    "displayName": "Josiah",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2020-09-10T15:19:43.906+0000",
                "size": 313219,
                "mimeType": "text/html",
                "content": "https://issues.apache.org/jira/secure/attachment/13011339/before_patch_profile_prof_perfasm_unsafe_true"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Buffer capacity calculations are slow for fixed-width vectors",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326894/comment/17202962",
                    "id": "17202962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "Issue resolved by pull request 8214\n[https://github.com/apache/arrow/pull/8214]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-09-28T02:09:24.620+0000",
                    "updated": "2020-09-28T02:09:24.620+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ihkg:",
        "customfield_12314139": null
    }
}