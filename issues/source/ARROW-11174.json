{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13350968",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968",
    "key": "ARROW-11174",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12611225",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611225",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13301900",
                    "key": "ARROW-8630",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13301900",
                    "fields": {
                        "summary": "[C++][Dataset] Pass schema including all materialized fields to catch CSV edge cases",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12608874",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608874",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13359708",
                    "key": "ARROW-11704",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13359708",
                    "fields": {
                        "summary": "[R] Wire up dplyr::mutate() for datasets",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11174/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/554889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532\n\n\n   [x] Be more explicit about scan time schemas: dataset (aka reader) and projected schemas are independent\r\n   [x] Ensure field metadata and other attributes are preserved by projection exprs\r\n   [x] Replace RecordBatchProjector with a projection exprs\r\n   [ ] Rewrite ScannerBuilder::Project to accept arbitrary projections (not just subset-of-fields)\r\n   [ ] Ensure that stacked projection exprs are simplifiable to a single project expr\r\n   [ ] Refactor UnionDataset to support reconciling its children with projections\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-19T19:52:33.003+0000",
                    "updated": "2021-02-19T19:52:33.003+0000",
                    "started": "2021-02-19T19:52:33.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554889",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/554890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#issuecomment-782304056\n\n\n   https://issues.apache.org/jira/browse/ARROW-11174\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-19T19:52:46.401+0000",
                    "updated": "2021-02-19T19:52:46.401+0000",
                    "started": "2021-02-19T19:52:46.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554890",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/556597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r581365819\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -63,9 +63,15 @@ const FunctionDoc list_value_length_doc{\n Result<ValueDescr> ProjectResolve(KernelContext* ctx,\n                                   const std::vector<ValueDescr>& descrs) {\n   const auto& names = OptionsWrapper<ProjectOptions>::Get(ctx).field_names;\n-  if (names.size() != descrs.size()) {\n-    return Status::Invalid(\"project() was passed \", names.size(), \" field \", \"names but \",\n-                           descrs.size(), \" arguments\");\n+  const auto& nullable = OptionsWrapper<ProjectOptions>::Get(ctx).field_nullability;\n+  const auto& metadata = OptionsWrapper<ProjectOptions>::Get(ctx).field_metadata;\n+\n+  if (names.size() != descrs.size() || nullable.size() != descrs.size() ||\n+      metadata.size() != descrs.size()) {\n+    return Status::Invalid(\"project() was passed \", descrs.size(), \" arguments but \",\n+                           names.size(), \" field names, \", nullable.size(),\n+                           \" nullability bits, and \", metadata.size(),\n+                           \" nullability bits.\");\n\nReview comment:\n       `\" nullability bits.\"` -> `\" metadata.\"\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv_test.cc\n##########\n@@ -130,12 +139,16 @@ TEST_F(TestCsvFileFormat, IsSupported) {\n   ASSERT_OK_AND_ASSIGN(supported, format_->IsSupported(*source));\n   ASSERT_EQ(supported, false);\n \n-  source = GetFileSource();\n+  source = GetFileSource(R\"(f64\n+1.0\n+\n+N/A\n+2)\");\n   ASSERT_OK_AND_ASSIGN(supported, format_->IsSupported(*source));\n   EXPECT_EQ(supported, true);\n }\n \n-TEST_F(TestCsvFileFormat, DISABLED_NonMaterializedFieldWithDifferingTypeFromInferred) {\n+TEST_F(TestCsvFileFormat, NonMaterializedFieldWithDifferingTypeFromInferred) {\n\nReview comment:\n       What does NonMaterialized mean in this context?  Maybe `ProjectedFieldDifferingTypeFromInferred`?\n\n##########\nFile path: cpp/src/arrow/dataset/file_ipc_test.cc\n##########\n@@ -278,38 +289,32 @@ TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n }\n \n TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n-  auto reader_without_i32 = GetRecordBatchReader(\n-      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())}));\n-\n-  auto reader_without_f64 = GetRecordBatchReader(\n-      schema({field(\"i64\", int64()), field(\"f32\", float32()), field(\"i32\", int32())}));\n-\n-  auto reader =\n-      GetRecordBatchReader(schema({field(\"f64\", float64()), field(\"i64\", int64()),\n-                                   field(\"f32\", float32()), field(\"i32\", int32())}));\n-\n-  schema_ = reader->schema();\n-  opts_ = ScanOptions::Make(schema_);\n-  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  SetSchema({f64, i64, f32, i32});\n+  ASSERT_OK(SetProjection(opts_.get(), {\"f64\"}));\n   opts_->filter = equal(field_ref(\"i32\"), literal(0));\n \n+  auto reader_without_i32 = GetRecordBatchReader(schema({f64, i64, f32}));\n+  auto reader_without_f64 = GetRecordBatchReader(schema({i64, f32, i32}));\n+  auto reader = GetRecordBatchReader(schema({f64, i64, f32, i32}));\n+\n   auto readers = {reader.get(), reader_without_i32.get(), reader_without_f64.get()};\n   for (auto reader : readers) {\n     auto source = GetFileSource(reader);\n     ASSERT_OK_AND_ASSIGN(auto fragment, format_->MakeFragment(*source));\n \n-    // NB: projector is applied by the scanner; Fragment does not evaluate it.\n-    // We will not drop \"i32\" even though it is not in the projector's schema.\n+    // NB: projection is applied by the scanner; FileFragment does not evaluate it so\n+    // we will not drop \"i32\" even though it is not projected since we need it for\n+    // filtering\n     //\n     // in the case where a file doesn't contain a referenced field, we won't\n-    // materialize it (the filter/projector will populate it with nulls later)\n+    // materialize it as nulls later\n\nReview comment:\n       The old comment made more sense to me.  Doesn't the projection still populate missing fields with null?\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_test.cc\n##########\n@@ -794,7 +691,7 @@ TEST(TestDictPartitionColumn, SelectPartitionColumnFilterPhysicalColumn) {\n   ASSERT_OK_AND_ASSIGN(auto scanner, scan_builder->Finish());\n   ASSERT_OK_AND_ASSIGN(auto table, scanner->ToTable());\n   AssertArraysEqual(*table->column(0)->chunk(0),\n-                    *DictArrayFromJSON(partition_field->type(), \"[0]\", \"[\\\"one\\\"]\"));\n+                    *ArrayFromJSON(partition_field->type(), R\"([\"one\"])\"));\n\nReview comment:\n       So now that the projection schema is separate from the reader schema, if one wants the output to be dictionary encoded they need to specify so in the projection schema, regardless of the underlying source encoding?\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -1135,5 +1175,36 @@ TEST(Expression, SerializationRoundTrips) {\n                          equal(field_ref(\"beta\"), literal(3.25f))}));\n }\n \n+TEST(Projection, AugmentWithNull) {\n+  auto just_i32 = ArrayFromJSON(struct_({kBoringSchema->GetFieldByName(\"i32\")}),\n+                                R\"([{\"i32\": 0}, {\"i32\": 1}, {\"i32\": 2}])\");\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(auto proj, project({field_ref(\"f64\"), field_ref(\"i32\")},\n+                                            {\"projected double\", \"projected int\"})\n+                                        .Bind(*kBoringSchema));\n+\n+    auto expected = ArrayFromJSON(\n+        struct_({field(\"projected double\", float64()), field(\"projected int\", int32())}),\n+        R\"([[null, 0], [null, 1], [null, 2]])\");\n+    ASSERT_OK_AND_ASSIGN(auto actual, ExecuteScalarExpression(proj, just_i32));\n+\n+    AssertDatumsEqual(Datum(expected), actual);\n+  }\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(\n+        auto proj,\n+        project({field_ref(\"f64\")}, {\"projected double\"}).Bind(*kBoringSchema));\n+\n+    // NB: only a scalar was projected, this is *not* automatically broadcast to an array.\n+    ASSERT_OK_AND_ASSIGN(auto expected, StructScalar::Make({MakeNullScalar(float64())},\n\nReview comment:\n       Maybe it's tested elsewhere but what happens if none of the projected fields have any corresponding value?  Will it return a single row of all null?  Or zero rows?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -33,21 +34,10 @@\n namespace arrow {\n namespace dataset {\n \n-ScanOptions::ScanOptions(std::shared_ptr<Schema> schema)\n-    : projector(RecordBatchProjector(std::move(schema))) {}\n-\n-std::shared_ptr<ScanOptions> ScanOptions::ReplaceSchema(\n-    std::shared_ptr<Schema> schema) const {\n-  auto copy = ScanOptions::Make(std::move(schema));\n-  copy->filter = filter;\n-  copy->batch_size = batch_size;\n-  return copy;\n-}\n-\n std::vector<std::string> ScanOptions::MaterializedFields() const {\n\nReview comment:\n       Rename to `ProjectedFields`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -58,31 +58,48 @@ TEST(Project, Scalar) {\n   expected.reset(new StructScalar{\n       {i32, f64, str},\n       struct_({field(\"i\", i32->type), field(\"f\", f64->type), field(\"s\", str->type)})});\n-  Project.field_names = {\"i\", \"f\", \"s\"};\n-  ASSERT_OK_AND_EQ(Datum(expected), Project({i32, f64, str}));\n+  ASSERT_OK_AND_EQ(Datum(expected), Project({i32, f64, str}, {\"i\", \"f\", \"s\"}));\n \n   // Three field names but one input value\n-  ASSERT_RAISES(Invalid, Project({str}));\n+  ASSERT_RAISES(Invalid, Project({str}, {\"i\", \"f\", \"s\"}));\n }\n \n TEST(Project, Array) {\n-  Project.field_names = {\"i\", \"s\"};\n+  std::vector<std::string> field_names{\"i\", \"s\"};\n+\n   auto i32 = ArrayFromJSON(int32(), \"[42, 13, 7]\");\n   auto str = ArrayFromJSON(utf8(), R\"([\"aa\", \"aa\", \"aa\"])\");\n-  ASSERT_OK_AND_ASSIGN(Datum expected,\n-                       StructArray::Make({i32, str}, Project.field_names));\n+  ASSERT_OK_AND_ASSIGN(Datum expected, StructArray::Make({i32, str}, field_names));\n \n-  ASSERT_OK_AND_EQ(expected, Project({i32, str}));\n+  ASSERT_OK_AND_EQ(expected, Project({i32, str}, field_names));\n \n   // Scalars are broadcast to the length of the arrays\n-  ASSERT_OK_AND_EQ(expected, Project({i32, MakeScalar(\"aa\")}));\n+  ASSERT_OK_AND_EQ(expected, Project({i32, MakeScalar(\"aa\")}, field_names));\n \n   // Array length mismatch\n-  ASSERT_RAISES(Invalid, Project({i32->Slice(1), str}));\n+  ASSERT_RAISES(Invalid, Project({i32->Slice(1), str}, field_names));\n+}\n+\n+TEST(Project, NullableMetadataPassedThru) {\n+  auto i32 = ArrayFromJSON(int32(), \"[42, 13, 7]\");\n+  auto str = ArrayFromJSON(utf8(), R\"([\"aa\", \"aa\", \"aa\"])\");\n+\n+  std::vector<std::string> field_names{\"i\", \"s\"};\n+  std::vector<bool> nullability{true, false};\n+  std::vector<std::shared_ptr<const KeyValueMetadata>> metadata = {\n+      key_value_metadata({\"a\", \"b\"}, {\"ALPHA\", \"BRAVO\"}), nullptr};\n+\n+  ASSERT_OK_AND_ASSIGN(auto proj,\n+                       Project({i32, str}, field_names, nullability, metadata));\n+\n+  AssertTypeEqual(*proj.type(), StructType({\n+                                    field(\"i\", int32(), /*nullable=*/true, metadata[0]),\n+                                    field(\"s\", utf8(), /*nullable=*/false, nullptr),\n+                                }));\n\nReview comment:\n       Maybe add a test case where you specify a field is non-nullable but the materialized column has nulls in it (should throw invalid I'd think)\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -115,10 +115,25 @@ struct CompareOptions : public FunctionOptions {\n };\n \n struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n-  explicit ProjectOptions(std::vector<std::string> n) : field_names(std::move(n)) {}\n+  ProjectOptions(std::vector<std::string> n, std::vector<bool> r,\n+                 std::vector<std::shared_ptr<const KeyValueMetadata>> m)\n+      : field_names(std::move(n)),\n+        field_nullability(std::move(r)),\n\nReview comment:\n       Nowhere outside of tests do you specify nullability/metadata.  If a customer wanted a field to have a custom metadata couldn't they just add it on themselves after the fact?  I suppose you could extend my argument to the field names as well but even SQL allows `as XYZ`.\n\n##########\nFile path: cpp/src/arrow/dataset/file_ipc_test.cc\n##########\n@@ -84,9 +85,8 @@ class TestIpcFileFormat : public ArrowIpcWriterMixin {\n   }\n \n   std::unique_ptr<RecordBatchReader> GetRecordBatchReader(\n-      std::shared_ptr<Schema> schema = nullptr) {\n-    return MakeGeneratedRecordBatch(schema ? schema : schema_, kBatchSize,\n-                                    kBatchRepetitions);\n+      std::shared_ptr<Schema> schema) {\n\nReview comment:\n       Can I fallback to the physical schema if I don't want to specify a projection?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_internal.h\n##########\n@@ -127,5 +139,62 @@ inline Result<ScanTaskIterator> GetScanTaskIterator(\n   return MakeFlattenIterator(std::move(maybe_scantask_it));\n }\n \n+inline Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n+inline Status SetProjection(ScanOptions* options, const Expression& projection) {\n+  ARROW_ASSIGN_OR_RAISE(options->projection, projection.Bind(*options->dataset_schema));\n+\n+  if (options->projection.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  options->projected_schema = ::arrow::schema(\n+      checked_cast<const StructType&>(*options->projection.type()).fields(),\n+      options->dataset_schema->metadata());\n+\n+  return Status::OK();\n+}\n+\n+inline Status SetProjection(ScanOptions* options, std::vector<Expression> exprs,\n+                            std::vector<std::string> names) {\n+  compute::ProjectOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n+\n+      // set metadata and nullability for plain field references\n+      ARROW_ASSIGN_OR_RAISE(auto field, ref->GetOne(*options->dataset_schema));\n+      project_options.field_nullability[i] = field->nullable();\n+      project_options.field_metadata[i] = field->metadata();\n+    }\n+  }\n+\n+  return SetProjection(options,\n+                       call(\"project\", std::move(exprs), std::move(project_options)));\n+}\n+\n+inline Status SetProjection(ScanOptions* options, std::vector<std::string> names) {\n+  std::vector<Expression> exprs(names.size());\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    exprs[i] = field_ref(names[i]);\n+  }\n+  return SetProjection(options, std::move(exprs), std::move(names));\n+}\n+\n+inline Status SetFilter(ScanOptions* options, const Expression& filter) {\n+  for (const auto& ref : FieldsInExpression(filter)) {\n+    if (!ref.name()) return NestedFieldRefsNotImplemented();\n+\n+    RETURN_NOT_OK(ref.FindOne(*options->dataset_schema));\n\nReview comment:\n       Doesn't the filter run against the `projected_schema`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-23T22:28:25.562+0000",
                    "updated": "2021-02-23T22:28:25.562+0000",
                    "started": "2021-02-23T22:28:25.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556597",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582024887\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -115,10 +115,25 @@ struct CompareOptions : public FunctionOptions {\n };\n \n struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n-  explicit ProjectOptions(std::vector<std::string> n) : field_names(std::move(n)) {}\n+  ProjectOptions(std::vector<std::string> n, std::vector<bool> r,\n+                 std::vector<std::shared_ptr<const KeyValueMetadata>> m)\n+      : field_names(std::move(n)),\n+        field_nullability(std::move(r)),\n+        field_metadata(std::move(m)) {}\n+\n+  explicit ProjectOptions(std::vector<std::string> n)\n+      : field_names(std::move(n)),\n+        field_nullability(field_names.size(), true),\n+        field_metadata(field_names.size(), NULLPTR) {}\n \n   /// Names for wrapped columns\n   std::vector<std::string> field_names;\n+\n+  /// Nullability bits for wrapped columns\n+  std::vector<bool> field_nullability;\n+\n+  /// Metadata attached to wrapped columns\n+  std::vector<std::shared_ptr<const KeyValueMetadata>> field_metadata;\n\nReview comment:\n       Would it make sense to store a single vector, e.g.:\r\n   ```c++\r\n   struct ProjectField {\r\n     std::string name;\r\n     bool nullable;\r\n     std::shared_ptr<const KeyValueMetadata> metadata;\r\n   \r\n     ProjectField(std::string name, bool nullable=false,\r\n         std::shared_ptr<const KeyValueMetadata> metadata = NULLPTR)\r\n       : name(std::move(name)), nullable(nullable), metadata(std::move(metadata)) {}\r\n   };\r\n   \r\n   std::vector<ProjectField> fields_;\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -210,11 +197,23 @@ class ARROW_DS_EXPORT ScannerBuilder {\n   ///         Schema.\n   Status Project(std::vector<std::string> columns);\n \n+  /// \\brief Set expressions which will be evaluated to produce the materialized columns.\n+  ///\n+  /// Columns which are not referenced may not be loaded from disk.\n\nReview comment:\n       \"from fragments\"?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_internal.h\n##########\n@@ -127,5 +139,62 @@ inline Result<ScanTaskIterator> GetScanTaskIterator(\n   return MakeFlattenIterator(std::move(maybe_scantask_it));\n }\n \n+inline Status NestedFieldRefsNotImplemented() {\n\nReview comment:\n       Is there a reason for making everything inline in this file (rather than define the functions in a `.cc` file)?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -50,26 +50,16 @@ struct ARROW_DS_EXPORT ScanContext {\n   std::shared_ptr<internal::TaskGroup> TaskGroup() const;\n };\n \n-class ARROW_DS_EXPORT ScanOptions {\n- public:\n-  virtual ~ScanOptions() = default;\n-\n-  static std::shared_ptr<ScanOptions> Make(std::shared_ptr<Schema> schema) {\n-    return std::shared_ptr<ScanOptions>(new ScanOptions(std::move(schema)));\n-  }\n-\n-  // Construct a copy of these options with a different schema.\n-  // The projector will be reconstructed.\n-  std::shared_ptr<ScanOptions> ReplaceSchema(std::shared_ptr<Schema> schema) const;\n-\n-  // Filter\n+struct ARROW_DS_EXPORT ScanOptions {\n+  // Filter and projection\n   Expression filter = literal(true);\n+  Expression projection;\n \n-  // Schema to which record batches will be reconciled\n-  const std::shared_ptr<Schema>& schema() const { return projector.schema(); }\n+  // Schema with which batches will be read from disk\n\nReview comment:\n       Better \"from fragments\"?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -210,11 +197,23 @@ class ARROW_DS_EXPORT ScannerBuilder {\n   ///         Schema.\n   Status Project(std::vector<std::string> columns);\n \n+  /// \\brief Set expressions which will be evaluated to produce the materialized columns.\n+  ///\n+  /// Columns which are not referenced may not be loaded from disk.\n+  ///\n+  /// \\param[in] exprs expressions to evaluate to produce columns.\n+  /// \\param[in] names list of names for the resulting columns.\n+  ///\n+  /// \\return Failure if any referenced column does not exists in the dataset's\n+  ///         Schema.\n\nReview comment:\n       \"physical schema\"?\r\n   \n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -50,26 +50,16 @@ struct ARROW_DS_EXPORT ScanContext {\n   std::shared_ptr<internal::TaskGroup> TaskGroup() const;\n };\n \n-class ARROW_DS_EXPORT ScanOptions {\n- public:\n-  virtual ~ScanOptions() = default;\n-\n-  static std::shared_ptr<ScanOptions> Make(std::shared_ptr<Schema> schema) {\n-    return std::shared_ptr<ScanOptions>(new ScanOptions(std::move(schema)));\n-  }\n-\n-  // Construct a copy of these options with a different schema.\n-  // The projector will be reconstructed.\n-  std::shared_ptr<ScanOptions> ReplaceSchema(std::shared_ptr<Schema> schema) const;\n-\n-  // Filter\n+struct ARROW_DS_EXPORT ScanOptions {\n+  // Filter and projection\n   Expression filter = literal(true);\n+  Expression projection;\n \n-  // Schema to which record batches will be reconciled\n-  const std::shared_ptr<Schema>& schema() const { return projector.schema(); }\n+  // Schema with which batches will be read from disk\n+  std::shared_ptr<Schema> dataset_schema;\n\nReview comment:\n       So this is the physical schema?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv_test.cc\n##########\n@@ -130,12 +139,16 @@ TEST_F(TestCsvFileFormat, IsSupported) {\n   ASSERT_OK_AND_ASSIGN(supported, format_->IsSupported(*source));\n   ASSERT_EQ(supported, false);\n \n-  source = GetFileSource();\n+  source = GetFileSource(R\"(f64\n+1.0\n+\n+N/A\n+2)\");\n   ASSERT_OK_AND_ASSIGN(supported, format_->IsSupported(*source));\n   EXPECT_EQ(supported, true);\n }\n \n-TEST_F(TestCsvFileFormat, DISABLED_NonMaterializedFieldWithDifferingTypeFromInferred) {\n+TEST_F(TestCsvFileFormat, NonMaterializedFieldWithDifferingTypeFromInferred) {\n\nReview comment:\n       AFAICT, it means the `str` column from the CSV file is part of the physical schema, but not the dataset schema (indeed the CSV scanner should not \"materialize\" it as a Arrow column).\r\n   \r\n   @bkietz Should you add a check for the physical schema here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -38,18 +39,17 @@ TEST(TestScalarNested, ListValueLength) {\n }\n \n struct {\n- public:\n-  Result<Datum> operator()(std::vector<Datum> args) {\n-    ProjectOptions opts{field_names};\n+  template <typename... Options>\n+  Result<Datum> operator()(std::vector<Datum> args, std::vector<std::string> field_names,\n+                           Options... options) {\n+    ProjectOptions opts{field_names, options...};\n     return CallFunction(\"project\", args, &opts);\n   }\n-\n-  std::vector<std::string> field_names;\n } Project;\n \n TEST(Project, Scalar) {\n   std::shared_ptr<StructScalar> expected(new StructScalar{{}, struct_({})});\n-  ASSERT_OK_AND_EQ(Datum(expected), Project({}));\n+  ASSERT_OK_AND_EQ(Datum(expected), Project({}, {}));\n\nReview comment:\n       Is the second argument an empty ProjectOptions? Something else?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:11:00.702+0000",
                    "updated": "2021-02-24T15:11:00.702+0000",
                    "started": "2021-02-24T15:11:00.702+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557043",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582064969\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -1135,5 +1175,36 @@ TEST(Expression, SerializationRoundTrips) {\n                          equal(field_ref(\"beta\"), literal(3.25f))}));\n }\n \n+TEST(Projection, AugmentWithNull) {\n+  auto just_i32 = ArrayFromJSON(struct_({kBoringSchema->GetFieldByName(\"i32\")}),\n+                                R\"([{\"i32\": 0}, {\"i32\": 1}, {\"i32\": 2}])\");\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(auto proj, project({field_ref(\"f64\"), field_ref(\"i32\")},\n+                                            {\"projected double\", \"projected int\"})\n+                                        .Bind(*kBoringSchema));\n+\n+    auto expected = ArrayFromJSON(\n+        struct_({field(\"projected double\", float64()), field(\"projected int\", int32())}),\n+        R\"([[null, 0], [null, 1], [null, 2]])\");\n+    ASSERT_OK_AND_ASSIGN(auto actual, ExecuteScalarExpression(proj, just_i32));\n+\n+    AssertDatumsEqual(Datum(expected), actual);\n+  }\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(\n+        auto proj,\n+        project({field_ref(\"f64\")}, {\"projected double\"}).Bind(*kBoringSchema));\n+\n+    // NB: only a scalar was projected, this is *not* automatically broadcast to an array.\n+    ASSERT_OK_AND_ASSIGN(auto expected, StructScalar::Make({MakeNullScalar(float64())},\n\nReview comment:\n       I'll add a test for this case here as well\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -63,9 +63,15 @@ const FunctionDoc list_value_length_doc{\n Result<ValueDescr> ProjectResolve(KernelContext* ctx,\n                                   const std::vector<ValueDescr>& descrs) {\n   const auto& names = OptionsWrapper<ProjectOptions>::Get(ctx).field_names;\n-  if (names.size() != descrs.size()) {\n-    return Status::Invalid(\"project() was passed \", names.size(), \" field \", \"names but \",\n-                           descrs.size(), \" arguments\");\n+  const auto& nullable = OptionsWrapper<ProjectOptions>::Get(ctx).field_nullability;\n+  const auto& metadata = OptionsWrapper<ProjectOptions>::Get(ctx).field_metadata;\n+\n+  if (names.size() != descrs.size() || nullable.size() != descrs.size() ||\n+      metadata.size() != descrs.size()) {\n+    return Status::Invalid(\"project() was passed \", descrs.size(), \" arguments but \",\n+                           names.size(), \" field names, \", nullable.size(),\n+                           \" nullability bits, and \", metadata.size(),\n+                           \" nullability bits.\");\n\nReview comment:\n       Thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:39:06.143+0000",
                    "updated": "2021-02-24T15:39:06.143+0000",
                    "started": "2021-02-24T15:39:06.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557063",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582066483\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_test.cc\n##########\n@@ -794,7 +691,7 @@ TEST(TestDictPartitionColumn, SelectPartitionColumnFilterPhysicalColumn) {\n   ASSERT_OK_AND_ASSIGN(auto scanner, scan_builder->Finish());\n   ASSERT_OK_AND_ASSIGN(auto table, scanner->ToTable());\n   AssertArraysEqual(*table->column(0)->chunk(0),\n-                    *DictArrayFromJSON(partition_field->type(), \"[0]\", \"[\\\"one\\\"]\"));\n+                    *ArrayFromJSON(partition_field->type(), R\"([\"one\"])\"));\n\nReview comment:\n       Dictionary encoding columns in scan is not currently supported; an output column can only be dictionary encoded if it was dictionary encoded on disk.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:40:44.632+0000",
                    "updated": "2021-02-24T15:40:44.632+0000",
                    "started": "2021-02-24T15:40:44.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557065",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582069837\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_ipc_test.cc\n##########\n@@ -84,9 +85,8 @@ class TestIpcFileFormat : public ArrowIpcWriterMixin {\n   }\n \n   std::unique_ptr<RecordBatchReader> GetRecordBatchReader(\n-      std::shared_ptr<Schema> schema = nullptr) {\n-    return MakeGeneratedRecordBatch(schema ? schema : schema_, kBatchSize,\n-                                    kBatchRepetitions);\n+      std::shared_ptr<Schema> schema) {\n\nReview comment:\n       A default projection is provided at a higher level (ScannerBuilder); fragments are not currently designed for direct ergonomic interaction. The default projection includes all columns in the *dataset* schema, which is usually a union of the fragment's physical schemas\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:44:47.736+0000",
                    "updated": "2021-02-24T15:44:47.736+0000",
                    "started": "2021-02-24T15:44:47.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557067",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582072221\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -33,21 +34,10 @@\n namespace arrow {\n namespace dataset {\n \n-ScanOptions::ScanOptions(std::shared_ptr<Schema> schema)\n-    : projector(RecordBatchProjector(std::move(schema))) {}\n-\n-std::shared_ptr<ScanOptions> ScanOptions::ReplaceSchema(\n-    std::shared_ptr<Schema> schema) const {\n-  auto copy = ScanOptions::Make(std::move(schema));\n-  copy->filter = filter;\n-  copy->batch_size = batch_size;\n-  return copy;\n-}\n-\n std::vector<std::string> ScanOptions::MaterializedFields() const {\n\nReview comment:\n       For `project({add(field_ref(\"a\"), field_ref(\"b\"))}, {\"a_plus_b\"})` (SQL: `SELECT a + b as a_plus_b`) the materialized fields would be `{a,b}` while the projected fields would be `{a_plus_b}`. I'll add a long-form docstring clarifying this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:47:29.630+0000",
                    "updated": "2021-02-24T15:47:29.630+0000",
                    "started": "2021-02-24T15:47:29.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557070",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582080036\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -115,10 +115,25 @@ struct CompareOptions : public FunctionOptions {\n };\n \n struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n-  explicit ProjectOptions(std::vector<std::string> n) : field_names(std::move(n)) {}\n+  ProjectOptions(std::vector<std::string> n, std::vector<bool> r,\n+                 std::vector<std::shared_ptr<const KeyValueMetadata>> m)\n+      : field_names(std::move(n)),\n+        field_nullability(std::move(r)),\n\nReview comment:\n       Currently I only specify nullability and metadata for passthru projected fields https://github.com/bkietz/arrow/blob/1b95d70e4096704c702d1464e93bd218c30498d4/cpp/src/arrow/dataset/scanner_internal.h#L169-L173\r\n   \r\n   For other fields (for example the field resulting from an arithmetic operation) users will need to attach any desired metadata after the scan. I require specifying field names for all projections since the default field name for a column like `SELECT (total - amt) / total` isn't clear to me. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T15:56:17.464+0000",
                    "updated": "2021-02-24T15:56:17.464+0000",
                    "started": "2021-02-24T15:56:17.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557075",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582110404\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -38,18 +39,17 @@ TEST(TestScalarNested, ListValueLength) {\n }\n \n struct {\n- public:\n-  Result<Datum> operator()(std::vector<Datum> args) {\n-    ProjectOptions opts{field_names};\n+  template <typename... Options>\n+  Result<Datum> operator()(std::vector<Datum> args, std::vector<std::string> field_names,\n+                           Options... options) {\n+    ProjectOptions opts{field_names, options...};\n     return CallFunction(\"project\", args, &opts);\n   }\n-\n-  std::vector<std::string> field_names;\n } Project;\n \n TEST(Project, Scalar) {\n   std::shared_ptr<StructScalar> expected(new StructScalar{{}, struct_({})});\n-  ASSERT_OK_AND_EQ(Datum(expected), Project({}));\n+  ASSERT_OK_AND_EQ(Datum(expected), Project({}, {}));\n\nReview comment:\n       The overload resolution is ambiguous here; I'll make the arguments more explicit\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T16:31:51.837+0000",
                    "updated": "2021-02-24T16:31:51.837+0000",
                    "started": "2021-02-24T16:31:51.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557099",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582113830\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -50,26 +50,16 @@ struct ARROW_DS_EXPORT ScanContext {\n   std::shared_ptr<internal::TaskGroup> TaskGroup() const;\n };\n \n-class ARROW_DS_EXPORT ScanOptions {\n- public:\n-  virtual ~ScanOptions() = default;\n-\n-  static std::shared_ptr<ScanOptions> Make(std::shared_ptr<Schema> schema) {\n-    return std::shared_ptr<ScanOptions>(new ScanOptions(std::move(schema)));\n-  }\n-\n-  // Construct a copy of these options with a different schema.\n-  // The projector will be reconstructed.\n-  std::shared_ptr<ScanOptions> ReplaceSchema(std::shared_ptr<Schema> schema) const;\n-\n-  // Filter\n+struct ARROW_DS_EXPORT ScanOptions {\n+  // Filter and projection\n   Expression filter = literal(true);\n+  Expression projection;\n \n-  // Schema to which record batches will be reconciled\n-  const std::shared_ptr<Schema>& schema() const { return projector.schema(); }\n+  // Schema with which batches will be read from disk\n+  std::shared_ptr<Schema> dataset_schema;\n\nReview comment:\n       It is not. The physical schemas of fragments are allowed to diverge from the dataset schema (missing columns, eventually an integer column might promote from int32 in older fragments to int64 in newer fragments, etc). The dataset schema is a schema to which those physical schemas can be reconciled\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T16:36:11.587+0000",
                    "updated": "2021-02-24T16:36:11.587+0000",
                    "started": "2021-02-24T16:36:11.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557100",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582114128\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -50,26 +50,16 @@ struct ARROW_DS_EXPORT ScanContext {\n   std::shared_ptr<internal::TaskGroup> TaskGroup() const;\n };\n \n-class ARROW_DS_EXPORT ScanOptions {\n- public:\n-  virtual ~ScanOptions() = default;\n-\n-  static std::shared_ptr<ScanOptions> Make(std::shared_ptr<Schema> schema) {\n-    return std::shared_ptr<ScanOptions>(new ScanOptions(std::move(schema)));\n-  }\n-\n-  // Construct a copy of these options with a different schema.\n-  // The projector will be reconstructed.\n-  std::shared_ptr<ScanOptions> ReplaceSchema(std::shared_ptr<Schema> schema) const;\n-\n-  // Filter\n+struct ARROW_DS_EXPORT ScanOptions {\n+  // Filter and projection\n   Expression filter = literal(true);\n+  Expression projection;\n \n-  // Schema to which record batches will be reconciled\n-  const std::shared_ptr<Schema>& schema() const { return projector.schema(); }\n+  // Schema with which batches will be read from disk\n\nReview comment:\n       That is better, will replace\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T16:36:24.735+0000",
                    "updated": "2021-02-24T16:36:24.735+0000",
                    "started": "2021-02-24T16:36:24.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557101",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582117038\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_internal.h\n##########\n@@ -127,5 +139,62 @@ inline Result<ScanTaskIterator> GetScanTaskIterator(\n   return MakeFlattenIterator(std::move(maybe_scantask_it));\n }\n \n+inline Status NestedFieldRefsNotImplemented() {\n\nReview comment:\n       Currently I'm using this function and the others below in ScannerBuilder and in several tests to directly set properties of ScanOptions. The duplication is ultimately not necessary and I'll probably either remove ScannerBuilder or reuse it to produce ScanOptions in tests, at which point more of this functionality can migrate to `.cc` files\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T16:39:58.711+0000",
                    "updated": "2021-02-24T16:39:58.711+0000",
                    "started": "2021-02-24T16:39:58.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557104",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582117582\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -58,31 +58,48 @@ TEST(Project, Scalar) {\n   expected.reset(new StructScalar{\n       {i32, f64, str},\n       struct_({field(\"i\", i32->type), field(\"f\", f64->type), field(\"s\", str->type)})});\n-  Project.field_names = {\"i\", \"f\", \"s\"};\n-  ASSERT_OK_AND_EQ(Datum(expected), Project({i32, f64, str}));\n+  ASSERT_OK_AND_EQ(Datum(expected), Project({i32, f64, str}, {\"i\", \"f\", \"s\"}));\n \n   // Three field names but one input value\n-  ASSERT_RAISES(Invalid, Project({str}));\n+  ASSERT_RAISES(Invalid, Project({str}, {\"i\", \"f\", \"s\"}));\n }\n \n TEST(Project, Array) {\n-  Project.field_names = {\"i\", \"s\"};\n+  std::vector<std::string> field_names{\"i\", \"s\"};\n+\n   auto i32 = ArrayFromJSON(int32(), \"[42, 13, 7]\");\n   auto str = ArrayFromJSON(utf8(), R\"([\"aa\", \"aa\", \"aa\"])\");\n-  ASSERT_OK_AND_ASSIGN(Datum expected,\n-                       StructArray::Make({i32, str}, Project.field_names));\n+  ASSERT_OK_AND_ASSIGN(Datum expected, StructArray::Make({i32, str}, field_names));\n \n-  ASSERT_OK_AND_EQ(expected, Project({i32, str}));\n+  ASSERT_OK_AND_EQ(expected, Project({i32, str}, field_names));\n \n   // Scalars are broadcast to the length of the arrays\n-  ASSERT_OK_AND_EQ(expected, Project({i32, MakeScalar(\"aa\")}));\n+  ASSERT_OK_AND_EQ(expected, Project({i32, MakeScalar(\"aa\")}, field_names));\n \n   // Array length mismatch\n-  ASSERT_RAISES(Invalid, Project({i32->Slice(1), str}));\n+  ASSERT_RAISES(Invalid, Project({i32->Slice(1), str}, field_names));\n+}\n+\n+TEST(Project, NullableMetadataPassedThru) {\n+  auto i32 = ArrayFromJSON(int32(), \"[42, 13, 7]\");\n+  auto str = ArrayFromJSON(utf8(), R\"([\"aa\", \"aa\", \"aa\"])\");\n+\n+  std::vector<std::string> field_names{\"i\", \"s\"};\n+  std::vector<bool> nullability{true, false};\n+  std::vector<std::shared_ptr<const KeyValueMetadata>> metadata = {\n+      key_value_metadata({\"a\", \"b\"}, {\"ALPHA\", \"BRAVO\"}), nullptr};\n+\n+  ASSERT_OK_AND_ASSIGN(auto proj,\n+                       Project({i32, str}, field_names, nullability, metadata));\n+\n+  AssertTypeEqual(*proj.type(), StructType({\n+                                    field(\"i\", int32(), /*nullable=*/true, metadata[0]),\n+                                    field(\"s\", utf8(), /*nullable=*/false, nullptr),\n+                                }));\n\nReview comment:\n       Will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T16:40:39.679+0000",
                    "updated": "2021-02-24T16:40:39.679+0000",
                    "started": "2021-02-24T16:40:39.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557105",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582144270\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -115,10 +115,25 @@ struct CompareOptions : public FunctionOptions {\n };\n \n struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n-  explicit ProjectOptions(std::vector<std::string> n) : field_names(std::move(n)) {}\n+  ProjectOptions(std::vector<std::string> n, std::vector<bool> r,\n+                 std::vector<std::shared_ptr<const KeyValueMetadata>> m)\n+      : field_names(std::move(n)),\n+        field_nullability(std::move(r)),\n+        field_metadata(std::move(m)) {}\n+\n+  explicit ProjectOptions(std::vector<std::string> n)\n+      : field_names(std::move(n)),\n+        field_nullability(field_names.size(), true),\n+        field_metadata(field_names.size(), NULLPTR) {}\n \n   /// Names for wrapped columns\n   std::vector<std::string> field_names;\n+\n+  /// Nullability bits for wrapped columns\n+  std::vector<bool> field_nullability;\n+\n+  /// Metadata attached to wrapped columns\n+  std::vector<std::shared_ptr<const KeyValueMetadata>> field_metadata;\n\nReview comment:\n       That's fine with me; I was just following a perceived convention https://github.com/bkietz/arrow/blob/1b95d70e4096704c702d1464e93bd218c30498d4/cpp/src/arrow/array/array_nested.h#L331\r\n   \r\n   I could also just use a `Field` with a null type\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T17:13:27.032+0000",
                    "updated": "2021-02-24T17:13:27.032+0000",
                    "started": "2021-02-24T17:13:27.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557140",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582190291\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -33,21 +34,10 @@\n namespace arrow {\n namespace dataset {\n \n-ScanOptions::ScanOptions(std::shared_ptr<Schema> schema)\n-    : projector(RecordBatchProjector(std::move(schema))) {}\n-\n-std::shared_ptr<ScanOptions> ScanOptions::ReplaceSchema(\n-    std::shared_ptr<Schema> schema) const {\n-  auto copy = ScanOptions::Make(std::move(schema));\n-  copy->filter = filter;\n-  copy->batch_size = batch_size;\n-  return copy;\n-}\n-\n std::vector<std::string> ScanOptions::MaterializedFields() const {\n\nReview comment:\n       So is the `projected_schema` in that case `schema({\"a_plus_b\"})` or `schema({\"a\", \"b\"})`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T18:15:00.708+0000",
                    "updated": "2021-02-24T18:15:00.708+0000",
                    "started": "2021-02-24T18:15:00.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557210",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582064969\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -1135,5 +1175,36 @@ TEST(Expression, SerializationRoundTrips) {\n                          equal(field_ref(\"beta\"), literal(3.25f))}));\n }\n \n+TEST(Projection, AugmentWithNull) {\n+  auto just_i32 = ArrayFromJSON(struct_({kBoringSchema->GetFieldByName(\"i32\")}),\n+                                R\"([{\"i32\": 0}, {\"i32\": 1}, {\"i32\": 2}])\");\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(auto proj, project({field_ref(\"f64\"), field_ref(\"i32\")},\n+                                            {\"projected double\", \"projected int\"})\n+                                        .Bind(*kBoringSchema));\n+\n+    auto expected = ArrayFromJSON(\n+        struct_({field(\"projected double\", float64()), field(\"projected int\", int32())}),\n+        R\"([[null, 0], [null, 1], [null, 2]])\");\n+    ASSERT_OK_AND_ASSIGN(auto actual, ExecuteScalarExpression(proj, just_i32));\n+\n+    AssertDatumsEqual(Datum(expected), actual);\n+  }\n+\n+  {\n+    ASSERT_OK_AND_ASSIGN(\n+        auto proj,\n+        project({field_ref(\"f64\")}, {\"projected double\"}).Bind(*kBoringSchema));\n+\n+    // NB: only a scalar was projected, this is *not* automatically broadcast to an array.\n+    ASSERT_OK_AND_ASSIGN(auto expected, StructScalar::Make({MakeNullScalar(float64())},\n\nReview comment:\n       This test illustrates that case: `f64` is not present in the input batch, and the result of such projection is a StructScalar whose fields are null\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T21:04:27.201+0000",
                    "updated": "2021-02-24T21:04:27.201+0000",
                    "started": "2021-02-24T21:04:27.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557317",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582066483\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_test.cc\n##########\n@@ -794,7 +691,7 @@ TEST(TestDictPartitionColumn, SelectPartitionColumnFilterPhysicalColumn) {\n   ASSERT_OK_AND_ASSIGN(auto scanner, scan_builder->Finish());\n   ASSERT_OK_AND_ASSIGN(auto table, scanner->ToTable());\n   AssertArraysEqual(*table->column(0)->chunk(0),\n-                    *DictArrayFromJSON(partition_field->type(), \"[0]\", \"[\\\"one\\\"]\"));\n+                    *ArrayFromJSON(partition_field->type(), R\"([\"one\"])\"));\n\nReview comment:\n       Dictionary encoding columns in scan is not currently supported; an output column can only be dictionary encoded if it was dictionary encoded in the fragment\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T21:04:40.464+0000",
                    "updated": "2021-02-24T21:04:40.464+0000",
                    "started": "2021-02-24T21:04:40.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557318",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#discussion_r582336228\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_internal.h\n##########\n@@ -127,5 +139,62 @@ inline Result<ScanTaskIterator> GetScanTaskIterator(\n   return MakeFlattenIterator(std::move(maybe_scantask_it));\n }\n \n+inline Status NestedFieldRefsNotImplemented() {\n+  // TODO(ARROW-11259) Several functions (for example, IpcScanTask::Make) assume that\n+  // only top level fields will be materialized.\n+  return Status::NotImplemented(\"Nested field references in scans.\");\n+}\n+\n+inline Status SetProjection(ScanOptions* options, const Expression& projection) {\n+  ARROW_ASSIGN_OR_RAISE(options->projection, projection.Bind(*options->dataset_schema));\n+\n+  if (options->projection.type()->id() != Type::STRUCT) {\n+    return Status::Invalid(\"Projection \", projection.ToString(),\n+                           \" cannot yield record batches\");\n+  }\n+  options->projected_schema = ::arrow::schema(\n+      checked_cast<const StructType&>(*options->projection.type()).fields(),\n+      options->dataset_schema->metadata());\n+\n+  return Status::OK();\n+}\n+\n+inline Status SetProjection(ScanOptions* options, std::vector<Expression> exprs,\n+                            std::vector<std::string> names) {\n+  compute::ProjectOptions project_options{std::move(names)};\n+\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    if (auto ref = exprs[i].field_ref()) {\n+      if (!ref->name()) return NestedFieldRefsNotImplemented();\n+\n+      // set metadata and nullability for plain field references\n+      ARROW_ASSIGN_OR_RAISE(auto field, ref->GetOne(*options->dataset_schema));\n+      project_options.field_nullability[i] = field->nullable();\n+      project_options.field_metadata[i] = field->metadata();\n+    }\n+  }\n+\n+  return SetProjection(options,\n+                       call(\"project\", std::move(exprs), std::move(project_options)));\n+}\n+\n+inline Status SetProjection(ScanOptions* options, std::vector<std::string> names) {\n+  std::vector<Expression> exprs(names.size());\n+  for (size_t i = 0; i < exprs.size(); ++i) {\n+    exprs[i] = field_ref(names[i]);\n+  }\n+  return SetProjection(options, std::move(exprs), std::move(names));\n+}\n+\n+inline Status SetFilter(ScanOptions* options, const Expression& filter) {\n+  for (const auto& ref : FieldsInExpression(filter)) {\n+    if (!ref.name()) return NestedFieldRefsNotImplemented();\n+\n+    RETURN_NOT_OK(ref.FindOne(*options->dataset_schema));\n\nReview comment:\n       No: both the filter and the projection will run against the dataset schema\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T22:01:19.992+0000",
                    "updated": "2021-02-24T22:01:19.992+0000",
                    "started": "2021-02-24T22:01:19.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557535",
                    "issueId": "13350968"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/worklog/557586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #9532:\nURL: https://github.com/apache/arrow/pull/9532#issuecomment-785456657\n\n\n   I've started testing in R with a [branch](https://github.com/apache/arrow/compare/master...nealrichardson:r-dataset-projection) (added commit [here](https://github.com/apache/arrow/commit/e77dc91920a7951c672f04dd9d2bb27e2e754424)) on top of this and my `mutate()` branch, and I've got a simple test working, but I'm running into a problem trying to apply this to our canonical taxi dataset query from the docs. If I add a column that is derived from other columns, it only yields valid data if I also include those columns in my result. So this works:\r\n   \r\n   ```\r\n   >         ds %>%\r\n   +           filter(total_amount > 100, year == 2015) %>%\r\n   +           mutate(\r\n   +             tip_pct = 100 * tip_amount / total_amount\r\n   +           ) %>%\r\n   +           select(tip_pct, tip_amount, total_amount, passenger_count) %>%\r\n   +           group_by(passenger_count) %>%\r\n   +           collect() %>% head()\r\n   # A tibble: 6 x 4\r\n   # Groups:   passenger_count [2]\r\n     tip_pct tip_amount total_amount passenger_count\r\n       <dbl>      <dbl>        <dbl>           <int>\r\n   1    0           0           149.               1\r\n   2   16.6        22           132.               1\r\n   3    0           0           205.               1\r\n   4    7.27       10           138.               1\r\n   5   23.0        24.5         107.               1\r\n   6   11.2        12           107.               2\r\n   ```\r\n   \r\n   But what I want to do is this, so that I don't have to keep around the columns that I've already used to create my derived one:\r\n   \r\n   ```\r\n   >         ds %>%\r\n   +           filter(total_amount > 100, year == 2015) %>%\r\n   +           mutate(\r\n   +             tip_pct = 100 * tip_amount / total_amount\r\n   +           ) %>%\r\n   +           select(tip_pct, passenger_count) %>%\r\n   +           group_by(passenger_count) %>%\r\n   +           collect() %>% head()\r\n   # A tibble: 6 x 2\r\n   # Groups:   passenger_count [2]\r\n     tip_pct passenger_count\r\n       <dbl>           <int>\r\n   1      NA               1\r\n   2      NA               1\r\n   3      NA               1\r\n   4      NA               1\r\n   5      NA               1\r\n   6      NA               2\r\n   ```\r\n   \r\n   To be clear, this latter example sends to `ScannerBuilder::Project` a vector of 2 Expressions, one for `tip_pct` that is derived from other fields in the data (but not included in the projection) and one for `passenger_count` that is just a `FieldRef`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-24T23:15:06.049+0000",
                    "updated": "2021-02-24T23:15:06.049+0000",
                    "started": "2021-02-24T23:15:06.048+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "557586",
                    "issueId": "13350968"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f1338ed[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ffa6e27[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fe7a9bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@63507f30[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5873dc0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@55d38be0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@371b7aa6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@57523a8a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b87649d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22427e86[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ee0ee22[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@8a01b1e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 26 22:04:13 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-26T22:04:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11174/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-01-07T21:56:26.000+0000",
        "updated": "2021-03-22T16:08:47.000+0000",
        "timeoriginalestimate": null,
        "description": "RecordBatchProjector should be replaced by an expression calling the \"project\" compute function.\r\n\r\nProjection currently supports only reordering and subselection of fields, materializing virtual columns where necessary. Replacement with an Expression will enable specifying arbitrary expressions for projected columns:\r\n{code:java}\r\n// project an explicit selection:\r\n// SELECT a as \"a\", b as \"b\" ...\r\nproject({field_ref(\"a\"), field_ref(\"b\")}, {\"a\", \"b\"});\r\n\r\n// project an arithmetic expression:\r\n// SELECT a + b as \"a + b\" ...\r\nproject({add(field_ref(\"a\"), field_ref(\"b\"))}, {\"a + b\"}){code}\r\nThis will also allow the same expression optimization machinery used for filters to be directly applied to projections. Virtual columns become a consequence of constant folding:\r\n{code:java}\r\n// project in a partition where a == 3:\r\nassert(\r\n  SimplifyWithGuarantee(\r\n    project({field_ref(\"a\"), field_ref(\"b\")}, {\"a\", \"b\"}),\r\n    equal(field_ref(\"a\"), literal(3))\r\n  )\r\n  == project({literal(3), field_ref(\"b\")}, {\"a\", \"b\"})\r\n){code}\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Make Expressions available for projection",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13350968/comment/17291933",
                    "id": "17291933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 9532\n[https://github.com/apache/arrow/pull/9532]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-02-26T22:04:13.119+0000",
                    "updated": "2021-02-26T22:04:13.119+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0md7k:",
        "customfield_12314139": null
    }
}