{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13470348",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348",
    "key": "ARROW-16990",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
            "name": "jvanstraten",
            "key": "JIRAUSER282962",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
            },
            "displayName": "Jeroen van Straten",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
            "name": "jvanstraten",
            "key": "JIRAUSER282962",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
            },
            "displayName": "Jeroen van Straten",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16990/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/788222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten opened a new pull request, #13527:\nURL: https://github.com/apache/arrow/pull/13527\n\n   Reformatted and fixed the docstrings for the Substrait API. No functional changes.\n\n\n",
                    "created": "2022-07-06T13:04:25.974+0000",
                    "updated": "2022-07-06T13:04:25.974+0000",
                    "started": "2022-07-06T13:04:25.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788222",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/788223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#issuecomment-1176198757\n\n   https://issues.apache.org/jira/browse/ARROW-16990\n\n\n",
                    "created": "2022-07-06T13:05:23.919+0000",
                    "updated": "2022-07-06T13:05:23.919+0000",
                    "started": "2022-07-06T13:05:23.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788223",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/788224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#issuecomment-1176198786\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-07-06T13:05:25.498+0000",
                    "updated": "2022-07-06T13:05:25.498+0000",
                    "started": "2022-07-06T13:05:25.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788224",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/788413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#discussion_r915263591\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -79,150 +79,151 @@ Result<compute::ExecPlan> DeserializePlan(\n /// produced by each toplevel Substrait relation when deserializing a Substrait Plan.\n using WriteOptionsFactory = std::function<std::shared_ptr<dataset::WriteNodeOptions>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] write_options_factory factory function for generating the write options of\n-/// a node consuming the batches produced by each toplevel Substrait relation\n+/// a node consuming the batches produced by each toplevel Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n /// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const WriteOptionsFactory& write_options_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n /// The output of the single Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] write_options write options of a node consuming the batches produced by\n-/// each toplevel Substrait relation\n+/// message.\n+/// \\param[in] write_options write options for the node that will consume the batches\n+/// produced by the toplevel Substrait relation.\n\nReview Comment:\n   ```suggestion\r\n   /// produced by the top level Substrait relation.\r\n   ```\r\n   Or top-level?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -39,38 +39,38 @@ namespace engine {\n /// each toplevel Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// consumer function provided by consumer_factory.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] consumer_factory factory function for generating the node that consumes\n-/// the batches produced by each toplevel Substrait relation\n+/// the batches produced by each toplevel Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n /// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const ConsumerFactory& consumer_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n-/// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// The output of each top-level Substrait relation will be sent to the given consumer\n+/// node.\n\nReview Comment:\n   ```suggestion\r\n   /// The output of each top-level Substrait relation will be sent to the given consumer.\r\n   ```\r\n   Minor nit: A `SinkNodeConsumer` isn't actually an exec node.  An exec node has to worry about various lifecycle concerns but a consumer just receives batches.\n\n\n\n",
                    "created": "2022-07-06T21:19:03.030+0000",
                    "updated": "2022-07-06T21:19:03.030+0000",
                    "started": "2022-07-06T21:19:03.030+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788413",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/788538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#discussion_r915606342\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -79,150 +79,151 @@ Result<compute::ExecPlan> DeserializePlan(\n /// produced by each toplevel Substrait relation when deserializing a Substrait Plan.\n using WriteOptionsFactory = std::function<std::shared_ptr<dataset::WriteNodeOptions>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] write_options_factory factory function for generating the write options of\n-/// a node consuming the batches produced by each toplevel Substrait relation\n+/// a node consuming the batches produced by each toplevel Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n /// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const WriteOptionsFactory& write_options_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n /// The output of the single Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] write_options write options of a node consuming the batches produced by\n-/// each toplevel Substrait relation\n+/// message.\n+/// \\param[in] write_options write options for the node that will consume the batches\n+/// produced by the toplevel Substrait relation.\n\nReview Comment:\n   That would be \"top-level\" (it's a compound adjective).\n\n\n\n",
                    "created": "2022-07-07T08:30:44.763+0000",
                    "updated": "2022-07-07T08:30:44.763+0000",
                    "started": "2022-07-07T08:30:44.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788538",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/790044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#discussion_r918981965\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -36,193 +36,193 @@ namespace arrow {\n namespace engine {\n \n /// Factory function type for generating the node that consumes the batches produced by\n-/// each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// each top-level Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n\nReview Comment:\n   While we are at it, can we follow the convention of using the infinitive in function summaries.\r\n   ```suggestion\r\n   /// \\brief Deserialize a Substrait Plan message to a list of ExecNode declarations.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -36,193 +36,193 @@ namespace arrow {\n namespace engine {\n \n /// Factory function type for generating the node that consumes the batches produced by\n-/// each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// each top-level Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n\nReview Comment:\n   While we are at it, can we follow the convention of using the infinitive in function summaries?\r\n   ```suggestion\r\n   /// \\brief Deserialize a Substrait Plan message to a list of ExecNode declarations.\r\n   ```\n\n\n\n",
                    "created": "2022-07-12T13:37:38.047+0000",
                    "updated": "2022-07-12T13:37:38.047+0000",
                    "started": "2022-07-12T13:37:38.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790044",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/790045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#discussion_r918982942\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -36,193 +36,193 @@ namespace arrow {\n namespace engine {\n \n /// Factory function type for generating the node that consumes the batches produced by\n-/// each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// each top-level Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// consumer function provided by consumer_factory.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] consumer_factory factory function for generating the node that consumes\n-/// the batches produced by each toplevel Substrait relation\n+/// the batches produced by each top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const ConsumerFactory& consumer_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n-/// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// The output of each top-level Substrait relation will be sent to the given consumer.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] consumer node that consumes the batches produced by each toplevel Substrait\n-/// relation\n+/// message.\n+/// \\param[in] consumer node that consumes the batches produced by the top-level\n+/// Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return an ExecNode corresponding to the single toplevel relation in the Substrait\n-/// Plan\n+/// \\return an ExecNode corresponding to the single top-level relation in the Substrait\n+/// Plan.\n Result<compute::ExecPlan> DeserializePlan(\n     const Buffer& buf, const std::shared_ptr<compute::SinkNodeConsumer>& consumer,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n /// Factory function type for generating the write options of a node consuming the batches\n-/// produced by each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// produced by each top-level Substrait relation when deserializing a Substrait Plan.\n using WriteOptionsFactory = std::function<std::shared_ptr<dataset::WriteNodeOptions>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] write_options_factory factory function for generating the write options of\n-/// a node consuming the batches produced by each toplevel Substrait relation\n+/// a node consuming the batches produced by each top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const WriteOptionsFactory& write_options_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n /// The output of the single Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] write_options write options of a node consuming the batches produced by\n-/// each toplevel Substrait relation\n+/// message.\n+/// \\param[in] write_options write options for the node that will consume the batches\n+/// produced by the top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<compute::ExecPlan> DeserializePlan(\n     const Buffer& buf, const std::shared_ptr<dataset::WriteNodeOptions>& write_options,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a Substrait Type message to the corresponding Arrow type\n+/// \\brief Deserializes a Substrait Type message to the corresponding Arrow type.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Type\n-/// message\n+/// message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow data type\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow data type.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<DataType>> DeserializeType(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow type to a Substrait Type message\n+/// \\brief Serializes an Arrow type to a Substrait Type message.\n ///\n-/// \\param[in] type the Arrow data type to serialize\n+/// \\param[in] type the Arrow data type to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add a\n-/// mapping for the given type\n+/// mapping for the given type.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// Type message\n+/// Type message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeType(const DataType& type,\n                                               ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait NamedStruct message to an Arrow schema\n+/// \\brief Deserializes a Substrait NamedStruct message to an Arrow schema.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// NamedStruct message\n+/// NamedStruct message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow schema\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow schema.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Schema>> DeserializeSchema(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow schema to a Substrait NamedStruct message\n+/// \\brief Serializes an Arrow schema to a Substrait NamedStruct message.\n ///\n-/// \\param[in] schema the Arrow schema to serialize\n+/// \\param[in] schema the Arrow schema to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add\n-/// mappings for the types used in the schema\n+/// mappings for the types used in the schema.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// NamedStruct message\n+/// NamedStruct message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeSchema(const Schema& schema,\n                                                 ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait Expression message to a compute expression\n+/// \\brief Deserializes a Substrait Expression message to a compute expression.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// Expression message\n+/// Expression message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow compute expression\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow compute expression.\n ARROW_ENGINE_EXPORT\n Result<compute::Expression> DeserializeExpression(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow compute expression to a Substrait Expression message\n+/// \\brief Serializes an Arrow compute expression to a Substrait Expression message.\n ///\n-/// \\param[in] expr the Arrow compute expression to serialize\n+/// \\param[in] expr the Arrow compute expression to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add\n-/// mappings for the types used in the expression\n+/// mappings for the types used in the expression.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// Expression message\n+/// Expression message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeExpression(const compute::Expression& expr,\n                                                     ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait Rel (relation) message to an ExecNode declaration\n+/// \\brief Deserializes a Substrait Rel (relation) message to an ExecNode declaration.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// Rel message\n+/// Rel message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding ExecNode declaration\n+/// surrounding Plan message.\n+/// \\return the corresponding ExecNode declaration.\n ARROW_ENGINE_EXPORT Result<compute::Declaration> DeserializeRelation(\n     const Buffer& buf, const ExtensionSet& ext_set);\n \n namespace internal {\n \n /// \\brief Checks whether two protobuf serializations of a particular Substrait message\n-/// type are equivalent\n+/// type are equivalent.\n ///\n /// Note that a binary comparison of the two buffers is insufficient. One reason for this\n /// is that the fields of a message can be specified in any order in the serialization.\n ///\n-/// \\param[in] message_name the name of the Substrait message type to check\n-/// \\param[in] l_buf buffer containing the first protobuf serialization to compare\n-/// \\param[in] r_buf buffer containing the second protobuf serialization to compare\n-/// \\return success if equivalent, failure if not\n+/// \\param[in] message_name the name of the Substrait message type to check.\n+/// \\param[in] l_buf buffer containing the first protobuf serialization to compare.\n+/// \\param[in] r_buf buffer containing the second protobuf serialization to compare.\n+/// \\return success if equivalent, failure if not.\n ARROW_ENGINE_EXPORT\n Status CheckMessagesEquivalent(util::string_view message_name, const Buffer& l_buf,\n                                const Buffer& r_buf);\n \n /// \\brief Utility function to convert a JSON serialization of a Substrait message to\n\nReview Comment:\n   Or if we want to keep it concise\r\n   ```suggestion\r\n   /// \\brief Convert a JSON serialization of a Substrait message to\r\n   ```\n\n\n\n",
                    "created": "2022-07-12T13:38:43.160+0000",
                    "updated": "2022-07-12T13:38:43.160+0000",
                    "started": "2022-07-12T13:38:43.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790045",
                    "issueId": "13470348"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/worklog/790133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13527:\nURL: https://github.com/apache/arrow/pull/13527#discussion_r919335315\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -36,193 +36,193 @@ namespace arrow {\n namespace engine {\n \n /// Factory function type for generating the node that consumes the batches produced by\n-/// each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// each top-level Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// consumer function provided by consumer_factory.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] consumer_factory factory function for generating the node that consumes\n-/// the batches produced by each toplevel Substrait relation\n+/// the batches produced by each top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const ConsumerFactory& consumer_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n-/// The output of each top-level Substrait relation will be sent to a caller supplied\n-/// consumer function provided by consumer_factory\n+/// The output of each top-level Substrait relation will be sent to the given consumer.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] consumer node that consumes the batches produced by each toplevel Substrait\n-/// relation\n+/// message.\n+/// \\param[in] consumer node that consumes the batches produced by the top-level\n+/// Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return an ExecNode corresponding to the single toplevel relation in the Substrait\n-/// Plan\n+/// \\return an ExecNode corresponding to the single top-level relation in the Substrait\n+/// Plan.\n Result<compute::ExecPlan> DeserializePlan(\n     const Buffer& buf, const std::shared_ptr<compute::SinkNodeConsumer>& consumer,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n /// Factory function type for generating the write options of a node consuming the batches\n-/// produced by each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// produced by each top-level Substrait relation when deserializing a Substrait Plan.\n using WriteOptionsFactory = std::function<std::shared_ptr<dataset::WriteNodeOptions>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n ///\n /// The output of each top-level Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n+/// message.\n /// \\param[in] write_options_factory factory function for generating the write options of\n-/// a node consuming the batches produced by each toplevel Substrait relation\n+/// a node consuming the batches produced by each top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<std::vector<compute::Declaration>> DeserializePlans(\n     const Buffer& buf, const WriteOptionsFactory& write_options_factory,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan\n+/// \\brief Deserializes a single-relation Substrait Plan message to an execution plan.\n ///\n /// The output of the single Substrait relation will be written to a filesystem.\n /// `write_options_factory` can be used to control write behavior.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Plan\n-/// message\n-/// \\param[in] write_options write options of a node consuming the batches produced by\n-/// each toplevel Substrait relation\n+/// message.\n+/// \\param[in] write_options write options for the node that will consume the batches\n+/// produced by the top-level Substrait relation.\n /// \\param[in] registry an extension-id-registry to use, or null for the default one.\n /// \\param[out] ext_set_out if non-null, the extension mapping used by the Substrait\n /// Plan is returned here.\n-/// \\return a vector of ExecNode declarations, one for each toplevel relation in the\n-/// Substrait Plan\n+/// \\return a vector of ExecNode declarations, one for each top-level relation in the\n+/// Substrait Plan.\n ARROW_ENGINE_EXPORT Result<compute::ExecPlan> DeserializePlan(\n     const Buffer& buf, const std::shared_ptr<dataset::WriteNodeOptions>& write_options,\n     const ExtensionIdRegistry* registry = NULLPTR, ExtensionSet* ext_set_out = NULLPTR);\n \n-/// \\brief Deserializes a Substrait Type message to the corresponding Arrow type\n+/// \\brief Deserializes a Substrait Type message to the corresponding Arrow type.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait Type\n-/// message\n+/// message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow data type\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow data type.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<DataType>> DeserializeType(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow type to a Substrait Type message\n+/// \\brief Serializes an Arrow type to a Substrait Type message.\n ///\n-/// \\param[in] type the Arrow data type to serialize\n+/// \\param[in] type the Arrow data type to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add a\n-/// mapping for the given type\n+/// mapping for the given type.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// Type message\n+/// Type message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeType(const DataType& type,\n                                               ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait NamedStruct message to an Arrow schema\n+/// \\brief Deserializes a Substrait NamedStruct message to an Arrow schema.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// NamedStruct message\n+/// NamedStruct message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow schema\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow schema.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Schema>> DeserializeSchema(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow schema to a Substrait NamedStruct message\n+/// \\brief Serializes an Arrow schema to a Substrait NamedStruct message.\n ///\n-/// \\param[in] schema the Arrow schema to serialize\n+/// \\param[in] schema the Arrow schema to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add\n-/// mappings for the types used in the schema\n+/// mappings for the types used in the schema.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// NamedStruct message\n+/// NamedStruct message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeSchema(const Schema& schema,\n                                                 ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait Expression message to a compute expression\n+/// \\brief Deserializes a Substrait Expression message to a compute expression.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// Expression message\n+/// Expression message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding Arrow compute expression\n+/// surrounding Plan message.\n+/// \\return the corresponding Arrow compute expression.\n ARROW_ENGINE_EXPORT\n Result<compute::Expression> DeserializeExpression(const Buffer& buf,\n                                                   const ExtensionSet& ext_set);\n \n-/// \\brief Serializes an Arrow compute expression to a Substrait Expression message\n+/// \\brief Serializes an Arrow compute expression to a Substrait Expression message.\n ///\n-/// \\param[in] expr the Arrow compute expression to serialize\n+/// \\param[in] expr the Arrow compute expression to serialize.\n /// \\param[in,out] ext_set the extension mapping to use; may be updated to add\n-/// mappings for the types used in the expression\n+/// mappings for the types used in the expression.\n /// \\return a buffer containing the protobuf serialization of the corresponding Substrait\n-/// Expression message\n+/// Expression message.\n ARROW_ENGINE_EXPORT\n Result<std::shared_ptr<Buffer>> SerializeExpression(const compute::Expression& expr,\n                                                     ExtensionSet* ext_set);\n \n-/// \\brief Deserializes a Substrait Rel (relation) message to an ExecNode declaration\n+/// \\brief Deserializes a Substrait Rel (relation) message to an ExecNode declaration.\n ///\n /// \\param[in] buf a buffer containing the protobuf serialization of a Substrait\n-/// Rel message\n+/// Rel message.\n /// \\param[in] ext_set the extension mapping to use, normally provided by the\n-/// surrounding Plan message\n-/// \\return the corresponding ExecNode declaration\n+/// surrounding Plan message.\n+/// \\return the corresponding ExecNode declaration.\n ARROW_ENGINE_EXPORT Result<compute::Declaration> DeserializeRelation(\n     const Buffer& buf, const ExtensionSet& ext_set);\n \n namespace internal {\n \n /// \\brief Checks whether two protobuf serializations of a particular Substrait message\n-/// type are equivalent\n+/// type are equivalent.\n ///\n /// Note that a binary comparison of the two buffers is insufficient. One reason for this\n /// is that the fields of a message can be specified in any order in the serialization.\n ///\n-/// \\param[in] message_name the name of the Substrait message type to check\n-/// \\param[in] l_buf buffer containing the first protobuf serialization to compare\n-/// \\param[in] r_buf buffer containing the second protobuf serialization to compare\n-/// \\return success if equivalent, failure if not\n+/// \\param[in] message_name the name of the Substrait message type to check.\n+/// \\param[in] l_buf buffer containing the first protobuf serialization to compare.\n+/// \\param[in] r_buf buffer containing the second protobuf serialization to compare.\n+/// \\return success if equivalent, failure if not.\n ARROW_ENGINE_EXPORT\n Status CheckMessagesEquivalent(util::string_view message_name, const Buffer& l_buf,\n                                const Buffer& r_buf);\n \n /// \\brief Utility function to convert a JSON serialization of a Substrait message to\n\nReview Comment:\n   6d61c85\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.h:\n##########\n@@ -36,193 +36,193 @@ namespace arrow {\n namespace engine {\n \n /// Factory function type for generating the node that consumes the batches produced by\n-/// each toplevel Substrait relation when deserializing a Substrait Plan.\n+/// each top-level Substrait relation when deserializing a Substrait Plan.\n using ConsumerFactory = std::function<std::shared_ptr<compute::SinkNodeConsumer>()>;\n \n-/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations\n+/// \\brief Deserializes a Substrait Plan message to a list of ExecNode declarations.\n\nReview Comment:\n   6d61c85\n\n\n\n",
                    "created": "2022-07-12T19:32:32.016+0000",
                    "updated": "2022-07-12T19:32:32.016+0000",
                    "started": "2022-07-12T19:32:32.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790133",
                    "issueId": "13470348"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45c94fa2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16249d5f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cf4a54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@32b3e177[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ebd93ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@34616ec2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e861ff0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6313f70e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11421b65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2e6a70f1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@506d9353[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2c3ab5d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 11 17:51:26 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16990/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-07-06T12:55:16.000+0000",
        "updated": "2022-10-11T17:51:26.000+0000",
        "timeoriginalestimate": null,
        "description": "[This sentence|https://github.com/apache/arrow/blob/4550cd052a2a724177fb422cdaf26a22d796eac3/cpp/src/arrow/engine/substrait/serde.h#L62-L63] is a copypaste mistake, and the sentence also lacks a period at the end in the original.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Typos/copy-paste mistakes in Substrait API docstrings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470348/comment/17615999",
                    "id": "17615999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-11T17:51:26.073+0000",
                    "updated": "2022-10-11T17:51:26.073+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16nhc:",
        "customfield_12314139": null
    }
}