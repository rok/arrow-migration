{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426726",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726",
    "key": "ARROW-15587",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ArianaVillegas",
            "name": "ArianaVillegas",
            "key": "JIRAUSER280694",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280694&avatarId=50269",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280694&avatarId=50269",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280694&avatarId=50269",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280694&avatarId=50269"
            },
            "displayName": "Ariana Villegas",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 48000,
            "total": 48000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 48000,
            "total": 48000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15587/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 80,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas opened a new pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625\n\n\n   The Substrait read operator defines files with LocalFiles::FileOrFiles. These elements can take one of several forms:\r\n   \r\n   - uri_path (can be a file or a folder)\r\n   - uri_path_glob (a glob expression)\r\n   - uri_file (file only)\r\n   - uri_folder (folder only)\r\n   \r\n   The C++ Substrait consumer currently only supports uri_file. This PR adds support for the other options.\r\n   \r\n   - [ ] uri_path (can be a file or a folder)\r\n   - [ ] uri_path_glob (a glob expression)\r\n   - [ ] uri_folder (folder only)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T16:47:04.896+0000",
                    "updated": "2022-03-14T16:47:04.896+0000",
                    "started": "2022-03-14T16:47:04.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741012",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#issuecomment-1067099807\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T17:33:40.944+0000",
                    "updated": "2022-03-14T17:33:40.944+0000",
                    "started": "2022-03-14T17:33:40.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741050",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r826506842\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,30 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files,\n+                            filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      glob_t glob_result;\n+      memset(&glob_result, 0, sizeof(glob_result)); \n+      glob(file.path().c_str(), GLOB_TILDE, NULL, &glob_result);\n\nReview comment:\n       What happens if the files are on a remote filesystem like S3?\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,30 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files,\n+                            filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      glob_t glob_result;\n+      memset(&glob_result, 0, sizeof(glob_result)); \n\nReview comment:\n       ```suggestion\r\n         glob_t glob_result{};\r\n   ```\r\n   Minor nit: As of C++11 you can use `{}` which forces value initialization (e.g. zero-filled) instead of default initialization.\n\n##########\nFile path: cpp/src/arrow/engine/substrait/relation_internal.cc\n##########\n@@ -103,13 +104,18 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n               \"substrait::ReadRel::LocalFiles::FileOrFiles::format \"\n               \"other than FILE_FORMAT_PARQUET\");\n         }\n-\n-        if (!util::string_view{item.uri_file()}.starts_with(\"file:///\")) {\n+        if (!util::string_view{item.uri_file()}.starts_with(\"file:///\") &&\n+            !util::string_view{item.uri_folder()}.starts_with(\"file:///\") &&\n+            !util::string_view{item.uri_path_glob()}.starts_with(\"file:///\")) {\n           return Status::NotImplemented(\n               \"substrait::ReadRel::LocalFiles::FileOrFiles::uri_file \"\n               \"with other than local filesystem (file:///)\");\n         }\n-        auto path = item.uri_file().substr(7);\n+\n+        std::string path;\n+        if(item.has_uri_file()) path = item.uri_file().substr(7);\n\nReview comment:\n       Instead of doing two if/else chains on `file/folder/glob` could you combine this one with the one at line 135?\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -23,6 +23,7 @@\n #include <unordered_set>\n #include <utility>\n #include <vector>\n+#include <glob.h>\n\nReview comment:\n       I'm not sure this include will work on Windows.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T01:49:35.148+0000",
                    "updated": "2022-03-15T01:49:35.148+0000",
                    "started": "2022-03-15T01:49:35.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741395",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r827125987\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -23,6 +23,7 @@\n #include <unordered_set>\n #include <utility>\n #include <vector>\n+#include <glob.h>\n\nReview comment:\n       I checked it yesterday, and this include won't work on Windows. I'll look for a way of doing the same exploration in Windows\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T15:41:53.932+0000",
                    "updated": "2022-03-15T15:41:53.932+0000",
                    "started": "2022-03-15T15:41:53.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741696",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#issuecomment-1068186748\n\n\n   If we are adding glob support, should we add this in general to the FileSystem and Dataset interfaces, and not just in context of a subtrait relation? (eg being to get the file infos for a glob path, using a glob path to discover a dataset, ..)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T16:22:58.336+0000",
                    "updated": "2022-03-15T16:22:58.336+0000",
                    "started": "2022-03-15T16:22:58.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741726",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r827377660\n\n\n\n##########\nFile path: cpp/src/arrow/engine/substrait/relation_internal.cc\n##########\n@@ -103,13 +104,18 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n               \"substrait::ReadRel::LocalFiles::FileOrFiles::format \"\n               \"other than FILE_FORMAT_PARQUET\");\n         }\n-\n-        if (!util::string_view{item.uri_file()}.starts_with(\"file:///\")) {\n+        if (!util::string_view{item.uri_file()}.starts_with(\"file:///\") &&\n+            !util::string_view{item.uri_folder()}.starts_with(\"file:///\") &&\n+            !util::string_view{item.uri_path_glob()}.starts_with(\"file:///\")) {\n           return Status::NotImplemented(\n               \"substrait::ReadRel::LocalFiles::FileOrFiles::uri_file \"\n               \"with other than local filesystem (file:///)\");\n         }\n-        auto path = item.uri_file().substr(7);\n+\n+        std::string path;\n+        if(item.has_uri_file()) path = item.uri_file().substr(7);\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T20:21:22.300+0000",
                    "updated": "2022-03-15T20:21:22.300+0000",
                    "started": "2022-03-15T20:21:22.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741847",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/741851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#issuecomment-1068434376\n\n\n   Yes, I guess we can add support in general. However, we still need to research about glob management in remote filesystems.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T20:24:42.795+0000",
                    "updated": "2022-03-15T20:24:42.795+0000",
                    "started": "2022-03-15T20:24:42.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741851",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/751850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r840935751\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -18,6 +18,7 @@\n #include \"arrow/dataset/discovery.h\"\n \n #include <algorithm>\n+#include <iostream>\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.h\n##########\n@@ -192,6 +193,8 @@ class ARROW_EXPORT FileSystem : public std::enable_shared_from_this<FileSystem>\n   /// it exists.\n   /// If it doesn't exist, see `FileSelector::allow_not_found`.\n   virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select) = 0;\n+  // Same, for glob paths.\n\nReview comment:\n       The comments here are a little too brief but I created https://issues.apache.org/jira/browse/ARROW-16101 to address this more fully so let's keep it how it is for now.\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -18,6 +18,7 @@\n #include \"arrow/dataset/discovery.h\"\n \n #include <algorithm>\n+#include <iostream>\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -663,19 +664,26 @@ std::wstring PathWithoutTrailingSlash(const PlatformFilename& fn) {\n   return path;\n }\n \n-Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path) {\n+Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path,\n+                                                      bool is_glob = false) {\n   WIN32_FIND_DATAW find_data;\n-  std::wstring pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+  std::wstring pattern;\n+  if (is_glob)\n+    pattern = dir_path.ToNative();\n+  else\n+    pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+\n+  std::vector<WIN32_FIND_DATAW> results;\n   HANDLE handle = FindFirstFileW(pattern.c_str(), &find_data);\n   if (handle == INVALID_HANDLE_VALUE) {\n+    if (is_glob) return results;\n\nReview comment:\n       Why is this ok?  Can you add a comment explaining what is going on here?\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -728,6 +736,34 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+std::vector<NativePathString> splitStr(const NativePathString& str, wchar_t delimiter) {\n+  std::vector<NativePathString> result_vec;\n\nReview comment:\n       Minor nit: We try to avoid return variables named \"result\" and also try to avoid appending type-suffixes like `_vec`.  Maybe just `std::vector<NativePathString> segments;`?\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -728,6 +736,34 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+std::vector<NativePathString> splitStr(const NativePathString& str, wchar_t delimiter) {\n\nReview comment:\n       ```suggestion\r\n   std::vector<NativePathString> SplitStr(const NativePathString& str, wchar_t delimiter) {\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -348,6 +350,10 @@ Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfo(const FileSelector&\n   return infos;\n }\n \n+Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfoGlob(const FileInfo& file) {\n+  return Status::NotImplemented(\"Glob file with SubTreeFileSystem\");\n\nReview comment:\n       Can we just prepend the glob pattern with `base_dir`?\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -348,6 +350,10 @@ Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfo(const FileSelector&\n   return infos;\n }\n \n+Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfoGlob(const FileInfo& file) {\n+  return Status::NotImplemented(\"Glob file with SubTreeFileSystem\");\n\nReview comment:\n       Can we just prepend the glob pattern with `base_dir`?\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.h\n##########\n@@ -192,6 +193,8 @@ class ARROW_EXPORT FileSystem : public std::enable_shared_from_this<FileSystem>\n   /// it exists.\n   /// If it doesn't exist, see `FileSelector::allow_not_found`.\n   virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select) = 0;\n+  // Same, for glob paths.\n\nReview comment:\n       The comments here are a little too brief but I created https://issues.apache.org/jira/browse/ARROW-16101 to address this more fully so let's keep it how it is for now.\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -728,6 +736,34 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+std::vector<NativePathString> splitStr(const NativePathString& str, wchar_t delimiter) {\n+  std::vector<NativePathString> result_vec;\n\nReview comment:\n       Minor nit: We try to avoid return variables named \"result\" and also try to avoid appending type-suffixes like `_vec`.  Maybe just `std::vector<NativePathString> segments;`?\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -759,6 +795,24 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+Result<std::vector<PlatformFilename>> ListGlob(const PlatformFilename& glob_path) {\n+  glob_t glob_result{};\n+  errno = glob(glob_path.ToNative().c_str(), GLOB_TILDE, NULL, &glob_result);\n+\n+  if (errno != 0 && errno != GLOB_NOMATCH) {\n+    return IOErrorFromErrno(errno, \"Cannot list glob '\", glob_path.ToString(), \"'\");\n+  }\n+\n+  std::vector<PlatformFilename> results;\n+  for (size_t i = 0; i < glob_result.gl_pathc; ++i) {\n+    results.emplace_back(std::string(glob_result.gl_pathv[i]));\n\nReview comment:\n       ```suggestion\r\n       results.emplace_back(glob_result.gl_pathv[i]);\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -759,6 +795,24 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+Result<std::vector<PlatformFilename>> ListGlob(const PlatformFilename& glob_path) {\n+  glob_t glob_result{};\n+  errno = glob(glob_path.ToNative().c_str(), GLOB_TILDE, NULL, &glob_result);\n+\n+  if (errno != 0 && errno != GLOB_NOMATCH) {\n+    return IOErrorFromErrno(errno, \"Cannot list glob '\", glob_path.ToString(), \"'\");\n+  }\n+\n+  std::vector<PlatformFilename> results;\n+  for (size_t i = 0; i < glob_result.gl_pathc; ++i) {\n+    results.emplace_back(std::string(glob_result.gl_pathv[i]));\n\nReview comment:\n       ```suggestion\r\n       results.emplace_back(glob_result.gl_pathv[i]);\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview comment:\n       So this is something of an abstract concern but I think we have a bit of ambiguity between input & output types.\r\n   \r\n   I see `FileInfo` as an \"output type\".  It is something you get back from a filesystem that describes something that it went out and discovered or inspected.\r\n   \r\n   In the meantime, PlatformFilename and FileSelector are \"input\" types.  They are provided by the user for the purpose of obtaining FileInfo objects.\r\n   \r\n   As a result I'm not sure it makes sense to have `FileType::Glob` because I would interpret that as the filesystem discovering a glob inside the filesystem.  For example `GetFileInfo` would never return `FileType::Glob`.\r\n   \r\n   Instead, can we do something slightly different:\r\n   \r\n   Instead of modifying the `Make` overload that accepts `const std::vector<fs::FileInfo>&` can we add a new overload that takes `const std::vector<fs::FileSelector>&`?\r\n   \r\n   Then, instead of adding `FileType::Glob` can we add an `is_glob` property to `FileSelector` (if this is true then `base_dir` is expected to be a glob pattern and `recursive` will be ignored).\r\n   \r\n   We could also then change the rules a little on `FileSelector` so that `base_dir` is allowed to represent a single file.  Then we can treat the \"path\" case (user doesn't specify it as a file or a directory) as a selector also.  That would allow us to move all the `GetFileInfo` calls out of the Substrait consumer.\r\n   \r\n   CC @pitrou for a second opinion as he has a lot of experience here.\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -728,6 +736,34 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n   return results;\n }\n \n+std::vector<NativePathString> splitStr(const NativePathString& str, wchar_t delimiter) {\n\nReview comment:\n       ```suggestion\r\n   std::vector<NativePathString> SplitStr(const NativePathString& str, wchar_t delimiter) {\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -663,19 +664,26 @@ std::wstring PathWithoutTrailingSlash(const PlatformFilename& fn) {\n   return path;\n }\n \n-Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path) {\n+Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path,\n+                                                      bool is_glob = false) {\n   WIN32_FIND_DATAW find_data;\n-  std::wstring pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+  std::wstring pattern;\n+  if (is_glob)\n+    pattern = dir_path.ToNative();\n+  else\n+    pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+\n+  std::vector<WIN32_FIND_DATAW> results;\n   HANDLE handle = FindFirstFileW(pattern.c_str(), &find_data);\n   if (handle == INVALID_HANDLE_VALUE) {\n+    if (is_glob) return results;\n\nReview comment:\n       Why is this ok?  Can you add a comment explaining what is going on here?\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview comment:\n       So this is something of an abstract concern but I think we have a bit of ambiguity between input & output types.\r\n   \r\n   I see `FileInfo` as an \"output type\".  It is something you get back from a filesystem that describes something that it went out and discovered or inspected.\r\n   \r\n   In the meantime, PlatformFilename and FileSelector are \"input\" types.  They are provided by the user for the purpose of obtaining FileInfo objects.\r\n   \r\n   As a result I'm not sure it makes sense to have `FileType::Glob` because I would interpret that as the filesystem discovering a glob inside the filesystem.  For example `GetFileInfo` would never return `FileType::Glob`.\r\n   \r\n   Instead, can we do something slightly different:\r\n   \r\n   Instead of modifying the `Make` overload that accepts `const std::vector<fs::FileInfo>&` can we add a new overload that takes `const std::vector<fs::FileSelector>&`?\r\n   \r\n   Then, instead of adding `FileType::Glob` can we add an `is_glob` property to `FileSelector` (if this is true then `base_dir` is expected to be a glob pattern and `recursive` will be ignored).\r\n   \r\n   We could also then change the rules a little on `FileSelector` so that `base_dir` is allowed to represent a single file.  Then we can treat the \"path\" case (user doesn't specify it as a file or a directory) as a selector also.  That would allow us to move all the `GetFileInfo` calls out of the Substrait consumer.\r\n   \r\n   CC @pitrou for a second opinion as he has a lot of experience here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T01:17:04.238+0000",
                    "updated": "2022-04-02T01:17:04.238+0000",
                    "started": "2022-04-02T01:17:04.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751850",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/751867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r840995798\n\n\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -663,19 +664,26 @@ std::wstring PathWithoutTrailingSlash(const PlatformFilename& fn) {\n   return path;\n }\n \n-Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path) {\n+Result<std::vector<WIN32_FIND_DATAW>> ListDirInternal(const PlatformFilename& dir_path,\n+                                                      bool is_glob = false) {\n   WIN32_FIND_DATAW find_data;\n-  std::wstring pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+  std::wstring pattern;\n+  if (is_glob)\n+    pattern = dir_path.ToNative();\n+  else\n+    pattern = PathWithoutTrailingSlash(dir_path) + L\"\\\\*.*\";\n+\n+  std::vector<WIN32_FIND_DATAW> results;\n   HANDLE handle = FindFirstFileW(pattern.c_str(), &find_data);\n   if (handle == INVALID_HANDLE_VALUE) {\n+    if (is_glob) return results;\n\nReview comment:\n       The idea is that if a glob doesn't match any file, it should return an empty vector.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T02:31:54.800+0000",
                    "updated": "2022-04-02T02:31:54.800+0000",
                    "started": "2022-04-02T02:31:54.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751867",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/751869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r840996765\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview comment:\n       File selector might be able to handle files, directories, and globs, isn't it? So, we'll have an extra property like is_glob for glob discovery. But, can we have a property that tell us if it is a file, a directory, or a glob? Just to make it more user-friendly and avoid having a property per each type.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T02:40:47.655+0000",
                    "updated": "2022-04-02T02:40:47.655+0000",
                    "started": "2022-04-02T02:40:47.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751869",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/751878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r841005135\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview comment:\n       I'm not entirely sure what you are describing but I think it sounds ok.  Can you show an example of what the fields would look like?  For example, I was thinking:\r\n   \r\n   ```\r\n   struct ARROW_EXPORT FileSelector {\r\n     std::string base_dir;\r\n     bool allow_not_found;\r\n     bool recursive;\r\n     bool is_glob;\r\n     int32_t max_recursion;\r\n   };\r\n   ```\r\n   \r\n   Are you thinking of using an enum instead of having both `bool is_glob` and `bool recursive`?  We could have an `is_file` property but I don't know that we would use it.  If we know we have a file we can just use a filename.  If we have a path then we don't know if it is a file or not.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T04:13:51.056+0000",
                    "updated": "2022-04-02T04:13:51.056+0000",
                    "started": "2022-04-02T04:13:51.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751878",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/751919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on a change in pull request #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r841070369\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/discovery.cc\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview comment:\n       Yes, I'm thinking of using an enum, something like this:\r\n   \r\n   ```\r\n   struct ARROW_EXPORT FileSelector {\r\n     std::string base_dir;\r\n     FileType type;\r\n     bool allow_not_found;\r\n     int32_t max_recursion;\r\n     \r\n     FileSelector() : type(Unknown), allow_not_found(false), recursive(false), \r\n                      max_recursion(INT32_MAX) {}\r\n     FileSelector(std::string base_dir) : base_dir(base_dir), type(File), \r\n                                          allow_not_found(false), recursive(false), \r\n                                          max_recursion(INT32_MAX) {}\r\n   };\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T12:20:15.224+0000",
                    "updated": "2022-04-02T12:20:15.224+0000",
                    "started": "2022-04-02T12:20:15.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751919",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/752386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r841969110\n\n\n##########\ncpp/src/arrow/dataset/discovery.cc:\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview Comment:\n   Ok, yes, I think an enum approach is fine.  I would maybe call it `SelectorType` instead of `FileType` since we already have something named `FileType`.  I would have a slight preference to not reuse `FileType` because that will lead to some confusion (users creating a selector will wonder what \"unknown\" means and users getting fileinfo will wonder what \"glob\" means).\r\n   \r\n   Also, we will want to make sure it is clear (in comments at least to start but later in documentation) the meaning of the fields.\n\n\n\n",
                    "created": "2022-04-04T17:14:01.410+0000",
                    "updated": "2022-04-04T17:14:01.410+0000",
                    "started": "2022-04-04T17:14:01.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752386",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/752442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r842046641\n\n\n##########\ncpp/src/arrow/dataset/discovery.cc:\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview Comment:\n   Ok, I understand. So, should I go ahead and perform the changes? Or should we be waiting for someone else opinion?\n\n\n\n",
                    "created": "2022-04-04T18:54:21.163+0000",
                    "updated": "2022-04-04T18:54:21.163+0000",
                    "started": "2022-04-04T18:54:21.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752442",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/752496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r842110538\n\n\n##########\ncpp/src/arrow/dataset/discovery.cc:\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview Comment:\n   If you have time to perform the changes I think it's good to go and make them.\n\n\n\n",
                    "created": "2022-04-04T20:24:14.184+0000",
                    "updated": "2022-04-04T20:24:14.184+0000",
                    "started": "2022-04-04T20:24:14.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752496",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/754096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r845169731\n\n\n##########\ncpp/src/arrow/dataset/discovery.cc:\n##########\n@@ -134,8 +135,26 @@ Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n Result<std::shared_ptr<DatasetFactory>> FileSystemDatasetFactory::Make(\n     std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n     std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options) {\n+  // Discover files in directories and globs\n+  std::vector<fs::FileInfo> discovered_files;\n+  for (const auto& file : files) {\n+    if (file.IsDirectory()) {\n+      fs::FileSelector file_selector;\n+      file_selector.base_dir = file.dir_name();\n+      file_selector.recursive = true;\n+      ARROW_ASSIGN_OR_RAISE(auto folder_files, filesystem->GetFileInfo(file_selector));\n+      std::move(folder_files.begin(), folder_files.end(),\n+                std::back_inserter(discovered_files));\n+    } else if (file.IsGlob()) {\n+      ARROW_ASSIGN_OR_RAISE(auto files, filesystem->GetFileInfoGlob(file));\n+      std::move(files.begin(), files.end(), std::back_inserter(discovered_files));\n+    } else if (file.IsFile()) {\n+      discovered_files.emplace_back(file);\n+    }\n+  }\n+\n\nReview Comment:\n   Ok, I'm working on that. \r\n   \r\n   @westonpace, I have a question about current use of `FileSelector`. Some tests use `selector.recursive = true; `, I think recursive in the new implementation means `selector.type = Directory` and `selector.max_recursion = INT32_MAX`. So, we should add a method like `set_recursive(bool)` and `bool is_recursive()` or setting `selector.max_recursion` is enough? \n\n\n\n",
                    "created": "2022-04-07T13:57:47.806+0000",
                    "updated": "2022-04-07T13:57:47.806+0000",
                    "started": "2022-04-07T13:57:47.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754096",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/756812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r850030115\n\n\n##########\ncpp/src/arrow/dataset/discovery.h:\n##########\n@@ -248,6 +248,18 @@ class ARROW_DS_EXPORT FileSystemDatasetFactory : public DatasetFactory {\n       std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n       std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options);\n \n+  /// \\brief Build a FileSystemDatasetFactory from an explicit list of\n+  /// file selectors.\n+  ///\n+  /// \\param[in] filesystem passed to FileSystemDataset\n+  /// \\param[in] selectors used to crawl and search files\n+  /// \\param[in] format passed to FileSystemDataset\n+  /// \\param[in] options see FileSystemFactoryOptions for more information.\n\nReview Comment:\n   ```suggestion\r\n     /// \\param[in] options controlling factory operation\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -122,18 +122,30 @@ ARROW_EXPORT std::ostream& operator<<(std::ostream& os, const FileInfo&);\n \n /// \\brief File selector for filesystem APIs\n struct ARROW_EXPORT FileSelector {\n-  /// The directory in which to select files.\n-  /// If the path exists but doesn't point to a directory, this should be an error.\n+  /// The path or glob in which to select files.\n\nReview Comment:\n   ```suggestion\r\n     /// \\brief The path or glob in which to select files.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -122,18 +122,30 @@ ARROW_EXPORT std::ostream& operator<<(std::ostream& os, const FileInfo&);\n \n /// \\brief File selector for filesystem APIs\n struct ARROW_EXPORT FileSelector {\n-  /// The directory in which to select files.\n-  /// If the path exists but doesn't point to a directory, this should be an error.\n+  /// The path or glob in which to select files.\n   std::string base_dir;\n+  // Selector type of file selector\n+  SelectorType type;\n   /// The behavior if `base_dir` isn't found in the filesystem.  If false,\n   /// an error is returned.  If true, an empty selection is returned.\n   bool allow_not_found;\n-  /// Whether to recurse into subdirectories.\n-  bool recursive;\n   /// The maximum number of subdirectories to recurse into.\n   int32_t max_recursion;\n \n-  FileSelector() : allow_not_found(false), recursive(false), max_recursion(INT32_MAX) {}\n+  FileSelector()\n+      : type(SelectorType::Directory), allow_not_found(false), max_recursion(0) {}\n+\n+  FileSelector(std::string base_dir, SelectorType type)\n+      : base_dir(base_dir), type(type), allow_not_found(false), max_recursion(0) {}\n+\n+  bool recursive() const { return (type == SelectorType::Directory && max_recursion); }\n\nReview Comment:\n   Isn't a glob selector recursive if it has `**`?\n\n\n\n##########\ncpp/src/arrow/dataset/discovery.h:\n##########\n@@ -248,6 +248,18 @@ class ARROW_DS_EXPORT FileSystemDatasetFactory : public DatasetFactory {\n       std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n       std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options);\n \n+  /// \\brief Build a FileSystemDatasetFactory from an explicit list of\n+  /// file selectors.\n+  ///\n+  /// \\param[in] filesystem passed to FileSystemDataset\n+  /// \\param[in] selectors used to crawl and search files\n+  /// \\param[in] format passed to FileSystemDataset\n\nReview Comment:\n   ```suggestion\r\n     /// \\param[in] format of the files, describes how to read and write files\n\n\n\n##########\ncpp/src/arrow/python/filesystem.cc:\n##########\n@@ -98,6 +98,10 @@ Result<std::vector<FileInfo>> PyFileSystem::GetFileInfo(const FileSelector& sele\n   return infos;\n }\n \n+Result<std::vector<FileInfo>> PyFileSystem::GetFileInfoGlob(const FileSelector& select) {\n+  return Status::NotImplemented(\"Glob file with PyFileSystem\");\n\nReview Comment:\n   ```suggestion\r\n     return Status::NotImplemented(\"Glob selector with PyFileSystem\");\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -122,18 +122,30 @@ ARROW_EXPORT std::ostream& operator<<(std::ostream& os, const FileInfo&);\n \n /// \\brief File selector for filesystem APIs\n struct ARROW_EXPORT FileSelector {\n-  /// The directory in which to select files.\n-  /// If the path exists but doesn't point to a directory, this should be an error.\n+  /// The path or glob in which to select files.\n   std::string base_dir;\n+  // Selector type of file selector\n\nReview Comment:\n   ```suggestion\r\n     /// brief type of file selector\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/mockfs.cc:\n##########\n@@ -587,6 +588,10 @@ Result<FileInfoVector> MockFileSystem::GetFileInfo(const FileSelector& selector)\n   return results;\n }\n \n+Result<FileInfoVector> MockFileSystem::GetFileInfoGlob(const FileSelector& selector) {\n+  return Status::NotImplemented(\"Glob file with MockFileSystem\");\n\nReview Comment:\n   ```suggestion\r\n     return Status::NotImplemented(\"Glob selector with MockFileSystem\");\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/discovery.h:\n##########\n@@ -248,6 +248,18 @@ class ARROW_DS_EXPORT FileSystemDatasetFactory : public DatasetFactory {\n       std::shared_ptr<fs::FileSystem> filesystem, const std::vector<fs::FileInfo>& files,\n       std::shared_ptr<FileFormat> format, FileSystemFactoryOptions options);\n \n+  /// \\brief Build a FileSystemDatasetFactory from an explicit list of\n+  /// file selectors.\n+  ///\n+  /// \\param[in] filesystem passed to FileSystemDataset\n\nReview Comment:\n   ```suggestion\r\n     /// \\param[in] filesystem to use for all operations\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/s3fs.cc:\n##########\n@@ -1939,7 +1940,8 @@ class S3FileSystem::Impl : public std::enable_shared_from_this<S3FileSystem::Imp\n         return false;\n       }\n       RETURN_NOT_OK(self->CheckNestingDepth(nesting_depth));\n-      return select.recursive && nesting_depth <= select.max_recursion;\n+      return select.type == SelectorType::Directory &&\n\nReview Comment:\n   Same here, I'm not sure how we reach this point unless we are already scanning a directory so this extra check seems redundant.\n\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -186,12 +198,16 @@ class ARROW_EXPORT FileSystem : public std::enable_shared_from_this<FileSystem>\n   virtual Result<FileInfo> GetFileInfo(const std::string& path) = 0;\n   /// Same, for many targets at once.\n   virtual Result<FileInfoVector> GetFileInfo(const std::vector<std::string>& paths);\n+  /// Get file for file selector\n+  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select);\n   /// Same, according to a selector.\n   ///\n   /// The selector's base directory will not be part of the results, even if\n   /// it exists.\n   /// If it doesn't exist, see `FileSelector::allow_not_found`.\n-  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select) = 0;\n+  virtual Result<FileInfoVector> GetFileInfoDir(const FileSelector& select) = 0;\n\nReview Comment:\n   I think `GetFileInfo(const FileSelector& select)` is sufficient.  If we want `GetFileInfoDir` and `GetFileInfoGlob` behind the scenes then that is fine but they should be private methods (or they could be protected methods if you're trying to provide a default implementation).  Otherwise I could call `GetFileInfoGlob` with a file selector with the directory type and it's not clear what that should do.\n\n\n\n##########\ncpp/src/arrow/filesystem/s3fs.cc:\n##########\n@@ -1897,7 +1897,8 @@ class S3FileSystem::Impl : public std::enable_shared_from_this<S3FileSystem::Imp\n \n     auto handle_recursion = [&](int32_t nesting_depth) -> Result<bool> {\n       RETURN_NOT_OK(CheckNestingDepth(nesting_depth));\n-      return select.recursive && nesting_depth <= select.max_recursion;\n+      return select.type == SelectorType::Directory &&\n\nReview Comment:\n   Is it possible to reach this point and `select.type != SelectorType::Directory`?\n\n\n\n##########\ncpp/src/arrow/filesystem/s3fs.cc:\n##########\n@@ -2276,6 +2278,10 @@ Result<FileInfoVector> S3FileSystem::GetFileInfo(const FileSelector& select) {\n   return results;\n }\n \n+Result<FileInfoVector> S3FileSystem::GetFileInfoGlob(const FileSelector& select) {\n+  return Status::NotImplemented(\"Glob file with S3FileSystem\");\n\nReview Comment:\n   ```suggestion\r\n     return Status::NotImplemented(\"Glob selector with S3FileSystem\");\r\n   ```\n\n\n\n##########\ncpp/src/arrow/filesystem/gcsfs.cc:\n##########\n@@ -735,8 +735,12 @@ Result<FileInfo> GcsFileSystem::GetFileInfo(const std::string& path) {\n   return impl_->GetFileInfo(p);\n }\n \n-Result<FileInfoVector> GcsFileSystem::GetFileInfo(const FileSelector& select) {\n-  return impl_->GetFileInfo(select);\n+Result<FileInfoVector> GcsFileSystem::GetFileInfoDir(const FileSelector& select) {\n+  return impl_->GetFileInfoDir(select);\n+}\n+\n+Result<FileInfoVector> GcsFileSystem::GetFileInfoGlob(const FileSelector& select) {\n+  return Status::NotImplemented(\"Glob file with GcsFileSystem\");\n\nReview Comment:\n   ```suggestion\r\n     return Status::NotImplemented(\"Glob selector with GcsFileSystem\");\r\n   ```\n\n\n\n",
                    "created": "2022-04-14T02:40:40.275+0000",
                    "updated": "2022-04-14T02:40:40.275+0000",
                    "started": "2022-04-14T02:40:40.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756812",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/758146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r852456981\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -186,12 +198,16 @@ class ARROW_EXPORT FileSystem : public std::enable_shared_from_this<FileSystem>\n   virtual Result<FileInfo> GetFileInfo(const std::string& path) = 0;\n   /// Same, for many targets at once.\n   virtual Result<FileInfoVector> GetFileInfo(const std::vector<std::string>& paths);\n+  /// Get file for file selector\n+  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select);\n   /// Same, according to a selector.\n   ///\n   /// The selector's base directory will not be part of the results, even if\n   /// it exists.\n   /// If it doesn't exist, see `FileSelector::allow_not_found`.\n-  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select) = 0;\n+  virtual Result<FileInfoVector> GetFileInfoDir(const FileSelector& select) = 0;\n\nReview Comment:\n   I make `GetFileInfoDir` and `GetFileInfoGlob` methods protected\n\n\n\n",
                    "created": "2022-04-18T22:28:44.655+0000",
                    "updated": "2022-04-18T22:28:44.655+0000",
                    "started": "2022-04-18T22:28:44.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758146",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/758149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r852464078\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -122,18 +122,30 @@ ARROW_EXPORT std::ostream& operator<<(std::ostream& os, const FileInfo&);\n \n /// \\brief File selector for filesystem APIs\n struct ARROW_EXPORT FileSelector {\n-  /// The directory in which to select files.\n-  /// If the path exists but doesn't point to a directory, this should be an error.\n+  /// The path or glob in which to select files.\n   std::string base_dir;\n+  // Selector type of file selector\n+  SelectorType type;\n   /// The behavior if `base_dir` isn't found in the filesystem.  If false,\n   /// an error is returned.  If true, an empty selection is returned.\n   bool allow_not_found;\n-  /// Whether to recurse into subdirectories.\n-  bool recursive;\n   /// The maximum number of subdirectories to recurse into.\n   int32_t max_recursion;\n \n-  FileSelector() : allow_not_found(false), recursive(false), max_recursion(INT32_MAX) {}\n+  FileSelector()\n+      : type(SelectorType::Directory), allow_not_found(false), max_recursion(0) {}\n+\n+  FileSelector(std::string base_dir, SelectorType type)\n+      : base_dir(base_dir), type(type), allow_not_found(false), max_recursion(0) {}\n+\n+  bool recursive() const { return (type == SelectorType::Directory && max_recursion); }\n\nReview Comment:\n   I have a few questions, right now, we're not using that convention, but we could use it. Right now we are working only with '*' , but we can change it to '\\*\\*'. If we use '**' convention, do we want users to be able to specify the `max_recursion` or we assume we always have the maximum recursion? \r\n   \r\n   If we keep only '*' and max_recursion, recursive function would be like this: \r\n   ```\r\n   bool recursive() const { return ((type == SelectorType::Directory || (type == SelectorType::Glob && base_dir.back() == '*')) \r\n                                    && max_recursion); }\r\n   ```\n\n\n\n",
                    "created": "2022-04-18T22:45:10.995+0000",
                    "updated": "2022-04-18T22:45:10.995+0000",
                    "started": "2022-04-18T22:45:10.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758149",
                    "issueId": "13426726"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/worklog/758150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ArianaVillegas commented on code in PR #12625:\nURL: https://github.com/apache/arrow/pull/12625#discussion_r852456981\n\n\n##########\ncpp/src/arrow/filesystem/filesystem.h:\n##########\n@@ -186,12 +198,16 @@ class ARROW_EXPORT FileSystem : public std::enable_shared_from_this<FileSystem>\n   virtual Result<FileInfo> GetFileInfo(const std::string& path) = 0;\n   /// Same, for many targets at once.\n   virtual Result<FileInfoVector> GetFileInfo(const std::vector<std::string>& paths);\n+  /// Get file for file selector\n+  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select);\n   /// Same, according to a selector.\n   ///\n   /// The selector's base directory will not be part of the results, even if\n   /// it exists.\n   /// If it doesn't exist, see `FileSelector::allow_not_found`.\n-  virtual Result<FileInfoVector> GetFileInfo(const FileSelector& select) = 0;\n+  virtual Result<FileInfoVector> GetFileInfoDir(const FileSelector& select) = 0;\n\nReview Comment:\n   I made `GetFileInfoDir` and `GetFileInfoGlob` methods protected\n\n\n\n",
                    "created": "2022-04-18T22:47:01.154+0000",
                    "updated": "2022-04-18T22:47:01.154+0000",
                    "started": "2022-04-18T22:47:01.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758150",
                    "issueId": "13426726"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 48000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@9a4d583[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21abec58[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36dd867a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@48ea75d5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41202d85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@a91d722[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50256e5c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b7afd50[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bf6bdbf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@f5a4324[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74769b1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@687a78be[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 48000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 10 16:11:05 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-10T16:11:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15587/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-02-05T02:21:07.000+0000",
        "updated": "2022-05-12T15:31:46.000+0000",
        "timeoriginalestimate": null,
        "description": "The Substrait read operator defines files with LocalFiles::FileOrFiles.  These elements can take one of several forms:\r\n\r\nuri_path (can be a file or a folder)\r\nuri_path_glob (a glob expression)\r\nuri_file (file only)\r\nuri_folder (folder only)\r\n\r\nThe C++ Substrait consumer currently only supports uri_file.  We should add support for the other options.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "13h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 48000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add support for all options specified by substrait::ReadRel::LocalFiles::FileOrFiles",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/comment/17500342",
                    "id": "17500342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I think one approach could be to change the FromProto method to create a dataset using a dataset factory instead of a dataset.\r\n\r\n * The first thing we will need to do is scan the URIs and determine the filesystem.  If there are multiple filesystems we could just return an error today (in the future we could maybe create multiple datasets and union them together).\r\n * Once we have a filesystem we can extract the path part from the URIs.  I'm pretty sure paths can be folders or files.\r\n * If we want to add glob support we should add that in the FileSystemDatasetFactory.  That can be done in a follow-up PR if we want to keep things simpler.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-03-02T18:50:34.693+0000",
                    "updated": "2022-03-02T18:50:34.693+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426726/comment/17534439",
                    "id": "17534439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12625\n[https://github.com/apache/arrow/pull/12625]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-05-10T16:11:05.366+0000",
                    "updated": "2022-05-10T16:11:05.366+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0za14:",
        "customfield_12314139": null
    }
}