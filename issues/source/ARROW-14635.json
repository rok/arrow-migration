{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13410708",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708",
    "key": "ARROW-14635",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12648599",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12648599",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13472150",
                    "key": "ARROW-17114",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472150",
                    "fields": {
                        "summary": "[Python][C++] O_DIRECT write support ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12626787",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12626787",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13412256",
                    "key": "ARROW-14736",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412256",
                    "fields": {
                        "summary": "[C++][R]Opening a multi-file dataset and writing a re-partitioned version of it fails",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 54000,
            "total": 54000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 54000,
            "total": 54000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14635/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 90,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#issuecomment-1189186899\n\n   https://issues.apache.org/jira/browse/ARROW-14635\n\n\n",
                    "created": "2022-07-19T15:19:47.164+0000",
                    "updated": "2022-07-19T15:19:47.164+0000",
                    "started": "2022-07-19T15:19:47.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792752",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924756597\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   Will produce some benchmark experiments that compare the posix_fadvise with O_DIRECT and link here.\n\n\n\n",
                    "created": "2022-07-19T17:02:15.458+0000",
                    "updated": "2022-07-19T17:02:15.458+0000",
                    "started": "2022-07-19T17:02:15.458+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792814",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924779403\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   [directio.zip](https://github.com/apache/arrow/files/9143325/directio.zip)\r\n   Here is an experiment with three ways of writing: O_DIRECT, O_SYNC + fadvise, and normal write. I run the experiments on a 10GB write to NVME SSD on AWS i3.2xlarge. With O_DIRECT no page cache mem increase but the other two ways of writing caused 10GB page cache usage. O_SYNC + fadvise had no visible difference with normal write in terms of page cache usage. Perhaps I am not using the fadvise API properly? If so please let me know. \n\n\n\n",
                    "created": "2022-07-19T17:23:48.188+0000",
                    "updated": "2022-07-19T17:23:48.188+0000",
                    "started": "2022-07-19T17:23:48.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792837",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924782442\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   For the record, when compiling your example I get:\r\n   ```\r\n   fadvise.cpp: In function \u2018int main()\u2019:\r\n   fadvise.cpp:18:32: warning: integer overflow in expression of type \u2018int\u2019 results in \u2018-2147483648\u2019 [-Woverflow]\r\n      18 |         posix_fadvise(fd, 0, N * SIZE, POSIX_FADV_DONTNEED);\r\n         |                                ^\r\n   ```\n\n\n\n",
                    "created": "2022-07-19T17:27:13.724+0000",
                    "updated": "2022-07-19T17:27:13.724+0000",
                    "started": "2022-07-19T17:27:13.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792841",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924785615\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   Also, the \"nothing\" version is much faster here than the \"direct\" version (the former writes at ~300 MB/s, the latter at ~100 MB/s).\n\n\n\n",
                    "created": "2022-07-19T17:30:54.051+0000",
                    "updated": "2022-07-19T17:30:54.051+0000",
                    "started": "2022-07-19T17:30:54.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792844",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924789043\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   this is valid. Let me fix this\n\n\n\n",
                    "created": "2022-07-19T17:34:54.352+0000",
                    "updated": "2022-07-19T17:34:54.352+0000",
                    "started": "2022-07-19T17:34:54.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792847",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924793017\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   By the way:\r\n   \r\n   > With O_DIRECT no page cache mem increase but the other two ways of writing caused 10GB page cache usage\r\n   \r\n   I don't think this is conclusive. There is no reason for the OS to release some page cache is there's no memory pressure. I think a more sophisticated benchmark is needed, but I'm not sure what to suggest.\n\n\n\n",
                    "created": "2022-07-19T17:39:44.745+0000",
                    "updated": "2022-07-19T17:39:44.745+0000",
                    "started": "2022-07-19T17:39:44.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792849",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924799071\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   See also https://stackoverflow.com/a/3756466 which suggests a more sophisticated approach (perhaps too sophisticated?).\n\n\n\n",
                    "created": "2022-07-19T17:47:00.203+0000",
                    "updated": "2022-07-19T17:47:00.203+0000",
                    "started": "2022-07-19T17:47:00.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792853",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924803445\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   [directio.zip](https://github.com/apache/arrow/files/9143508/directio.zip)\r\n   OK. I updated it to avoid overflow. The naive posix_fadvise approach (where you call this before ALL the writes) still doesn't work in controlling page cache. (fadvise.cpp)\r\n   \r\n   However I discovered if you call posix_fadvise *every* time before a write on the *entire* region you intend to write, it works in controlling the page cache, despite being 50% slower than O_DIRECT. This is fadvise1.cpp. If you call posix_fadvise every time only on the next region you intend to write, it still doesn't control the page cache.\r\n   \r\n   Bottom line is posix_fadvise probably works if we manage to guess at producing the right behavior, but it is a bit slower.\n\n\n\n",
                    "created": "2022-07-19T17:52:20.536+0000",
                    "updated": "2022-07-19T17:52:20.536+0000",
                    "started": "2022-07-19T17:52:20.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792858",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924807723\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   Just to be clear, my experiment was with `O_DSYNC` not with `posix_fadvise`. With `O_DSYNC`, writing to a single file runs at 0.406 GB/s, while with `O_DIRECT` I get 3.50 GB/s and with no sync flag I get 4.23 GB/s. This is on a Samsung 970 Evo NVMe.\n\n\n\n",
                    "created": "2022-07-19T17:57:20.877+0000",
                    "updated": "2022-07-19T17:57:20.877+0000",
                    "started": "2022-07-19T17:57:20.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792861",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924809581\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   Just to be clear, my experiment was with `O_DSYNC` not with `posix_fadvise`. With `O_DSYNC`, writing to a single file runs at 0.406 GB/s, while with `O_DIRECT` I get 3.50 GB/s and with no sync flag I get 4.23 GB/s. This is on a Samsung 970 Evo \n\n\n\n",
                    "created": "2022-07-19T17:59:41.029+0000",
                    "updated": "2022-07-19T17:59:41.029+0000",
                    "started": "2022-07-19T17:59:41.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792863",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924958407\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   I ran the experiments myself with 1GB of data for timing.  Oddly, on an HHD, I didn't observe much difference.  On an SSD, the difference was rather considerable (I reran the ssd tests a number of times and the difference was consistent):\r\n   \r\n   Method | Disk | Time (ms)\r\n   -",
                    "created": "2022-07-19T21:08:16.750+0000",
                    "updated": "2022-07-19T21:08:16.750+0000",
                    "started": "2022-07-19T21:08:16.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792908",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924959447\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   That being said...I wonder how hard it would be to offer both?  I suppose if one is a clear winner we shouldn't burden users with the choice but, if there are pros/cons, or different environments support different options, we should probably offer the choice.\n\n\n\n",
                    "created": "2022-07-19T21:09:56.813+0000",
                    "updated": "2022-07-19T21:09:56.813+0000",
                    "started": "2022-07-19T21:09:56.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792909",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924958407\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   I ran the experiments myself with 1GB of data for timing.  Oddly, on an HHD, I didn't observe much difference.  On an SSD, the difference was rather considerable (I reran the ssd tests a number of times and the difference was consistent):\r\n   \r\n   Method | Disk | Time (ms)\r\n   -",
                    "created": "2022-07-19T21:10:16.930+0000",
                    "updated": "2022-07-19T21:10:16.930+0000",
                    "started": "2022-07-19T21:10:16.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792910",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924964325\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   Also note that any use of synchronous writes means your main thread may block when writing (normal writes are usually non-blocking). This kind of benchmark is really not testing much IMHO.\r\n   \r\n   That said, we can of course offer both. My intuition is just that you may get glass jaws in real-world performance that you won't observe using a simple micro-benchmark on an otherwise local storage.\n\n\n\n",
                    "created": "2022-07-19T21:16:47.141+0000",
                    "updated": "2022-07-19T21:16:47.141+0000",
                    "started": "2022-07-19T21:16:47.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792917",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r924994670\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   > Also note that any use of synchronous writes means your main thread may block when writing\r\n   \r\n   Fortunately the dataset writer has already been written with blocking writes in mind :wink: .  Writes are issued on the I/O thread pool and a backpressure mechanism is in place.  In fact, the inability of that backpressure mechanism to prevent swapping/thrashing is exactly what motivated this JIRA in the first place.\r\n   \r\n   > My intuition is just that you may get glass jaws in real-world performance that you won't observe using a simple micro-benchmark on an otherwise local storage.\r\n   \r\n   I'm not sure what you mean by this.  Is this a concern regarding direct vs fadvise or a concern regarding sync vs async?\n\n\n\n",
                    "created": "2022-07-19T22:07:14.698+0000",
                    "updated": "2022-07-19T22:07:14.698+0000",
                    "started": "2022-07-19T22:07:14.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792941",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r925007982\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   > I'm not sure what you mean by this. Is this a concern regarding direct vs fadvise or a concern regarding sync vs async?\r\n   \r\n   Both. TBH, it's an entirely unsubstantiated intuition, but taking full control of how and when writes happen (as opposed to letting the kernel decide) means you'll face the same set of issues that kernel developers have dealt with and solved other the years.\r\n   \n\n\n\n",
                    "created": "2022-07-19T22:32:50.850+0000",
                    "updated": "2022-07-19T22:32:50.850+0000",
                    "started": "2022-07-19T22:32:50.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792949",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r925059114\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   [directio.zip](https://github.com/apache/arrow/files/9145458/directio.zip)\r\n   Please disregard the previous uploaded code. @westonpace helped me get these new benchmarks. Got fadvise working. You have to use fadvise after the write sys call. Unaligned/aligned doesn't make too much of a difference for the O_DIRECT since memcpy compared to NVMe is cheap. Doing nothing (nothing.cpp) is around same speed as O_DIRECT if you call sync at the end. fadvise is marginally slower (by about 15%).\n\n\n\n",
                    "created": "2022-07-20T00:25:04.225+0000",
                    "updated": "2022-07-20T00:25:04.225+0000",
                    "started": "2022-07-20T00:25:04.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792969",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail closed pull request #13640: ARROW-14635: [Python][C++] add O_DIRECT support to writes\nURL: https://github.com/apache/arrow/pull/13640\n\n\n",
                    "created": "2022-07-20T00:25:24.984+0000",
                    "updated": "2022-07-20T00:25:24.984+0000",
                    "started": "2022-07-20T00:25:24.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792970",
                    "issueId": "13410708"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/worklog/792972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13640:\nURL: https://github.com/apache/arrow/pull/13640#discussion_r925059321\n\n\n##########\ncpp/src/arrow/io/file.cc:\n##########\n@@ -378,6 +378,77 @@ Status FileOutputStream::Write(const void* data, int64_t length) {\n \n int FileOutputStream::file_descriptor() const { return impl_->fd(); }\n \n+// ----------------------------------------------------------------------\n+// DirectFileOutputStream, change the Open, Write and Close methods from FileOutputStream\n+// Uses DirectIO for writes. Will only write out things in 4096 byte blocks. Buffers leftover bytes\n+// in an internal data structure, which will be padded to 4096 bytes and flushed upon call to close.\n+\n+class DirectFileOutputStream::DirectFileOutputStreamImpl : public OSFile {\n+ public:\n+  Status Open(const std::string& path, bool append) {\n+    const bool truncate = !append;\n+    return OpenWritable(path, truncate, append, true /* write_only */, true);\n+  }\n+  Status Open(int fd) { return OpenWritable(fd); }\n+};\n+\n+DirectFileOutputStream::DirectFileOutputStream() { \n+  uintptr_t mask = (uintptr_t)(4095);\n+  uint8_t *mem = static_cast<uint8_t *>(malloc(4096 + 4095));\n+  cached_data = reinterpret_cast<uint8_t *>( reinterpret_cast<uintptr_t>(mem+4095) & ~(mask));\n\nReview Comment:\n   So I am going to close this PR and make a new one where we just use fadvise.\n\n\n\n",
                    "created": "2022-07-20T00:25:29.599+0000",
                    "updated": "2022-07-20T00:25:29.599+0000",
                    "started": "2022-07-20T00:25:29.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792972",
                    "issueId": "13410708"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 54000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5655aad5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4832f1bf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@594a34[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f39ec89[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ff00dc3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3e046d56[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74469848[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@648b7fed[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b5af8aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@36a94e4a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76ed040f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@49a66928[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 54000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 10 19:34:52 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14635/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-11-08T22:35:01.000+0000",
        "updated": "2022-10-20T04:54:45.000+0000",
        "timeoriginalestimate": null,
        "description": "The dataset writer now correctly applies backpressure.\u00a0 However, that backpressure is only applied when the write calls slow down.\u00a0 This only happens when the OS disk cache fills up.\r\n\r\nHowever, filling up the OS disk cache is undesirable.\u00a0 It will cause all running processes to get swapped (assuming the system has any swap configured) and will make the system unusable for anything else.\r\n\r\nThis typically has no actual benefit to the dataset write.\u00a0 The marginal performance boost provided by the extra RAM is often not worth the cost.\r\n\r\nOne way to do this would be to use direct I/O (although that comes with a plethora of warnings).\u00a0 Another way might be to flag the output was WONTNEED but I don't know for sure if this works (the OS might still cache it so that it can satisfy the write call quickly).\u00a0 Another way might be to somehow track how much disk cache is being used for writes but that would get complex.\u00a0 I'm sure there are other ways I'm just not aware of yet.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "15h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 54000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Devise a mechanism to limit the total \"system ram\" (process + cache) used by dataset writes",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410708/comment/17504538",
                    "id": "17504538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Just jotting this down but I did a bit of looking into this and I think a combination of writing the file with O_DSYNC and then using WONTNEED on the written data should accomplish this for Linux, though there may be other ways.\r\n\r\nOn windows there is a flag FILE_FLAG_WRITE_THROUGH which will be key I think",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-03-10T19:34:52.189+0000",
                    "updated": "2022-03-10T19:34:52.189+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wjw8:",
        "customfield_12314139": null
    }
}