{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13120994",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994",
    "key": "ARROW-1862",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1862/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@48bb3c2d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71c86229[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7047c5e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@42ac38ef[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fb46384[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@802e469[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46247868[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@656c4b03[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4968bc69[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@56d63881[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33d4fd0b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@34679c21[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 29 17:48:46 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-29T17:48:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1862/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-27T15:44:54.000+0000",
        "updated": "2017-11-29T17:48:46.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrowDictionaryArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16266959",
                    "id": "16266959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou opened a new pull request #1365: ARROW-1862: [GLib] Add GArrowDictionaryArray\nURL: https://github.com/apache/arrow/pull/1365\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-27T15:45:24.636+0000",
                    "updated": "2017-11-27T15:45:24.636+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16271008",
                    "id": "16271008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1365: ARROW-1862: [GLib] Add GArrowDictionaryArray\nURL: https://github.com/apache/arrow/pull/1365#discussion_r153833077\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-array.cpp\n ##########\n @@ -234,4 +239,106 @@ garrow_struct_array_get_fields(GArrowStructArray *array)\n   return g_list_reverse(fields);\n }\n \n+\n+G_DEFINE_TYPE(GArrowDictionaryArray,            \\\n+              garrow_dictionary_array,          \\\n+              GARROW_TYPE_ARRAY)\n+\n+static void\n+garrow_dictionary_array_init(GArrowDictionaryArray *object)\n+{\n+}\n+\n+static void\n+garrow_dictionary_array_class_init(GArrowDictionaryArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dictionary_array_new:\n+ * @data_type: The data type of dictionary.\n+ * @indices: The indices of values in dictionary.\n+ *\n+ * Returns: A newly created #GArrowDictionaryArray.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryArray *\n+garrow_dictionary_array_new(GArrowDataType *data_type,\n+                            GArrowArray *indices)\n+{\n+  const auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  const auto arrow_indices = garrow_array_get_raw(indices);\n+  auto arrow_dictionary_array =\n+    std::make_shared<arrow::DictionaryArray>(arrow_data_type,\n+                                             arrow_indices);\n+  auto arrow_array =\n+    std::static_pointer_cast<arrow::Array>(arrow_dictionary_array);\n+  return GARROW_DICTIONARY_ARRAY(garrow_array_new_raw(&arrow_array));\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_indices:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The indices of values in dictionary.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_indices(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_indices = arrow_dictionary_array->indices();\n+  return garrow_array_new_raw(&arrow_indices);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_dictionary(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary = arrow_dictionary_array->dictionary();\n+  return garrow_array_new_raw(&arrow_dictionary);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary_data_type:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary data type of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryDataType *\n+garrow_dictionary_array_get_dictionary_data_type(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary_data_type = arrow_dictionary_array->dict_type();\n+  auto const_arrow_data_type =\n+    static_cast<const arrow::DataType *>(arrow_dictionary_data_type);\n+  auto arrow_data_type = const_cast<arrow::DataType *>(const_arrow_data_type);\n+  struct NullDeleter {\n+    void operator()(arrow::DataType *data_type) {\n+    }\n+  };\n+  std::shared_ptr<arrow::DataType>\n+    shared_arrow_data_type(arrow_data_type, NullDeleter());\n \n Review comment:\n   Is there a possibility of this object being deleted while the result value of this function is still alive?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T16:07:34.470+0000",
                    "updated": "2017-11-29T16:07:34.470+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16271052",
                    "id": "16271052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou commented on a change in pull request #1365: ARROW-1862: [GLib] Add GArrowDictionaryArray\nURL: https://github.com/apache/arrow/pull/1365#discussion_r153842298\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-array.cpp\n ##########\n @@ -234,4 +239,106 @@ garrow_struct_array_get_fields(GArrowStructArray *array)\n   return g_list_reverse(fields);\n }\n \n+\n+G_DEFINE_TYPE(GArrowDictionaryArray,            \\\n+              garrow_dictionary_array,          \\\n+              GARROW_TYPE_ARRAY)\n+\n+static void\n+garrow_dictionary_array_init(GArrowDictionaryArray *object)\n+{\n+}\n+\n+static void\n+garrow_dictionary_array_class_init(GArrowDictionaryArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dictionary_array_new:\n+ * @data_type: The data type of dictionary.\n+ * @indices: The indices of values in dictionary.\n+ *\n+ * Returns: A newly created #GArrowDictionaryArray.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryArray *\n+garrow_dictionary_array_new(GArrowDataType *data_type,\n+                            GArrowArray *indices)\n+{\n+  const auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  const auto arrow_indices = garrow_array_get_raw(indices);\n+  auto arrow_dictionary_array =\n+    std::make_shared<arrow::DictionaryArray>(arrow_data_type,\n+                                             arrow_indices);\n+  auto arrow_array =\n+    std::static_pointer_cast<arrow::Array>(arrow_dictionary_array);\n+  return GARROW_DICTIONARY_ARRAY(garrow_array_new_raw(&arrow_array));\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_indices:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The indices of values in dictionary.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_indices(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_indices = arrow_dictionary_array->indices();\n+  return garrow_array_new_raw(&arrow_indices);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_dictionary(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary = arrow_dictionary_array->dictionary();\n+  return garrow_array_new_raw(&arrow_dictionary);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary_data_type:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary data type of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryDataType *\n+garrow_dictionary_array_get_dictionary_data_type(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary_data_type = arrow_dictionary_array->dict_type();\n+  auto const_arrow_data_type =\n+    static_cast<const arrow::DataType *>(arrow_dictionary_data_type);\n+  auto arrow_data_type = const_cast<arrow::DataType *>(const_arrow_data_type);\n+  struct NullDeleter {\n+    void operator()(arrow::DataType *data_type) {\n+    }\n+  };\n+  std::shared_ptr<arrow::DataType>\n+    shared_arrow_data_type(arrow_data_type, NullDeleter());\n \n Review comment:\n   Yes. It may be deleted because this dictionary array doesn't have reference to this object.\r\n   \r\n   I created the meaningless `shared_ptr` because the current `GArrowDataType` requires `std::shared_ptr<arrow::DataType>`. It's just an implementation detail. I can change `GArrowDataType` to support raw `arrow::DataType *` but it increases complexity. So I chose this approach.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T16:34:33.921+0000",
                    "updated": "2017-11-29T16:34:33.921+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16271210",
                    "id": "16271210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1365: ARROW-1862: [GLib] Add GArrowDictionaryArray\nURL: https://github.com/apache/arrow/pull/1365#discussion_r153864111\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-array.cpp\n ##########\n @@ -234,4 +239,106 @@ garrow_struct_array_get_fields(GArrowStructArray *array)\n   return g_list_reverse(fields);\n }\n \n+\n+G_DEFINE_TYPE(GArrowDictionaryArray,            \\\n+              garrow_dictionary_array,          \\\n+              GARROW_TYPE_ARRAY)\n+\n+static void\n+garrow_dictionary_array_init(GArrowDictionaryArray *object)\n+{\n+}\n+\n+static void\n+garrow_dictionary_array_class_init(GArrowDictionaryArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dictionary_array_new:\n+ * @data_type: The data type of dictionary.\n+ * @indices: The indices of values in dictionary.\n+ *\n+ * Returns: A newly created #GArrowDictionaryArray.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryArray *\n+garrow_dictionary_array_new(GArrowDataType *data_type,\n+                            GArrowArray *indices)\n+{\n+  const auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  const auto arrow_indices = garrow_array_get_raw(indices);\n+  auto arrow_dictionary_array =\n+    std::make_shared<arrow::DictionaryArray>(arrow_data_type,\n+                                             arrow_indices);\n+  auto arrow_array =\n+    std::static_pointer_cast<arrow::Array>(arrow_dictionary_array);\n+  return GARROW_DICTIONARY_ARRAY(garrow_array_new_raw(&arrow_array));\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_indices:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The indices of values in dictionary.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_indices(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_indices = arrow_dictionary_array->indices();\n+  return garrow_array_new_raw(&arrow_indices);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_dictionary(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary = arrow_dictionary_array->dictionary();\n+  return garrow_array_new_raw(&arrow_dictionary);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary_data_type:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary data type of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryDataType *\n+garrow_dictionary_array_get_dictionary_data_type(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary_data_type = arrow_dictionary_array->dict_type();\n+  auto const_arrow_data_type =\n+    static_cast<const arrow::DataType *>(arrow_dictionary_data_type);\n+  auto arrow_data_type = const_cast<arrow::DataType *>(const_arrow_data_type);\n+  struct NullDeleter {\n+    void operator()(arrow::DataType *data_type) {\n+    }\n+  };\n+  std::shared_ptr<arrow::DataType>\n+    shared_arrow_data_type(arrow_data_type, NullDeleter());\n \n Review comment:\n   OK, thank you\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T17:48:30.619+0000",
                    "updated": "2017-11-29T17:48:30.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16271213",
                    "id": "16271213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1365\n[https://github.com/apache/arrow/pull/1365]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-29T17:48:45.956+0000",
                    "updated": "2017-11-29T17:48:45.956+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120994/comment/16271214",
                    "id": "16271214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1365: ARROW-1862: [GLib] Add GArrowDictionaryArray\nURL: https://github.com/apache/arrow/pull/1365\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/basic-array.cpp b/c_glib/arrow-glib/basic-array.cpp\nindex 0698a0409..36cf4603a 100644\n--- a/c_glib/arrow-glib/basic-array.cpp\n+++ b/c_glib/arrow-glib/basic-array.cpp\n@@ -2091,6 +2091,9 @@ garrow_array_new_raw(std::shared_ptr<arrow::Array> *arrow_array)\n   case arrow::Type::type::STRUCT:\n     type = GARROW_TYPE_STRUCT_ARRAY;\n     break;\n+  case arrow::Type::type::DICTIONARY:\n+    type = GARROW_TYPE_DICTIONARY_ARRAY;\n+    break;\n   default:\n     type = GARROW_TYPE_ARRAY;\n     break;\ndiff --git a/c_glib/arrow-glib/composite-array.cpp b/c_glib/arrow-glib/composite-array.cpp\nindex 445103d37..14cc46d73 100644\n--- a/c_glib/arrow-glib/composite-array.cpp\n+++ b/c_glib/arrow-glib/composite-array.cpp\n@@ -44,6 +44,11 @@ G_BEGIN_DECLS\n  * or more structs. One struct has zero or more fields. If you don't\n  * have Arrow format data, you need to use #GArrowStructArrayBuilder\n  * to create a new array.\n+ *\n+ * #GArrowDictionaryArray is a class for dictionary array. It can\n+ * store data with dictionary and indices. It's space effective than\n+ * normal array when the array has many same values. You can convert a\n+ * normal array to dictionary array by garrow_array_dictionary_encode().\n  */\n \n G_DEFINE_TYPE(GArrowListArray,               \\\n@@ -234,4 +239,106 @@ garrow_struct_array_get_fields(GArrowStructArray *array)\n   return g_list_reverse(fields);\n }\n \n+\n+G_DEFINE_TYPE(GArrowDictionaryArray,            \\\n+              garrow_dictionary_array,          \\\n+              GARROW_TYPE_ARRAY)\n+\n+static void\n+garrow_dictionary_array_init(GArrowDictionaryArray *object)\n+{\n+}\n+\n+static void\n+garrow_dictionary_array_class_init(GArrowDictionaryArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dictionary_array_new:\n+ * @data_type: The data type of dictionary.\n+ * @indices: The indices of values in dictionary.\n+ *\n+ * Returns: A newly created #GArrowDictionaryArray.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryArray *\n+garrow_dictionary_array_new(GArrowDataType *data_type,\n+                            GArrowArray *indices)\n+{\n+  const auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  const auto arrow_indices = garrow_array_get_raw(indices);\n+  auto arrow_dictionary_array =\n+    std::make_shared<arrow::DictionaryArray>(arrow_data_type,\n+                                             arrow_indices);\n+  auto arrow_array =\n+    std::static_pointer_cast<arrow::Array>(arrow_dictionary_array);\n+  return GARROW_DICTIONARY_ARRAY(garrow_array_new_raw(&arrow_array));\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_indices:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The indices of values in dictionary.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_indices(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_indices = arrow_dictionary_array->indices();\n+  return garrow_array_new_raw(&arrow_indices);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowArray *\n+garrow_dictionary_array_get_dictionary(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary = arrow_dictionary_array->dictionary();\n+  return garrow_array_new_raw(&arrow_dictionary);\n+}\n+\n+/**\n+ * garrow_dictionary_array_get_dictionary_data_type:\n+ * @array: A #GArrowDictionaryArray.\n+ *\n+ * Returns: (transfer full): The dictionary data type of this array.\n+ *\n+ * Since: 0.8.0\n+ */\n+GArrowDictionaryDataType *\n+garrow_dictionary_array_get_dictionary_data_type(GArrowDictionaryArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_dictionary_array =\n+    std::static_pointer_cast<arrow::DictionaryArray>(arrow_array);\n+  auto arrow_dictionary_data_type = arrow_dictionary_array->dict_type();\n+  auto const_arrow_data_type =\n+    static_cast<const arrow::DataType *>(arrow_dictionary_data_type);\n+  auto arrow_data_type = const_cast<arrow::DataType *>(const_arrow_data_type);\n+  struct NullDeleter {\n+    void operator()(arrow::DataType *data_type) {\n+    }\n+  };\n+  std::shared_ptr<arrow::DataType>\n+    shared_arrow_data_type(arrow_data_type, NullDeleter());\n+  auto data_type = garrow_data_type_new_raw(&shared_arrow_data_type);\n+  return GARROW_DICTIONARY_DATA_TYPE(data_type);\n+}\n+\n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/composite-array.h b/c_glib/arrow-glib/composite-array.h\nindex ebf955498..c59a61681 100644\n--- a/c_glib/arrow-glib/composite-array.h\n+++ b/c_glib/arrow-glib/composite-array.h\n@@ -129,4 +129,25 @@ GArrowArray *garrow_struct_array_get_field(GArrowStructArray *array,\n                                            gint i);\n GList *garrow_struct_array_get_fields(GArrowStructArray *array);\n \n+\n+#define GARROW_TYPE_DICTIONARY_ARRAY (garrow_dictionary_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDictionaryArray,\n+                         garrow_dictionary_array,\n+                         GARROW,\n+                         DICTIONARY_ARRAY,\n+                         GArrowArray)\n+struct _GArrowDictionaryArrayClass\n+{\n+  GArrowArrayClass parent_class;\n+};\n+\n+GArrowDictionaryArray *\n+garrow_dictionary_array_new(GArrowDataType *data_type, GArrowArray *indices);\n+GArrowArray *\n+garrow_dictionary_array_get_indices(GArrowDictionaryArray *array);\n+GArrowArray *\n+garrow_dictionary_array_get_dictionary(GArrowDictionaryArray *array);\n+GArrowDictionaryDataType *\n+garrow_dictionary_array_get_dictionary_data_type(GArrowDictionaryArray *array);\n+\n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/composite-data-type.cpp b/c_glib/arrow-glib/composite-data-type.cpp\nindex 7ce8a978e..5f742e50e 100644\n--- a/c_glib/arrow-glib/composite-data-type.cpp\n+++ b/c_glib/arrow-glib/composite-data-type.cpp\n@@ -158,6 +158,8 @@ garrow_dictionary_data_type_class_init(GArrowDictionaryDataTypeClass *klass)\n  * @ordered: Whether dictionary contents are ordered or not.\n  *\n  * Returns: The newly created dictionary data type.\n+ *\n+ * Since: 0.8.0\n  */\n GArrowDictionaryDataType *\n garrow_dictionary_data_type_new(GArrowDataType *index_data_type,\n@@ -177,6 +179,8 @@ garrow_dictionary_data_type_new(GArrowDataType *index_data_type,\n  * @data_type: The #GArrowDictionaryDataType.\n  *\n  * Returns: (transfer full): The #GArrowDataType of index.\n+ *\n+ * Since: 0.8.0\n  */\n GArrowDataType *\n garrow_dictionary_data_type_get_index_data_type(GArrowDictionaryDataType *data_type)\n@@ -193,6 +197,8 @@ garrow_dictionary_data_type_get_index_data_type(GArrowDictionaryDataType *data_t\n  * @data_type: The #GArrowDictionaryDataType.\n  *\n  * Returns: (transfer full): The dictionary as #GArrowArray.\n+ *\n+ * Since: 0.8.0\n  */\n GArrowArray *\n garrow_dictionary_data_type_get_dictionary(GArrowDictionaryDataType *data_type)\n@@ -209,6 +215,8 @@ garrow_dictionary_data_type_get_dictionary(GArrowDictionaryDataType *data_type)\n  * @data_type: The #GArrowDictionaryDataType.\n  *\n  * Returns: Whether dictionary contents are ordered or not.\n+ *\n+ * Since: 0.8.0\n  */\n gboolean\n garrow_dictionary_data_type_is_ordered(GArrowDictionaryDataType *data_type)\ndiff --git a/c_glib/test/test-dictionary-array.rb b/c_glib/test/test-dictionary-array.rb\nnew file mode 100644\nindex 000000000..d4f4b3443\n--- /dev/null\n+++ b/c_glib/test/test-dictionary-array.rb\n@@ -0,0 +1,63 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDictionaryArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    @index_data_type = Arrow::Int32DataType.new\n+    @dictionary = build_string_array([\"C\", \"C++\", \"Ruby\"])\n+    @ordered = false\n+    @data_type = Arrow::DictionaryDataType.new(@index_data_type,\n+                                               @dictionary,\n+                                               @ordered)\n+  end\n+\n+  sub_test_case(\".new\") do\n+    def test_new\n+      indices = build_int32_array([0, 2, 2, 1, 0])\n+      dictionary_array = Arrow::DictionaryArray.new(@data_type, indices)\n+      assert_equal(<<-STRING.chomp, dictionary_array.to_s)\n+\n+-- is_valid: all not null\n+-- dictionary: [\"C\", \"C++\", \"Ruby\"]\n+-- indices: [0, 2, 2, 1, 0]\n+      STRING\n+    end\n+  end\n+\n+  sub_test_case(\"instance methods\") do\n+    def setup\n+      super\n+      @indices = build_int32_array([0, 2, 2, 1, 0])\n+      @dictionary_array = Arrow::DictionaryArray.new(@data_type, @indices)\n+    end\n+\n+    def test_indices\n+      assert_equal(@indices, @dictionary_array.indices)\n+    end\n+\n+    def test_dictionary\n+      assert_equal(@dictionary, @dictionary_array.dictionary)\n+    end\n+\n+    def test_dictionary_data_type\n+      assert_equal(@data_type,\n+                   @dictionary_array.dictionary_data_type)\n+    end\n+  end\n+end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T17:48:46.954+0000",
                    "updated": "2017-11-29T17:48:46.954+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|i3n8a7:",
        "customfield_12314139": null
    }
}