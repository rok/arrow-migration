{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13386833",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833",
    "key": "ARROW-13222",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12618414",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12618414",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12621612",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621612",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13396771",
                    "key": "ARROW-13701",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396771",
                    "fields": {
                        "summary": "[C++] Regression introduced in PR 10806 (ARROW-13222: [C++] Improve type support for case_when)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12623513",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623513",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13402989",
                    "key": "ARROW-14105",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402989",
                    "fields": {
                        "summary": "[C++] Reconcile type promotion rules between if_else, case_when, coalesce, select",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620610",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620610",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13393729",
                    "key": "ARROW-13573",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393729",
                    "fields": {
                        "summary": "[C++] Support dictionaries directly in case_when kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13222/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/627983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806\n\n\n   This adds support for nearly everything except unions and dictionaries. However, binary types, maps, lists (fixed-size and variable), and structs are supported. The benchmark is also extended to show that performance is not entirely terrible (the first attempt using purely AppendScalar ran at ~50MB/s, this runs at a couple GB/s similar to the other kernel cases). This does leverage AppendScalar for the scalar cases.\r\n   \r\n   Dictionaries are still supported, but will be unpacked. For direct support we need to unify the dictionaries first.\r\n   \r\n   For unions, we need ARROW-9434, else we can't properly handle all the cases.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T20:17:39.286+0000",
                    "updated": "2021-07-26T20:17:39.286+0000",
                    "started": "2021-07-26T20:17:39.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627983",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/627985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-886998213\n\n\n   https://issues.apache.org/jira/browse/ARROW-13222\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T20:18:06.900+0000",
                    "updated": "2021-07-26T20:18:06.900+0000",
                    "started": "2021-07-26T20:18:06.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627985",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/633623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-892729476\n\n\n   Moved back to draft, need to implement full dictionary support as described in https://github.com/apache/arrow/pull/10724#discussion_r682694052\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T14:57:57.693+0000",
                    "updated": "2021-08-04T14:57:57.693+0000",
                    "started": "2021-08-04T14:57:57.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633623",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/634295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-892729476\n\n\n   Moved back to draft, need to implement full dictionary support as described in https://github.com/apache/arrow/pull/10724#discussion_r682694052\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:35:47.762+0000",
                    "updated": "2021-08-05T11:35:47.762+0000",
                    "started": "2021-08-05T11:35:47.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634295",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/634600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-893508221\n\n\n   Moved out of draft - dictionary support will need more work and I want to validate the approach here first. Filed ARROW-13573 to cover that work.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T14:32:39.893+0000",
                    "updated": "2021-08-05T14:32:39.893+0000",
                    "started": "2021-08-05T14:32:39.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634600",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r691418361\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_benchmark.cc\n##########\n@@ -180,12 +184,50 @@ static void CaseWhenBench(benchmark::State& state) {\n                                        val3->Slice(offset), val4->Slice(offset)}));\n   }\n \n-  state.SetBytesProcessed(state.iterations() * (len - offset) * sizeof(CType));\n+  // Set bytes processed to ~length of output\n+  state.SetBytesProcessed(state.iterations() * GetBytesProcessed<Type>::Get(val1));\n+  state.SetItemsProcessed(state.iterations() * (len - offset));\n+}\n+\n+static void CaseWhenBenchList(benchmark::State& state) {\n+  auto type = list(int64());\n+  auto fld = field(\"\", type);\n+\n+  int64_t len = state.range(0);\n+  int64_t offset = state.range(1);\n+\n+  random::RandomArrayGenerator rand(/*seed=*/0);\n+\n+  auto cond1 = std::static_pointer_cast<BooleanArray>(\n+      rand.ArrayOf(boolean(), len, /*null_probability=*/0.01));\n+  auto cond2 = std::static_pointer_cast<BooleanArray>(\n+      rand.ArrayOf(boolean(), len, /*null_probability=*/0.01));\n+  auto cond3 = std::static_pointer_cast<BooleanArray>(\n+      rand.ArrayOf(boolean(), len, /*null_probability=*/0.01));\n\nReview comment:\n       Am I missing something, or are these 3 arrays not used?\n\n##########\nFile path: cpp/src/arrow/buffer_builder.h\n##########\n@@ -350,6 +350,17 @@ class TypedBufferBuilder<bool> {\n     bit_length_ += num_elements;\n   }\n \n+  void UnsafeAppend(const uint8_t* bitmap, int64_t offset, int64_t num_elements) {\n+    if (num_elements == 0) return;\n+    int64_t i = offset;\n+    internal::GenerateBitsUnrolled(mutable_data(), bit_length_, num_elements, [&] {\n\nReview comment:\n       Perhaps use `CopyBitmap` instead? It should be faster on large numbers of elements.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n+      continue;\n+    }\n+    const Datum& source = batch.values[selected];\n+    if (source.is_scalar()) {\n+      const auto& scalar = *source.scalar();\n+      if (!scalar.is_valid) {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      } else {\n+        RETURN_NOT_OK(append_scalar(raw_builder.get(), scalar));\n+      }\n+    } else {\n+      const auto& array = source.array();\n+      if (!array->buffers[0] ||\n+          BitUtil::GetBit(array->buffers[0]->data(), array->offset + row)) {\n+        RETURN_NOT_OK(append_array(raw_builder.get(), array, row));\n+      } else {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      }\n+    }\n+  }\n+\n+  ARROW_ASSIGN_OR_RAISE(auto temp_output, raw_builder->Finish());\n+  *output = *temp_output->data();\n+  return Status::OK();\n+}\n+\n+template <typename Type>\n+struct CaseWhenFunctor<Type, enable_if_base_binary<Type>> {\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].null_count() > 0) {\n+      return Status::Invalid(\"cond struct must not have outer nulls\");\n+    }\n+    if (batch[0].is_scalar()) {\n+      return ExecVarWidthScalarCaseWhen(ctx, batch, out);\n+    }\n+    return ExecArray(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return ExecVarWidthArrayCaseWhen(\n+        ctx, batch, out,\n+        // ReserveData\n+        [&](ArrayBuilder* raw_builder) {\n+          int64_t reservation = 0;\n+          for (size_t arg = 1; arg < batch.values.size(); arg++) {\n+            auto source = batch.values[arg];\n+            if (source.is_scalar()) {\n+              const auto& scalar =\n+                  checked_cast<const BaseBinaryScalar&>(*source.scalar());\n+              if (!scalar.value) continue;\n+              reservation =\n+                  std::max<int64_t>(reservation, batch.length * scalar.value->size());\n+            } else {\n+              const auto& array = *source.array();\n+              const auto& offsets = array.GetValues<offset_type>(1);\n+              reservation =\n+                  std::max<int64_t>(reservation, offsets[array.length] - offsets[0]);\n+            }\n+          }\n+          // checked_cast works since (Large)StringBuilder <: (Large)BinaryBuilder\n+          return checked_cast<BuilderType*>(raw_builder)->ReserveData(reservation);\n+        },\n+        // AppendScalar\n+        [](ArrayBuilder* raw_builder, const Scalar& raw_scalar) {\n+          const auto& scalar = checked_cast<const BaseBinaryScalar&>(raw_scalar);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(scalar.value->data(),\n+                       static_cast<offset_type>(scalar.value->size()));\n+        },\n+        // AppendArray\n+        [](ArrayBuilder* raw_builder, const std::shared_ptr<ArrayData>& array,\n+           const int64_t row) {\n+          const offset_type* offsets = array->GetValues<offset_type>(1);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(array->buffers[2]->data() + offsets[row],\n+                       offsets[row + 1] - offsets[row]);\n+        });\n+  }\n+};\n+\n+// Given an array and a builder, append a slice of the array to the builder\n+using ArrayAppenderFunc = std::function<Status(\n+    ArrayBuilder*, const std::shared_ptr<ArrayData>&, int64_t, int64_t)>;\n+\n+static Status GetValueAppenders(const DataType& type, ArrayAppenderFunc* array_appender);\n\nReview comment:\n       Why not return `Result<ArrayAppenderFunc>`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n+      continue;\n+    }\n+    const Datum& source = batch.values[selected];\n+    if (source.is_scalar()) {\n+      const auto& scalar = *source.scalar();\n+      if (!scalar.is_valid) {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      } else {\n+        RETURN_NOT_OK(append_scalar(raw_builder.get(), scalar));\n+      }\n+    } else {\n+      const auto& array = source.array();\n+      if (!array->buffers[0] ||\n+          BitUtil::GetBit(array->buffers[0]->data(), array->offset + row)) {\n+        RETURN_NOT_OK(append_array(raw_builder.get(), array, row));\n+      } else {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      }\n+    }\n+  }\n+\n+  ARROW_ASSIGN_OR_RAISE(auto temp_output, raw_builder->Finish());\n+  *output = *temp_output->data();\n+  return Status::OK();\n+}\n+\n+template <typename Type>\n+struct CaseWhenFunctor<Type, enable_if_base_binary<Type>> {\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].null_count() > 0) {\n+      return Status::Invalid(\"cond struct must not have outer nulls\");\n+    }\n+    if (batch[0].is_scalar()) {\n+      return ExecVarWidthScalarCaseWhen(ctx, batch, out);\n+    }\n+    return ExecArray(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return ExecVarWidthArrayCaseWhen(\n+        ctx, batch, out,\n+        // ReserveData\n+        [&](ArrayBuilder* raw_builder) {\n+          int64_t reservation = 0;\n+          for (size_t arg = 1; arg < batch.values.size(); arg++) {\n+            auto source = batch.values[arg];\n+            if (source.is_scalar()) {\n+              const auto& scalar =\n+                  checked_cast<const BaseBinaryScalar&>(*source.scalar());\n+              if (!scalar.value) continue;\n+              reservation =\n+                  std::max<int64_t>(reservation, batch.length * scalar.value->size());\n+            } else {\n+              const auto& array = *source.array();\n+              const auto& offsets = array.GetValues<offset_type>(1);\n+              reservation =\n+                  std::max<int64_t>(reservation, offsets[array.length] - offsets[0]);\n+            }\n+          }\n+          // checked_cast works since (Large)StringBuilder <: (Large)BinaryBuilder\n+          return checked_cast<BuilderType*>(raw_builder)->ReserveData(reservation);\n+        },\n+        // AppendScalar\n+        [](ArrayBuilder* raw_builder, const Scalar& raw_scalar) {\n+          const auto& scalar = checked_cast<const BaseBinaryScalar&>(raw_scalar);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(scalar.value->data(),\n+                       static_cast<offset_type>(scalar.value->size()));\n+        },\n+        // AppendArray\n+        [](ArrayBuilder* raw_builder, const std::shared_ptr<ArrayData>& array,\n+           const int64_t row) {\n+          const offset_type* offsets = array->GetValues<offset_type>(1);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(array->buffers[2]->data() + offsets[row],\n+                       offsets[row + 1] - offsets[row]);\n+        });\n+  }\n+};\n+\n+// Given an array and a builder, append a slice of the array to the builder\n+using ArrayAppenderFunc = std::function<Status(\n+    ArrayBuilder*, const std::shared_ptr<ArrayData>&, int64_t, int64_t)>;\n+\n+static Status GetValueAppenders(const DataType& type, ArrayAppenderFunc* array_appender);\n+\n+struct GetAppenders {\n\nReview comment:\n       Hmm... this functionality may be useful elsewhere (and actually, perhaps it can already be reused in other places).\r\n   \r\n   Why not add a virtual method to `ArrayBuilder` (e.g. `virtual AppendArraySlice(...)`) instead of keeping this private?\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n\nReview comment:\n       Can use `UnsafeAppendNull` since you reserved enough space at the start (same below).\n\n##########\nFile path: cpp/src/arrow/buffer_builder.h\n##########\n@@ -350,6 +350,17 @@ class TypedBufferBuilder<bool> {\n     bit_length_ += num_elements;\n   }\n \n+  void UnsafeAppend(const uint8_t* bitmap, int64_t offset, int64_t num_elements) {\n\nReview comment:\n       Add a docstring/comment so that the difference with the previous overload is clear?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n\nReview comment:\n       No need for `static` as this should be all in the anonymous namespace.\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -442,9 +442,18 @@ class NullArrayFactory {\n     // First buffer is always null\n     out_->buffers[0] = nullptr;\n \n-    // Type codes are all zero, so we can use buffer_ which has had it's memory\n-    // zeroed\n     out_->buffers[1] = buffer_;\n+    // buffer_ is zeroed, but 0 may not be a valid type code\n+    if (type.type_codes()[0] != 0) {\n+      std::memset(buffer_->mutable_data(), type.type_codes()[0], buffer_->size());\n\nReview comment:\n       Hmm, we should do the converse here: keep `buffer_` zeroed and create a new buffer for type codes.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n\nReview comment:\n       Should we add `DCHECK(result.is_scalar() || result.kind() == Datum::NONE)`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n\nReview comment:\n       Why not return `Result<datum>`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T17:06:48.052+0000",
                    "updated": "2021-08-18T17:06:48.052+0000",
                    "started": "2021-08-18T17:06:48.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639524",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r691495439\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n+      continue;\n+    }\n+    const Datum& source = batch.values[selected];\n+    if (source.is_scalar()) {\n+      const auto& scalar = *source.scalar();\n+      if (!scalar.is_valid) {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      } else {\n+        RETURN_NOT_OK(append_scalar(raw_builder.get(), scalar));\n+      }\n+    } else {\n+      const auto& array = source.array();\n+      if (!array->buffers[0] ||\n+          BitUtil::GetBit(array->buffers[0]->data(), array->offset + row)) {\n+        RETURN_NOT_OK(append_array(raw_builder.get(), array, row));\n+      } else {\n+        RETURN_NOT_OK(raw_builder->AppendNull());\n+      }\n+    }\n+  }\n+\n+  ARROW_ASSIGN_OR_RAISE(auto temp_output, raw_builder->Finish());\n+  *output = *temp_output->data();\n+  return Status::OK();\n+}\n+\n+template <typename Type>\n+struct CaseWhenFunctor<Type, enable_if_base_binary<Type>> {\n+  using offset_type = typename Type::offset_type;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    if (batch[0].null_count() > 0) {\n+      return Status::Invalid(\"cond struct must not have outer nulls\");\n+    }\n+    if (batch[0].is_scalar()) {\n+      return ExecVarWidthScalarCaseWhen(ctx, batch, out);\n+    }\n+    return ExecArray(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    return ExecVarWidthArrayCaseWhen(\n+        ctx, batch, out,\n+        // ReserveData\n+        [&](ArrayBuilder* raw_builder) {\n+          int64_t reservation = 0;\n+          for (size_t arg = 1; arg < batch.values.size(); arg++) {\n+            auto source = batch.values[arg];\n+            if (source.is_scalar()) {\n+              const auto& scalar =\n+                  checked_cast<const BaseBinaryScalar&>(*source.scalar());\n+              if (!scalar.value) continue;\n+              reservation =\n+                  std::max<int64_t>(reservation, batch.length * scalar.value->size());\n+            } else {\n+              const auto& array = *source.array();\n+              const auto& offsets = array.GetValues<offset_type>(1);\n+              reservation =\n+                  std::max<int64_t>(reservation, offsets[array.length] - offsets[0]);\n+            }\n+          }\n+          // checked_cast works since (Large)StringBuilder <: (Large)BinaryBuilder\n+          return checked_cast<BuilderType*>(raw_builder)->ReserveData(reservation);\n+        },\n+        // AppendScalar\n+        [](ArrayBuilder* raw_builder, const Scalar& raw_scalar) {\n+          const auto& scalar = checked_cast<const BaseBinaryScalar&>(raw_scalar);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(scalar.value->data(),\n+                       static_cast<offset_type>(scalar.value->size()));\n+        },\n+        // AppendArray\n+        [](ArrayBuilder* raw_builder, const std::shared_ptr<ArrayData>& array,\n+           const int64_t row) {\n+          const offset_type* offsets = array->GetValues<offset_type>(1);\n+          return checked_cast<BuilderType*>(raw_builder)\n+              ->Append(array->buffers[2]->data() + offsets[row],\n+                       offsets[row + 1] - offsets[row]);\n+        });\n+  }\n+};\n+\n+// Given an array and a builder, append a slice of the array to the builder\n+using ArrayAppenderFunc = std::function<Status(\n+    ArrayBuilder*, const std::shared_ptr<ArrayData>&, int64_t, int64_t)>;\n+\n+static Status GetValueAppenders(const DataType& type, ArrayAppenderFunc* array_appender);\n+\n+struct GetAppenders {\n\nReview comment:\n       I was debating this. I'll refactor this to be part of the builder instead.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T18:15:11.774+0000",
                    "updated": "2021-08-18T18:15:11.774+0000",
                    "started": "2021-08-18T18:15:11.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639551",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r691592498\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n\nReview comment:\n       We'd have to make it public virtual instead of protected nonvirtual as it currently is. (It's public in concrete classes but not in the base class, so we could also template the function on the builder type\u2026)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T20:49:08.263+0000",
                    "updated": "2021-08-18T20:49:08.263+0000",
                    "started": "2021-08-18T20:49:08.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639608",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r691595639\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n\nReview comment:\n       It's minor but 1) we use the shape of out to determine what to return below and 2) it fits slightly better with the rest of the APIs as they all use the `Status(..., Datum* out)` pattern.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T20:54:06.370+0000",
                    "updated": "2021-08-18T20:54:06.370+0000",
                    "started": "2021-08-18T20:54:06.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639609",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692134196\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_base.h\n##########\n@@ -123,6 +123,23 @@ class ARROW_EXPORT ArrayBuilder {\n   Status AppendScalar(const Scalar& scalar, int64_t n_repeats);\n   Status AppendScalars(const ScalarVector& scalars);\n \n+  /// \\brief Append a range of values from an array\n+  Status AppendArraySlice(const ArrayData& array, const int64_t offset,\n+                          const int64_t length) {\n+    if (!type()->Equals(*array.type)) {\n+      // TODO: test this\n+      return Status::TypeError(\"Expected array of type \", *type(),\n+                               \" but got array of type \", *array.type);\n+    }\n+    return AppendArraySliceUnchecked(array, offset, length);\n+  }\n+  /// \\brief Append a range of values from an array without checking type compatibility\n+  virtual Status AppendArraySliceUnchecked(const ArrayData& array, const int64_t offset,\n+                                           const int64_t length) {\n+    return Status::NotImplemented(\"AppendArraySliceUnchecked for builder for \", *type());\n+  }\n+  // TODO: overloads for arrays\n\nReview comment:\n       Either do it just here, or just remove the TODO, IMHO. It's not worth keeping this comment for a trivial two-liner.\n\n##########\nFile path: cpp/src/arrow/array/builder_base.h\n##########\n@@ -123,6 +123,23 @@ class ARROW_EXPORT ArrayBuilder {\n   Status AppendScalar(const Scalar& scalar, int64_t n_repeats);\n   Status AppendScalars(const ScalarVector& scalars);\n \n+  /// \\brief Append a range of values from an array\n+  Status AppendArraySlice(const ArrayData& array, const int64_t offset,\n+                          const int64_t length) {\n+    if (!type()->Equals(*array.type)) {\n+      // TODO: test this\n+      return Status::TypeError(\"Expected array of type \", *type(),\n+                               \" but got array of type \", *array.type);\n+    }\n+    return AppendArraySliceUnchecked(array, offset, length);\n+  }\n\nReview comment:\n       Hmm, I would not bother with the checked version personally. Just mention in the docstring that the types are supposed to be identical.\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -442,9 +442,13 @@ class NullArrayFactory {\n     // First buffer is always null\n     out_->buffers[0] = nullptr;\n \n-    // Type codes are all zero, so we can use buffer_ which has had it's memory\n-    // zeroed\n     out_->buffers[1] = buffer_;\n+    // buffer_ is zeroed, but 0 may not be a valid type code\n+    if (type.type_codes()[0] != 0) {\n+      ARROW_ASSIGN_OR_RAISE(out_->buffers[1], AllocateBuffer(buffer_->size(), pool_));\n\nReview comment:\n       `length_` rather than `buffer_->size()`? (can `buffer_` be larger because of the children or offsets?)\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -274,6 +274,23 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    auto bitmap = array.GetValues<uint8_t>(0, 0);\n+    auto offsets = array.GetValues<offset_type>(1);\n+    auto data = array.GetValues<uint8_t>(2, 0);\n+    for (int64_t i = 0; i < length; i++) {\n+      if (!bitmap || BitUtil::GetBit(bitmap, array.offset + offset + i)) {\n\nReview comment:\n       May add a JIRA for this to do it later, though.\n\n##########\nFile path: cpp/src/arrow/array/builder_union.h\n##########\n@@ -155,6 +156,21 @@ class ARROW_EXPORT DenseUnionBuilder : public BasicUnionBuilder {\n     return offsets_builder_.Append(offset);\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, const int64_t offset,\n+                                   const int64_t length) override {\n\nReview comment:\n       The definition can probably moved to `builder_union.cc` instead?\r\n   (same for SparseUnionBuilder)\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -442,9 +442,13 @@ class NullArrayFactory {\n     // First buffer is always null\n     out_->buffers[0] = nullptr;\n \n-    // Type codes are all zero, so we can use buffer_ which has had it's memory\n-    // zeroed\n     out_->buffers[1] = buffer_;\n+    // buffer_ is zeroed, but 0 may not be a valid type code\n+    if (type.type_codes()[0] != 0) {\n+      ARROW_ASSIGN_OR_RAISE(out_->buffers[1], AllocateBuffer(buffer_->size(), pool_));\n+      std::memset(out_->buffers[1]->mutable_data(), type.type_codes()[0],\n+                  buffer_->size());\n\nReview comment:\n       `length_` here too?\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -274,6 +274,23 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    auto bitmap = array.GetValues<uint8_t>(0, 0);\n+    auto offsets = array.GetValues<offset_type>(1);\n+    auto data = array.GetValues<uint8_t>(2, 0);\n+    for (int64_t i = 0; i < length; i++) {\n+      if (!bitmap || BitUtil::GetBit(bitmap, array.offset + offset + i)) {\n\nReview comment:\n       Perhaps you may use `VisitArrayDataInline`.\r\n   Or even better, using `BitRunReader` you could alternate bulk appends of nulls and bulk memory copies of data (though the offsets still have to be handled individually).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -830,6 +867,607 @@ TEST(TestCaseWhen, FixedSizeBinary) {\n               ArrayFromJSON(type, R\"([null, null, null, \"efg\"])\"));\n }\n \n+template <typename Type>\n+class TestCaseWhenBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestCaseWhenBinary, BinaryArrowTypes);\n+\n+TYPED_TEST(TestCaseWhenBinary, Basics) {\n+  auto type = default_type_instance<TypeParam>();\n+  auto cond_true = ScalarFromJSON(boolean(), \"true\");\n+  auto cond_false = ScalarFromJSON(boolean(), \"false\");\n+  auto cond_null = ScalarFromJSON(boolean(), \"null\");\n+  auto cond1 = ArrayFromJSON(boolean(), \"[true, true, null, null]\");\n+  auto cond2 = ArrayFromJSON(boolean(), \"[true, false, true, null]\");\n+  auto scalar_null = ScalarFromJSON(type, \"null\");\n+  auto scalar1 = ScalarFromJSON(type, R\"(\"aBxYz\")\");\n+  auto scalar2 = ScalarFromJSON(type, R\"(\"b\")\");\n+  auto values_null = ArrayFromJSON(type, \"[null, null, null, null]\");\n+  auto values1 = ArrayFromJSON(type, R\"([\"cDE\", null, \"degfhi\", \"efg\"])\");\n+  auto values2 = ArrayFromJSON(type, R\"([\"fghijk\", \"ghi\", null, \"hi\"])\");\n+\n+  // CheckScalar(\"case_when\", {MakeStruct({}), values1}, values1);\n\nReview comment:\n       Did you forget to uncomment all these?\n\n##########\nFile path: cpp/src/arrow/array/builder_nested.h\n##########\n@@ -467,6 +518,19 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    for (int i = 0; static_cast<size_t>(i) < children_.size(); i++) {\n+      children_[i]->AppendArraySliceUnchecked(*array.child_data[i], array.offset + offset,\n+                                              length);\n+    }\n+    const uint8_t* validity = array.MayHaveNulls() ? array.buffers[0]->data() : nullptr;\n+    for (int64_t row = offset; row < offset + length; row++) {\n+      RETURN_NOT_OK(Append(!validity || BitUtil::GetBit(validity, array.offset + row)));\n\nReview comment:\n       Can't we just do a bulk-append of the validity bitmap here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1413,6 +1417,588 @@ struct CaseWhenFunctor<NullType> {\n   }\n };\n \n+static Status ExecVarWidthScalarCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                         Datum* out) {\n+  const auto& conds = checked_cast<const StructScalar&>(*batch.values[0].scalar());\n+  Datum result;\n+  for (size_t i = 0; i < batch.values.size() - 1; i++) {\n+    if (i < conds.value.size()) {\n+      const Scalar& cond = *conds.value[i];\n+      if (cond.is_valid && internal::UnboxScalar<BooleanType>::Unbox(cond)) {\n+        result = batch[i + 1];\n+        break;\n+      }\n+    } else {\n+      // ELSE clause\n+      result = batch[i + 1];\n+      break;\n+    }\n+  }\n+  if (out->is_scalar()) {\n+    *out = result.is_scalar() ? result.scalar() : MakeNullScalar(out->type());\n+    return Status::OK();\n+  }\n+  ArrayData* output = out->mutable_array();\n+  if (!result.is_value()) {\n+    // All conditions false, no 'else' argument\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto array, MakeArrayOfNull(output->type, batch.length, ctx->memory_pool()));\n+    *output = *array->data();\n+  } else if (result.is_scalar()) {\n+    ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*result.scalar(), batch.length,\n+                                                          ctx->memory_pool()));\n+    *output = *array->data();\n+  } else {\n+    *output = *result.array();\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename ReserveData, typename AppendScalar, typename AppendArray>\n+static Status ExecVarWidthArrayCaseWhen(KernelContext* ctx, const ExecBatch& batch,\n+                                        Datum* out, ReserveData reserve_data,\n+                                        AppendScalar append_scalar,\n+                                        AppendArray append_array) {\n+  const auto& conds_array = *batch.values[0].array();\n+  ArrayData* output = out->mutable_array();\n+  const bool have_else_arg =\n+      static_cast<size_t>(conds_array.type->num_fields()) < (batch.values.size() - 1);\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t row = 0; row < batch.length; row++) {\n+    int64_t selected = have_else_arg ? static_cast<int64_t>(batch.values.size() - 1) : -1;\n+    for (int64_t arg = 0; static_cast<size_t>(arg) < conds_array.child_data.size();\n+         arg++) {\n+      const ArrayData& cond_array = *conds_array.child_data[arg];\n+      if ((!cond_array.buffers[0] ||\n+           BitUtil::GetBit(cond_array.buffers[0]->data(),\n+                           conds_array.offset + cond_array.offset + row)) &&\n+          BitUtil::GetBit(cond_array.buffers[1]->data(),\n+                          conds_array.offset + cond_array.offset + row)) {\n+        selected = arg + 1;\n+        break;\n+      }\n+    }\n+    if (selected < 0) {\n+      RETURN_NOT_OK(raw_builder->AppendNull());\n\nReview comment:\n       Ah, fair enough. Let's not bother then.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T14:10:24.963+0000",
                    "updated": "2021-08-19T14:10:24.963+0000",
                    "started": "2021-08-19T14:10:24.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639877",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692149801\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -830,6 +867,607 @@ TEST(TestCaseWhen, FixedSizeBinary) {\n               ArrayFromJSON(type, R\"([null, null, null, \"efg\"])\"));\n }\n \n+template <typename Type>\n+class TestCaseWhenBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestCaseWhenBinary, BinaryArrowTypes);\n+\n+TYPED_TEST(TestCaseWhenBinary, Basics) {\n+  auto type = default_type_instance<TypeParam>();\n+  auto cond_true = ScalarFromJSON(boolean(), \"true\");\n+  auto cond_false = ScalarFromJSON(boolean(), \"false\");\n+  auto cond_null = ScalarFromJSON(boolean(), \"null\");\n+  auto cond1 = ArrayFromJSON(boolean(), \"[true, true, null, null]\");\n+  auto cond2 = ArrayFromJSON(boolean(), \"[true, false, true, null]\");\n+  auto scalar_null = ScalarFromJSON(type, \"null\");\n+  auto scalar1 = ScalarFromJSON(type, R\"(\"aBxYz\")\");\n+  auto scalar2 = ScalarFromJSON(type, R\"(\"b\")\");\n+  auto values_null = ArrayFromJSON(type, \"[null, null, null, null]\");\n+  auto values1 = ArrayFromJSON(type, R\"([\"cDE\", null, \"degfhi\", \"efg\"])\");\n+  auto values2 = ArrayFromJSON(type, R\"([\"fghijk\", \"ghi\", null, \"hi\"])\");\n+\n+  // CheckScalar(\"case_when\", {MakeStruct({}), values1}, values1);\n\nReview comment:\n       Sorry, I pushed something half WIP, I'll comment again once things are ready. Thanks for taking a look.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T14:12:35.121+0000",
                    "updated": "2021-08-19T14:12:35.121+0000",
                    "started": "2021-08-19T14:12:35.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639879",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692331241\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -274,6 +274,23 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    auto bitmap = array.GetValues<uint8_t>(0, 0);\n+    auto offsets = array.GetValues<offset_type>(1);\n+    auto data = array.GetValues<uint8_t>(2, 0);\n+    for (int64_t i = 0; i < length; i++) {\n+      if (!bitmap || BitUtil::GetBit(bitmap, array.offset + offset + i)) {\n\nReview comment:\n       It's actually slower, due to overhead in BitRunReader. Compare the [profile using BitRunReader](https://share.firefox.dev/3ATXEbH) to the one [without](https://share.firefox.dev/37WHkdT).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T17:13:01.945+0000",
                    "updated": "2021-08-19T17:13:01.945+0000",
                    "started": "2021-08-19T17:13:01.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639945",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692331628\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -274,6 +274,23 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    auto bitmap = array.GetValues<uint8_t>(0, 0);\n+    auto offsets = array.GetValues<offset_type>(1);\n+    auto data = array.GetValues<uint8_t>(2, 0);\n+    for (int64_t i = 0; i < length; i++) {\n+      if (!bitmap || BitUtil::GetBit(bitmap, array.offset + offset + i)) {\n\nReview comment:\n       In benchmarks:\r\n   \r\n   Current approach:\r\n   \r\n   ```\r\n   ------------------------------------------------------------------------------------------------\r\n   Benchmark                                      Time             CPU   Iterations UserCounters...\r\n   ------------------------------------------------------------------------------------------------\r\n   CaseWhenBenchStringContiguous/65536/0    2968201 ns      2968080 ns          233 bytes_per_second=2.68754G/s items_per_second=22.0803M/s\r\n   ```\r\n   \r\n   With BitRunReader:\r\n   \r\n   ```\r\n   ------------------------------------------------------------------------------------------------\r\n   Benchmark                                      Time             CPU   Iterations UserCounters...\r\n   ------------------------------------------------------------------------------------------------\r\n   CaseWhenBenchStringContiguous/65536/0    4775811 ns      4775849 ns          150 bytes_per_second=1.67024G/s items_per_second=13.7224M/s\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T17:13:35.360+0000",
                    "updated": "2021-08-19T17:13:35.360+0000",
                    "started": "2021-08-19T17:13:35.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639946",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692333212\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_binary.h\n##########\n@@ -274,6 +274,23 @@ class BaseBinaryBuilder : public ArrayBuilder {\n     return Status::OK();\n   }\n \n+  Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n+                                   int64_t length) override {\n+    auto bitmap = array.GetValues<uint8_t>(0, 0);\n+    auto offsets = array.GetValues<offset_type>(1);\n+    auto data = array.GetValues<uint8_t>(2, 0);\n+    for (int64_t i = 0; i < length; i++) {\n+      if (!bitmap || BitUtil::GetBit(bitmap, array.offset + offset + i)) {\n\nReview comment:\n       Thanks a lot for measuring. Interesting results!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T17:15:51.600+0000",
                    "updated": "2021-08-19T17:15:51.600+0000",
                    "started": "2021-08-19T17:15:51.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639947",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#discussion_r692333847\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_base.h\n##########\n@@ -123,6 +123,14 @@ class ARROW_EXPORT ArrayBuilder {\n   Status AppendScalar(const Scalar& scalar, int64_t n_repeats);\n   Status AppendScalars(const ScalarVector& scalars);\n \n+  /// \\brief Append a range of values from an array.\n+  ///\n+  /// The given array must be the same type as the builder.\n+  virtual Status AppendArraySliceUnchecked(const ArrayData& array, int64_t offset,\n\nReview comment:\n       We can drop \"Unchecked\" from the name, I think, as long as the contract is documented.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T17:16:48.185+0000",
                    "updated": "2021-08-19T17:16:48.185+0000",
                    "started": "2021-08-19T17:16:48.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639949",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/639998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-902176061\n\n\n   Hmm, there's a Windows R/MinGW-specific failure :/\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T19:19:00.229+0000",
                    "updated": "2021-08-19T19:19:00.229+0000",
                    "started": "2021-08-19T19:19:00.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639998",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/640057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806#issuecomment-902319344\n\n\n   Alright, well it's crashing on Windows because the std::function introduced into ExecVarWidthArrayCaseWhen contains not the lambda, but some completely random function which stomps all over the stack. That's about as far as I'm going to get today (skipping the call to reserve_data lets the test pass just fine).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T23:31:49.146+0000",
                    "updated": "2021-08-19T23:31:49.146+0000",
                    "started": "2021-08-19T23:31:49.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640057",
                    "issueId": "13386833"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/worklog/640753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10806:\nURL: https://github.com/apache/arrow/pull/10806\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T16:11:58.848+0000",
                    "updated": "2021-08-23T16:11:58.848+0000",
                    "started": "2021-08-23T16:11:58.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640753",
                    "issueId": "13386833"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7bcfb273[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6377a658[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@143fdd96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4aa4ec2f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2efaf5d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@116c78aa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bd5d47c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@167d9abd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f5091e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1d0b0d80[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48284c69[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@32fa9fa3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 23 16:11:46 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-23T16:11:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13222/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-06-30T15:23:37.000+0000",
        "updated": "2021-09-23T17:21:16.000+0000",
        "timeoriginalestimate": null,
        "description": "The initial PR only adds support for fixed-width types. We should also support strings, lists, etc.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Support variable-width types in case_when function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13386833/comment/17403263",
                    "id": "17403263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10806\n[https://github.com/apache/arrow/pull/10806]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-23T16:11:46.591+0000",
                    "updated": "2021-08-23T16:11:46.591+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0sgts:",
        "customfield_12314139": null
    }
}