{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13356312",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312",
    "key": "ARROW-11477",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12611759",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611759",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13368413",
                    "key": "ARROW-12137",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368413",
                    "fields": {
                        "summary": "[R] New/improved vignette on dplyr features",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12611532",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611532",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13366121",
                    "key": "ARROW-12017",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366121",
                    "fields": {
                        "summary": "[R] [Documentation] Make proper developing arrow docs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11477/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 44,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook opened a new pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T15:02:54.891+0000",
                    "updated": "2021-04-13T15:02:54.891+0000",
                    "started": "2021-04-13T15:02:54.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581833",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#issuecomment-818812764\n\n\n   You can see how this renders by looking at it in my fork at https://github.com/ianmcook/arrow/tree/ARROW-11477/r#readme\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T15:09:37.915+0000",
                    "updated": "2021-04-13T15:09:37.915+0000",
                    "started": "2021-04-13T15:09:37.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581838",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612564307\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n\nReview comment:\n       I wouldn't include this in the README. This is an implementation detail. There are implementation details in vignette(\"arrow\").\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n\nReview comment:\n       For standardization maybe this should use `ChunkedArray$create()`, just so the pattern is clear. Also IDK that \"list of `Array`s with the same `DataType`\", while accurate on some level, is the right thing to say here. In terms of interface, it behaves like Array, you don't treat it like a list type.\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n\nReview comment:\n       I'd lead with parquet and feather\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n\nReview comment:\n       perhaps?\r\n   \r\n   ```suggestion\r\n   | 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` functions |\r\n   ```\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n\nReview comment:\n       ```suggestion\r\n   If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\r\n   ```\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n\nReview comment:\n       Swap the order of conda and install_arrow() (previously, install_arrow did not handle conda/we didn't have conda nightlies)\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n\nReview comment:\n       I might set this up differently: start with what R has since we can assume users are familiar with that. R has vectors, and data.frame that collects vectors of equal length. Arrow has two in-memory representations for the same data: one, RecordBatch containing Arrays, is closest to the R model. The other, Table containing ChunkedArrays, supports array data that may be sliced into multiple pieces in order to accommodate larger sizes or other optimizations. A Dataset is similar to a Table but does not hold all of the data in memory.\r\n   \r\n   Then get into differences. Arrow has a true Scalar type, though you as an R user won't generally have to deal with them. Arrow has a richer data type system and metadata (discuss Schema, DataType, and the range of data types there are.) \n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n\nReview comment:\n       I would switch the order of these tables: lead with the data, the things that have parallels to R objects. And then for this table, I'd invert the order: Schema is list of Field, Field is pair of name and DataType.\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_feather()` and `write_parquet()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To start, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the creation\n+or file loading functions listed above. For example, create a `Table`\n+named `sw` with the Star Wars characters data frame that\u2019s included in\n+`dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n-\n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+data_file <- tempfile()\n+write_parquet(starwars, data_file)\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n-\n-### Full package validation\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most dplyr verbs except those that compute aggregates\n+(such as `summarise()` and `mutate()` after `group_by()`). Inside dplyr\n+verbs, Arrow offers limited support for functions and operators, with\n+broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For dplyr queries on `Table` and `RecordBatch` objects, if the `arrow` R\n+package detects an unsupported function within a dplyr verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that dplyr verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n\nReview comment:\n       I think there is a direct link to the arrow JIRA, should be on our website on the contributing page.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T15:44:43.639+0000",
                    "updated": "2021-04-13T15:44:43.639+0000",
                    "started": "2021-04-13T15:44:43.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581863",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612575473\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n\nReview comment:\n       The benefit of keeping it in this order is that there are no forward references; reading from top to bottom, you never come across something that has not already been defined above.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T15:55:29.869+0000",
                    "updated": "2021-04-13T15:55:29.869+0000",
                    "started": "2021-04-13T15:55:29.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581870",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612587763\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_feather()` and `write_parquet()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To start, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the creation\n+or file loading functions listed above. For example, create a `Table`\n+named `sw` with the Star Wars characters data frame that\u2019s included in\n+`dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n-\n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+data_file <- tempfile()\n+write_parquet(starwars, data_file)\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n-\n-### Full package validation\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most dplyr verbs except those that compute aggregates\n+(such as `summarise()` and `mutate()` after `group_by()`). Inside dplyr\n+verbs, Arrow offers limited support for functions and operators, with\n+broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For dplyr queries on `Table` and `RecordBatch` objects, if the `arrow` R\n+package detects an unsupported function within a dplyr verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that dplyr verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n\nReview comment:\n       I considered this and tried first to use one of these URLs:\r\n   - https://issues.apache.org/jira/projects/ARROW/issues/\r\n   - https://issues.apache.org/jira/projects/ARROW/summary\r\n   but I tried opening these in incognito windows to see how users would see them if they're not already signed into Jira, and they were all quite confusing.\r\n   \r\n   I also tried constructing a direct link to the Create Issue page by using URL parameters after https://issues.apache.org/jira/secure/CreateIssue.jspa but I couldn't get that working either\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:10:13.381+0000",
                    "updated": "2021-04-13T16:10:13.381+0000",
                    "started": "2021-04-13T16:10:13.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581882",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612587763\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_feather()` and `write_parquet()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To start, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the creation\n+or file loading functions listed above. For example, create a `Table`\n+named `sw` with the Star Wars characters data frame that\u2019s included in\n+`dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n-\n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+data_file <- tempfile()\n+write_parquet(starwars, data_file)\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n-\n-### Full package validation\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most dplyr verbs except those that compute aggregates\n+(such as `summarise()` and `mutate()` after `group_by()`). Inside dplyr\n+verbs, Arrow offers limited support for functions and operators, with\n+broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For dplyr queries on `Table` and `RecordBatch` objects, if the `arrow` R\n+package detects an unsupported function within a dplyr verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that dplyr verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n\nReview comment:\n       I considered this and tried first to use one of these URLs:\r\n   - https://issues.apache.org/jira/projects/ARROW/issues/\r\n   - https://issues.apache.org/jira/projects/ARROW/summary\r\n   \r\n   but I tried opening these in incognito windows to see how users would see them if they're not already signed into Jira, and they were all quite confusing.\r\n   \r\n   I also tried constructing a direct link to the Create Issue page by using URL parameters after https://issues.apache.org/jira/secure/CreateIssue.jspa but I couldn't get that working either\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:10:26.939+0000",
                    "updated": "2021-04-13T16:10:26.939+0000",
                    "started": "2021-04-13T16:10:26.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581883",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612587763\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_feather()` and `write_parquet()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To start, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the creation\n+or file loading functions listed above. For example, create a `Table`\n+named `sw` with the Star Wars characters data frame that\u2019s included in\n+`dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n-\n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+data_file <- tempfile()\n+write_parquet(starwars, data_file)\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n-\n-### Full package validation\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most dplyr verbs except those that compute aggregates\n+(such as `summarise()` and `mutate()` after `group_by()`). Inside dplyr\n+verbs, Arrow offers limited support for functions and operators, with\n+broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For dplyr queries on `Table` and `RecordBatch` objects, if the `arrow` R\n+package detects an unsupported function within a dplyr verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that dplyr verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n\nReview comment:\n       I considered this and tried first to use one of these URLs:\r\n   - https://issues.apache.org/jira/projects/ARROW/issues/ (that's the one the contributing page links to, after a redirection)\r\n   - https://issues.apache.org/jira/projects/ARROW/summary\r\n   \r\n   but I tried opening these in incognito windows to see how users would see them if they're not already signed into Jira, and they were all quite confusing.\r\n   \r\n   I also tried constructing a direct link to the Create Issue page by using URL parameters after https://issues.apache.org/jira/secure/CreateIssue.jspa but I couldn't get that working either\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:19:45.924+0000",
                    "updated": "2021-04-13T16:19:45.924+0000",
                    "started": "2021-04-13T16:19:45.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581888",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612601648\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n\nReview comment:\n       To clarify: do you mean I should move\r\n   ``` shell\r\n   conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\r\n   ```\r\n   to above\r\n   ``` r\r\n   arrow::install_arrow(nightly = TRUE)\r\n   ```\r\n   ?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:28:49.404+0000",
                    "updated": "2021-04-13T16:28:49.404+0000",
                    "started": "2021-04-13T16:28:49.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581892",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612610097\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n\nReview comment:\n       correct. install_arrow is a convenience for both the CRAN and conda methods of installation\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:40:31.016+0000",
                    "updated": "2021-04-13T16:40:31.016+0000",
                    "started": "2021-04-13T16:40:31.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581895",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612611031\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n\nReview comment:\n       Ok, gotcha. Based on this and your other comment above, I think it makes sense to add a \"Why use this package?\" section before the \"Installation\" section that will establish the framing to put the details here in more of a clearer context.\r\n   \r\n   I could also modify the content here to focus chiefly on the `Table` class and move these tables into a separate vignette, perhaps titled \"Apache Arrow object hierarchy\" (because it's valuable to have this content presented _somewhere_ in a documentation style as opposed to a narrative style, even if it's not here in the readme).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T16:41:54.352+0000",
                    "updated": "2021-04-13T16:41:54.352+0000",
                    "started": "2021-04-13T16:41:54.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581896",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612682874\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n\nReview comment:\n       Very minor\r\n    \r\n   ```suggestion\r\n   `arrow` package provides a variety of `R6` and `S3` methods for\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:27:20.544+0000",
                    "updated": "2021-04-13T18:27:20.544+0000",
                    "started": "2021-04-13T18:27:20.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581947",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612688353\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n\nReview comment:\n       Elsewhere in our docs, S3 is not set in monospace text, but `R6` is. Was that deliberate?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:36:20.535+0000",
                    "updated": "2021-04-13T18:36:20.535+0000",
                    "started": "2021-04-13T18:36:20.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581956",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612685610\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n\nReview comment:\n       ```suggestion\r\n   functions also accept R dataframes.\r\n   ```\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n\nReview comment:\n       ```suggestion\r\n   The `arrow` package uses lazy evaluation to delay computation until it is requested. `result` is an object with\r\n   ```\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n\nReview comment:\n       Would it be too much of a distraction to have a brief aside about why one might want to do this here? \n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-### Full package validation\n-\n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most `dplyr` verbs except those that compute aggregates\n+(such as `summarise()`, and `mutate()` after `group_by()`). Inside\n+`dplyr` verbs, Arrow offers limited support for functions and operators,\n+with broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For `dplyr` queries on `Table` and `RecordBatch` objects, if the `arrow`\n+package detects an unsupported function within a `dplyr` verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that `dplyr` verb.\n\nReview comment:\n       Should we add something here about what happens on unsupported calls with datasets? \n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n\nReview comment:\n       I wonder if this would be better below the `dplyr` block below? It might be the GH diff UI, but I thought this was semi-distracting from the example we're working with so far here\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-### Full package validation\n-\n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most `dplyr` verbs except those that compute aggregates\n+(such as `summarise()`, and `mutate()` after `group_by()`). Inside\n+`dplyr` verbs, Arrow offers limited support for functions and operators,\n+with broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For `dplyr` queries on `Table` and `RecordBatch` objects, if the `arrow`\n+package detects an unsupported function within a `dplyr` verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that `dplyr` verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n+Arrow (ARROW)**, select the component **R**, and begin the issue summary\n+with **\\[R\\]** followed by a space. For more information, see the\n+**Report bugs and propose features** section of the [Contributing to\n+Apache\n+Arrow](https://arrow.apache.org/docs/developers/contributing.html) page\n+in the Arrow developer documentation.\n+\n+We welcome questions and discussion about the `arrow` package. For\n\nReview comment:\n       ```suggestion\r\n   We welcome questions and discussion about and contributions to the `arrow` package. For\r\n   ```\r\n   \r\n   (or something similar)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:37:58.770+0000",
                    "updated": "2021-04-13T18:37:58.770+0000",
                    "started": "2021-04-13T18:37:58.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581957",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612697191\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n\nReview comment:\n       In R, it should be either \"data frame\" or \"data.frame\"\u2014don't get me started on how it's totally different if we're talking about pandas or Spark...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:50:48.506+0000",
                    "updated": "2021-04-13T18:50:48.506+0000",
                    "started": "2021-04-13T18:50:48.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581973",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612697191\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n\nReview comment:\n       In R, it should be either \"data frame\" or `data.frame`\u2014don't get me started on how it's totally different if we're talking about pandas or Spark...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:51:01.586+0000",
                    "updated": "2021-04-13T18:51:01.586+0000",
                    "started": "2021-04-13T18:51:01.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581974",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612698178\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n\nReview comment:\n       I think the \"Why\" section I'm working on adding at the top of the README should answer that \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:52:26.326+0000",
                    "updated": "2021-04-13T18:52:26.326+0000",
                    "started": "2021-04-13T18:52:26.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581975",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612699400\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n\nReview comment:\n       I think it's worth having here (or possibly in both places) but I'll add an \"Or, \" at the beginning to make it clearer that it's just another data loading option like the other two listed immediately above.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:54:34.702+0000",
                    "updated": "2021-04-13T18:54:34.702+0000",
                    "started": "2021-04-13T18:54:34.702+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581977",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612700647\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n\nReview comment:\n       I think I'll use \"until the result is required\" instead of \"until if that is requested\" if that's cool with you\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:56:36.956+0000",
                    "updated": "2021-04-13T18:56:36.956+0000",
                    "started": "2021-04-13T18:56:36.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581981",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612700647\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -15,239 +15,227 @@ The `arrow` package exposes an interface to the Arrow C++ library to\n access many of its features in R. This includes support for analyzing\n large, multi-file datasets (`open_dataset()`), working with individual\n Parquet (`read_parquet()`, `write_parquet()`) and Feather\n-(`read_feather()`, `write_feather()`) files, as well as lower-level\n-access to Arrow memory and messages.\n+(`read_feather()`, `write_feather()`) files, as well as a `dplyr`\n+backend and lower-level access to Arrow memory and messages.\n \n ## Installation\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n+``` shell\n conda install -c conda-forge --strict-channel-priority r-arrow\n ```\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+If you have `arrow` installed and want to switch to the latest nightly development version, you can use the included `install_arrow()` utility function:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n-\n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n-\n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n-\n-## Developing\n-\n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Conda users can install `arrow` nightly builds with\n \n ``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n+conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n ```\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+## Apache Arrow metadata and data objects\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+Arrow defines the following classes for representing metadata:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | a character string name and a `DataType`         | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+Arrow defines the following classes for representing zero-dimensional\n+(scalar), one-dimensional (array/vector-like), and two-dimensional\n+(tabular/data frame-like) data:\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+| Dim | Class          | Description                             | How to create an instance                                     |\n+|-----|----------------|-----------------------------------------|---------------------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`         | `Scalar$create(value, type)`                                  |\n+| 1   | `Array`        | vector of values and its `DataType`     | `Array$create(vector, type)`                                  |\n+| 1   | `ChunkedArray` | vectors of values and their `DataType`  | `ChunkedArray$create(..., type)`                              |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`        | `RecordBatch$create(...)`                                     |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`  | `Table$create(...)` or `arrow::read_*(as_data_frame = FALSE)` |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema` | see `vignette(\"dataset\", package = \"arrow\")`                  |\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n+Each of these is defined as an `R6` class in the `arrow` R package and\n+corresponds to a class of the same name in the Arrow C++ library. The\n+`arrow` package provides a variety of `R6` and S3 methods for\n+interacting with instances of these classes.\n \n-Other flags that may be useful:\n+## Reading and writing data files with Arrow\n \n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: read a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_parquet()` and `write_feather()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To begin, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the object\n+creation or file loading functions listed above. For example, create a\n+`Table` named `sw` with the Star Wars characters data frame that\u2019s\n+included in `dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+write_parquet(starwars, data_file <- tempfile()) # write file to demonstrate reading it\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n\nReview comment:\n       I think I'll use \"until the result is required\" instead of \"until it is requested\" if that's cool with you\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T18:56:50.205+0000",
                    "updated": "2021-04-13T18:56:50.205+0000",
                    "started": "2021-04-13T18:56:50.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581982",
                    "issueId": "13356312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/worklog/581987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10014:\nURL: https://github.com/apache/arrow/pull/10014#discussion_r612709666\n\n\n\n##########\nFile path: r/README.md\n##########\n@@ -22,232 +22,225 @@ access to Arrow memory and messages.\n \n Install the latest release of `arrow` from CRAN with\n \n-```r\n+``` r\n install.packages(\"arrow\")\n ```\n \n Conda users can install `arrow` from conda-forge with\n \n-```\n-conda install -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c conda-forge --strict-channel-priority r-arrow\n \n Installing a released version of the `arrow` package requires no\n additional system dependencies. For macOS and Windows, CRAN hosts binary\n packages that contain the Arrow C++ library. On Linux, source package\n installation will also build necessary C++ dependencies. For a faster,\n-more complete installation, set the environment variable `NOT_CRAN=true`.\n-See `vignette(\"install\", package = \"arrow\")` for details.\n+more complete installation, set the environment variable\n+`NOT_CRAN=true`. See `vignette(\"install\", package = \"arrow\")` for\n+details.\n \n ## Installing a development version\n \n-Development versions of the package (binary and source) are built daily and hosted at\n-<https://arrow-r-nightly.s3.amazonaws.com>. To install from there:\n+Development versions of the package (binary and source) are built\n+nightly and hosted at <https://arrow-r-nightly.s3.amazonaws.com>. To\n+install from there:\n \n ``` r\n install.packages(\"arrow\", repos = \"https://arrow-r-nightly.s3.amazonaws.com\")\n ```\n \n-Or\n+Or to switch to the latest nightly development version:\n \n-```r\n+``` r\n arrow::install_arrow(nightly = TRUE)\n ```\n \n-Conda users can install `arrow` nightlies from our nightlies channel using:\n+Conda users can install `arrow` nightly builds with\n \n-```\n-conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n-```\n+    conda install -c arrow-nightlies -c conda-forge --strict-channel-priority r-arrow\n \n-These daily package builds are not official Apache releases and are not\n-recommended for production use. They may be useful for testing bug fixes\n-and new features under active development.\n+These nightly package builds are not official Apache releases and are\n+not recommended for production use. They may be useful for testing bug\n+fixes and new features under active development.\n \n-## Developing\n+## Apache Arrow metadata and data objects\n \n-Windows and macOS users who wish to contribute to the R package and\n-don\u2019t need to alter the Arrow C++ library may be able to obtain a\n-recent version of the library without building from source. On macOS,\n-you may install the C++ library using [Homebrew](https://brew.sh/):\n+Arrow defines the following classes for representing metadata:\n \n-``` shell\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n+| Class      | Description                                      | How to create an instance        |\n+|------------|--------------------------------------------------|----------------------------------|\n+| `DataType` | attribute controlling how values are represented | functions in `help(\"data-type\")` |\n+| `Field`    | string name and a `DataType`                     | `field(name, type)`              |\n+| `Schema`   | list of `Field`s                                 | `schema(...)`                    |\n \n-On Windows, you can download a .zip file with the arrow dependencies from the\n-[nightly repository](https://arrow-r-nightly.s3.amazonaws.com/libarrow/bin/windows/),\n-and then set the `RWINLIB_LOCAL` environment variable to point to that\n-zip file before installing the `arrow` R package. Version numbers in that\n-repository correspond to dates, and you will likely want the most recent.\n+Arrow defines the following classes for representing 0-dimensional\n+(scalar), 1-dimensional (vector), and 2-dimensional (tabular/data\n+frame-like) data:\n \n-If you need to alter both the Arrow C++ library and the R package code,\n-or if you can\u2019t get a binary version of the latest C++ library\n-elsewhere, you\u2019ll need to build it from source too.\n+| Dim | Class          | Description                               | How to create an instance                          |\n+|-----|----------------|-------------------------------------------|----------------------------------------------------|\n+| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                       |\n+| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                       |\n+| 1   | `ChunkedArray` | list of `Array`s with the same `DataType` | `chunked_array(..., type)`                         |\n+| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `record_batch(...)`                                |\n+| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)` or `arrow::read_*()` functions |\n+| 2   | `Dataset`      | list of `Table`s with the same `Schema`   | see `vignette(\"dataset\", package = \"arrow\")`       |\n \n-First, install the C++ library. See the [developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) for details.\n-It's recommended to make a `build` directory inside of the `cpp` directory of\n-the Arrow git repository (it is git-ignored). Assuming you are inside `cpp/build`,\n-you'll first call `cmake` to configure the build and then `make install`.\n-For the R package, you'll need to enable several features in the C++ library\n-using `-D` flags:\n+These classes exist in the `arrow` R package and correspond to classes\n+of the same names in the Arrow C++ library. For convenience, the `arrow`\n+package also defines several synthetic classes that do not exist in the\n+C++ library, including:\n \n-```\n-cmake \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DCMAKE_BUILD_TYPE=release \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  ..\n-```\n+-   `ArrowDatum`: inherited by `Scalar`, `Array`, and `ChunkedArray`\n+-   `ArrowTabular`: inherited by `RecordBatch` and `Table`\n+-   `ArrowObject`: inherited by all Arrow objects\n \n-where `..` is the path to the `cpp/` directory when you're in `cpp/build`.\n+These are all defined as `R6` classes. The `arrow` package provides a\n+variety of `R6` and S3 methods for interacting with instances of these\n+classes.\n \n-To enable optional features including S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags:\n+## Reading and writing data files with Arrow\n \n-```\n-  -DARROW_S3=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DARROW_EXTRA_ERROR_CONTEXT=ON` makes errors coming from the C++ library point to files and line numbers\n-* `-DBOOST_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+The `arrow` package provides functions for reading data from several\n+common file formats. By default, calling any of these functions returns\n+an R data frame. To return an Arrow `Table`, set argument\n+`as_data_frame = FALSE`.\n \n-Note that after any change to the C++ library, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to the C++ library source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n+-   `read_delim_arrow()`: read a delimited text file (default delimiter\n+    is comma)\n+-   `read_csv_arrow()`: read a comma-separated values (CSV) file\n+-   `read_tsv_arrow()`: a tab-separated values (TSV) file\n+-   `read_json_arrow()`: read a JSON data file\n+-   `read_feather()`: read a file in Feather format (the Apache Arrow\n+    IPC format)\n+-   `read_parquet()`: read a file in Parquet format (an efficient\n+    columnar data format)\n \n-Once you\u2019ve built the C++ library, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n+For writing Arrow tabular data structures to files, the `arrow` package\n+provides the functions `write_feather()` and `write_parquet()`. These\n+functions also accept R data frames.\n \n-``` shell\n-cd ../../r\n+## Using dplyr with Arrow\n \n-Rscript -e '\n-options(repos = \"https://cloud.r-project.org/\")\n-if (!require(\"remotes\")) install.packages(\"remotes\")\n-remotes::install_deps(dependencies = TRUE)\n-'\n+The `arrow` package provides a `dplyr` backend, enabling manipulation of\n+Arrow tabular data with `dplyr` verbs. To start, load both `arrow` and\n+`dplyr`:\n \n-R CMD INSTALL .\n+``` r\n+library(arrow, warn.conflicts = FALSE)\n+library(dplyr, warn.conflicts = FALSE)\n ```\n \n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n+Then create an Arrow `Table` or `RecordBatch` using one of the creation\n+or file loading functions listed above. For example, create a `Table`\n+named `sw` with the Star Wars characters data frame that\u2019s included in\n+`dplyr`:\n \n-``` shell\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+``` r\n+sw <- Table$create(starwars)\n ```\n \n-If the package fails to install/load with an error like this:\n-\n-    ** testing if installed package can be loaded from temporary location\n-    Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-    unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-    dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternativelly, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g.\u00a0`export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n+Or read the same data from a Parquet file, using `as_data_frame = FALSE`\n+to create a `Table` named `sw`:\n \n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you\u2019ve previously installed the\n-libraries and want to upgrade the R package, you\u2019ll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html) and\n-`vignette(\"install\", package = \"arrow\")`.\n-\n-### Editing C++ code\n-\n-The `arrow` package uses some customized tools on top of `cpp11` to\n-prepare its C++ code in `src/`. If you change C++ code in the R package,\n-you will need to set the `ARROW_R_DEV` environment variable to `TRUE`\n-(optionally, add it to your`~/.Renviron` file to persist across\n-sessions) so that the `data-raw/codegen.R` file is used for code\n-generation.\n-\n-We use Google C++ style in our C++ code. Check for style errors with\n-\n-    ./lint.sh\n-\n-Fix any style issues before committing with\n-\n-    ./lint.sh --fix\n+``` r\n+data_file <- tempfile()\n+write_parquet(starwars, data_file)\n+sw <- read_parquet(data_file, as_data_frame = FALSE)\n+```\n \n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn\u2019t found, you can explicitly provide the path to it like\n-`CLANG_FORMAT=$(which clang-format-8) ./lint.sh`. On macOS, you can get\n-this by installing LLVM via Homebrew and running the script as\n-`CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh`\n+For larger or multi-file datasets, load the data into a `Dataset` as\n+described in `vignette(\"dataset\", package = \"arrow\")`.\n \n-### Running tests\n+Next, pipe on `dplyr` verbs:\n \n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n+``` r\n+result <- sw %>% \n+  filter(homeworld == \"Tatooine\") %>% \n+  rename(height_cm = height, mass_kg = mass) %>%\n+  mutate(height_in = height_cm / 2.54, mass_lbs = mass_kg * 2.2046) %>%\n+  arrange(desc(birth_year)) %>%\n+  select(name, height_in, mass_lbs)\n+```\n \n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=TRUE`\n-* Some tests are disabled unless `ARROW_R_DEV=TRUE`\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=TRUE`\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n+The `arrow` package uses lazy evaluation. `result` is an object with\n+class `arrow_dplyr_query` which represents the computations to be\n+performed.\n \n-### Useful functions\n+``` r\n+result\n+#> Table (query)\n+#> name: string\n+#> height_in: expr\n+#> mass_lbs: expr\n+#> \n+#> * Filter: equal(homeworld, \"Tatooine\")\n+#> * Sorted by birth_year [desc]\n+#> See $.data for the source Arrow object\n+```\n \n-Within an R session, these can help with package development:\n+To execute these computations and obtain the result, call `compute()` or\n+`collect()`. `compute()` returns an Arrow `Table`, suitable for passing\n+to other `arrow` or `dplyr` functions.\n \n ``` r\n-devtools::load_all() # Load the dev package\n-devtools::test(filter=\"^regexp$\") # Run the test suite, optionally filtering file names\n-devtools::document() # Update roxygen documentation\n-pkgdown::build_site() # To preview the documentation website\n-devtools::check() # All package checks; see also below\n-covr::package_coverage() # See test coverage statistics\n+result %>% compute()\n+#> Table\n+#> 10 rows x 3 columns\n+#> $name <string>\n+#> $height_in <double>\n+#> $mass_lbs <double>\n ```\n \n-Any of those can be run from the command line by wrapping them in `R -e\n-'$COMMAND'`. There\u2019s also a `Makefile` to help with some common tasks\n-from the command line (`make test`, `make doc`, `make clean`, etc.)\n-\n-### Full package validation\n+`collect()` returns an R data frame or tibble, suitable for viewing or\n+passing to other R functions for analysis or visualization:\n \n-``` shell\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n+``` r\n+result %>% collect()\n+#> # A tibble: 10 x 3\n+#>    name               height_in mass_lbs\n+#>    <chr>                  <dbl>    <dbl>\n+#>  1 C-3PO                   65.7    165. \n+#>  2 Cliegg Lars             72.0     NA  \n+#>  3 Shmi Skywalker          64.2     NA  \n+#>  4 Owen Lars               70.1    265. \n+#>  5 Beru Whitesun lars      65.0    165. \n+#>  6 Darth Vader             79.5    300. \n+#>  7 Anakin Skywalker        74.0    185. \n+#>  8 Biggs Darklighter       72.0    185. \n+#>  9 Luke Skywalker          67.7    170. \n+#> 10 R5-D4                   38.2     70.5\n+```\n+\n+Arrow supports most dplyr verbs except those that compute aggregates\n+(such as `summarise()` and `mutate()` after `group_by()`). Inside dplyr\n+verbs, Arrow offers limited support for functions and operators, with\n+broader support expected in upcoming releases. For more information\n+about available compute functions, see `help(\"list_compute_functions\")`.\n+\n+For dplyr queries on `Table` and `RecordBatch` objects, if the `arrow` R\n+package detects an unsupported function within a dplyr verb, it\n+automatically calls `collect()` to return the data as an R data frame\n+before processing that dplyr verb.\n+\n+## Getting help\n+\n+If you encounter a bug, please file an issue with a minimal reproducible\n+example on [the Apache Jira issue\n+tracker](https://issues.apache.org/jira/). Choose the project **Apache\n\nReview comment:\n       I guess I'll just switch this to using https://\u200bissues.apache.org/\u200bjira/\u200bprojects/\u200bARROW/\u200bissues because that's used everywhere else, but oof it's a bad experience for folks who aren't familiar with Jira\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T19:12:04.650+0000",
                    "updated": "2021-04-13T19:12:04.650+0000",
                    "started": "2021-04-13T19:12:04.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581987",
                    "issueId": "13356312"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 26400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@381b4dad[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d1b6d8a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@407bc588[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@26ea8730[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f54ec52[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@51f7fa0f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f3e323c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d1fefec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1501b261[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7b48054c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@455967cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@77b8003[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 26400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 14 23:42:27 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-14T23:42:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11477/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-02-02T22:37:55.000+0000",
        "updated": "2021-04-14T23:42:41.000+0000",
        "timeoriginalestimate": null,
        "description": "Collecting various ideas here for general ways to improve the R package README and vignettes for the 4.0.0 release:\r\n * Consider moving the \"building\" and \"developing\" content out of the REAMDE and into a vignette focused on that topic. (Rationale: most users of the R package today are downloading prebuilt binaries, not building their own; most users today are end users, not developers; a more valuable use for the README\u2014especially since that it's the homepage of the R docs site\u2014would be as a place to highlight key capabilities of the package, not to show folks all the technical details of building it.)\r\n * Get the \"Using the Arrow C++ Library in R\" vignette to show in the Articles menu on the R docs site.\r\n * Edit the \"Working with Arrow Datasets and dplyr\" vignette to make clear that dplyr verbs can be used with Arrow Tables and RecordBatches (not just Datasets) and describe differences in dplyr support for these different Arrow objects.\r\n * Check all the links in the \"Project docs\" menu on the docs site; some of them are currently broken or go to directory listings",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 26400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R][Doc] Reorganize and improve README and vignette content",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/comment/17277511",
                    "id": "17277511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Re the \"Using the Arrow C++ Library in R\" vignette, it is (or at least used to be) pkgdown's convention that `vignette(\"pkgname\")` gets put as the \"Get started\" link in the top menu bar, and all other vignettes go under Articles. But we have the ability to override that. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-02-02T22:42:59.313+0000",
                    "updated": "2021-02-02T22:42:59.313+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/comment/17299820",
                    "id": "17299820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Consider extracting out the README and dplyr piece of this for the 4.0.0 release and deferring the remainder for a later release.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-11T19:17:15.831+0000",
                    "updated": "2021-03-11T19:22:42.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356312/comment/17321807",
                    "id": "17321807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10014\n[https://github.com/apache/arrow/pull/10014]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-04-14T23:42:27.840+0000",
                    "updated": "2021-04-14T23:42:27.840+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0na5s:",
        "customfield_12314139": null
    }
}