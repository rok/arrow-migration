{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13042653",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653",
    "key": "ARROW-554",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-554/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 55,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/174624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T18:16:18.809+0000",
                    "updated": "2018-12-12T18:16:18.809+0000",
                    "started": "2018-12-12T18:16:18.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174624",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/174964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r241492541\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n \n Review comment:\n   You could avoid this switch statement + macros by making UnifyDictionaryValues a struct and using VisitTypeInline\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T17:27:43.960+0000",
                    "updated": "2018-12-13T17:27:43.960+0000",
                    "started": "2018-12-13T17:27:43.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174964",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/174969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r241503201\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n \n Review comment:\n   Probably... but I'm not sure that would be more readable, as I then would have to reproduce the type selection logic in the template instantiation.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T18:00:21.299+0000",
                    "updated": "2018-12-13T18:00:21.299+0000",
                    "started": "2018-12-13T18:00:21.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174969",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/174998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r241526368\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n \n Review comment:\n   I'd say that it's more readable to write an expression delineating supported types (see `CanUnify` below) than to list them explicitly in a macro'd switch. Incidentally, why isn't unification of `DecimalType` supported?\r\n   \r\n   <details>\r\n   \r\n   ```c++\r\n   struct UnifyDictionaryValues {\r\n     MemoryPool* pool;\r\n     std::shared_ptr<DataType> value_type;\r\n     const std::vector<const DictionaryType*>& types;\r\n     std::shared_ptr<Array>* out_values;\r\n     std::vector<std::vector<int32_t>>* out_transpose_maps;\r\n   \r\n     template <typename T>\r\n     static constexpr bool CanUnify() {\r\n         return std::is_base_of<BinaryType, T>::value\r\n           || (std::is_base_of<FixedWidthType, T>::value\r\n               && !std::is_same<Decimal128Type, T>::value);\r\n     }\r\n   \r\n     template <typename T>\r\n     Status Visit(const T&, typename std::enable_if<!CanUnify<T>()>* = nullptr) {\r\n         std::stringstream ss;\r\n         ss << \"Unification of \" << value_type->ToString()\r\n            << \" dictionaries is not implemented\";\r\n         return Status::NotImplemented(ss.str());\r\n     }\r\n   \r\n     template <typename T>\r\n     Status Visit(const T&, typename std::enable_if<CanUnify<T>()>* = nullptr) {\r\n       using ArrayType = typename TypeTraits<T>::ArrayType;\r\n       using DictTraits = typename internal::DictionaryTraits<T>;\r\n       using MemoTableType = typename DictTraits::MemoTableType;\r\n       \r\n       MemoTableType memo_table;\r\n       if (out_transpose_maps != nullptr) {\r\n         out_transpose_maps->clear();\r\n         out_transpose_maps->reserve(types.size());\r\n       }\r\n       // Build up the unified dictionary values and the transpose maps\r\n       for (const auto& type : types) {\r\n         const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\r\n         if (out_transpose_maps != nullptr) {\r\n           std::vector<int32_t> transpose_map;\r\n           transpose_map.reserve(values.length());\r\n           for (int64_t i = 0; i < values.length(); ++i) {\r\n             int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\r\n             transpose_map.push_back(dict_index);\r\n           }\r\n           out_transpose_maps->push_back(std::move(transpose_map));\r\n         } else {\r\n           for (int64_t i = 0; i < values.length(); ++i) {\r\n             memo_table.GetOrInsert(values.GetView(i));\r\n           }\r\n         }\r\n       }\r\n       // Build unified dictionary array\r\n       std::shared_ptr<ArrayData> data;\r\n       RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\r\n                                                       0 /* start_offset */, &data));\r\n       *out_values = MakeArray(data);\r\n       return Status::OK();\r\n     }\r\n   };\r\n   \r\n   Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\r\n                                std::shared_ptr<DataType>* out_type,\r\n                                std::vector<std::vector<int32_t>>* out_transpose_maps) {\r\n     if (types.size() == 0) {\r\n       return Status::Invalid(\"need at least one input type\");\r\n     }\r\n     std::vector<const DictionaryType*> dict_types;\r\n     dict_types.reserve(types.size());\r\n     for (const auto& type : types) {\r\n       if (type->id() != Type::DICTIONARY) {\r\n         return Status::TypeError(\"input types must be dictionary types\");\r\n       }\r\n       dict_types.push_back(checked_cast<const DictionaryType*>(type));\r\n     }\r\n     // XXX Should we check the ordered flag?\r\n     auto value_type = dict_types[0]->dictionary()->type();\r\n     for (const auto& type : dict_types) {\r\n       auto values = type->dictionary();\r\n       if (!values->type()->Equals(value_type)) {\r\n         return Status::TypeError(\"input types have different value types\");\r\n       }\r\n       if (values->null_count() != 0) {\r\n         return Status::TypeError(\"input types have null values\");\r\n       }\r\n     }\r\n   \r\n     UnifyDictionaryValues visitor{pool, value_type, dict_types, &values, out_transpose_maps };\r\n     RETURN_NOT_OK(VisitTypeInline(value_type->id(), &visitor));\r\n   \r\n   ```\r\n   </details>\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-13T19:11:29.809+0000",
                    "updated": "2018-12-13T19:11:29.809+0000",
                    "started": "2018-12-13T19:11:29.809+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174998",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/175723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r241526368\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n \n Review comment:\n   I'd say that it's more readable to write an expression delineating supported types (see `CanUnify` below) than to list them explicitly in a macro'd switch. Incidentally, why isn't unification of `DecimalType` supported?\r\n   \r\n   <details>\r\n   \r\n   ```c++\r\n   struct UnifyDictionaryValues {\r\n     MemoryPool* pool;\r\n     std::shared_ptr<DataType> value_type;\r\n     const std::vector<const DictionaryType*>& types;\r\n     std::shared_ptr<Array>* out_values;\r\n     std::vector<std::vector<int32_t>>* out_transpose_maps;\r\n   \r\n     template <typename T>\r\n     static constexpr bool CanUnify() {\r\n         return std::is_base_of<BinaryType, T>::value\r\n           || (std::is_base_of<FixedWidthType, T>::value\r\n               && !std::is_same<Decimal128Type, T>::value);\r\n     }\r\n   \r\n     template <typename T>\r\n     Status Visit(const T&, typename std::enable_if<!CanUnify<T>()>::type* = nullptr) {\r\n         std::stringstream ss;\r\n         ss << \"Unification of \" << value_type->ToString()\r\n            << \" dictionaries is not implemented\";\r\n         return Status::NotImplemented(ss.str());\r\n     }\r\n   \r\n     template <typename T>\r\n     Status Visit(const T&, typename std::enable_if<CanUnify<T>()>::type* = nullptr) {\r\n       using ArrayType = typename TypeTraits<T>::ArrayType;\r\n       using DictTraits = typename internal::DictionaryTraits<T>;\r\n       using MemoTableType = typename DictTraits::MemoTableType;\r\n       \r\n       MemoTableType memo_table;\r\n       if (out_transpose_maps != nullptr) {\r\n         out_transpose_maps->clear();\r\n         out_transpose_maps->reserve(types.size());\r\n       }\r\n       // Build up the unified dictionary values and the transpose maps\r\n       for (const auto& type : types) {\r\n         const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\r\n         if (out_transpose_maps != nullptr) {\r\n           std::vector<int32_t> transpose_map;\r\n           transpose_map.reserve(values.length());\r\n           for (int64_t i = 0; i < values.length(); ++i) {\r\n             int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\r\n             transpose_map.push_back(dict_index);\r\n           }\r\n           out_transpose_maps->push_back(std::move(transpose_map));\r\n         } else {\r\n           for (int64_t i = 0; i < values.length(); ++i) {\r\n             memo_table.GetOrInsert(values.GetView(i));\r\n           }\r\n         }\r\n       }\r\n       // Build unified dictionary array\r\n       std::shared_ptr<ArrayData> data;\r\n       RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\r\n                                                       0 /* start_offset */, &data));\r\n       *out_values = MakeArray(data);\r\n       return Status::OK();\r\n     }\r\n   };\r\n   \r\n   Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\r\n                                std::shared_ptr<DataType>* out_type,\r\n                                std::vector<std::vector<int32_t>>* out_transpose_maps) {\r\n     if (types.size() == 0) {\r\n       return Status::Invalid(\"need at least one input type\");\r\n     }\r\n     std::vector<const DictionaryType*> dict_types;\r\n     dict_types.reserve(types.size());\r\n     for (const auto& type : types) {\r\n       if (type->id() != Type::DICTIONARY) {\r\n         return Status::TypeError(\"input types must be dictionary types\");\r\n       }\r\n       dict_types.push_back(checked_cast<const DictionaryType*>(type));\r\n     }\r\n     // XXX Should we check the ordered flag?\r\n     auto value_type = dict_types[0]->dictionary()->type();\r\n     for (const auto& type : dict_types) {\r\n       auto values = type->dictionary();\r\n       if (!values->type()->Equals(value_type)) {\r\n         return Status::TypeError(\"input types have different value types\");\r\n       }\r\n       if (values->null_count() != 0) {\r\n         return Status::TypeError(\"input types have null values\");\r\n       }\r\n     }\r\n   \r\n     UnifyDictionaryValues visitor{pool, value_type, dict_types, &values, out_transpose_maps };\r\n     RETURN_NOT_OK(VisitTypeInline(value_type->id(), &visitor));\r\n   \r\n   ```\r\n   </details>\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-15T17:55:24.875+0000",
                    "updated": "2018-12-15T17:55:24.875+0000",
                    "started": "2018-12-15T17:55:24.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175723",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/175777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r241966332\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n+  case TYPE_CLASS::type_id:                                                        \\\n+    RETURN_NOT_OK(UnifyDictionaryValues<TYPE_CLASS>(pool, value_type, dict_types,  \\\n+                                                    &values, out_transpose_maps)); \\\n+    break;\n+\n+  std::shared_ptr<Array> values;\n+  switch (value_type->id()) {\n+    UNIFY_CASE(Int8Type)\n+    UNIFY_CASE(Int16Type)\n+    UNIFY_CASE(Int32Type)\n+    UNIFY_CASE(Int64Type)\n+    UNIFY_CASE(UInt8Type)\n+    UNIFY_CASE(UInt16Type)\n+    UNIFY_CASE(UInt32Type)\n+    UNIFY_CASE(UInt64Type)\n+    UNIFY_CASE(HalfFloatType)\n+    UNIFY_CASE(FloatType)\n+    UNIFY_CASE(DoubleType)\n+    UNIFY_CASE(TimestampType)\n+    UNIFY_CASE(Time32Type)\n+    UNIFY_CASE(Time64Type)\n+    UNIFY_CASE(Date32Type)\n+    UNIFY_CASE(Date64Type)\n+    UNIFY_CASE(BooleanType)\n+    UNIFY_CASE(BinaryType)\n+    UNIFY_CASE(StringType)\n+    UNIFY_CASE(FixedSizeBinaryType)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"Unification of \" << value_type->ToString()\n+         << \" dictionaries is not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef UNIFY_CASE\n+\n+  // Build unified dictionary type with the right index type\n+  std::shared_ptr<DataType> index_type;\n+  if (values->length() < 0x7f) {\n \n Review comment:\n   use expression with either `INT8_MAX` or `std::numeric_limits...`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-16T02:54:21.946+0000",
                    "updated": "2018-12-16T02:54:21.946+0000",
                    "started": "2018-12-16T02:54:21.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175777",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/175964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242102983\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n \n Review comment:\n   Thanks for the suggestion! I'll give it a try :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T10:55:55.580+0000",
                    "updated": "2018-12-17T10:55:55.580+0000",
                    "started": "2018-12-17T10:55:55.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175964",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/175965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242103256\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n+  case TYPE_CLASS::type_id:                                                        \\\n+    RETURN_NOT_OK(UnifyDictionaryValues<TYPE_CLASS>(pool, value_type, dict_types,  \\\n+                                                    &values, out_transpose_maps)); \\\n+    break;\n+\n+  std::shared_ptr<Array> values;\n+  switch (value_type->id()) {\n+    UNIFY_CASE(Int8Type)\n+    UNIFY_CASE(Int16Type)\n+    UNIFY_CASE(Int32Type)\n+    UNIFY_CASE(Int64Type)\n+    UNIFY_CASE(UInt8Type)\n+    UNIFY_CASE(UInt16Type)\n+    UNIFY_CASE(UInt32Type)\n+    UNIFY_CASE(UInt64Type)\n+    UNIFY_CASE(HalfFloatType)\n+    UNIFY_CASE(FloatType)\n+    UNIFY_CASE(DoubleType)\n+    UNIFY_CASE(TimestampType)\n+    UNIFY_CASE(Time32Type)\n+    UNIFY_CASE(Time64Type)\n+    UNIFY_CASE(Date32Type)\n+    UNIFY_CASE(Date64Type)\n+    UNIFY_CASE(BooleanType)\n+    UNIFY_CASE(BinaryType)\n+    UNIFY_CASE(StringType)\n+    UNIFY_CASE(FixedSizeBinaryType)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"Unification of \" << value_type->ToString()\n+         << \" dictionaries is not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef UNIFY_CASE\n+\n+  // Build unified dictionary type with the right index type\n+  std::shared_ptr<DataType> index_type;\n+  if (values->length() < 0x7f) {\n \n Review comment:\n   I don't know, I find it as much or more readable like this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T10:56:52.991+0000",
                    "updated": "2018-12-17T10:56:52.991+0000",
                    "started": "2018-12-17T10:56:52.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175965",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242175003\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n+  case TYPE_CLASS::type_id:                                                        \\\n+    RETURN_NOT_OK(UnifyDictionaryValues<TYPE_CLASS>(pool, value_type, dict_types,  \\\n+                                                    &values, out_transpose_maps)); \\\n+    break;\n+\n+  std::shared_ptr<Array> values;\n+  switch (value_type->id()) {\n+    UNIFY_CASE(Int8Type)\n+    UNIFY_CASE(Int16Type)\n+    UNIFY_CASE(Int32Type)\n+    UNIFY_CASE(Int64Type)\n+    UNIFY_CASE(UInt8Type)\n+    UNIFY_CASE(UInt16Type)\n+    UNIFY_CASE(UInt32Type)\n+    UNIFY_CASE(UInt64Type)\n+    UNIFY_CASE(HalfFloatType)\n+    UNIFY_CASE(FloatType)\n+    UNIFY_CASE(DoubleType)\n+    UNIFY_CASE(TimestampType)\n+    UNIFY_CASE(Time32Type)\n+    UNIFY_CASE(Time64Type)\n+    UNIFY_CASE(Date32Type)\n+    UNIFY_CASE(Date64Type)\n+    UNIFY_CASE(BooleanType)\n+    UNIFY_CASE(BinaryType)\n+    UNIFY_CASE(StringType)\n+    UNIFY_CASE(FixedSizeBinaryType)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"Unification of \" << value_type->ToString()\n+         << \" dictionaries is not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef UNIFY_CASE\n+\n+  // Build unified dictionary type with the right index type\n+  std::shared_ptr<DataType> index_type;\n+  if (values->length() < 0x7f) {\n \n Review comment:\n   I think this falls under \"magic number\", though: even if everybody knows what it is and finds it more readable, it's probably better to be explicit with a symbolic constant\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T14:48:25.029+0000",
                    "updated": "2018-12-17T14:48:25.029+0000",
                    "started": "2018-12-17T14:48:25.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176051",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: [WIP] ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242181095\n \n \n\n ##########\n File path: cpp/src/arrow/builder-dict.cc\n ##########\n @@ -33,6 +35,131 @@ namespace arrow {\n \n using internal::checked_cast;\n \n+// ----------------------------------------------------------------------\n+// DictionaryType unification\n+\n+template <typename T, typename Enable = void>\n+static Status UnifyDictionaryValues(\n+    MemoryPool* pool, const std::shared_ptr<DataType>& value_type,\n+    const std::vector<const DictionaryType*>& types, std::shared_ptr<Array>* out_values,\n+    std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+  using DictTraits = typename internal::DictionaryTraits<T>;\n+\n+  typename DictTraits::MemoTableType memo_table;\n+  if (out_transpose_maps != nullptr) {\n+    out_transpose_maps->clear();\n+    out_transpose_maps->reserve(types.size());\n+  }\n+\n+  // Build up the unified dictionary values and the transpose maps\n+  for (const auto& type : types) {\n+    const ArrayType& values = checked_cast<const ArrayType&>(*type->dictionary());\n+    if (out_transpose_maps != nullptr) {\n+      std::vector<int32_t> transpose_map;\n+      transpose_map.reserve(values.length());\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        int32_t dict_index = memo_table.GetOrInsert(values.GetView(i));\n+        transpose_map.push_back(dict_index);\n+      }\n+      out_transpose_maps->push_back(std::move(transpose_map));\n+    } else {\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        memo_table.GetOrInsert(values.GetView(i));\n+      }\n+    }\n+  }\n+\n+  // Build unified dictionary array\n+  std::shared_ptr<ArrayData> data;\n+  RETURN_NOT_OK(DictTraits::GetDictionaryArrayData(pool, value_type, memo_table,\n+                                                   0 /* start_offset */, &data));\n+  *out_values = MakeArray(data);\n+  return Status::OK();\n+}\n+\n+Status DictionaryType::Unify(MemoryPool* pool, const std::vector<const DataType*>& types,\n+                             std::shared_ptr<DataType>* out_type,\n+                             std::vector<std::vector<int32_t>>* out_transpose_maps) {\n+  if (types.size() == 0) {\n+    return Status::Invalid(\"need at least one input type\");\n+  }\n+  std::vector<const DictionaryType*> dict_types;\n+  dict_types.reserve(types.size());\n+  for (const auto& type : types) {\n+    if (type->id() != Type::DICTIONARY) {\n+      return Status::TypeError(\"input types must be dictionary types\");\n+    }\n+    dict_types.push_back(checked_cast<const DictionaryType*>(type));\n+  }\n+\n+  // XXX Should we check the ordered flag?\n+  auto value_type = dict_types[0]->dictionary()->type();\n+  for (const auto& type : dict_types) {\n+    auto values = type->dictionary();\n+    if (!values->type()->Equals(value_type)) {\n+      return Status::TypeError(\"input types have different value types\");\n+    }\n+    if (values->null_count() != 0) {\n+      return Status::TypeError(\"input types have null values\");\n+    }\n+  }\n+\n+#define UNIFY_CASE(TYPE_CLASS)                                                     \\\n+  case TYPE_CLASS::type_id:                                                        \\\n+    RETURN_NOT_OK(UnifyDictionaryValues<TYPE_CLASS>(pool, value_type, dict_types,  \\\n+                                                    &values, out_transpose_maps)); \\\n+    break;\n+\n+  std::shared_ptr<Array> values;\n+  switch (value_type->id()) {\n+    UNIFY_CASE(Int8Type)\n+    UNIFY_CASE(Int16Type)\n+    UNIFY_CASE(Int32Type)\n+    UNIFY_CASE(Int64Type)\n+    UNIFY_CASE(UInt8Type)\n+    UNIFY_CASE(UInt16Type)\n+    UNIFY_CASE(UInt32Type)\n+    UNIFY_CASE(UInt64Type)\n+    UNIFY_CASE(HalfFloatType)\n+    UNIFY_CASE(FloatType)\n+    UNIFY_CASE(DoubleType)\n+    UNIFY_CASE(TimestampType)\n+    UNIFY_CASE(Time32Type)\n+    UNIFY_CASE(Time64Type)\n+    UNIFY_CASE(Date32Type)\n+    UNIFY_CASE(Date64Type)\n+    UNIFY_CASE(BooleanType)\n+    UNIFY_CASE(BinaryType)\n+    UNIFY_CASE(StringType)\n+    UNIFY_CASE(FixedSizeBinaryType)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"Unification of \" << value_type->ToString()\n+         << \" dictionaries is not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef UNIFY_CASE\n+\n+  // Build unified dictionary type with the right index type\n+  std::shared_ptr<DataType> index_type;\n+  if (values->length() < 0x7f) {\n \n Review comment:\n   Ok...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T15:02:45.792+0000",
                    "updated": "2018-12-17T15:02:45.792+0000",
                    "started": "2018-12-17T15:02:45.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176062",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#issuecomment-448353728\n \n \n   This PR is ready for review now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T20:10:45.274+0000",
                    "updated": "2018-12-18T20:10:45.274+0000",
                    "started": "2018-12-18T20:10:45.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176746",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#issuecomment-448571005\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=h1) Report\n   > Merging [#3165](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/944b9e319a5f208c0fc45953d1f10972b1433020?src=pr&el=desc) will **increase** coverage by `1.19%`.\n   > The diff coverage is `89.71%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3165/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3165      +/-   ##\n   ==========================================\n   + Coverage   86.44%   87.63%   +1.19%     \n   ==========================================\n     Files         508      446      -62     \n     Lines       70077    66052    -4025     \n   ==========================================\n   - Hits        60576    57885    -2691     \n   + Misses       9398     8167    -1231     \n   + Partials      103        0     -103\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/visitor\\_inline.h](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92aXNpdG9yX2lubGluZS5o) | `96.89% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/hashing.h](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2hhc2hpbmcuaA==) | `99.25% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/type.h](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmg=) | `87.01% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_types.py](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90eXBlcy5weQ==) | `96.89% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/type-test.cc](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/int-util-test.cc](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/type.cc](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmNj) | `92.5% <100%> (+0.08%)` | :arrow_up: |\n   | [cpp/src/arrow/util/int-util.cc](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLmNj) | `99.6% <100%> (+0.02%)` | :arrow_up: |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `98.44% <50%> (-0.77%)` | :arrow_down: |\n   | [cpp/src/arrow/array/builder\\_dict.cc](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX2RpY3QuY2M=) | `65.15% <74.62%> (+11.3%)` | :arrow_up: |\n   | ... and [87 more](https://codecov.io/gh/apache/arrow/pull/3165/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=footer). Last update [944b9e3...7d2579b](https://codecov.io/gh/apache/arrow/pull/3165?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T12:04:17.585+0000",
                    "updated": "2018-12-19T12:04:17.585+0000",
                    "started": "2018-12-19T12:04:17.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176952",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242911274\n \n \n\n ##########\n File path: cpp/src/arrow/array-dict-test.cc\n ##########\n @@ -740,4 +743,63 @@ TEST(TestDictionary, FromArray) {\n   ASSERT_RAISES(Invalid, DictionaryArray::FromArrays(dict_type, indices4, &arr4));\n }\n \n+TEST(TestDictionary, TransposeBasic) {\n+  std::shared_ptr<Array> arr, out, expected;\n \n Review comment:\n   Can you type them `DictionaryArray` at the declaration to avoid all casts?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T13:34:37.134+0000",
                    "updated": "2018-12-19T13:34:37.134+0000",
                    "started": "2018-12-19T13:34:37.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176978",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242917030\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -402,5 +402,45 @@ void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length) {\n   memcpy(dest, source, length * sizeof(int64_t));\n }\n \n+template <typename InputInt, typename OutputInt>\n+void TransposeInts(const InputInt* src, OutputInt* dest, int64_t length,\n+                   const int32_t* transpose_map) {\n+  while (length >= 4) {\n+    dest[0] = static_cast<OutputInt>(transpose_map[src[0]]);\n+    dest[1] = static_cast<OutputInt>(transpose_map[src[1]]);\n+    dest[2] = static_cast<OutputInt>(transpose_map[src[2]]);\n \n Review comment:\n   Aren't you concerned by truncation due to incompatible size, maybe a static_assert somewhere?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T13:34:37.140+0000",
                    "updated": "2018-12-19T13:34:37.140+0000",
                    "started": "2018-12-19T13:34:37.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176979",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242916637\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util-test.cc\n ##########\n @@ -373,5 +373,14 @@ TEST(IntWidth, NullsMany) {\n   }\n }\n \n+TEST(TransposeInts, Int8ToInt64) {\n+  std::vector<int8_t> src = {1, 3, 5, 0, 3, 2};\n+  std::vector<int32_t> transpose_map = {1111, 2222, 3333, 4444, 5555, 6666, 7777};\n+  std::vector<int64_t> dest(src.size());\n+\n+  TransposeInts(src.data(), dest.data(), 6, transpose_map.data());\n \n Review comment:\n   src.size() instead of 6, just in case.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T13:34:37.150+0000",
                    "updated": "2018-12-19T13:34:37.150+0000",
                    "started": "2018-12-19T13:34:37.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176980",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242916865\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -402,5 +402,45 @@ void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length) {\n   memcpy(dest, source, length * sizeof(int64_t));\n }\n \n+template <typename InputInt, typename OutputInt>\n+void TransposeInts(const InputInt* src, OutputInt* dest, int64_t length,\n+                   const int32_t* transpose_map) {\n+  while (length >= 4) {\n \n Review comment:\n   Clang does this unrolling naturally, gcc does not :( https://godbolt.org/z/ZHobe1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T13:34:37.177+0000",
                    "updated": "2018-12-19T13:34:37.177+0000",
                    "started": "2018-12-19T13:34:37.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176981",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242924588\n \n \n\n ##########\n File path: cpp/src/arrow/array-dict-test.cc\n ##########\n @@ -740,4 +743,63 @@ TEST(TestDictionary, FromArray) {\n   ASSERT_RAISES(Invalid, DictionaryArray::FromArrays(dict_type, indices4, &arr4));\n }\n \n+TEST(TestDictionary, TransposeBasic) {\n+  std::shared_ptr<Array> arr, out, expected;\n \n Review comment:\n   Well, other APIs take `Array` pointers, not `DictionaryArray`. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T13:58:16.138+0000",
                    "updated": "2018-12-19T13:58:16.138+0000",
                    "started": "2018-12-19T13:58:16.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176992",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242925574\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util-test.cc\n ##########\n @@ -373,5 +373,14 @@ TEST(IntWidth, NullsMany) {\n   }\n }\n \n+TEST(TransposeInts, Int8ToInt64) {\n+  std::vector<int8_t> src = {1, 3, 5, 0, 3, 2};\n+  std::vector<int32_t> transpose_map = {1111, 2222, 3333, 4444, 5555, 6666, 7777};\n+  std::vector<int64_t> dest(src.size());\n+\n+  TransposeInts(src.data(), dest.data(), 6, transpose_map.data());\n \n Review comment:\n   It may emit a cast warning, though :-/\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T14:01:21.547+0000",
                    "updated": "2018-12-19T14:01:21.547+0000",
                    "started": "2018-12-19T14:01:21.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176994",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242925933\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -402,5 +402,45 @@ void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length) {\n   memcpy(dest, source, length * sizeof(int64_t));\n }\n \n+template <typename InputInt, typename OutputInt>\n+void TransposeInts(const InputInt* src, OutputInt* dest, int64_t length,\n+                   const int32_t* transpose_map) {\n+  while (length >= 4) {\n \n Review comment:\n   Neither does MSVC. The compiler generally doesn't have enough context to know whether unrolling is a good idea (I'm surprised than clang does it at `-O2`, btw). I'd rather unroll explicitly where _we_ have that context.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T14:02:23.983+0000",
                    "updated": "2018-12-19T14:02:23.983+0000",
                    "started": "2018-12-19T14:02:23.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176997",
                    "issueId": "13042653"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/worklog/176998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3165: ARROW-554: [C++] Add functions to conform dictionaries\nURL: https://github.com/apache/arrow/pull/3165#discussion_r242926251\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -402,5 +402,45 @@ void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length) {\n   memcpy(dest, source, length * sizeof(int64_t));\n }\n \n+template <typename InputInt, typename OutputInt>\n+void TransposeInts(const InputInt* src, OutputInt* dest, int64_t length,\n+                   const int32_t* transpose_map) {\n+  while (length >= 4) {\n+    dest[0] = static_cast<OutputInt>(transpose_map[src[0]]);\n+    dest[1] = static_cast<OutputInt>(transpose_map[src[1]]);\n+    dest[2] = static_cast<OutputInt>(transpose_map[src[2]]);\n \n Review comment:\n   What would we `static_assert`? Indeed it's up to the caller to ensure the input is ok (it is by construction in case of dictionary unification).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T14:03:12.230+0000",
                    "updated": "2018-12-19T14:03:12.230+0000",
                    "started": "2018-12-19T14:03:12.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176998",
                    "issueId": "13042653"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 30600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53b22656[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@568ffe45[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20b3ecce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@9e7534b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1387ae31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e298967[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41c3cff0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@720db188[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c557fde[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6e05a782[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31e659fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ef82fb8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 19 18:54:27 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-19T18:54:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-554/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-02-13T19:22:27.000+0000",
        "updated": "2018-12-21T00:42:23.000+0000",
        "timeoriginalestimate": null,
        "description": "We may wish to either\n\n* Conform the dictionary indices to reference a common dictionary\n* Concatenate indices into a new array with a common dictionary\n\nThis is related to in-memory dictionary encoding, as you start with a partially-built dictionary and then add entries as you observe new ones in other dictionaries, all the while \"rebasing\" indices to consistently reference the same dictionary at the end",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement functions to conform unequal dictionaries amongst multiple Arrow arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/comment/16719273",
                    "id": "16719273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Does it make sense to make those a kernel or rather a {{DictionaryArray}} method?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-12-12T18:06:30.489+0000",
                    "updated": "2018-12-12T18:06:30.489+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042653/comment/16725269",
                    "id": "16725269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3165\n[https://github.com/apache/arrow/pull/3165]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-19T18:54:27.121+0000",
                    "updated": "2018-12-19T18:54:27.121+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3a0d3:",
        "customfield_12314139": null
    }
}