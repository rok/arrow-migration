{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13309222",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222",
    "key": "ARROW-9029",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12590279",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590279",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9029/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346\n\n\n   The purpose of this class is to scan validity bitmaps in segments of 4 words at a time (a \"run\") and return the number of true values using popcount hardware instrinsics. Processing code can then switch between nullable / non-nullable processing paths. \r\n   \r\n   In the benchmark I wrote here, this strategy starts to become faster than using BitmapReader naively with a null density somewhere between 2% and 10%. I implemented a naive \"sum non-null values\" algorithm using BitmapScanner versus a similarly naive version that uses BitmapReader. The benchmark state parameter is the average number of array values for each null\r\n   \r\n   ```\r\n   -------------------------------------------------------------------------------\r\n   Benchmark                                        Time           CPU Iterations\r\n   -------------------------------------------------------------------------------\r\n   BitmapScannerSumNotNull/8                  1556898 ns    1556893 ns        453   642.305M items/s\r\n   BitmapScannerSumNotNull/64                  750638 ns     750619 ns        931   1.30101G items/s\r\n   BitmapScannerSumNotNull/512                 299872 ns     299844 ns       2335   3.25691G items/s\r\n   BitmapScannerSumNotNull/4096                 60103 ns      60101 ns      11817   16.2486G items/s\r\n   BitmapScannerSumNotNull/32768                16876 ns      16875 ns      41688   57.8705G items/s\r\n   BitmapScannerSumNotNull/65536                15240 ns      15239 ns      45834   64.0817G items/s\r\n   BitmapScannerSumNotNullWithOffset/8        1553823 ns    1553779 ns        452   643.592M items/s\r\n   BitmapScannerSumNotNullWithOffset/64        758355 ns     758297 ns        928   1.28784G items/s\r\n   BitmapScannerSumNotNullWithOffset/512       305559 ns     305558 ns       2298   3.19599G items/s\r\n   BitmapScannerSumNotNullWithOffset/4096       69507 ns      69503 ns      10092   14.0507G items/s\r\n   BitmapScannerSumNotNullWithOffset/32768      26965 ns      26963 ns      26061   36.2193G items/s\r\n   BitmapScannerSumNotNullWithOffset/65536      25367 ns      25367 ns      27580   38.4968G items/s\r\n   BitmapReaderSumNotNull/8                   1866180 ns    1866031 ns        371   535.897M items/s\r\n   BitmapReaderSumNotNull/64                   924758 ns     924762 ns        755   1081.36M items/s\r\n   BitmapReaderSumNotNull/512                  819211 ns     819195 ns        852    1.1921G items/s\r\n   BitmapReaderSumNotNull/4096                 817930 ns     817931 ns        864   1.19394G items/s\r\n   BitmapReaderSumNotNull/32768                816179 ns     816166 ns        853   1.19652G items/s\r\n   BitmapReaderSumNotNull/65536                805773 ns     805730 ns        875   1.21202G items/s\r\n   BitmapReaderSumNotNullWithOffset/8         1795166 ns    1795173 ns        391   557.049M items/s\r\n   BitmapReaderSumNotNullWithOffset/64         991151 ns     991077 ns        694      1009M items/s\r\n   BitmapReaderSumNotNullWithOffset/512        898265 ns     898262 ns        774   1113.26M items/s\r\n   BitmapReaderSumNotNullWithOffset/4096       889900 ns     889842 ns        782    1123.8M items/s\r\n   BitmapReaderSumNotNullWithOffset/32768      890293 ns     890287 ns        787   1123.23M items/s\r\n   BitmapReaderSumNotNullWithOffset/65536      891574 ns     891511 ns        795   1121.69M items/s\r\n   ```\r\n   \r\n   So we can see that the performance is around the same when 1 in 8 values is null, but when 1 out of 512 is null, the scanner version is 3x faster. And the performance goes up from there, up to 40x faster on data that has nulls but not very many. In my experience, data with < 1% nulls is extremely common, much more so than data with 5% or more nulls. This is obviously a tradeoff but IMHO one worth making. \r\n   \r\n   As a bonus, `BitmapScanner` doesn't inline any code.\r\n   \r\n   The implementation of this can probably be improved and the benchmark as well so I welcome your collective help with this. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T23:42:38.112+0000",
                    "updated": "2020-06-03T23:42:38.112+0000",
                    "started": "2020-06-03T23:42:38.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441028",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#issuecomment-638517529\n\n\n   @cyb70289 since you've been doing bitmap stuff lately I would welcome your code review of this\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T23:44:07.933+0000",
                    "updated": "2020-06-03T23:44:07.933+0000",
                    "started": "2020-06-03T23:44:07.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441029",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#issuecomment-638518335\n\n\n   https://issues.apache.org/jira/browse/ARROW-9029\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T23:46:56.460+0000",
                    "updated": "2020-06-03T23:46:56.460+0000",
                    "started": "2020-06-03T23:46:56.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441030",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434918911\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n+  };\n+\n+  // When the offset is > 0, we need there to be a word beyond the last aligned\n+  // word in the bitmap for the bit shifting logic.\n+  const int64_t bits_required_to_scan_words = offset_ == 0 ? 256 : 256 + (64 - offset_);\n+  if (bits_remaining_ < bits_required_to_scan_words) {\n+    // End of the bitmap, leave it to the caller to decide how to best check\n+    // these bits, no need to do redundant computation here.\n+    const int64_t run_length = bits_remaining_;\n+    bits_remaining_ -= run_length;\n+    return {run_length, CountSetBits(bitmap_, offset_, run_length)};\n+  }\n+\n+  int64_t total_popcount = 0;\n+  if (offset_ == 0) {\n+    total_popcount += __builtin_popcountll(load_word(bitmap_));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 8));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 16));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 24));\n+  } else {\n+    auto current = load_word(bitmap_);\n+    auto next = load_word(bitmap_ + 8);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n\nReview comment:\n       I think we have wrappers for these functions, is there a reason you aren't using them?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-03T23:55:54.197+0000",
                    "updated": "2020-06-03T23:55:54.197+0000",
                    "started": "2020-06-03T23:55:54.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441036",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434921083\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       why not e class?\r\n   \r\n   Also as Antoine pointed out on the JIRA this replicates a lot of functionality in BitRunReader it would be nice consolidate the two (although for this specific use-case I can imagine that this would be slightly more performant).  I think all that would be missing from the current implementation in https://github.com/apache/arrow/pull/7143\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T00:04:03.180+0000",
                    "updated": "2020-06-04T00:04:03.180+0000",
                    "started": "2020-06-04T00:04:03.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441040",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434925318\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n+  };\n+\n+  // When the offset is > 0, we need there to be a word beyond the last aligned\n+  // word in the bitmap for the bit shifting logic.\n+  const int64_t bits_required_to_scan_words = offset_ == 0 ? 256 : 256 + (64 - offset_);\n+  if (bits_remaining_ < bits_required_to_scan_words) {\n+    // End of the bitmap, leave it to the caller to decide how to best check\n+    // these bits, no need to do redundant computation here.\n+    const int64_t run_length = bits_remaining_;\n+    bits_remaining_ -= run_length;\n+    return {run_length, CountSetBits(bitmap_, offset_, run_length)};\n+  }\n+\n+  int64_t total_popcount = 0;\n+  if (offset_ == 0) {\n+    total_popcount += __builtin_popcountll(load_word(bitmap_));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 8));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 16));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 24));\n+  } else {\n+    auto current = load_word(bitmap_);\n+    auto next = load_word(bitmap_ + 8);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n\nReview comment:\n       I guess I just missed them. Will fix\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T00:20:46.022+0000",
                    "updated": "2020-06-04T00:20:46.022+0000",
                    "started": "2020-06-04T00:20:46.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441041",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434925899\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       I'll change it to a class. This code is simple and extremely fast -- for this specific use case I don't want to use a more general solution if it reduces performance\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T00:22:55.718+0000",
                    "updated": "2020-06-04T00:22:55.718+0000",
                    "started": "2020-06-04T00:22:55.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441043",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434929850\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       Turned it into a class.\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n+  };\n+\n+  // When the offset is > 0, we need there to be a word beyond the last aligned\n+  // word in the bitmap for the bit shifting logic.\n+  const int64_t bits_required_to_scan_words = offset_ == 0 ? 256 : 256 + (64 - offset_);\n+  if (bits_remaining_ < bits_required_to_scan_words) {\n+    // End of the bitmap, leave it to the caller to decide how to best check\n+    // these bits, no need to do redundant computation here.\n+    const int64_t run_length = bits_remaining_;\n+    bits_remaining_ -= run_length;\n+    return {run_length, CountSetBits(bitmap_, offset_, run_length)};\n+  }\n+\n+  int64_t total_popcount = 0;\n+  if (offset_ == 0) {\n+    total_popcount += __builtin_popcountll(load_word(bitmap_));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 8));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 16));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 24));\n+  } else {\n+    auto current = load_word(bitmap_);\n+    auto next = load_word(bitmap_ + 8);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n\nReview comment:\n       I didn't find the wrappers. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T00:38:50.350+0000",
                    "updated": "2020-06-04T00:38:50.350+0000",
                    "started": "2020-06-04T00:38:50.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441052",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434959303\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       Sounds OK to me.  i think a better name for this would be something along the lines of BitBlockCounter or something similar.  BitmapScanner is too generic.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T02:37:20.947+0000",
                    "updated": "2020-06-04T02:37:20.947+0000",
                    "started": "2020-06-04T02:37:20.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441075",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434959542\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,25 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of up\n+/// to 256 bits at a time along with their popcount. This is used to accelerate\n+/// processing of mostly-not-null array data.\n+class ARROW_EXPORT BitmapScanner {\n+ public:\n+  BitmapScanner(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : bitmap_(bitmap + start_offset / 8),\n+        bits_remaining_(length),\n+        offset_(start_offset % 8) {}\n+\n+  /// \\brief Return the next run of available bits, up to 256. The returned\n+  /// pair contains the size of run and the number of true values\n+  std::pair<int64_t, int64_t> NextRun();\n\nReview comment:\n       please use a struct, it makes reading things much more obvious.\n\n##########\nFile path: cpp/src/arrow/util/bit_util_benchmark.cc\n##########\n@@ -387,6 +389,114 @@ static void BitmapEquals(benchmark::State& state) {\n   state.SetBytesProcessed(state.iterations() * buffer_size);\n }\n \n+template <int64_t Offset = 0>\n+static void BitmapScannerSumNotNull(benchmark::State& state) {\n+  using internal::BitmapScanner;\n+\n+  random::RandomArrayGenerator rng(/*seed=*/0);\n+\n+  const int64_t bitmap_length = 1 << 20;\n+\n+  // State parameter is the average number of total values for each false\n+  // value. So 100 means that 1 out of 100 on average are false.\n+  double true_probability = 1. - 1. / state.range(0);\n+  auto arr = rng.Int8(bitmap_length, 0, 100, true_probability);\n+\n+  const uint8_t* bitmap = arr->null_bitmap_data();\n+\n+  // Compute the expected result\n+  int64_t expected = 0;\n+  const auto& int8_arr = static_cast<const Int8Array&>(*arr);\n+  for (int64_t i = Offset; i < bitmap_length; ++i) {\n+    if (int8_arr.IsValid(i)) {\n+      expected += int8_arr.Value(i);\n+    }\n+  }\n+  for (auto _ : state) {\n+    BitmapScanner scanner(bitmap, Offset, bitmap_length - Offset);\n+    int64_t result = 0;\n+    int64_t position = Offset;\n+    while (true) {\n+      auto bit_run = scanner.NextRun();\n+      if (bit_run.first == 0) {\n+        break;\n+      }\n+      if (bit_run.first == bit_run.second) {\n\nReview comment:\n       this is likely to be a common pattern you might consider exposing it via either callbacks on the class or with an adapter.\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,25 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of up\n+/// to 256 bits at a time along with their popcount. This is used to accelerate\n+/// processing of mostly-not-null array data.\n+class ARROW_EXPORT BitmapScanner {\n+ public:\n+  BitmapScanner(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : bitmap_(bitmap + start_offset / 8),\n+        bits_remaining_(length),\n+        offset_(start_offset % 8) {}\n+\n+  /// \\brief Return the next run of available bits, up to 256. The returned\n+  /// pair contains the size of run and the number of true values\n+  std::pair<int64_t, int64_t> NextRun();\n\nReview comment:\n       I think NextBlock, NextSegment or something similar would similar would be a better name for this method.  Also, probably just int or int16_t as the return values if this is limited to 256.\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n+  };\n+\n+  // When the offset is > 0, we need there to be a word beyond the last aligned\n+  // word in the bitmap for the bit shifting logic.\n+  const int64_t bits_required_to_scan_words = offset_ == 0 ? 256 : 256 + (64 - offset_);\n+  if (bits_remaining_ < bits_required_to_scan_words) {\n+    // End of the bitmap, leave it to the caller to decide how to best check\n+    // these bits, no need to do redundant computation here.\n+    const int64_t run_length = bits_remaining_;\n+    bits_remaining_ -= run_length;\n+    return {run_length, CountSetBits(bitmap_, offset_, run_length)};\n+  }\n+\n+  int64_t total_popcount = 0;\n+  if (offset_ == 0) {\n+    total_popcount += __builtin_popcountll(load_word(bitmap_));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 8));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 16));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 24));\n+  } else {\n+    auto current = load_word(bitmap_);\n+    auto next = load_word(bitmap_ + 8);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n+    current = next;\n+    next = load_word(bitmap_ + 16);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n+    current = next;\n+    next = load_word(bitmap_ + 24);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n+    current = next;\n+    next = load_word(bitmap_ + 32);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n+  }\n+  bitmap_ += 32;\n\nReview comment:\n       it might be clearer if you used BytesForBits(kTargetBitBlockSze) and defined kTargetBitBlockSize someplace.\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -1367,5 +1367,86 @@ TEST(Bitmap, VisitWordsAnd) {\n     }\n   }\n }\n+\n+class TestBitmapScanner : public ::testing::Test {\n+ public:\n+  void Create(int64_t nbytes, int64_t offset, int64_t length) {\n+    ASSERT_OK_AND_ASSIGN(buf_, AllocateBuffer(nbytes));\n+    // Start with data zeroed out\n+    std::memset(buf_->mutable_data(), 0, nbytes);\n+    scanner_.reset(new BitmapScanner(buf_->data(), offset, length));\n+  }\n+\n+ protected:\n+  std::shared_ptr<Buffer> buf_;\n+  std::unique_ptr<BitmapScanner> scanner_;\n+};\n+\n+static constexpr int64_t kWordSize = 64;\n+\n+TEST_F(TestBitmapScanner, Basics) {\n+  const int64_t nbytes = 1024;\n+\n+  Create(nbytes, 0, nbytes * 8);\n+\n+  int64_t bits_scanned = 0;\n+  while (true) {\n\nReview comment:\n       for testing purposed it is probably clearer to have an exact bound iteration and verify the last run returned gives zero (i.e. what happens if there is an infinite loop bug)\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n+  };\n+\n+  // When the offset is > 0, we need there to be a word beyond the last aligned\n+  // word in the bitmap for the bit shifting logic.\n+  const int64_t bits_required_to_scan_words = offset_ == 0 ? 256 : 256 + (64 - offset_);\n+  if (bits_remaining_ < bits_required_to_scan_words) {\n+    // End of the bitmap, leave it to the caller to decide how to best check\n+    // these bits, no need to do redundant computation here.\n+    const int64_t run_length = bits_remaining_;\n+    bits_remaining_ -= run_length;\n+    return {run_length, CountSetBits(bitmap_, offset_, run_length)};\n+  }\n+\n+  int64_t total_popcount = 0;\n+  if (offset_ == 0) {\n+    total_popcount += __builtin_popcountll(load_word(bitmap_));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 8));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 16));\n+    total_popcount += __builtin_popcountll(load_word(bitmap_ + 24));\n+  } else {\n+    auto current = load_word(bitmap_);\n+    auto next = load_word(bitmap_ + 8);\n+    total_popcount += __builtin_popcountll(shift_word(current, next, offset_));\n\nReview comment:\n       Sorry, I think i must have made them in one of my open PRs\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -1367,5 +1367,86 @@ TEST(Bitmap, VisitWordsAnd) {\n     }\n   }\n }\n+\n+class TestBitmapScanner : public ::testing::Test {\n+ public:\n+  void Create(int64_t nbytes, int64_t offset, int64_t length) {\n+    ASSERT_OK_AND_ASSIGN(buf_, AllocateBuffer(nbytes));\n+    // Start with data zeroed out\n+    std::memset(buf_->mutable_data(), 0, nbytes);\n+    scanner_.reset(new BitmapScanner(buf_->data(), offset, length));\n+  }\n+\n+ protected:\n+  std::shared_ptr<Buffer> buf_;\n+  std::unique_ptr<BitmapScanner> scanner_;\n+};\n+\n+static constexpr int64_t kWordSize = 64;\n+\n+TEST_F(TestBitmapScanner, Basics) {\n+  const int64_t nbytes = 1024;\n+\n+  Create(nbytes, 0, nbytes * 8);\n+\n+  int64_t bits_scanned = 0;\n+  while (true) {\n+    auto run = scanner_->NextRun();\n+    if (run.first == 0) {\n+      break;\n+    }\n+    ASSERT_EQ(4 * kWordSize, run.first);\n+    ASSERT_EQ(0, run.second);\n+    bits_scanned += run.first;\n+  }\n+  ASSERT_EQ(1024 * 8, bits_scanned);\n+\n+  auto CheckWithOffset = [&](int64_t offset) {\n\nReview comment:\n       can you sepearate this out into a different tests?\n\n##########\nFile path: cpp/src/arrow/util/bit_util_benchmark.cc\n##########\n@@ -387,6 +389,114 @@ static void BitmapEquals(benchmark::State& state) {\n   state.SetBytesProcessed(state.iterations() * buffer_size);\n }\n \n+template <int64_t Offset = 0>\n+static void BitmapScannerSumNotNull(benchmark::State& state) {\n+  using internal::BitmapScanner;\n+\n+  random::RandomArrayGenerator rng(/*seed=*/0);\n+\n+  const int64_t bitmap_length = 1 << 20;\n+\n+  // State parameter is the average number of total values for each false\n+  // value. So 100 means that 1 out of 100 on average are false.\n+  double true_probability = 1. - 1. / state.range(0);\n+  auto arr = rng.Int8(bitmap_length, 0, 100, true_probability);\n+\n+  const uint8_t* bitmap = arr->null_bitmap_data();\n+\n+  // Compute the expected result\n+  int64_t expected = 0;\n+  const auto& int8_arr = static_cast<const Int8Array&>(*arr);\n+  for (int64_t i = Offset; i < bitmap_length; ++i) {\n+    if (int8_arr.IsValid(i)) {\n+      expected += int8_arr.Value(i);\n+    }\n+  }\n+  for (auto _ : state) {\n+    BitmapScanner scanner(bitmap, Offset, bitmap_length - Offset);\n+    int64_t result = 0;\n+    int64_t position = Offset;\n+    while (true) {\n+      auto bit_run = scanner.NextRun();\n\nReview comment:\n       please spell out type.\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -1367,5 +1367,86 @@ TEST(Bitmap, VisitWordsAnd) {\n     }\n   }\n }\n+\n+class TestBitmapScanner : public ::testing::Test {\n+ public:\n+  void Create(int64_t nbytes, int64_t offset, int64_t length) {\n+    ASSERT_OK_AND_ASSIGN(buf_, AllocateBuffer(nbytes));\n+    // Start with data zeroed out\n+    std::memset(buf_->mutable_data(), 0, nbytes);\n+    scanner_.reset(new BitmapScanner(buf_->data(), offset, length));\n+  }\n+\n+ protected:\n+  std::shared_ptr<Buffer> buf_;\n+  std::unique_ptr<BitmapScanner> scanner_;\n+};\n+\n+static constexpr int64_t kWordSize = 64;\n+\n+TEST_F(TestBitmapScanner, Basics) {\n+  const int64_t nbytes = 1024;\n+\n+  Create(nbytes, 0, nbytes * 8);\n+\n+  int64_t bits_scanned = 0;\n+  while (true) {\n+    auto run = scanner_->NextRun();\n+    if (run.first == 0) {\n+      break;\n+    }\n+    ASSERT_EQ(4 * kWordSize, run.first);\n+    ASSERT_EQ(0, run.second);\n+    bits_scanned += run.first;\n+  }\n+  ASSERT_EQ(1024 * 8, bits_scanned);\n+\n+  auto CheckWithOffset = [&](int64_t offset) {\n+    const int64_t nwords = 15;\n+\n+    const int64_t total_bytes = nwords * 8 + 1;\n+    // Trim a bit from the end of the bitmap so we can check the remainder bits\n+    // behavior\n+    Create(total_bytes, offset, nwords * kWordSize - offset - 1);\n+\n+    // Start with data all set\n+    std::memset(buf_->mutable_data(), 0xFF, total_bytes);\n+\n+    auto run = scanner_->NextRun();\n+    ASSERT_EQ(4 * kWordSize, run.first);\n+    ASSERT_EQ(256, run.second);\n+\n+    // Add some false values to the next 3 shifted words\n+    BitUtil::SetBitTo(buf_->mutable_data(), 4 * kWordSize + offset, false);\n+    BitUtil::SetBitTo(buf_->mutable_data(), 5 * kWordSize + offset, false);\n+    BitUtil::SetBitTo(buf_->mutable_data(), 6 * kWordSize + offset, false);\n+    run = scanner_->NextRun();\n+\n+    ASSERT_EQ(256, run.first);\n+    ASSERT_EQ(253, run.second);\n+\n+    BitUtil::SetBitsTo(buf_->mutable_data(), 8 * kWordSize + offset, 2 * kWordSize,\n+                       false);\n+\n+    run = scanner_->NextRun();\n+    ASSERT_EQ(256, run.first);\n\nReview comment:\n       nit, I think these arguments should be reversed i.e. (actual, expected)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:05:24.686+0000",
                    "updated": "2020-06-04T03:05:24.686+0000",
                    "started": "2020-06-04T03:05:24.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441079",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434969351\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n\nReview comment:\n       will this have different semantics on big endian?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:18:44.650+0000",
                    "updated": "2020-06-04T03:18:44.650+0000",
                    "started": "2020-06-04T03:18:44.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441084",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434970616\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -1367,5 +1367,86 @@ TEST(Bitmap, VisitWordsAnd) {\n     }\n   }\n }\n+\n+class TestBitmapScanner : public ::testing::Test {\n+ public:\n+  void Create(int64_t nbytes, int64_t offset, int64_t length) {\n+    ASSERT_OK_AND_ASSIGN(buf_, AllocateBuffer(nbytes));\n+    // Start with data zeroed out\n+    std::memset(buf_->mutable_data(), 0, nbytes);\n+    scanner_.reset(new BitmapScanner(buf_->data(), offset, length));\n+  }\n+\n+ protected:\n+  std::shared_ptr<Buffer> buf_;\n+  std::unique_ptr<BitmapScanner> scanner_;\n+};\n+\n+static constexpr int64_t kWordSize = 64;\n+\n+TEST_F(TestBitmapScanner, Basics) {\n+  const int64_t nbytes = 1024;\n+\n+  Create(nbytes, 0, nbytes * 8);\n+\n+  int64_t bits_scanned = 0;\n+  while (true) {\n+    auto run = scanner_->NextRun();\n+    if (run.first == 0) {\n+      break;\n+    }\n+    ASSERT_EQ(4 * kWordSize, run.first);\n+    ASSERT_EQ(0, run.second);\n+    bits_scanned += run.first;\n+  }\n+  ASSERT_EQ(1024 * 8, bits_scanned);\n+\n+  auto CheckWithOffset = [&](int64_t offset) {\n+    const int64_t nwords = 15;\n+\n+    const int64_t total_bytes = nwords * 8 + 1;\n+    // Trim a bit from the end of the bitmap so we can check the remainder bits\n+    // behavior\n+    Create(total_bytes, offset, nwords * kWordSize - offset - 1);\n+\n+    // Start with data all set\n+    std::memset(buf_->mutable_data(), 0xFF, total_bytes);\n+\n+    auto run = scanner_->NextRun();\n+    ASSERT_EQ(4 * kWordSize, run.first);\n+    ASSERT_EQ(256, run.second);\n+\n+    // Add some false values to the next 3 shifted words\n+    BitUtil::SetBitTo(buf_->mutable_data(), 4 * kWordSize + offset, false);\n+    BitUtil::SetBitTo(buf_->mutable_data(), 5 * kWordSize + offset, false);\n+    BitUtil::SetBitTo(buf_->mutable_data(), 6 * kWordSize + offset, false);\n+    run = scanner_->NextRun();\n+\n+    ASSERT_EQ(256, run.first);\n+    ASSERT_EQ(253, run.second);\n+\n+    BitUtil::SetBitsTo(buf_->mutable_data(), 8 * kWordSize + offset, 2 * kWordSize,\n+                       false);\n+\n+    run = scanner_->NextRun();\n+    ASSERT_EQ(256, run.first);\n\nReview comment:\n       Ah, it seems that googletest used to have the expected argument first according to\r\n   \r\n   https://github.com/google/googletest/blob/master/googletest/docs/primer.md\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:23:58.452+0000",
                    "updated": "2020-06-04T03:23:58.452+0000",
                    "started": "2020-06-04T03:23:58.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441086",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434971992\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util_benchmark.cc\n##########\n@@ -387,6 +389,114 @@ static void BitmapEquals(benchmark::State& state) {\n   state.SetBytesProcessed(state.iterations() * buffer_size);\n }\n \n+template <int64_t Offset = 0>\n+static void BitmapScannerSumNotNull(benchmark::State& state) {\n+  using internal::BitmapScanner;\n+\n+  random::RandomArrayGenerator rng(/*seed=*/0);\n+\n+  const int64_t bitmap_length = 1 << 20;\n+\n+  // State parameter is the average number of total values for each false\n+  // value. So 100 means that 1 out of 100 on average are false.\n+  double true_probability = 1. - 1. / state.range(0);\n+  auto arr = rng.Int8(bitmap_length, 0, 100, true_probability);\n+\n+  const uint8_t* bitmap = arr->null_bitmap_data();\n+\n+  // Compute the expected result\n+  int64_t expected = 0;\n+  const auto& int8_arr = static_cast<const Int8Array&>(*arr);\n+  for (int64_t i = Offset; i < bitmap_length; ++i) {\n+    if (int8_arr.IsValid(i)) {\n+      expected += int8_arr.Value(i);\n+    }\n+  }\n+  for (auto _ : state) {\n+    BitmapScanner scanner(bitmap, Offset, bitmap_length - Offset);\n+    int64_t result = 0;\n+    int64_t position = Offset;\n+    while (true) {\n+      auto bit_run = scanner.NextRun();\n+      if (bit_run.first == 0) {\n+        break;\n+      }\n+      if (bit_run.first == bit_run.second) {\n\nReview comment:\n       Yes, I think this can be refined as it relates to kernel execution\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:29:51.667+0000",
                    "updated": "2020-06-04T03:29:51.667+0000",
                    "started": "2020-06-04T03:29:51.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441087",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434972964\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n\nReview comment:\n       This `shift_word` helper is used in other functions -- the unit tests pass on big endian it seems\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:34:00.142+0000",
                    "updated": "2020-06-04T03:34:00.142+0000",
                    "started": "2020-06-04T03:34:00.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441088",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434976375\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -598,5 +598,49 @@ Result<std::shared_ptr<Buffer>> BitmapAllButOne(MemoryPool* pool, int64_t length\n   return std::move(buffer);\n }\n \n+std::pair<int64_t, int64_t> BitmapScanner::NextRun() {\n+  auto load_word = [](const uint8_t* bytes) -> uint64_t {\n+    return BitUtil::ToLittleEndian(util::SafeLoadAs<uint64_t>(bytes));\n+  };\n+  auto shift_word = [](uint64_t current, uint64_t next, int64_t shift) -> uint64_t {\n+    return (current >> shift) | (next << (64 - shift));\n\nReview comment:\n       I added some more tests with random data\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:48:14.992+0000",
                    "updated": "2020-06-04T03:48:14.992+0000",
                    "started": "2020-06-04T03:48:14.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441089",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434976474\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       Changing\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:48:40.195+0000",
                    "updated": "2020-06-04T03:48:40.195+0000",
                    "started": "2020-06-04T03:48:40.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441090",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441091",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434977482\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,23 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield runs of\n+/// all-true or not-all-true runs. This is used to accelerate processing of\n+/// mostly-not-null array data. 4 words are examined at a time.\n+struct ARROW_EXPORT BitmapScanner {\n\nReview comment:\n       `BitBlockCounter` it is\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:53:04.368+0000",
                    "updated": "2020-06-04T03:53:04.368+0000",
                    "started": "2020-06-04T03:53:04.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441091",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#issuecomment-638587979\n\n\n   Thanks for the comments, I think this is much better now\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T03:59:11.373+0000",
                    "updated": "2020-06-04T03:59:11.373+0000",
                    "started": "2020-06-04T03:59:11.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441092",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434979894\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,32 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield blocks of up\n+/// to 256 bits at a time along with their popcount. This is used to accelerate\n+/// processing of mostly-not-null array data.\n+class ARROW_EXPORT BitBlockCounter {\n+ public:\n+  struct Block {\n+    int16_t length;\n\nReview comment:\n       did you check if this affects benchmarks, I think popcount returns ints so there might be some miniscule advantage to keep it at a larger size.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T04:07:25.276+0000",
                    "updated": "2020-06-04T04:07:25.276+0000",
                    "started": "2020-06-04T04:07:25.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441093",
                    "issueId": "13309222"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/worklog/441099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7346:\nURL: https://github.com/apache/arrow/pull/7346#discussion_r434985565\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -1170,5 +1170,32 @@ class BitsetStack {\n   std::vector<int> offsets_;\n };\n \n+/// \\brief A class that scans through a true/false bitmap to yield blocks of up\n+/// to 256 bits at a time along with their popcount. This is used to accelerate\n+/// processing of mostly-not-null array data.\n+class ARROW_EXPORT BitBlockCounter {\n+ public:\n+  struct Block {\n+    int16_t length;\n\nReview comment:\n       It didn't seem to affect them\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-04T04:28:07.820+0000",
                    "updated": "2020-06-04T04:28:07.820+0000",
                    "started": "2020-06-04T04:28:07.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441099",
                    "issueId": "13309222"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2c7043f7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3daac080[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1929deef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@726cb38a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65b012c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@10cd3a41[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47445011[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50235b90[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35604d6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4c8666b4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29a763ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@63124292[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 04 13:30:54 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-04T13:30:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9029/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-06-03T16:08:24.000+0000",
        "updated": "2020-06-04T14:15:27.000+0000",
        "timeoriginalestimate": null,
        "description": "In analytics, it is common for data to be all not-null or mostly not-null. Data with > 50% nulls tends to be more exceptional. In this light, our {{BitmapReader}} class which allows iteration of each bit in a bitmap can be computationally suboptimal for mostly set validity bitmaps.\r\n\r\nI propose instead a new interface for use in kernel implementations, for lack of a better term {{BitmapScanner}}. This works as follows:\r\n\r\n* Uses hardware popcount to compute the number of set values in 256 bits at a time (or whatever is the right window size).\r\n* Code can use the returned \"run\" (length + # of set bits) to switch between nullable/non-nullable code paths\r\n\r\nFor data with a lot of nulls, this may degrade performance somewhat but probably not that much empirically. However, data that is mostly-not-null should benefit from this. \r\n\r\nThis BitmapScanner utility can probably also be used to accelerate the implementation of Filter for mostly-not-null data\r\n\r\nI tried some other things that were slower (like trying to find the largest consecutive run of all-set words) before doing the simple 256-bit popcount solution.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement BitBlockCounter interface for blockwise popcounts of validity bitmaps",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/comment/17125224",
                    "id": "17125224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Is this different from the the BitRunReader that's already proposed in [https://github.com/apache/arrow/pull/7143] ?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-06-03T18:43:09.978+0000",
                    "updated": "2020-06-03T18:43:09.978+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/comment/17125426",
                    "id": "17125426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We can compare the patches and decide what to do. Comparing benchmarks is also very important. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-04T00:23:35.613+0000",
                    "updated": "2020-06-04T00:23:35.613+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/comment/17125430",
                    "id": "17125430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "After writing this JIRA I wrote an initial implementation which tried to find the longest consecutive run of all-set words. This turned out to be much, much slower than simply running popcount on every word and returning the popcounts 4-words at a time.  I'll rewrite the JIRA to explain what my PR actually does",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-04T00:35:39.222+0000",
                    "updated": "2020-06-04T00:58:18.004+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309222/comment/17125923",
                    "id": "17125923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7346\n[https://github.com/apache/arrow/pull/7346]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-04T13:30:54.972+0000",
                    "updated": "2020-06-04T13:30:54.972+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fgyo:",
        "customfield_12314139": null
    }
}