{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13193140",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140",
    "key": "ARROW-3584",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3584/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet opened a new pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838\n \n \n   This CL adds the `Table` interface and a default simple, non-lazy implementation for it, based off a `Column` and `Schema`.\r\n   \r\n   The `Schema` type is migrated from the `arrow/metadata` package to the main `arrow` one.\r\n   Also, `KeyValueMetadata` has been renamed to simply `Metadata`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T14:58:35.877+0000",
                    "updated": "2018-10-25T14:58:35.877+0000",
                    "started": "2018-10-25T14:58:35.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158735",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433086200\n \n \n   PTAL @stuartcarnie \r\n   \r\n   especially the memory ownership / ref-count model.\r\n   it seems to me the `Retain/Release` strategy starts to be a tad unwieldly with `Columns`, sub-slice of `Columns` and `Table`s.\r\n   \r\n   was `Retain/Release` introduced b/c of possible `mmap`-backed memory allocators?\r\n   couldn't we replace those with just a main `Closer interface {Close() error}` interface?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T15:01:56.921+0000",
                    "updated": "2018-10-25T15:01:56.921+0000",
                    "started": "2018-10-25T15:01:56.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158736",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on a change in pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#discussion_r228277528\n \n \n\n ##########\n File path: go/arrow/array/table.go\n ##########\n @@ -126,3 +195,61 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n \n \treturn NewChunked(a.dtype, chunks)\n }\n+\n+// simpleTable is a basic, non-lazy in-memory table.\n+type simpleTable struct {\n+\trows int\n+\tcols []Column\n+\n+\tschema *arrow.Schema\n+}\n+\n+// NewTable returns a new basic, non-lazy in-memory table.\n+// If rows is negative, the number of rows will be inferred from the height\n+// of the columns.\n+//\n+// NewTable panics if the columns and schema are inconsistent.\n+// NewTable panics if rows is larger than the height of the columns.\n+func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+\ttbl := simpleTable{\n+\t\trows:   rows,\n+\t\tcols:   cols,\n+\t\tschema: schema,\n+\t}\n+\tif tbl.rows < 0 {\n+\t\tswitch len(tbl.cols) {\n+\t\tcase 0:\n+\t\t\ttbl.rows = 0\n+\t\tdefault:\n+\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t}\n+\t}\n+\n+\ttbl.validate()\n+\n+\treturn &tbl\n+}\n+\n+func (tbl *simpleTable) Schema() *arrow.Schema { return tbl.schema }\n+func (tbl *simpleTable) NumRows() int          { return tbl.rows }\n+func (tbl *simpleTable) NumCols() int          { return len(tbl.cols) }\n+func (tbl *simpleTable) Column(i int) *Column  { return &tbl.cols[i] }\n+\n \n Review comment:\n   Similar to the `Chunked` implementation, `Table` should have a `Retain` and `Release` methods\r\n   \r\n   ```go\r\n   // Retain increases the reference count by 1.\r\n   // Retain may be called simultaneously from multiple goroutines.\r\n   func (tbl *simpleTable) Retain() {\r\n   \tatomic.AddInt64(&tbl.refCount, 1)\r\n   }\r\n   \r\n   // Release decreases the reference count by 1.\r\n   // When the reference count goes to zero, the memory is freed.\r\n   // Release may be called simultaneously from multiple goroutines.\r\n   func (a *Chunked) Release() {\r\n   \tdebug.Assert(atomic.LoadInt64(&tbl.refCount) > 0, \"too many releases\")\r\n   \r\n   \tif atomic.AddInt64(&tbl.refCount, -1) == 0 {\r\n   \t\tfor i := range a.cols {\r\n   \t\t\tcols[i].Release()\r\n   \t\t}\r\n   \t\ta.chunks = nil\r\n   \t\ta.length = 0\r\n   \t\ta.nulls = 0\r\n   \t}\r\n   }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T18:06:54.451+0000",
                    "updated": "2018-10-25T18:06:54.451+0000",
                    "started": "2018-10-25T18:06:54.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158829",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on a change in pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#discussion_r228275820\n \n \n\n ##########\n File path: go/arrow/array/table.go\n ##########\n @@ -126,3 +195,61 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n \n \treturn NewChunked(a.dtype, chunks)\n }\n+\n+// simpleTable is a basic, non-lazy in-memory table.\n+type simpleTable struct {\n+\trows int\n+\tcols []Column\n+\n+\tschema *arrow.Schema\n+}\n+\n+// NewTable returns a new basic, non-lazy in-memory table.\n+// If rows is negative, the number of rows will be inferred from the height\n+// of the columns.\n+//\n+// NewTable panics if the columns and schema are inconsistent.\n+// NewTable panics if rows is larger than the height of the columns.\n+func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+\ttbl := simpleTable{\n+\t\trows:   rows,\n+\t\tcols:   cols,\n+\t\tschema: schema,\n+\t}\n+\tif tbl.rows < 0 {\n+\t\tswitch len(tbl.cols) {\n+\t\tcase 0:\n+\t\t\ttbl.rows = 0\n+\t\tdefault:\n+\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t}\n+\t}\n+\n \n Review comment:\n   Add\r\n   \r\n   ```go\r\n   for i := range cols {\r\n       cols[i].Retain()\r\n   }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T18:06:54.452+0000",
                    "updated": "2018-10-25T18:06:54.452+0000",
                    "started": "2018-10-25T18:06:54.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158830",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on a change in pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#discussion_r228307139\n \n \n\n ##########\n File path: go/arrow/array/table.go\n ##########\n @@ -126,3 +195,61 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n \n \treturn NewChunked(a.dtype, chunks)\n }\n+\n+// simpleTable is a basic, non-lazy in-memory table.\n+type simpleTable struct {\n+\trows int\n+\tcols []Column\n+\n+\tschema *arrow.Schema\n+}\n+\n+// NewTable returns a new basic, non-lazy in-memory table.\n+// If rows is negative, the number of rows will be inferred from the height\n+// of the columns.\n+//\n+// NewTable panics if the columns and schema are inconsistent.\n+// NewTable panics if rows is larger than the height of the columns.\n+func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+\ttbl := simpleTable{\n+\t\trows:   rows,\n+\t\tcols:   cols,\n+\t\tschema: schema,\n+\t}\n+\tif tbl.rows < 0 {\n+\t\tswitch len(tbl.cols) {\n+\t\tcase 0:\n+\t\t\ttbl.rows = 0\n+\t\tdefault:\n+\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t}\n+\t}\n+\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T19:35:36.044+0000",
                    "updated": "2018-10-25T19:35:36.044+0000",
                    "started": "2018-10-25T19:35:36.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158862",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on a change in pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#discussion_r228307220\n \n \n\n ##########\n File path: go/arrow/array/table.go\n ##########\n @@ -126,3 +195,61 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n \n \treturn NewChunked(a.dtype, chunks)\n }\n+\n+// simpleTable is a basic, non-lazy in-memory table.\n+type simpleTable struct {\n+\trows int\n+\tcols []Column\n+\n+\tschema *arrow.Schema\n+}\n+\n+// NewTable returns a new basic, non-lazy in-memory table.\n+// If rows is negative, the number of rows will be inferred from the height\n+// of the columns.\n+//\n+// NewTable panics if the columns and schema are inconsistent.\n+// NewTable panics if rows is larger than the height of the columns.\n+func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+\ttbl := simpleTable{\n+\t\trows:   rows,\n+\t\tcols:   cols,\n+\t\tschema: schema,\n+\t}\n+\tif tbl.rows < 0 {\n+\t\tswitch len(tbl.cols) {\n+\t\tcase 0:\n+\t\t\ttbl.rows = 0\n+\t\tdefault:\n+\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t}\n+\t}\n+\n+\ttbl.validate()\n+\n+\treturn &tbl\n+}\n+\n+func (tbl *simpleTable) Schema() *arrow.Schema { return tbl.schema }\n+func (tbl *simpleTable) NumRows() int          { return tbl.rows }\n+func (tbl *simpleTable) NumCols() int          { return len(tbl.cols) }\n+func (tbl *simpleTable) Column(i int) *Column  { return &tbl.cols[i] }\n+\n \n Review comment:\n   done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T19:35:47.433+0000",
                    "updated": "2018-10-25T19:35:47.433+0000",
                    "started": "2018-10-25T19:35:47.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158863",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433179786\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=h1) Report\n   > Merging [#2838](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/227ad0dae7e5623e7ccbfa5ca9182262853a9b65?src=pr&el=desc) will **decrease** coverage by `22.71%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2838/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2838       +/-   ##\n   ===========================================\n   - Coverage   87.57%   64.85%   -22.72%     \n   ===========================================\n     Files         410       51      -359     \n     Lines       63327     2481    -60846     \n   ===========================================\n   - Hits        55456     1609    -53847     \n   + Misses       7799      802     -6997     \n   + Partials       72       70        -2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.44% <100%> (+12.22%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | ... and [364 more](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=footer). Last update [227ad0d...e366a78](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T19:41:16.462+0000",
                    "updated": "2018-10-25T19:41:16.462+0000",
                    "started": "2018-10-25T19:41:16.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158866",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/158868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433180782\n \n \n   PTAL\r\n   \r\n   wrt the pool allocator to reduce GC pressure: ok. but I am wondering whether we couldn't \"box\" this and stop the Retain/Release at the `array.Data` level... I'll ponder on this some more...\r\n   thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T19:44:41.700+0000",
                    "updated": "2018-10-25T19:44:41.700+0000",
                    "started": "2018-10-25T19:44:41.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158868",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/159010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433179786\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=h1) Report\n   > Merging [#2838](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d9ee70ce9d0295cfdcd0fc1f6e8d9b7518cc8e0b?src=pr&el=desc) will **decrease** coverage by `22.65%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2838/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2838       +/-   ##\n   ===========================================\n   - Coverage    87.5%   64.85%   -22.66%     \n   ===========================================\n     Files         410       51      -359     \n     Lines       63327     2481    -60846     \n   ===========================================\n   - Hits        55413     1609    -53804     \n   + Misses       7844      802     -7042     \n     Partials       70       70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.44% <100%> (+12.22%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/ipc/metadata-internal.h](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuaA==) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | ... and [355 more](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=footer). Last update [d9ee70c...57783f3](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T07:00:20.311+0000",
                    "updated": "2018-10-26T07:00:20.311+0000",
                    "started": "2018-10-26T07:00:20.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159010",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/159106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433363089\n \n \n   (and by pondering some more I meant thinking about this during my copious free cycles. this PR can be reviewed :P)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T10:25:41.376+0000",
                    "updated": "2018-10-26T10:25:41.376+0000",
                    "started": "2018-10-26T10:25:41.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159106",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/159889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433179786\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=h1) Report\n   > Merging [#2838](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d61988d9bc1c9ca92789523593055da0996e9509?src=pr&el=desc) will **decrease** coverage by `22.7%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2838/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2838       +/-   ##\n   ===========================================\n   - Coverage   87.55%   64.85%   -22.71%     \n   ===========================================\n     Files         410       51      -359     \n     Lines       63486     2481    -61005     \n   ===========================================\n   - Hits        55586     1609    -53977     \n   + Misses       7828      802     -7026     \n   + Partials       72       70        -2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.44% <100%> (+12.22%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | ... and [364 more](https://codecov.io/gh/apache/arrow/pull/2838/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=footer). Last update [d61988d...412375e](https://codecov.io/gh/apache/arrow/pull/2838?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T08:27:03.793+0000",
                    "updated": "2018-10-29T08:27:03.793+0000",
                    "started": "2018-10-29T08:27:03.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159889",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/159975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838#issuecomment-433900040\n \n \n   Going to merge this to help these patches move along, further feedback from @stuartcarnie can be addressed in a follow up patch if needed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T12:58:07.575+0000",
                    "updated": "2018-10-29T12:58:07.575+0000",
                    "started": "2018-10-29T12:58:07.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159975",
                    "issueId": "13193140"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/worklog/159976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2838: ARROW-3584: [Go] Implement Table, Schema and Column\nURL: https://github.com/apache/arrow/pull/2838\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/table.go b/go/arrow/array/table.go\nindex 7118f248cf..df35cc728d 100644\n--- a/go/arrow/array/table.go\n+++ b/go/arrow/array/table.go\n@@ -17,12 +17,84 @@\n package array\n \n import (\n+\t\"fmt\"\n+\t\"reflect\"\n \t\"sync/atomic\"\n \n \t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/internal/debug\"\n )\n \n+// Table represents a logical sequence of chunked arrays.\n+type Table interface {\n+\tSchema() *arrow.Schema\n+\tNumRows() int\n+\tNumCols() int\n+\tColumn(i int) *Column\n+\n+\tRetain()\n+\tRelease()\n+}\n+\n+// Column is an immutable column data structure consisting of\n+// a field (type metadata) and a chunked data array.\n+type Column struct {\n+\tfield arrow.Field\n+\tdata  *Chunked\n+}\n+\n+// NewColumn returns a column from a field and a chunked data array.\n+//\n+// NewColumn panics if the field's data type is inconsistent with the data type\n+// of the chunked data array.\n+func NewColumn(field arrow.Field, chunks *Chunked) *Column {\n+\tcol := Column{\n+\t\tfield: field,\n+\t\tdata:  chunks,\n+\t}\n+\tcol.data.Retain()\n+\n+\tif col.data.DataType() != col.field.Type {\n+\t\tcol.data.Release()\n+\t\tpanic(\"arrow/array: inconsistent data type\")\n+\t}\n+\n+\treturn &col\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (col *Column) Retain() {\n+\tcol.data.Retain()\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (col *Column) Release() {\n+\tcol.data.Release()\n+}\n+\n+func (col *Column) Len() int                 { return col.data.Len() }\n+func (col *Column) NullN() int               { return col.data.NullN() }\n+func (col *Column) Data() *Chunked           { return col.data }\n+func (col *Column) Field() arrow.Field       { return col.field }\n+func (col *Column) Name() string             { return col.field.Name }\n+func (col *Column) DataType() arrow.DataType { return col.field.Type }\n+\n+// NewSlice returns a new zero-copy slice of the column with the indicated\n+// indices i and j, corresponding to the column's array[i:j].\n+// The returned column must be Release()'d after use.\n+//\n+// NewSlice panics if the slice is outside the valid range of the column's array.\n+// NewSlice panics if j < i.\n+func (col *Column) NewSlice(i, j int64) *Column {\n+\treturn &Column{\n+\t\tfield: col.field,\n+\t\tdata:  col.data.NewSlice(i, j),\n+\t}\n+}\n+\n // Chunked manages a collection of primitives arrays as one logical large array.\n type Chunked struct {\n \tchunks []Interface\n@@ -126,3 +198,93 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n \n \treturn NewChunked(a.dtype, chunks)\n }\n+\n+// simpleTable is a basic, non-lazy in-memory table.\n+type simpleTable struct {\n+\trefCount int64\n+\n+\trows int\n+\tcols []Column\n+\n+\tschema *arrow.Schema\n+}\n+\n+// NewTable returns a new basic, non-lazy in-memory table.\n+// If rows is negative, the number of rows will be inferred from the height\n+// of the columns.\n+//\n+// NewTable panics if the columns and schema are inconsistent.\n+// NewTable panics if rows is larger than the height of the columns.\n+func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+\ttbl := simpleTable{\n+\t\trefCount: 1,\n+\t\trows:     rows,\n+\t\tcols:     cols,\n+\t\tschema:   schema,\n+\t}\n+\n+\tif tbl.rows < 0 {\n+\t\tswitch len(tbl.cols) {\n+\t\tcase 0:\n+\t\t\ttbl.rows = 0\n+\t\tdefault:\n+\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t}\n+\t}\n+\n+\t// validate the table and its constituents.\n+\t// note we retain the columns after having validated the table\n+\t// in case the validation fails and panics (and would otherwise leak\n+\t// a ref-count on the columns.)\n+\ttbl.validate()\n+\n+\tfor i := range tbl.cols {\n+\t\ttbl.cols[i].Retain()\n+\t}\n+\n+\treturn &tbl\n+}\n+\n+func (tbl *simpleTable) Schema() *arrow.Schema { return tbl.schema }\n+func (tbl *simpleTable) NumRows() int          { return tbl.rows }\n+func (tbl *simpleTable) NumCols() int          { return len(tbl.cols) }\n+func (tbl *simpleTable) Column(i int) *Column  { return &tbl.cols[i] }\n+\n+func (tbl *simpleTable) validate() {\n+\tif len(tbl.cols) != len(tbl.schema.Fields()) {\n+\t\tpanic(\"arrow/array: table schema mismatch\")\n+\t}\n+\tfor i, col := range tbl.cols {\n+\t\tif !reflect.DeepEqual(col.field, tbl.schema.Field(i)) { // FIXME(sbinet): impl+use arrow.Field.Equal()\n+\t\t\tpanic(fmt.Errorf(\"arrow/array: column field %q is inconsistent with schema\", col.Name()))\n+\t\t}\n+\n+\t\tif col.Len() < tbl.rows {\n+\t\t\tpanic(fmt.Errorf(\"arrow/array: column %q expected length >= %d but got length %d\", col.Name(), tbl.rows, col.Len()))\n+\t\t}\n+\t}\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (tbl *simpleTable) Retain() {\n+\tatomic.AddInt64(&tbl.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (tbl *simpleTable) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&tbl.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&tbl.refCount, -1) == 0 {\n+\t\tfor i := range tbl.cols {\n+\t\t\ttbl.cols[i].Release()\n+\t\t}\n+\t\ttbl.cols = nil\n+\t}\n+}\n+\n+var (\n+\t_ Table = (*simpleTable)(nil)\n+)\ndiff --git a/go/arrow/array/table_test.go b/go/arrow/array/table_test.go\nindex 849b82ba10..7d240a7e2e 100644\n--- a/go/arrow/array/table_test.go\n+++ b/go/arrow/array/table_test.go\n@@ -17,6 +17,8 @@\n package array_test\n \n import (\n+\t\"fmt\"\n+\t\"reflect\"\n \t\"testing\"\n \n \t\"github.com/apache/arrow/go/arrow\"\n@@ -72,6 +74,9 @@ func TestChunked(t *testing.T) {\n \tif got, want := c2.DataType(), arrow.PrimitiveTypes.Float64; got != want {\n \t\tt.Fatalf(\"dtype: got=%v, want=%v\", got, want)\n \t}\n+\tif got, want := c2.Chunk(0), c2.Chunks()[0]; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"chunk: got=%v, want=%v\", got, want)\n+\t}\n \n \tfor _, tc := range []struct {\n \t\ti, j   int64\n@@ -188,3 +193,365 @@ func TestChunkedSliceInvalid(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestColumn(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\ttype slice struct {\n+\t\ti, j   int64\n+\t\tlen    int\n+\t\tnulls  int\n+\t\tchunks int\n+\t\terr    error\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tchunk  *array.Chunked\n+\t\tfield  arrow.Field\n+\t\terr    error\n+\t\tslices []slice\n+\t}{\n+\t\t{\n+\t\t\tchunk: func() *array.Chunked {\n+\t\t\t\tib := array.NewInt32Builder(mem)\n+\t\t\t\tdefer ib.Release()\n+\n+\t\t\t\tib.AppendValues([]int32{1, 2, 3}, nil)\n+\t\t\t\ti1 := ib.NewInt32Array()\n+\t\t\t\tdefer i1.Release()\n+\n+\t\t\t\tib.AppendValues([]int32{4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\t\t\ti2 := ib.NewInt32Array()\n+\t\t\t\tdefer i2.Release()\n+\n+\t\t\t\tc := array.NewChunked(\n+\t\t\t\t\tarrow.PrimitiveTypes.Int32,\n+\t\t\t\t\t[]array.Interface{i1, i2},\n+\t\t\t\t)\n+\t\t\t\treturn c\n+\t\t\t}(),\n+\t\t\tfield: arrow.Field{Name: \"i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tslices: []slice{\n+\t\t\t\t{i: 0, j: 10, len: 10, nulls: 0, chunks: 2},\n+\t\t\t\t{i: 2, j: 3, len: 1, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 9, j: 10, len: 1, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 0, j: 5, len: 5, nulls: 0, chunks: 2},\n+\t\t\t\t{i: 5, j: 7, len: 2, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 7, j: 10, len: 3, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 10, j: 10, len: 0, nulls: 0, chunks: 0},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tchunk: func() *array.Chunked {\n+\t\t\t\tfb := array.NewFloat64Builder(mem)\n+\t\t\t\tdefer fb.Release()\n+\n+\t\t\t\tfb.AppendValues([]float64{1, 2, 3, 4, 5}, nil)\n+\t\t\t\tf1 := fb.NewFloat64Array()\n+\t\t\t\tdefer f1.Release()\n+\n+\t\t\t\tfb.AppendValues([]float64{6, 7}, nil)\n+\t\t\t\tf2 := fb.NewFloat64Array()\n+\t\t\t\tdefer f2.Release()\n+\n+\t\t\t\tfb.AppendValues([]float64{8, 9, 10}, nil)\n+\t\t\t\tf3 := fb.NewFloat64Array()\n+\t\t\t\tdefer f3.Release()\n+\n+\t\t\t\tc := array.NewChunked(\n+\t\t\t\t\tarrow.PrimitiveTypes.Float64,\n+\t\t\t\t\t[]array.Interface{f1, f2, f3},\n+\t\t\t\t)\n+\t\t\t\treturn c\n+\t\t\t}(),\n+\t\t\tfield: arrow.Field{Name: \"f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t\tslices: []slice{\n+\t\t\t\t{i: 0, j: 10, len: 10, nulls: 0, chunks: 3},\n+\t\t\t\t{i: 2, j: 3, len: 1, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 9, j: 10, len: 1, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 0, j: 5, len: 5, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 5, j: 7, len: 2, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 7, j: 10, len: 3, nulls: 0, chunks: 1},\n+\t\t\t\t{i: 10, j: 10, len: 0, nulls: 0, chunks: 0},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tchunk: func() *array.Chunked {\n+\t\t\t\tfb := array.NewFloat64Builder(mem)\n+\t\t\t\tdefer fb.Release()\n+\n+\t\t\t\tfb.AppendValues([]float64{1, 2, 3, 4, 5}, nil)\n+\t\t\t\tf1 := fb.NewFloat64Array()\n+\t\t\t\tdefer f1.Release()\n+\n+\t\t\t\tc := array.NewChunked(\n+\t\t\t\t\tarrow.PrimitiveTypes.Float64,\n+\t\t\t\t\t[]array.Interface{f1},\n+\t\t\t\t)\n+\t\t\t\treturn c\n+\t\t\t}(),\n+\t\t\tfield: arrow.Field{Name: \"f32\", Type: arrow.PrimitiveTypes.Float32},\n+\t\t\terr:   fmt.Errorf(\"arrow/array: inconsistent data type\"),\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tdefer tc.chunk.Release()\n+\n+\t\t\tif tc.err != nil {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected an error %q\", tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t\tswitch err := e.(type) {\n+\t\t\t\t\tcase string:\n+\t\t\t\t\t\tif err != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase error:\n+\t\t\t\t\t\tif err.Error() != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tt.Fatalf(\"invalid type for panic message: %T (err=%v)\", err, err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\n+\t\t\tcol := array.NewColumn(tc.field, tc.chunk)\n+\t\t\tdefer col.Release()\n+\n+\t\t\tif got, want := col.Len(), tc.chunk.Len(); got != want {\n+\t\t\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := col.NullN(), tc.chunk.NullN(); got != want {\n+\t\t\t\tt.Fatalf(\"invalid nulls: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := col.Data(), tc.chunk; got != want {\n+\t\t\t\tt.Fatalf(\"invalid chunked: got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := col.Field(), tc.field; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := col.Name(), tc.field.Name; got != want {\n+\t\t\t\tt.Fatalf(\"invalid name: got=%q, want=%q\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := col.DataType(), tc.field.Type; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid data type: got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\n+\t\t\tcol.Retain()\n+\t\t\tcol.Release()\n+\n+\t\t\tfor _, slice := range tc.slices {\n+\t\t\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\t\t\tsub := col.NewSlice(slice.i, slice.j)\n+\t\t\t\t\tdefer sub.Release()\n+\n+\t\t\t\t\tif got, want := sub.Len(), slice.len; got != want {\n+\t\t\t\t\t\tt.Fatalf(\"len: got=%d, want=%d\", got, want)\n+\t\t\t\t\t}\n+\t\t\t\t\tif got, want := sub.NullN(), slice.nulls; got != want {\n+\t\t\t\t\t\tt.Fatalf(\"nulls: got=%d, want=%d\", got, want)\n+\t\t\t\t\t}\n+\t\t\t\t\tif got, want := sub.DataType(), col.DataType(); got != want {\n+\t\t\t\t\t\tt.Fatalf(\"dtype: got=%v, want=%v\", got, want)\n+\t\t\t\t\t}\n+\t\t\t\t\tif got, want := len(sub.Data().Chunks()), slice.chunks; got != want {\n+\t\t\t\t\t\tt.Fatalf(\"chunks: got=%d, want=%d\", got, want)\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\t\t\t}\n+\t\t})\n+\t}\n+\n+}\n+\n+func TestTable(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\tcol1 := func() *array.Column {\n+\t\tchunk := func() *array.Chunked {\n+\t\t\tib := array.NewInt32Builder(mem)\n+\t\t\tdefer ib.Release()\n+\n+\t\t\tib.AppendValues([]int32{1, 2, 3}, nil)\n+\t\t\ti1 := ib.NewInt32Array()\n+\t\t\tdefer i1.Release()\n+\n+\t\t\tib.AppendValues([]int32{4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\t\ti2 := ib.NewInt32Array()\n+\t\t\tdefer i2.Release()\n+\n+\t\t\tc := array.NewChunked(\n+\t\t\t\tarrow.PrimitiveTypes.Int32,\n+\t\t\t\t[]array.Interface{i1, i2},\n+\t\t\t)\n+\t\t\treturn c\n+\t\t}()\n+\t\tdefer chunk.Release()\n+\n+\t\treturn array.NewColumn(schema.Field(0), chunk)\n+\t}()\n+\tdefer col1.Release()\n+\n+\tcol2 := func() *array.Column {\n+\t\tchunk := func() *array.Chunked {\n+\t\t\tfb := array.NewFloat64Builder(mem)\n+\t\t\tdefer fb.Release()\n+\n+\t\t\tfb.AppendValues([]float64{1, 2, 3, 4, 5}, nil)\n+\t\t\tf1 := fb.NewFloat64Array()\n+\t\t\tdefer f1.Release()\n+\n+\t\t\tfb.AppendValues([]float64{6, 7}, nil)\n+\t\t\tf2 := fb.NewFloat64Array()\n+\t\t\tdefer f2.Release()\n+\n+\t\t\tfb.AppendValues([]float64{8, 9, 10}, nil)\n+\t\t\tf3 := fb.NewFloat64Array()\n+\t\t\tdefer f3.Release()\n+\n+\t\t\tc := array.NewChunked(\n+\t\t\t\tarrow.PrimitiveTypes.Float64,\n+\t\t\t\t[]array.Interface{f1, f2, f3},\n+\t\t\t)\n+\t\t\treturn c\n+\t\t}()\n+\t\tdefer chunk.Release()\n+\n+\t\treturn array.NewColumn(schema.Field(1), chunk)\n+\t}()\n+\tdefer col2.Release()\n+\n+\tcols := []array.Column{*col1, *col2}\n+\tdefer func(cols []array.Column) {\n+\t\tfor i := range cols {\n+\t\t\tcols[i].Release()\n+\t\t}\n+\t}(cols)\n+\n+\ttbl := array.NewTable(schema, cols, -1)\n+\tdefer tbl.Release()\n+\n+\ttbl.Retain()\n+\ttbl.Release()\n+\n+\tif got, want := tbl.Schema(), schema; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t}\n+\n+\tif got, want := tbl.NumRows(), 10; got != want {\n+\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := tbl.NumCols(), 2; got != want {\n+\t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := tbl.Column(0).Name(), col1.Name(); got != want {\n+\t\tt.Fatalf(\"invalid column: got=%q, want=%q\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tschema *arrow.Schema\n+\t\tcols   []array.Column\n+\t\trows   int\n+\t\terr    error\n+\t}{\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   nil,\n+\t\t\trows:   -1,\n+\t\t\terr:    fmt.Errorf(\"arrow/array: table schema mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols[:1],\n+\t\t\trows:   0,\n+\t\t\terr:    fmt.Errorf(\"arrow/array: table schema mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\tcols: cols,\n+\t\t\trows: 0,\n+\t\t\terr:  fmt.Errorf(\"arrow/array: table schema mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\tcols: cols,\n+\t\t\trows: 0,\n+\t\t\terr:  fmt.Errorf(`arrow/array: column field \"f2-f64\" is inconsistent with schema`),\n+\t\t},\n+\t\t{\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t\tarrow.Field{Name: \"f2-f32\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\tcols: cols,\n+\t\t\trows: 0,\n+\t\t\terr:  fmt.Errorf(`arrow/array: column field \"f2-f64\" is inconsistent with schema`),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   11,\n+\t\t\terr:    fmt.Errorf(`arrow/array: column \"f1-i32\" expected length >= 11 but got length 10`),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   3,\n+\t\t\terr:    nil,\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tif tc.err != nil {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected an error %q\", tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t\tswitch err := e.(type) {\n+\t\t\t\t\tcase string:\n+\t\t\t\t\t\tif err != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase error:\n+\t\t\t\t\t\tif err.Error() != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tt.Fatalf(\"invalid type for panic message: %T (err=%v)\", err, err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\t\t\ttbl := array.NewTable(tc.schema, tc.cols, tc.rows)\n+\t\t\tdefer tbl.Release()\n+\t\t\tif got, want := tbl.NumRows(), tc.rows; got != want {\n+\t\t\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/datatype_nested.go b/go/arrow/datatype_nested.go\nindex e91e586ab5..a0d3b142ec 100644\n--- a/go/arrow/datatype_nested.go\n+++ b/go/arrow/datatype_nested.go\n@@ -46,7 +46,7 @@ func (t *ListType) Elem() DataType { return t.elem }\n type StructType struct {\n \tfields []Field\n \tindex  map[string]int\n-\tmeta   KeyValueMetadata\n+\tmeta   Metadata\n }\n \n // StructOf returns the struct type with fields fs.\n@@ -97,33 +97,13 @@ func (t *StructType) FieldByName(name string) (Field, bool) {\n }\n \n type Field struct {\n-\tName     string           // Field name\n-\tType     DataType         // The field's data type\n-\tNullable bool             // Fields can be nullable\n-\tMetadata KeyValueMetadata // The field's metadata, if any\n+\tName     string   // Field name\n+\tType     DataType // The field's data type\n+\tNullable bool     // Fields can be nullable\n+\tMetadata Metadata // The field's metadata, if any\n }\n \n-func (f Field) HasMetadata() bool { return len(f.Metadata.keys) != 0 }\n-\n-type KeyValueMetadata struct {\n-\tkeys   []string\n-\tvalues []string\n-}\n-\n-func (kv KeyValueMetadata) clone() KeyValueMetadata {\n-\tif len(kv.keys) == 0 {\n-\t\treturn KeyValueMetadata{}\n-\t}\n-\n-\to := KeyValueMetadata{\n-\t\tkeys:   make([]string, len(kv.keys)),\n-\t\tvalues: make([]string, len(kv.values)),\n-\t}\n-\tcopy(o.keys, kv.keys)\n-\tcopy(o.values, kv.values)\n-\n-\treturn o\n-}\n+func (f Field) HasMetadata() bool { return f.Metadata.Len() != 0 }\n \n var (\n \t_ DataType = (*ListType)(nil)\ndiff --git a/go/arrow/metadata/schema.go b/go/arrow/metadata/schema.go\ndeleted file mode 100644\nindex 2dad1901bf..0000000000\n--- a/go/arrow/metadata/schema.go\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-// http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package metadata\n-\n-import \"github.com/apache/arrow/go/arrow\"\n-\n-type Schema struct {\n-\tfields      []arrow.Field\n-\tnameToIndex map[string]int\n-\tmetadata    arrow.KeyValueMetadata\n-}\ndiff --git a/go/arrow/schema.go b/go/arrow/schema.go\nnew file mode 100644\nindex 0000000000..d1a1dee3ae\n--- /dev/null\n+++ b/go/arrow/schema.go\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"fmt\"\n+\t\"sort\"\n+)\n+\n+type Metadata struct {\n+\tkeys   []string\n+\tvalues []string\n+}\n+\n+func NewMetadata(keys, values []string) Metadata {\n+\tif len(keys) != len(values) {\n+\t\tpanic(\"arrow: len mismatch\")\n+\t}\n+\n+\tn := len(keys)\n+\tif n == 0 {\n+\t\treturn Metadata{}\n+\t}\n+\n+\tmd := Metadata{\n+\t\tkeys:   make([]string, n),\n+\t\tvalues: make([]string, n),\n+\t}\n+\tcopy(md.keys, keys)\n+\tcopy(md.values, values)\n+\treturn md\n+}\n+\n+func MetadataFrom(kv map[string]string) Metadata {\n+\tmd := Metadata{\n+\t\tkeys:   make([]string, 0, len(kv)),\n+\t\tvalues: make([]string, 0, len(kv)),\n+\t}\n+\tfor k := range kv {\n+\t\tmd.keys = append(md.keys, k)\n+\t}\n+\tsort.Strings(md.keys)\n+\tfor _, k := range md.keys {\n+\t\tmd.values = append(md.values, kv[k])\n+\t}\n+\treturn md\n+}\n+\n+func (md Metadata) Len() int         { return len(md.keys) }\n+func (md Metadata) Keys() []string   { return md.keys }\n+func (md Metadata) Values() []string { return md.values }\n+\n+func (kv Metadata) clone() Metadata {\n+\tif len(kv.keys) == 0 {\n+\t\treturn Metadata{}\n+\t}\n+\n+\to := Metadata{\n+\t\tkeys:   make([]string, len(kv.keys)),\n+\t\tvalues: make([]string, len(kv.values)),\n+\t}\n+\tcopy(o.keys, kv.keys)\n+\tcopy(o.values, kv.values)\n+\n+\treturn o\n+}\n+\n+// Schema is a sequence of Field values, describing the columns of a table or\n+// a record batch.\n+type Schema struct {\n+\tfields []Field\n+\tindex  map[string]int\n+\tmeta   Metadata\n+}\n+\n+// NewSchema returns a new Schema value from the slice of fields and metadata.\n+//\n+// NewSchema panics if there are duplicated fields.\n+// NewSchema panics if there is a field with an invalid DataType.\n+func NewSchema(fields []Field, metadata *Metadata) *Schema {\n+\tsc := &Schema{\n+\t\tfields: make([]Field, 0, len(fields)),\n+\t\tindex:  make(map[string]int, len(fields)),\n+\t}\n+\tif metadata != nil {\n+\t\tsc.meta = metadata.clone()\n+\t}\n+\tfor i, field := range fields {\n+\t\tif field.Type == nil {\n+\t\t\tpanic(\"arrow: field with nil DataType\")\n+\t\t}\n+\t\tsc.fields = append(sc.fields, field)\n+\t\tif _, dup := sc.index[field.Name]; dup {\n+\t\t\tpanic(fmt.Errorf(\"arrow: duplicate field with name %q\", field.Name))\n+\t\t}\n+\t\tsc.index[field.Name] = i\n+\t}\n+\treturn sc\n+}\n+\n+func (sc *Schema) Metadata() Metadata { return sc.meta }\n+func (sc *Schema) Fields() []Field    { return sc.fields }\n+func (sc *Schema) Field(i int) Field  { return sc.fields[i] }\n+\n+func (sc *Schema) FieldByName(n string) (Field, bool) {\n+\ti, ok := sc.index[n]\n+\tif !ok {\n+\t\treturn Field{}, ok\n+\t}\n+\treturn sc.fields[i], ok\n+}\n+\n+// FieldIndex returns the index of the named field or -1.\n+func (sc *Schema) FieldIndex(n string) int {\n+\ti, ok := sc.index[n]\n+\tif !ok {\n+\t\treturn -1\n+\t}\n+\treturn i\n+}\n+\n+func (sc *Schema) HasField(n string) bool {\n+\treturn sc.FieldIndex(n) >= 0\n+}\n+\n+func (sc *Schema) HasMetadata() bool { return len(sc.meta.keys) > 0 }\ndiff --git a/go/arrow/schema_test.go b/go/arrow/schema_test.go\nnew file mode 100644\nindex 0000000000..d8c87a0aa3\n--- /dev/null\n+++ b/go/arrow/schema_test.go\n@@ -0,0 +1,206 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package arrow\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func TestMetadata(t *testing.T) {\n+\tfor _, tc := range []struct {\n+\t\tmd           Metadata\n+\t\tkvs          map[string]string\n+\t\tkeys, values []string\n+\t\terr          string\n+\t}{\n+\t\t{\n+\t\t\tmd: Metadata{\n+\t\t\t\tkeys:   []string{\"k1\", \"k2\"},\n+\t\t\t\tvalues: []string{\"v1\", \"v2\"},\n+\t\t\t},\n+\t\t\tkeys:   []string{\"k1\", \"k2\"},\n+\t\t\tvalues: []string{\"v1\", \"v2\"},\n+\t\t},\n+\t\t{\n+\t\t\tmd: Metadata{},\n+\t\t},\n+\t\t{\n+\t\t\tmd: Metadata{\n+\t\t\t\tkeys:   []string{\"k1\", \"k2\"},\n+\t\t\t\tvalues: []string{\"v1\", \"v2\"},\n+\t\t\t},\n+\t\t\tkvs: map[string]string{\"k1\": \"v1\", \"k2\": \"v2\"},\n+\t\t},\n+\t\t{\n+\t\t\tmd:     Metadata{},\n+\t\t\tkeys:   []string{\"k1\", \"k2\", \"k3\"},\n+\t\t\tvalues: []string{\"v1\", \"v2\"},\n+\t\t\terr:    \"arrow: len mismatch\",\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tif tc.err != \"\" {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected a panic\")\n+\t\t\t\t\t}\n+\t\t\t\t\tif got := e.(string); got != tc.err {\n+\t\t\t\t\t\tt.Fatalf(\"invalid panic. got=%q, want=%q\", got, tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\t\t\tvar md Metadata\n+\t\t\tswitch len(tc.kvs) {\n+\t\t\tcase 0:\n+\t\t\t\tmd = NewMetadata(tc.keys, tc.values)\n+\t\t\tdefault:\n+\t\t\t\tmd = MetadataFrom(tc.kvs)\n+\t\t\t}\n+\t\t\tif got, want := md.Len(), len(tc.md.keys); !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid len: got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := md.Keys(), tc.md.keys; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid keys: got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t\tif got, want := md.Values(), tc.md.values; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid values: got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t\tif !reflect.DeepEqual(tc.md, md) {\n+\t\t\t\tt.Fatalf(\"invalid md: got=%#v, want=%#v\", md, tc.md)\n+\t\t\t}\n+\t\t\tclone := md.clone()\n+\t\t\tif !reflect.DeepEqual(clone, md) {\n+\t\t\t\tt.Fatalf(\"invalid clone: got=%#v, want=%#v\", clone, md)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestSchema(t *testing.T) {\n+\tfor _, tc := range []struct {\n+\t\tfields []Field\n+\t\tmd     *Metadata\n+\t\terr    error\n+\t}{\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t},\n+\t\t\tmd: func() *Metadata {\n+\t\t\t\tmd := MetadataFrom(map[string]string{\"k1\": \"v1\", \"k2\": \"v2\"})\n+\t\t\t\treturn &md\n+\t\t\t}(),\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t\t\t},\n+\t\t\tmd: nil,\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: nil},\n+\t\t\t},\n+\t\t\tmd:  nil,\n+\t\t\terr: fmt.Errorf(\"arrow: field with nil DataType\"),\n+\t\t},\n+\t\t{\n+\t\t\tfields: []Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int64},\n+\t\t\t},\n+\t\t\tmd:  nil,\n+\t\t\terr: fmt.Errorf(`arrow: duplicate field with name \"f1\"`),\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tif tc.err != nil {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected a panic %q\", tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t\tswitch err := e.(type) {\n+\t\t\t\t\tcase string:\n+\t\t\t\t\t\tif err != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase error:\n+\t\t\t\t\t\tif err.Error() != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tt.Fatalf(\"invalid type for panic message: %T (err=%v)\", err, err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\n+\t\t\ts := NewSchema(tc.fields, tc.md)\n+\n+\t\t\tif got, want := len(s.Fields()), len(tc.fields); got != want {\n+\t\t\t\tt.Fatalf(\"invalid number of fields. got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := s.Field(0), tc.fields[0]; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := s.HasMetadata(), tc.md != nil; got != want {\n+\t\t\t\tt.Fatalf(\"invalid metadata: got=%v, want=%v\", got, want)\n+\t\t\t}\n+\n+\t\t\tif tc.md != nil {\n+\t\t\t\tif got, want := s.Metadata(), *tc.md; !reflect.DeepEqual(got, want) {\n+\t\t\t\t\tt.Fatalf(\"invalid metadata: got=%#v, want=%#v\", got, want)\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tfor _, tc := range []struct {\n+\t\t\t\tname  string\n+\t\t\t\tok    bool\n+\t\t\t\tfield Field\n+\t\t\t\ti     int\n+\t\t\t}{\n+\t\t\t\t{\"f1\", true, tc.fields[0], 0},\n+\t\t\t\t{\"f2\", true, tc.fields[1], 1},\n+\t\t\t\t{\"N/A\", false, Field{}, -1},\n+\t\t\t} {\n+\t\t\t\tt.Run(tc.name, func(t *testing.T) {\n+\t\t\t\t\tgot, ok := s.FieldByName(tc.name)\n+\t\t\t\t\tif ok != tc.ok {\n+\t\t\t\t\t\tt.Fatalf(\"invalid field %q: got=%v, want=%v\", tc.name, ok, tc.ok)\n+\t\t\t\t\t}\n+\t\t\t\t\tif i := s.FieldIndex(tc.name); i != tc.i {\n+\t\t\t\t\t\tt.Fatalf(\"invalid FieldIndex(%s): got=%v, want=%v\", tc.name, i, tc.i)\n+\t\t\t\t\t}\n+\t\t\t\t\tif ok := s.HasField(tc.name); ok != tc.ok {\n+\t\t\t\t\t\tt.Fatalf(\"invalid HasField(%s): got=%v, want=%v\", tc.name, ok, tc.ok)\n+\t\t\t\t\t}\n+\t\t\t\t\tif !reflect.DeepEqual(got, tc.field) {\n+\t\t\t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, tc.field)\n+\t\t\t\t\t}\n+\t\t\t\t})\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T12:58:59.129+0000",
                    "updated": "2018-10-29T12:58:59.129+0000",
                    "started": "2018-10-29T12:58:59.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159976",
                    "issueId": "13193140"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6bf471f0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c72e171[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7998e287[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@425aedac[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b0ecac9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61ba63fd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f083997[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4aaa8857[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@370f4b49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@51863de[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bc2366b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b4fd74[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 29 12:58:46 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-29T12:58:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3584/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-21T20:48:33.000+0000",
        "updated": "2018-10-29T12:58:59.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] add support for Table",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193140/comment/16667165",
                    "id": "16667165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2838\n[https://github.com/apache/arrow/pull/2838]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-29T12:58:46.223+0000",
                    "updated": "2018-10-29T12:58:46.223+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zgp3:",
        "customfield_12314139": null
    }
}