{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13396791",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791",
    "key": "ARROW-13704",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=HashidaTKS",
            "name": "HashidaTKS",
            "key": "hashidatks",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Takashi Hashida",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=HashidaTKS",
            "name": "HashidaTKS",
            "key": "hashidatks",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Takashi Hashida",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13704/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/641242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS opened a new pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990\n\n\n   - Delta dictionaries for the dictionary type is not supported yet\r\n   - Fix a bug of ListArray.Build()\r\n     - This method was adding a needless \"true\" to the trailing edge of the validity buffer\r\n   - Make ArrowArrayBuilderFactory public so that we can use it in tests\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T18:10:23.019+0000",
                    "updated": "2021-08-24T18:10:23.019+0000",
                    "started": "2021-08-24T18:10:23.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641242",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/641243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#issuecomment-904864277\n\n\n   https://issues.apache.org/jira/browse/ARROW-13704\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T18:10:46.876+0000",
                    "updated": "2021-08-24T18:10:46.876+0000",
                    "started": "2021-08-24T18:10:46.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641243",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#issuecomment-907641673\n\n\n   @eerhardt \r\n   Could you please review this when you have time?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T15:25:39.381+0000",
                    "updated": "2021-08-28T15:25:39.381+0000",
                    "started": "2021-08-28T15:25:39.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643110",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix them in future PRs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T15:38:23.043+0000",
                    "updated": "2021-08-28T15:38:23.043+0000",
                    "started": "2021-08-28T15:38:23.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643111",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix it with future PRs that adding support for writing delta dictionaries.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T15:46:31.954+0000",
                    "updated": "2021-08-28T15:46:31.954+0000",
                    "started": "2021-08-28T15:46:31.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643113",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix it with future PRs that add support for writing delta dictionaries.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T15:48:31.309+0000",
                    "updated": "2021-08-28T15:48:31.309+0000",
                    "started": "2021-08-28T15:48:31.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643115",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697886188\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       I tested reading delta dictionaries by creating a test file `delta_dictionary_batch_test.batch` with python and reading `delta_dictionary_batch_test.batch` with C#, and it worked fine.\r\n   \r\n   ```\r\n   import pyarrow as pa\r\n   \r\n   ty = pa.dictionary(pa.int8(), pa.utf8())\r\n   data = [[\"foo\", \"foo\", None],\r\n               [\"foo\", \"bar\", \"foo\"],\r\n               [\"foo\", \"bar\"],\r\n               [\"foo\", None, \"bar\", \"quux\"], \r\n               [\"bar\", \"quux\"],\r\n               ]\r\n   batches = [\r\n           pa.RecordBatch.from_arrays([pa.array(v, type=ty)], names=['dicts'])\r\n           for v in data]\r\n   schema = batches[0].schema\r\n   \r\n   def write_batches():\r\n       options = pa.ipc.IpcWriteOptions(emit_dictionary_deltas=True)\r\n       with pa.RecordBatchStreamWriter(\"./delta_dictionary_batch_test.batch\", schema = schema, options = options) as writer:\r\n           for batch in batches:\r\n               writer.write_batch(batch)\r\n   \r\n   st = write_batches()\r\n   \r\n   import pyarrow as pa\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T15:53:54.500+0000",
                    "updated": "2021-08-28T15:53:54.500+0000",
                    "started": "2021-08-28T15:53:54.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643117",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix it with future PRs that add support for writing delta dictionaries, or independent PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T16:14:01.535+0000",
                    "updated": "2021-08-28T16:14:01.535+0000",
                    "started": "2021-08-28T16:14:01.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643119",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix it with future PRs that add support for writing delta dictionaries, or another independent PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T16:17:15.572+0000",
                    "updated": "2021-08-28T16:17:15.572+0000",
                    "started": "2021-08-28T16:17:15.572+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643120",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697884564\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       Creating `arrays` for a delta dictionary causes needless memory allocation for  `ArrowArray`.\r\n   It's enough to create just `ArrayData` for the delta dictionary.\r\n   I plan to fix it with a future PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T16:20:09.266+0000",
                    "updated": "2021-08-28T16:20:09.266+0000",
                    "started": "2021-08-28T16:20:09.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643121",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/643123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r697886188\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n##########\n@@ -144,7 +154,7 @@ private void ReadDictionaryBatch(Flatbuf.DictionaryBatch dictionaryBatch, ByteBu\n \n             if (dictionaryBatch.IsDelta)\n             {\n-                throw new NotImplementedException(\"Dictionary delta is not supported yet\");\n+                DictionaryMemo.AddDeltaDictionary(id, arrays[0], _allocator);\n\nReview comment:\n       I tested reading delta dictionaries by creating a test file `delta_dictionary_batch_test.batch` with python and reading `delta_dictionary_batch_test.batch` with C#, and it worked fine.\r\n   \r\n   ```\r\n   import pyarrow as pa\r\n   \r\n   ty = pa.dictionary(pa.int8(), pa.utf8())\r\n   data = [[\"foo\", \"foo\", None],\r\n               [\"foo\", \"bar\", \"foo\"],\r\n               [\"foo\", \"bar\"],\r\n               [\"foo\", None, \"bar\", \"quux\"], \r\n               [\"bar\", \"quux\"],\r\n               ]\r\n   batches = [\r\n           pa.RecordBatch.from_arrays([pa.array(v, type=ty)], names=['dicts'])\r\n           for v in data]\r\n   schema = batches[0].schema\r\n   \r\n   def write_batches():\r\n       options = pa.ipc.IpcWriteOptions(emit_dictionary_deltas=True)\r\n       with pa.RecordBatchStreamWriter(\"./delta_dictionary_batch_test.batch\", schema = schema, options = options) as writer:\r\n           for batch in batches:\r\n               writer.write_batch(batch)\r\n   \r\n   st = write_batches()\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-28T17:28:54.183+0000",
                    "updated": "2021-08-28T17:28:54.183+0000",
                    "started": "2021-08-28T17:28:54.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643123",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/653631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#issuecomment-924104842\n\n\n   Hey @HashidaTKS - sorry it's taken so long. I plan on getting to this today or tomorrow. Thanks for the patience.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T15:33:10.729+0000",
                    "updated": "2021-09-21T15:33:10.729+0000",
                    "started": "2021-09-21T15:33:10.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653631",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r714175901\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n\nReview comment:\n       Is it possible to mark the new classes as `internal`? Making them public means that external callers can call them, and we then need to maintain the public surface area (unless we want to make breaking changes).\r\n   \r\n   If this is only marked `public` for testing, instead, try as hard as you can to write tests using the `public` API - like a customer would.\r\n   \r\n   If that can't be done (since we can't write dictionaries in C# yet), consider either using InternalsVisibleTo or Reflection (preferred) to call these methods from the tests.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrowArrayBuilderFactory.cs\n##########\n@@ -18,9 +18,9 @@\n \n namespace Apache.Arrow\n {\n-    static class ArrowArrayBuilderFactory\n+    public static class ArrowArrayBuilderFactory\n\nReview comment:\n       Is it possible to not make this public API? Would normal callers need it? We should avoid making it public API just for testing.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n+    {\n+        public static ArrayData Concatenate(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+        {\n+            if (arrayDataList == null || arrayDataList.Count == 0)\n+            {\n+                return null;\n+            }\n+\n+            if (arrayDataList.Count == 1)\n+            {\n+                return arrayDataList[0];\n+            }\n+\n+            var arrowArrayConcatinateVisitor = new ArrayDataConcatinationVisitor(arrayDataList, allocator);\n+\n+            IArrowType type = arrayDataList[0].DataType;\n+            type.Accept(arrowArrayConcatinateVisitor);\n+\n+            return arrowArrayConcatinateVisitor.Result;\n+        }\n+\n+        private class ArrayDataConcatinationVisitor :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<FixedWidthType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+            public ArrayData Result { get; private set; }\n+            private IReadOnlyList<ArrayData> _arrayDataList;\n\nReview comment:\n       ```suggestion\r\n               private readonly IReadOnlyList<ArrayData> _arrayDataList;\r\n   ```\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n+    {\n+        public static ArrayData Concatenate(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+        {\n+            if (arrayDataList == null || arrayDataList.Count == 0)\n+            {\n+                return null;\n+            }\n+\n+            if (arrayDataList.Count == 1)\n+            {\n+                return arrayDataList[0];\n+            }\n+\n+            var arrowArrayConcatinateVisitor = new ArrayDataConcatinationVisitor(arrayDataList, allocator);\n+\n+            IArrowType type = arrayDataList[0].DataType;\n+            type.Accept(arrowArrayConcatinateVisitor);\n+\n+            return arrowArrayConcatinateVisitor.Result;\n+        }\n+\n+        private class ArrayDataConcatinationVisitor :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<FixedWidthType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+            public ArrayData Result { get; private set; }\n+            private IReadOnlyList<ArrayData> _arrayDataList;\n+            private readonly int _totalLength;\n+            private readonly int _totalNullCount;\n+            private readonly MemoryAllocator _allocator;\n+\n+            public ArrayDataConcatinationVisitor(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+            {\n+                _arrayDataList = arrayDataList;\n+                _allocator = allocator;\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    _totalLength += arrayData.Length;\n+                    _totalNullCount += arrayData.NullCount;\n+                }\n+            }\n+\n+            public void Visit(BooleanType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateBitmapBuffer(1);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(FixedWidthType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateFixedWidthTypeValueBuffer(type);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(BinaryType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(StringType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(ListType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer offsetBuffer = ConcateneteOffsetBuffer();\n+                ArrayData child = Concatenate(SelectChildren(0), _allocator);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, offsetBuffer }, new[] { child });\n+            }\n+\n+            public void Visit(StructType type)\n+            {\n+                CheckData(type, 1);\n+                List<ArrayData> children = new List<ArrayData>(type.Fields.Count);\n+\n+                for (int i = 0; i < type.Fields.Count; i++)\n+                {\n+                    children.Add(Concatenate(SelectChildren(i), _allocator));\n+                }\n+\n+                Result = new ArrayData(type, _arrayDataList[0].Length, _arrayDataList[0].NullCount, 0, _arrayDataList[0].Buffers, children);\n+            }\n+\n+            public void Visit(IArrowType type)\n+            {\n+                throw new NotImplementedException($\"Concatination for {type.Name} is not supported yet.\");\n+            }\n+\n+            private void CheckData(IArrowType type, int expectedBufferCount)\n+            {\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    arrayData.EnsureDataType(type.TypeId);\n+                    arrayData.EnsureBufferCount(expectedBufferCount);\n+                }\n+            }\n+\n+            private void ConcateneteVariableBinaryArrayData(IArrowType type)\n+            {\n+                CheckData(type, 3);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer offsetBuffer = ConcateneteOffsetBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateVariableBinaryValueBuffer();\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, offsetBuffer, valueBuffer });\n+            }\n+\n+            private ArrowBuffer ConcatenateValidityBuffer()\n+            {\n+                if (_totalNullCount == 0)\n+                {\n+                    return ArrowBuffer.Empty;\n+                }\n+\n+                return ConcatenateBitmapBuffer(0);\n+            }\n+\n+            private ArrowBuffer ConcatenateBitmapBuffer(int bufferIndex)\n+            {\n+                var builder = new ArrowBuffer.BitmapBuilder(_totalLength);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int length = arrayData.Length;\n+                    ReadOnlySpan<byte> span = arrayData.Buffers[bufferIndex].Span;\n+\n+                    for (int i = 0; i < length; i++)\n+                    {\n+                        builder.Append(span.IsEmpty || BitUtility.GetBit(span, i));\n+                    }\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcatenateFixedWidthTypeValueBuffer(FixedWidthType type)\n+            {\n+                int typeByteWidth = type.BitWidth / 8;\n+                var builder = new ArrowBuffer.Builder<byte>(_totalLength * typeByteWidth);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int length = arrayData.Length;\n+                    int byteLength = length * typeByteWidth;\n+\n+                    builder.Append(arrayData.Buffers[1].Span.Slice(0, byteLength));\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcatenateVariableBinaryValueBuffer()\n+            {\n+                var builder = new ArrowBuffer.Builder<byte>();\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int lastOffset = arrayData.Buffers[1].Span.CastTo<int>()[arrayData.Length];\n+                    builder.Append(arrayData.Buffers[2].Span.Slice(0, lastOffset));\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcateneteOffsetBuffer()\n+            {\n+                var builder = new ArrowBuffer.Builder<int>(_totalLength + 1);\n+                int baseOffset = 0;\n+\n+                builder.Append(0);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    if (arrayData.Length == 0)\n+                    {\n+                        continue;\n+                    }\n+\n+                    // The first offset is always 0.\n+                    // It should be skipped because it duplicate to the last offset of builder.\n+                    ReadOnlySpan<int> span = arrayData.Buffers[1].Span.CastTo<int>().Slice(1, arrayData.Length);\n\nReview comment:\n       Doesn't this need to be `arrayData.Length - 1`? Because you sliced off the first element.\r\n   ```suggestion\r\n                       ReadOnlySpan<int> span = arrayData.Buffers[1].Span.CastTo<int>().Slice(1, arrayData.Length - 1);\r\n   ```\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n+    {\n+        public static ArrayData Concatenate(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+        {\n+            if (arrayDataList == null || arrayDataList.Count == 0)\n+            {\n+                return null;\n+            }\n+\n+            if (arrayDataList.Count == 1)\n+            {\n+                return arrayDataList[0];\n+            }\n+\n+            var arrowArrayConcatinateVisitor = new ArrayDataConcatinationVisitor(arrayDataList, allocator);\n+\n+            IArrowType type = arrayDataList[0].DataType;\n+            type.Accept(arrowArrayConcatinateVisitor);\n+\n+            return arrowArrayConcatinateVisitor.Result;\n+        }\n+\n+        private class ArrayDataConcatinationVisitor :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<FixedWidthType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+            public ArrayData Result { get; private set; }\n+            private IReadOnlyList<ArrayData> _arrayDataList;\n+            private readonly int _totalLength;\n+            private readonly int _totalNullCount;\n+            private readonly MemoryAllocator _allocator;\n+\n+            public ArrayDataConcatinationVisitor(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+            {\n+                _arrayDataList = arrayDataList;\n+                _allocator = allocator;\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    _totalLength += arrayData.Length;\n+                    _totalNullCount += arrayData.NullCount;\n+                }\n+            }\n+\n+            public void Visit(BooleanType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateBitmapBuffer(1);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(FixedWidthType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateFixedWidthTypeValueBuffer(type);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(BinaryType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(StringType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(ListType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer offsetBuffer = ConcateneteOffsetBuffer();\n+                ArrayData child = Concatenate(SelectChildren(0), _allocator);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, offsetBuffer }, new[] { child });\n+            }\n+\n+            public void Visit(StructType type)\n+            {\n+                CheckData(type, 1);\n+                List<ArrayData> children = new List<ArrayData>(type.Fields.Count);\n+\n+                for (int i = 0; i < type.Fields.Count; i++)\n+                {\n+                    children.Add(Concatenate(SelectChildren(i), _allocator));\n+                }\n+\n+                Result = new ArrayData(type, _arrayDataList[0].Length, _arrayDataList[0].NullCount, 0, _arrayDataList[0].Buffers, children);\n+            }\n+\n+            public void Visit(IArrowType type)\n+            {\n+                throw new NotImplementedException($\"Concatination for {type.Name} is not supported yet.\");\n+            }\n+\n+            private void CheckData(IArrowType type, int expectedBufferCount)\n+            {\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    arrayData.EnsureDataType(type.TypeId);\n+                    arrayData.EnsureBufferCount(expectedBufferCount);\n+                }\n+            }\n+\n+            private void ConcateneteVariableBinaryArrayData(IArrowType type)\n\nReview comment:\n       ```suggestion\r\n               private void ConcatenateVariableBinaryArrayData(IArrowType type)\r\n   ```\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n+    {\n+        public static ArrayData Concatenate(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+        {\n+            if (arrayDataList == null || arrayDataList.Count == 0)\n+            {\n+                return null;\n+            }\n+\n+            if (arrayDataList.Count == 1)\n+            {\n+                return arrayDataList[0];\n+            }\n+\n+            var arrowArrayConcatinateVisitor = new ArrayDataConcatinationVisitor(arrayDataList, allocator);\n\nReview comment:\n       ```suggestion\r\n               var arrowArrayConcatenationVisitor = new ArrayDataConcatenationVisitor(arrayDataList, allocator);\r\n   ```\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowArrayConcatenatorTests.cs\n##########\n@@ -0,0 +1,383 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Apache.Arrow.Types;\n+using Xunit;\n+\n+namespace Apache.Arrow.Tests\n+{\n+    public class ArrowArrayConcatenatorTests\n+    {\n+        [Fact]\n+        public void TestStandardCases()\n+        {\n+            foreach ((List<IArrowArray> testTargetArrayList, IArrowArray expectedArray) in GenerateTestData())\n+            {\n+                IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(testTargetArrayList);\n+                ArrowReaderVerifier.CompareArrays(expectedArray, actualArray);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestNullOrEmpty()\n+        {\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(null));\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(new List<IArrowArray>()));\n+        }\n+\n+        [Fact]\n+        public void TestSingleElement()\n+        {\n+            Int32Array array = new Int32Array.Builder().Append(1).Append(2).Build();\n+            IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(new [] { array });\n+            ArrowReaderVerifier.CompareArrays(array, actualArray);\n+        }\n+\n+        private static IEnumerable<Tuple<List<IArrowArray>, IArrowArray>> GenerateTestData()\n+        {\n+            var targetTypes = new List<IArrowType>() {\n+                    BooleanType.Default,\n+                    Int8Type.Default,\n+                    Int16Type.Default,\n+                    Int32Type.Default,\n+                    Int64Type.Default,\n+                    UInt8Type.Default,\n+                    UInt16Type.Default,\n+                    UInt32Type.Default,\n+                    UInt64Type.Default,\n+                    FloatType.Default,\n+                    DoubleType.Default,\n+                    BinaryType.Default,\n+                    StringType.Default,\n+                    Date32Type.Default,\n+                    Date64Type.Default,\n+                    TimestampType.Default,\n+                    new Decimal128Type(14, 10),\n+                    new Decimal256Type(14,10),\n+                    new ListType(Int64Type.Default),\n+                    new StructType(new List<Field>{\n+                        new Field.Builder().Name(\"Strings\").DataType(StringType.Default).Nullable(true).Build(),\n+                        new Field.Builder().Name(\"Ints\").DataType(Int32Type.Default).Nullable(true).Build()\n+                    }),\n+                };\n+\n+            foreach (IArrowType type in targetTypes)\n+            {\n+                var creator = new TestDataGenerator();\n+                type.Accept(creator);\n+                yield return Tuple.Create(creator.TestTargetArrayList, creator.ExpectedArray);\n+            }\n+        }\n+\n+        private class TestDataGenerator :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<Int8Type>,\n+            IArrowTypeVisitor<Int16Type>,\n+            IArrowTypeVisitor<Int32Type>,\n+            IArrowTypeVisitor<Int64Type>,\n+            IArrowTypeVisitor<UInt8Type>,\n+            IArrowTypeVisitor<UInt16Type>,\n+            IArrowTypeVisitor<UInt32Type>,\n+            IArrowTypeVisitor<UInt64Type>,\n+            IArrowTypeVisitor<FloatType>,\n+            IArrowTypeVisitor<DoubleType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<Decimal128Type>,\n+            IArrowTypeVisitor<Decimal256Type>,\n+            IArrowTypeVisitor<Date32Type>,\n+            IArrowTypeVisitor<Date64Type>,\n+            IArrowTypeVisitor<TimestampType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+\n+            private List<List<int?>> _baseData;\n+\n+            private int _baseDataListCount;\n+\n+            private int _baseDataTotalElementCount;\n+\n+            public List<IArrowArray> TestTargetArrayList { get; }\n+            public IArrowArray ExpectedArray { get; private set; }\n+\n+            public TestDataGenerator()\n+            {\n+                _baseData = new List<List<int?>> {\n+                    new List<int?> { 1, 2, 3 },\n+                    new List<int?> { 100, 101, null },\n+                    new List<int?> { 11, null, 12 },\n+                };\n+\n+                _baseDataListCount = _baseData.Count;\n+                _baseDataTotalElementCount = _baseData.Sum(_ => _.Count);\n+                TestTargetArrayList = new List<IArrowArray>(_baseDataListCount);\n+            }\n+\n+            public void Visit(BooleanType type) => GenerateTestData<bool, BooleanArray, BooleanArray.Builder>(type, x => x % 2 == 0);\n+            public void Visit(Int8Type type) => GenerateTestData<sbyte, Int8Array, Int8Array.Builder>(type, x => (sbyte)x);\n+            public void Visit(Int16Type type) => GenerateTestData<short, Int16Array, Int16Array.Builder>(type, x => (short)x);\n+            public void Visit(Int32Type type) => GenerateTestData<int, Int32Array, Int32Array.Builder>(type, x => x);\n+            public void Visit(Int64Type type) => GenerateTestData<long, Int64Array, Int64Array.Builder>(type, x => x);\n+            public void Visit(UInt8Type type) => GenerateTestData<byte, UInt8Array, UInt8Array.Builder>(type, x => (byte)x);\n+            public void Visit(UInt16Type type) => GenerateTestData<ushort, UInt16Array, UInt16Array.Builder>(type, x => (ushort)x);\n+            public void Visit(UInt32Type type) => GenerateTestData<uint, UInt32Array, UInt32Array.Builder>(type, x => (uint)x);\n+            public void Visit(UInt64Type type) => GenerateTestData<ulong, UInt64Array, UInt64Array.Builder>(type, x => (ulong)x);\n+            public void Visit(FloatType type) => GenerateTestData<float, FloatArray, FloatArray.Builder>(type, x => x);\n+            public void Visit(DoubleType type) => GenerateTestData<double, DoubleArray, DoubleArray.Builder>(type, x => x);\n+            public void Visit(Date32Type type) => GenerateTestData<DateTime, Date32Array, Date32Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n+            public void Visit(Date64Type type) => GenerateTestData<DateTime, Date64Array, Date64Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n\nReview comment:\n       Can we reuse the existing code in the existing `TestData` class?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:06:01.392+0000",
                    "updated": "2021-09-22T18:06:01.392+0000",
                    "started": "2021-09-22T18:06:01.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654197",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r714899902\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n\nReview comment:\n       I see.\r\n   I have changed them to `internal` and changed to use `InternalsVisibleTo`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T15:13:53.708+0000",
                    "updated": "2021-09-23T15:13:53.708+0000",
                    "started": "2021-09-23T15:13:53.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654573",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r714900358\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrowArrayBuilderFactory.cs\n##########\n@@ -18,9 +18,9 @@\n \n namespace Apache.Arrow\n {\n-    static class ArrowArrayBuilderFactory\n+    public static class ArrowArrayBuilderFactory\n\nReview comment:\n       I have changed them to `internal`.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrowArrayBuilderFactory.cs\n##########\n@@ -18,9 +18,9 @@\n \n namespace Apache.Arrow\n {\n-    static class ArrowArrayBuilderFactory\n+    public static class ArrowArrayBuilderFactory\n\nReview comment:\n       I have changed it to `internal`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T15:14:27.129+0000",
                    "updated": "2021-09-23T15:14:27.129+0000",
                    "started": "2021-09-23T15:14:27.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654574",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r714908656\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/ArrayDataConcatenator.cs\n##########\n@@ -0,0 +1,240 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Memory;\n+using Apache.Arrow.Types;\n+using System;\n+using System.Collections.Generic;\n+\n+namespace Apache.Arrow\n+{\n+    public static class ArrayDataConcatenator\n+    {\n+        public static ArrayData Concatenate(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+        {\n+            if (arrayDataList == null || arrayDataList.Count == 0)\n+            {\n+                return null;\n+            }\n+\n+            if (arrayDataList.Count == 1)\n+            {\n+                return arrayDataList[0];\n+            }\n+\n+            var arrowArrayConcatinateVisitor = new ArrayDataConcatinationVisitor(arrayDataList, allocator);\n+\n+            IArrowType type = arrayDataList[0].DataType;\n+            type.Accept(arrowArrayConcatinateVisitor);\n+\n+            return arrowArrayConcatinateVisitor.Result;\n+        }\n+\n+        private class ArrayDataConcatinationVisitor :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<FixedWidthType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+            public ArrayData Result { get; private set; }\n+            private IReadOnlyList<ArrayData> _arrayDataList;\n+            private readonly int _totalLength;\n+            private readonly int _totalNullCount;\n+            private readonly MemoryAllocator _allocator;\n+\n+            public ArrayDataConcatinationVisitor(IReadOnlyList<ArrayData> arrayDataList, MemoryAllocator allocator = default)\n+            {\n+                _arrayDataList = arrayDataList;\n+                _allocator = allocator;\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    _totalLength += arrayData.Length;\n+                    _totalNullCount += arrayData.NullCount;\n+                }\n+            }\n+\n+            public void Visit(BooleanType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateBitmapBuffer(1);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(FixedWidthType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateFixedWidthTypeValueBuffer(type);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, valueBuffer });\n+            }\n+\n+            public void Visit(BinaryType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(StringType type) => ConcateneteVariableBinaryArrayData(type);\n+\n+            public void Visit(ListType type)\n+            {\n+                CheckData(type, 2);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer offsetBuffer = ConcateneteOffsetBuffer();\n+                ArrayData child = Concatenate(SelectChildren(0), _allocator);\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, offsetBuffer }, new[] { child });\n+            }\n+\n+            public void Visit(StructType type)\n+            {\n+                CheckData(type, 1);\n+                List<ArrayData> children = new List<ArrayData>(type.Fields.Count);\n+\n+                for (int i = 0; i < type.Fields.Count; i++)\n+                {\n+                    children.Add(Concatenate(SelectChildren(i), _allocator));\n+                }\n+\n+                Result = new ArrayData(type, _arrayDataList[0].Length, _arrayDataList[0].NullCount, 0, _arrayDataList[0].Buffers, children);\n+            }\n+\n+            public void Visit(IArrowType type)\n+            {\n+                throw new NotImplementedException($\"Concatination for {type.Name} is not supported yet.\");\n+            }\n+\n+            private void CheckData(IArrowType type, int expectedBufferCount)\n+            {\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    arrayData.EnsureDataType(type.TypeId);\n+                    arrayData.EnsureBufferCount(expectedBufferCount);\n+                }\n+            }\n+\n+            private void ConcateneteVariableBinaryArrayData(IArrowType type)\n+            {\n+                CheckData(type, 3);\n+                ArrowBuffer validityBuffer = ConcatenateValidityBuffer();\n+                ArrowBuffer offsetBuffer = ConcateneteOffsetBuffer();\n+                ArrowBuffer valueBuffer = ConcatenateVariableBinaryValueBuffer();\n+\n+                Result = new ArrayData(type, _totalLength, _totalNullCount, 0, new ArrowBuffer[] { validityBuffer, offsetBuffer, valueBuffer });\n+            }\n+\n+            private ArrowBuffer ConcatenateValidityBuffer()\n+            {\n+                if (_totalNullCount == 0)\n+                {\n+                    return ArrowBuffer.Empty;\n+                }\n+\n+                return ConcatenateBitmapBuffer(0);\n+            }\n+\n+            private ArrowBuffer ConcatenateBitmapBuffer(int bufferIndex)\n+            {\n+                var builder = new ArrowBuffer.BitmapBuilder(_totalLength);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int length = arrayData.Length;\n+                    ReadOnlySpan<byte> span = arrayData.Buffers[bufferIndex].Span;\n+\n+                    for (int i = 0; i < length; i++)\n+                    {\n+                        builder.Append(span.IsEmpty || BitUtility.GetBit(span, i));\n+                    }\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcatenateFixedWidthTypeValueBuffer(FixedWidthType type)\n+            {\n+                int typeByteWidth = type.BitWidth / 8;\n+                var builder = new ArrowBuffer.Builder<byte>(_totalLength * typeByteWidth);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int length = arrayData.Length;\n+                    int byteLength = length * typeByteWidth;\n+\n+                    builder.Append(arrayData.Buffers[1].Span.Slice(0, byteLength));\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcatenateVariableBinaryValueBuffer()\n+            {\n+                var builder = new ArrowBuffer.Builder<byte>();\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    int lastOffset = arrayData.Buffers[1].Span.CastTo<int>()[arrayData.Length];\n+                    builder.Append(arrayData.Buffers[2].Span.Slice(0, lastOffset));\n+                }\n+\n+                return builder.Build(_allocator);\n+            }\n+\n+            private ArrowBuffer ConcateneteOffsetBuffer()\n+            {\n+                var builder = new ArrowBuffer.Builder<int>(_totalLength + 1);\n+                int baseOffset = 0;\n+\n+                builder.Append(0);\n+\n+                foreach (ArrayData arrayData in _arrayDataList)\n+                {\n+                    if (arrayData.Length == 0)\n+                    {\n+                        continue;\n+                    }\n+\n+                    // The first offset is always 0.\n+                    // It should be skipped because it duplicate to the last offset of builder.\n+                    ReadOnlySpan<int> span = arrayData.Buffers[1].Span.CastTo<int>().Slice(1, arrayData.Length);\n\nReview comment:\n       It is a bit confusing, but the length of `arrayData.Buffers[1]` is `arrayData.Length + 1`, so I think being `arrayData.Length` is correct.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T15:23:09.615+0000",
                    "updated": "2021-09-23T15:23:09.615+0000",
                    "started": "2021-09-23T15:23:09.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654576",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r715027097\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowArrayConcatenatorTests.cs\n##########\n@@ -0,0 +1,383 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Apache.Arrow.Types;\n+using Xunit;\n+\n+namespace Apache.Arrow.Tests\n+{\n+    public class ArrowArrayConcatenatorTests\n+    {\n+        [Fact]\n+        public void TestStandardCases()\n+        {\n+            foreach ((List<IArrowArray> testTargetArrayList, IArrowArray expectedArray) in GenerateTestData())\n+            {\n+                IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(testTargetArrayList);\n+                ArrowReaderVerifier.CompareArrays(expectedArray, actualArray);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestNullOrEmpty()\n+        {\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(null));\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(new List<IArrowArray>()));\n+        }\n+\n+        [Fact]\n+        public void TestSingleElement()\n+        {\n+            Int32Array array = new Int32Array.Builder().Append(1).Append(2).Build();\n+            IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(new [] { array });\n+            ArrowReaderVerifier.CompareArrays(array, actualArray);\n+        }\n+\n+        private static IEnumerable<Tuple<List<IArrowArray>, IArrowArray>> GenerateTestData()\n+        {\n+            var targetTypes = new List<IArrowType>() {\n+                    BooleanType.Default,\n+                    Int8Type.Default,\n+                    Int16Type.Default,\n+                    Int32Type.Default,\n+                    Int64Type.Default,\n+                    UInt8Type.Default,\n+                    UInt16Type.Default,\n+                    UInt32Type.Default,\n+                    UInt64Type.Default,\n+                    FloatType.Default,\n+                    DoubleType.Default,\n+                    BinaryType.Default,\n+                    StringType.Default,\n+                    Date32Type.Default,\n+                    Date64Type.Default,\n+                    TimestampType.Default,\n+                    new Decimal128Type(14, 10),\n+                    new Decimal256Type(14,10),\n+                    new ListType(Int64Type.Default),\n+                    new StructType(new List<Field>{\n+                        new Field.Builder().Name(\"Strings\").DataType(StringType.Default).Nullable(true).Build(),\n+                        new Field.Builder().Name(\"Ints\").DataType(Int32Type.Default).Nullable(true).Build()\n+                    }),\n+                };\n+\n+            foreach (IArrowType type in targetTypes)\n+            {\n+                var creator = new TestDataGenerator();\n+                type.Accept(creator);\n+                yield return Tuple.Create(creator.TestTargetArrayList, creator.ExpectedArray);\n+            }\n+        }\n+\n+        private class TestDataGenerator :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<Int8Type>,\n+            IArrowTypeVisitor<Int16Type>,\n+            IArrowTypeVisitor<Int32Type>,\n+            IArrowTypeVisitor<Int64Type>,\n+            IArrowTypeVisitor<UInt8Type>,\n+            IArrowTypeVisitor<UInt16Type>,\n+            IArrowTypeVisitor<UInt32Type>,\n+            IArrowTypeVisitor<UInt64Type>,\n+            IArrowTypeVisitor<FloatType>,\n+            IArrowTypeVisitor<DoubleType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<Decimal128Type>,\n+            IArrowTypeVisitor<Decimal256Type>,\n+            IArrowTypeVisitor<Date32Type>,\n+            IArrowTypeVisitor<Date64Type>,\n+            IArrowTypeVisitor<TimestampType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+\n+            private List<List<int?>> _baseData;\n+\n+            private int _baseDataListCount;\n+\n+            private int _baseDataTotalElementCount;\n+\n+            public List<IArrowArray> TestTargetArrayList { get; }\n+            public IArrowArray ExpectedArray { get; private set; }\n+\n+            public TestDataGenerator()\n+            {\n+                _baseData = new List<List<int?>> {\n+                    new List<int?> { 1, 2, 3 },\n+                    new List<int?> { 100, 101, null },\n+                    new List<int?> { 11, null, 12 },\n+                };\n+\n+                _baseDataListCount = _baseData.Count;\n+                _baseDataTotalElementCount = _baseData.Sum(_ => _.Count);\n+                TestTargetArrayList = new List<IArrowArray>(_baseDataListCount);\n+            }\n+\n+            public void Visit(BooleanType type) => GenerateTestData<bool, BooleanArray, BooleanArray.Builder>(type, x => x % 2 == 0);\n+            public void Visit(Int8Type type) => GenerateTestData<sbyte, Int8Array, Int8Array.Builder>(type, x => (sbyte)x);\n+            public void Visit(Int16Type type) => GenerateTestData<short, Int16Array, Int16Array.Builder>(type, x => (short)x);\n+            public void Visit(Int32Type type) => GenerateTestData<int, Int32Array, Int32Array.Builder>(type, x => x);\n+            public void Visit(Int64Type type) => GenerateTestData<long, Int64Array, Int64Array.Builder>(type, x => x);\n+            public void Visit(UInt8Type type) => GenerateTestData<byte, UInt8Array, UInt8Array.Builder>(type, x => (byte)x);\n+            public void Visit(UInt16Type type) => GenerateTestData<ushort, UInt16Array, UInt16Array.Builder>(type, x => (ushort)x);\n+            public void Visit(UInt32Type type) => GenerateTestData<uint, UInt32Array, UInt32Array.Builder>(type, x => (uint)x);\n+            public void Visit(UInt64Type type) => GenerateTestData<ulong, UInt64Array, UInt64Array.Builder>(type, x => (ulong)x);\n+            public void Visit(FloatType type) => GenerateTestData<float, FloatArray, FloatArray.Builder>(type, x => x);\n+            public void Visit(DoubleType type) => GenerateTestData<double, DoubleArray, DoubleArray.Builder>(type, x => x);\n+            public void Visit(Date32Type type) => GenerateTestData<DateTime, Date32Array, Date32Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n+            public void Visit(Date64Type type) => GenerateTestData<DateTime, Date64Array, Date64Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n\nReview comment:\n       The `TestData` class is dependent on `Length` and unable to generate flexible data for now.\r\n   For example, when a type is `Int32Type`, it can not create data started with a non-zero value like `[2,3,4]`.\r\n   On the other hand, we need to create that kind of data for testing array concatenation.\r\n   E.g. `[0,1,2]`, `[3,4,5]`, `[6.7.null]` and `[0,1,2,3,4,5,6,7,null]`.\r\n   \r\n   In order to reuse the `TestData` class, we need to modify it to be able to handle arbitrary data, but it might have a considerable impact.\r\n   For the above reasons, I didn't reuse(modify) the `TestData` class.\r\n   \r\n   I think it is better to modify the `TestData` class and use it in `ArrowArrayConcatenatorTests` in future.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T17:53:57.413+0000",
                    "updated": "2021-09-23T17:53:57.413+0000",
                    "started": "2021-09-23T17:53:57.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654644",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r715027097\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowArrayConcatenatorTests.cs\n##########\n@@ -0,0 +1,383 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Apache.Arrow.Types;\n+using Xunit;\n+\n+namespace Apache.Arrow.Tests\n+{\n+    public class ArrowArrayConcatenatorTests\n+    {\n+        [Fact]\n+        public void TestStandardCases()\n+        {\n+            foreach ((List<IArrowArray> testTargetArrayList, IArrowArray expectedArray) in GenerateTestData())\n+            {\n+                IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(testTargetArrayList);\n+                ArrowReaderVerifier.CompareArrays(expectedArray, actualArray);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestNullOrEmpty()\n+        {\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(null));\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(new List<IArrowArray>()));\n+        }\n+\n+        [Fact]\n+        public void TestSingleElement()\n+        {\n+            Int32Array array = new Int32Array.Builder().Append(1).Append(2).Build();\n+            IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(new [] { array });\n+            ArrowReaderVerifier.CompareArrays(array, actualArray);\n+        }\n+\n+        private static IEnumerable<Tuple<List<IArrowArray>, IArrowArray>> GenerateTestData()\n+        {\n+            var targetTypes = new List<IArrowType>() {\n+                    BooleanType.Default,\n+                    Int8Type.Default,\n+                    Int16Type.Default,\n+                    Int32Type.Default,\n+                    Int64Type.Default,\n+                    UInt8Type.Default,\n+                    UInt16Type.Default,\n+                    UInt32Type.Default,\n+                    UInt64Type.Default,\n+                    FloatType.Default,\n+                    DoubleType.Default,\n+                    BinaryType.Default,\n+                    StringType.Default,\n+                    Date32Type.Default,\n+                    Date64Type.Default,\n+                    TimestampType.Default,\n+                    new Decimal128Type(14, 10),\n+                    new Decimal256Type(14,10),\n+                    new ListType(Int64Type.Default),\n+                    new StructType(new List<Field>{\n+                        new Field.Builder().Name(\"Strings\").DataType(StringType.Default).Nullable(true).Build(),\n+                        new Field.Builder().Name(\"Ints\").DataType(Int32Type.Default).Nullable(true).Build()\n+                    }),\n+                };\n+\n+            foreach (IArrowType type in targetTypes)\n+            {\n+                var creator = new TestDataGenerator();\n+                type.Accept(creator);\n+                yield return Tuple.Create(creator.TestTargetArrayList, creator.ExpectedArray);\n+            }\n+        }\n+\n+        private class TestDataGenerator :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<Int8Type>,\n+            IArrowTypeVisitor<Int16Type>,\n+            IArrowTypeVisitor<Int32Type>,\n+            IArrowTypeVisitor<Int64Type>,\n+            IArrowTypeVisitor<UInt8Type>,\n+            IArrowTypeVisitor<UInt16Type>,\n+            IArrowTypeVisitor<UInt32Type>,\n+            IArrowTypeVisitor<UInt64Type>,\n+            IArrowTypeVisitor<FloatType>,\n+            IArrowTypeVisitor<DoubleType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<Decimal128Type>,\n+            IArrowTypeVisitor<Decimal256Type>,\n+            IArrowTypeVisitor<Date32Type>,\n+            IArrowTypeVisitor<Date64Type>,\n+            IArrowTypeVisitor<TimestampType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+\n+            private List<List<int?>> _baseData;\n+\n+            private int _baseDataListCount;\n+\n+            private int _baseDataTotalElementCount;\n+\n+            public List<IArrowArray> TestTargetArrayList { get; }\n+            public IArrowArray ExpectedArray { get; private set; }\n+\n+            public TestDataGenerator()\n+            {\n+                _baseData = new List<List<int?>> {\n+                    new List<int?> { 1, 2, 3 },\n+                    new List<int?> { 100, 101, null },\n+                    new List<int?> { 11, null, 12 },\n+                };\n+\n+                _baseDataListCount = _baseData.Count;\n+                _baseDataTotalElementCount = _baseData.Sum(_ => _.Count);\n+                TestTargetArrayList = new List<IArrowArray>(_baseDataListCount);\n+            }\n+\n+            public void Visit(BooleanType type) => GenerateTestData<bool, BooleanArray, BooleanArray.Builder>(type, x => x % 2 == 0);\n+            public void Visit(Int8Type type) => GenerateTestData<sbyte, Int8Array, Int8Array.Builder>(type, x => (sbyte)x);\n+            public void Visit(Int16Type type) => GenerateTestData<short, Int16Array, Int16Array.Builder>(type, x => (short)x);\n+            public void Visit(Int32Type type) => GenerateTestData<int, Int32Array, Int32Array.Builder>(type, x => x);\n+            public void Visit(Int64Type type) => GenerateTestData<long, Int64Array, Int64Array.Builder>(type, x => x);\n+            public void Visit(UInt8Type type) => GenerateTestData<byte, UInt8Array, UInt8Array.Builder>(type, x => (byte)x);\n+            public void Visit(UInt16Type type) => GenerateTestData<ushort, UInt16Array, UInt16Array.Builder>(type, x => (ushort)x);\n+            public void Visit(UInt32Type type) => GenerateTestData<uint, UInt32Array, UInt32Array.Builder>(type, x => (uint)x);\n+            public void Visit(UInt64Type type) => GenerateTestData<ulong, UInt64Array, UInt64Array.Builder>(type, x => (ulong)x);\n+            public void Visit(FloatType type) => GenerateTestData<float, FloatArray, FloatArray.Builder>(type, x => x);\n+            public void Visit(DoubleType type) => GenerateTestData<double, DoubleArray, DoubleArray.Builder>(type, x => x);\n+            public void Visit(Date32Type type) => GenerateTestData<DateTime, Date32Array, Date32Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n+            public void Visit(Date64Type type) => GenerateTestData<DateTime, Date64Array, Date64Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n\nReview comment:\n       The `TestData` class is dependent on `Length` and unable to generate flexible data for now.\r\n   For example, when a type is `Int32Type`, it can not create data started with a non-zero value like `[2,3,4]`.\r\n   On the other hand, we need to create that kind of data for testing array concatenation.\r\n   E.g. an expected concatenated list is `[0,1,2,3,4,5,6,7,null]` and base lists are `[0,1,2]`, `[3,4,5]`, `[6.7.null]`.\r\n   \r\n   In order to reuse the `TestData` class, we need to modify it to be able to handle arbitrary data, but it might have a considerable impact.\r\n   For the above reasons, I didn't reuse(modify) it.\r\n   \r\n   I think it is better to modify the `TestData` class and use it in `ArrowArrayConcatenatorTests` in future.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T17:58:02.661+0000",
                    "updated": "2021-09-23T17:58:02.661+0000",
                    "started": "2021-09-23T17:58:02.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654646",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r715027097\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowArrayConcatenatorTests.cs\n##########\n@@ -0,0 +1,383 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Apache.Arrow.Types;\n+using Xunit;\n+\n+namespace Apache.Arrow.Tests\n+{\n+    public class ArrowArrayConcatenatorTests\n+    {\n+        [Fact]\n+        public void TestStandardCases()\n+        {\n+            foreach ((List<IArrowArray> testTargetArrayList, IArrowArray expectedArray) in GenerateTestData())\n+            {\n+                IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(testTargetArrayList);\n+                ArrowReaderVerifier.CompareArrays(expectedArray, actualArray);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestNullOrEmpty()\n+        {\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(null));\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(new List<IArrowArray>()));\n+        }\n+\n+        [Fact]\n+        public void TestSingleElement()\n+        {\n+            Int32Array array = new Int32Array.Builder().Append(1).Append(2).Build();\n+            IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(new [] { array });\n+            ArrowReaderVerifier.CompareArrays(array, actualArray);\n+        }\n+\n+        private static IEnumerable<Tuple<List<IArrowArray>, IArrowArray>> GenerateTestData()\n+        {\n+            var targetTypes = new List<IArrowType>() {\n+                    BooleanType.Default,\n+                    Int8Type.Default,\n+                    Int16Type.Default,\n+                    Int32Type.Default,\n+                    Int64Type.Default,\n+                    UInt8Type.Default,\n+                    UInt16Type.Default,\n+                    UInt32Type.Default,\n+                    UInt64Type.Default,\n+                    FloatType.Default,\n+                    DoubleType.Default,\n+                    BinaryType.Default,\n+                    StringType.Default,\n+                    Date32Type.Default,\n+                    Date64Type.Default,\n+                    TimestampType.Default,\n+                    new Decimal128Type(14, 10),\n+                    new Decimal256Type(14,10),\n+                    new ListType(Int64Type.Default),\n+                    new StructType(new List<Field>{\n+                        new Field.Builder().Name(\"Strings\").DataType(StringType.Default).Nullable(true).Build(),\n+                        new Field.Builder().Name(\"Ints\").DataType(Int32Type.Default).Nullable(true).Build()\n+                    }),\n+                };\n+\n+            foreach (IArrowType type in targetTypes)\n+            {\n+                var creator = new TestDataGenerator();\n+                type.Accept(creator);\n+                yield return Tuple.Create(creator.TestTargetArrayList, creator.ExpectedArray);\n+            }\n+        }\n+\n+        private class TestDataGenerator :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<Int8Type>,\n+            IArrowTypeVisitor<Int16Type>,\n+            IArrowTypeVisitor<Int32Type>,\n+            IArrowTypeVisitor<Int64Type>,\n+            IArrowTypeVisitor<UInt8Type>,\n+            IArrowTypeVisitor<UInt16Type>,\n+            IArrowTypeVisitor<UInt32Type>,\n+            IArrowTypeVisitor<UInt64Type>,\n+            IArrowTypeVisitor<FloatType>,\n+            IArrowTypeVisitor<DoubleType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<Decimal128Type>,\n+            IArrowTypeVisitor<Decimal256Type>,\n+            IArrowTypeVisitor<Date32Type>,\n+            IArrowTypeVisitor<Date64Type>,\n+            IArrowTypeVisitor<TimestampType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+\n+            private List<List<int?>> _baseData;\n+\n+            private int _baseDataListCount;\n+\n+            private int _baseDataTotalElementCount;\n+\n+            public List<IArrowArray> TestTargetArrayList { get; }\n+            public IArrowArray ExpectedArray { get; private set; }\n+\n+            public TestDataGenerator()\n+            {\n+                _baseData = new List<List<int?>> {\n+                    new List<int?> { 1, 2, 3 },\n+                    new List<int?> { 100, 101, null },\n+                    new List<int?> { 11, null, 12 },\n+                };\n+\n+                _baseDataListCount = _baseData.Count;\n+                _baseDataTotalElementCount = _baseData.Sum(_ => _.Count);\n+                TestTargetArrayList = new List<IArrowArray>(_baseDataListCount);\n+            }\n+\n+            public void Visit(BooleanType type) => GenerateTestData<bool, BooleanArray, BooleanArray.Builder>(type, x => x % 2 == 0);\n+            public void Visit(Int8Type type) => GenerateTestData<sbyte, Int8Array, Int8Array.Builder>(type, x => (sbyte)x);\n+            public void Visit(Int16Type type) => GenerateTestData<short, Int16Array, Int16Array.Builder>(type, x => (short)x);\n+            public void Visit(Int32Type type) => GenerateTestData<int, Int32Array, Int32Array.Builder>(type, x => x);\n+            public void Visit(Int64Type type) => GenerateTestData<long, Int64Array, Int64Array.Builder>(type, x => x);\n+            public void Visit(UInt8Type type) => GenerateTestData<byte, UInt8Array, UInt8Array.Builder>(type, x => (byte)x);\n+            public void Visit(UInt16Type type) => GenerateTestData<ushort, UInt16Array, UInt16Array.Builder>(type, x => (ushort)x);\n+            public void Visit(UInt32Type type) => GenerateTestData<uint, UInt32Array, UInt32Array.Builder>(type, x => (uint)x);\n+            public void Visit(UInt64Type type) => GenerateTestData<ulong, UInt64Array, UInt64Array.Builder>(type, x => (ulong)x);\n+            public void Visit(FloatType type) => GenerateTestData<float, FloatArray, FloatArray.Builder>(type, x => x);\n+            public void Visit(DoubleType type) => GenerateTestData<double, DoubleArray, DoubleArray.Builder>(type, x => x);\n+            public void Visit(Date32Type type) => GenerateTestData<DateTime, Date32Array, Date32Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n+            public void Visit(Date64Type type) => GenerateTestData<DateTime, Date64Array, Date64Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n\nReview comment:\n       The `TestData` class is dependent on `Length` and unable to generate flexible data for now.\r\n   For example, when a type is `Int32Type`, it can not create data started with a non-zero value like `[3,4,5]`.\r\n   On the other hand, we need to create that kind of data for testing array concatenation.\r\n   E.g. an expected concatenated array is `[0,1,2,3,4,5,6,7,null]` and base arrays are `[0,1,2]`, `[3,4,5]`, `[6.7.null]`.\r\n   \r\n   In order to reuse the `TestData` class, we need to modify it to be able to handle arbitrary data, but it might have a considerable impact.\r\n   For the above reasons, I didn't reuse(modify) it.\r\n   \r\n   I think it is better to modify the `TestData` class and use it in `ArrowArrayConcatenatorTests` in future.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T18:03:52.019+0000",
                    "updated": "2021-09-23T18:03:52.019+0000",
                    "started": "2021-09-23T18:03:52.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654652",
                    "issueId": "13396791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/worklog/654653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "HashidaTKS commented on a change in pull request #10990:\nURL: https://github.com/apache/arrow/pull/10990#discussion_r715027097\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowArrayConcatenatorTests.cs\n##########\n@@ -0,0 +1,383 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Apache.Arrow.Types;\n+using Xunit;\n+\n+namespace Apache.Arrow.Tests\n+{\n+    public class ArrowArrayConcatenatorTests\n+    {\n+        [Fact]\n+        public void TestStandardCases()\n+        {\n+            foreach ((List<IArrowArray> testTargetArrayList, IArrowArray expectedArray) in GenerateTestData())\n+            {\n+                IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(testTargetArrayList);\n+                ArrowReaderVerifier.CompareArrays(expectedArray, actualArray);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestNullOrEmpty()\n+        {\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(null));\n+            Assert.Null(ArrowArrayConcatenator.Concatenate(new List<IArrowArray>()));\n+        }\n+\n+        [Fact]\n+        public void TestSingleElement()\n+        {\n+            Int32Array array = new Int32Array.Builder().Append(1).Append(2).Build();\n+            IArrowArray actualArray = ArrowArrayConcatenator.Concatenate(new [] { array });\n+            ArrowReaderVerifier.CompareArrays(array, actualArray);\n+        }\n+\n+        private static IEnumerable<Tuple<List<IArrowArray>, IArrowArray>> GenerateTestData()\n+        {\n+            var targetTypes = new List<IArrowType>() {\n+                    BooleanType.Default,\n+                    Int8Type.Default,\n+                    Int16Type.Default,\n+                    Int32Type.Default,\n+                    Int64Type.Default,\n+                    UInt8Type.Default,\n+                    UInt16Type.Default,\n+                    UInt32Type.Default,\n+                    UInt64Type.Default,\n+                    FloatType.Default,\n+                    DoubleType.Default,\n+                    BinaryType.Default,\n+                    StringType.Default,\n+                    Date32Type.Default,\n+                    Date64Type.Default,\n+                    TimestampType.Default,\n+                    new Decimal128Type(14, 10),\n+                    new Decimal256Type(14,10),\n+                    new ListType(Int64Type.Default),\n+                    new StructType(new List<Field>{\n+                        new Field.Builder().Name(\"Strings\").DataType(StringType.Default).Nullable(true).Build(),\n+                        new Field.Builder().Name(\"Ints\").DataType(Int32Type.Default).Nullable(true).Build()\n+                    }),\n+                };\n+\n+            foreach (IArrowType type in targetTypes)\n+            {\n+                var creator = new TestDataGenerator();\n+                type.Accept(creator);\n+                yield return Tuple.Create(creator.TestTargetArrayList, creator.ExpectedArray);\n+            }\n+        }\n+\n+        private class TestDataGenerator :\n+            IArrowTypeVisitor<BooleanType>,\n+            IArrowTypeVisitor<Int8Type>,\n+            IArrowTypeVisitor<Int16Type>,\n+            IArrowTypeVisitor<Int32Type>,\n+            IArrowTypeVisitor<Int64Type>,\n+            IArrowTypeVisitor<UInt8Type>,\n+            IArrowTypeVisitor<UInt16Type>,\n+            IArrowTypeVisitor<UInt32Type>,\n+            IArrowTypeVisitor<UInt64Type>,\n+            IArrowTypeVisitor<FloatType>,\n+            IArrowTypeVisitor<DoubleType>,\n+            IArrowTypeVisitor<BinaryType>,\n+            IArrowTypeVisitor<StringType>,\n+            IArrowTypeVisitor<Decimal128Type>,\n+            IArrowTypeVisitor<Decimal256Type>,\n+            IArrowTypeVisitor<Date32Type>,\n+            IArrowTypeVisitor<Date64Type>,\n+            IArrowTypeVisitor<TimestampType>,\n+            IArrowTypeVisitor<ListType>,\n+            IArrowTypeVisitor<StructType>\n+        {\n+\n+            private List<List<int?>> _baseData;\n+\n+            private int _baseDataListCount;\n+\n+            private int _baseDataTotalElementCount;\n+\n+            public List<IArrowArray> TestTargetArrayList { get; }\n+            public IArrowArray ExpectedArray { get; private set; }\n+\n+            public TestDataGenerator()\n+            {\n+                _baseData = new List<List<int?>> {\n+                    new List<int?> { 1, 2, 3 },\n+                    new List<int?> { 100, 101, null },\n+                    new List<int?> { 11, null, 12 },\n+                };\n+\n+                _baseDataListCount = _baseData.Count;\n+                _baseDataTotalElementCount = _baseData.Sum(_ => _.Count);\n+                TestTargetArrayList = new List<IArrowArray>(_baseDataListCount);\n+            }\n+\n+            public void Visit(BooleanType type) => GenerateTestData<bool, BooleanArray, BooleanArray.Builder>(type, x => x % 2 == 0);\n+            public void Visit(Int8Type type) => GenerateTestData<sbyte, Int8Array, Int8Array.Builder>(type, x => (sbyte)x);\n+            public void Visit(Int16Type type) => GenerateTestData<short, Int16Array, Int16Array.Builder>(type, x => (short)x);\n+            public void Visit(Int32Type type) => GenerateTestData<int, Int32Array, Int32Array.Builder>(type, x => x);\n+            public void Visit(Int64Type type) => GenerateTestData<long, Int64Array, Int64Array.Builder>(type, x => x);\n+            public void Visit(UInt8Type type) => GenerateTestData<byte, UInt8Array, UInt8Array.Builder>(type, x => (byte)x);\n+            public void Visit(UInt16Type type) => GenerateTestData<ushort, UInt16Array, UInt16Array.Builder>(type, x => (ushort)x);\n+            public void Visit(UInt32Type type) => GenerateTestData<uint, UInt32Array, UInt32Array.Builder>(type, x => (uint)x);\n+            public void Visit(UInt64Type type) => GenerateTestData<ulong, UInt64Array, UInt64Array.Builder>(type, x => (ulong)x);\n+            public void Visit(FloatType type) => GenerateTestData<float, FloatArray, FloatArray.Builder>(type, x => x);\n+            public void Visit(DoubleType type) => GenerateTestData<double, DoubleArray, DoubleArray.Builder>(type, x => x);\n+            public void Visit(Date32Type type) => GenerateTestData<DateTime, Date32Array, Date32Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n+            public void Visit(Date64Type type) => GenerateTestData<DateTime, Date64Array, Date64Array.Builder>(type, x => DateTime.MinValue.AddDays(x));\n\nReview comment:\n       The `TestData` class is dependent on `Length` and unable to generate flexible data for now.\r\n   For example, when a type is `Int32Type`, it can not create data starts with a non-zero value like `[3,4,5]`.\r\n   On the other hand, we need to create that kind of data for testing array concatenation.\r\n   E.g. an expected concatenated array is `[0,1,2,3,4,5,6,7,null]` and base arrays are `[0,1,2]`, `[3,4,5]`, `[6.7.null]`.\r\n   \r\n   In order to reuse the `TestData` class, we need to modify it to be able to handle arbitrary data, but it might have a considerable impact.\r\n   For the above reasons, I didn't reuse(modify) it.\r\n   \r\n   I think it is better to modify the `TestData` class and use it in `ArrowArrayConcatenatorTests` in future.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T18:06:31.882+0000",
                    "updated": "2021-09-23T18:06:31.882+0000",
                    "started": "2021-09-23T18:06:31.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654653",
                    "issueId": "13396791"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@550f9d9b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@411b4290[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@729b258b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@690ff68a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d858a69[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1ac2e306[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@315e3aa8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@27f331af[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@464431fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4b1320e7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bd8d857[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3598eeca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 29 14:33:46 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-29T14:33:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13704/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-08-23T23:58:54.000+0000",
        "updated": "2021-09-30T00:27:42.000+0000",
        "timeoriginalestimate": null,
        "description": "The C# implementation does not yet support delta dictionaries.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Add support for reading streaming format delta dictionaries",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13396791/comment/17422165",
                    "id": "17422165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Issue resolved by pull request 10990\n[https://github.com/apache/arrow/pull/10990]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2021-09-29T14:33:46.976+0000",
                    "updated": "2021-09-29T14:33:46.976+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0u67c:",
        "customfield_12314139": null
    }
}