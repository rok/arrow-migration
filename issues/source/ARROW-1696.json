{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111044",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111044",
    "key": "ARROW-1696",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1696/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111044/worklog/154319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2762: ARROW-1696: [C++] Add (de)compression benchmarks\nURL: https://github.com/apache/arrow/pull/2762\n \n \n   The benchmarks don't use realistic data, so the numbers should be taken with a pinch of salt.\r\n   \r\n   Example output:\r\n   ```\r\n   ----------------------------------------------------------------------------------------------------------------\r\n   Benchmark                                                         Time           CPU Iterations UserCounters...\r\n   ----------------------------------------------------------------------------------------------------------------\r\n   BM_StreamingCompression<Compression::GZIP>/repeats:1            265 ms        265 ms          3 ratio=6.95171   30.2214MB/s\r\n   BM_StreamingCompression<Compression::BROTLI>/repeats:1          441 ms        441 ms          2 ratio=8.31298   18.1418MB/s\r\n   BM_StreamingCompression<Compression::ZSTD>/repeats:1             27 ms         27 ms         26 ratio=7.07352   296.484MB/s\r\n   BM_StreamingCompression<Compression::LZ4>/repeats:1              19 ms         19 ms         36 ratio=3.52726   417.971MB/s\r\n   BM_StreamingDecompression<Compression::GZIP>/repeats:1           21 ms         21 ms         33 ratio=6.95171   379.959MB/s\r\n   BM_StreamingDecompression<Compression::BROTLI>/repeats:1         14 ms         14 ms         50 ratio=8.31298   579.888MB/s\r\n   BM_StreamingDecompression<Compression::ZSTD>/repeats:1           13 ms         13 ms         56 ratio=7.07352   634.179MB/s\r\n   BM_StreamingDecompression<Compression::LZ4>/repeats:1             4 ms          4 ms        175 ratio=3.52726   1.95598GB/s\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-15T14:38:25.510+0000",
                    "updated": "2018-10-15T14:38:25.510+0000",
                    "started": "2018-10-15T14:38:25.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154319",
                    "issueId": "13111044"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111044/worklog/155248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2762: ARROW-1696: [C++] Add (de)compression benchmarks\nURL: https://github.com/apache/arrow/pull/2762\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex c8f7316145..69e18a6850 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -95,6 +95,7 @@ ADD_ARROW_TEST(lazy-test)\n ADD_ARROW_TEST(logging-test)\n \n ADD_ARROW_BENCHMARK(bit-util-benchmark)\n+ADD_ARROW_BENCHMARK(compression-benchmark)\n ADD_ARROW_BENCHMARK(decimal-benchmark)\n ADD_ARROW_BENCHMARK(lazy-benchmark)\n ADD_ARROW_BENCHMARK(number-parsing-benchmark)\ndiff --git a/cpp/src/arrow/util/compression-benchmark.cc b/cpp/src/arrow/util/compression-benchmark.cc\nnew file mode 100644\nindex 0000000000..715c2571a4\n--- /dev/null\n+++ b/cpp/src/arrow/util/compression-benchmark.cc\n@@ -0,0 +1,210 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <random>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/compression.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+std::vector<uint8_t> MakeCompressibleData(int data_size) {\n+  // XXX This isn't a real-world corpus so doesn't really represent the\n+  // comparative qualities of the algorithms\n+\n+  // First make highly compressible data\n+  std::string base_data =\n+      \"Apache Arrow is a cross-language development platform for in-memory data\";\n+  int nrepeats = static_cast<int>(1 + data_size / base_data.size());\n+\n+  std::vector<uint8_t> data(base_data.size() * nrepeats);\n+  for (int i = 0; i < nrepeats; ++i) {\n+    std::memcpy(data.data() + i * base_data.size(), base_data.data(), base_data.size());\n+  }\n+  data.resize(data_size);\n+\n+  // Then randomly mutate some bytes so as to make things harder\n+  std::mt19937 engine(42);\n+  std::exponential_distribution<> offsets(0.05);\n+  std::uniform_int_distribution<> values(0, 255);\n+\n+  int64_t pos = 0;\n+  while (pos < data_size) {\n+    data[pos] = static_cast<uint8_t>(values(engine));\n+    pos += static_cast<int64_t>(offsets(engine));\n+  }\n+\n+  return data;\n+}\n+\n+int64_t StreamingCompress(Codec* codec, const std::vector<uint8_t>& data,\n+                          std::vector<uint8_t>* compressed_data = nullptr) {\n+  if (compressed_data != nullptr) {\n+    compressed_data->clear();\n+    compressed_data->shrink_to_fit();\n+  }\n+  std::shared_ptr<Compressor> compressor;\n+  ABORT_NOT_OK(codec->MakeCompressor(&compressor));\n+\n+  const uint8_t* input = data.data();\n+  int64_t input_len = data.size();\n+  int64_t compressed_size = 0;\n+\n+  std::vector<uint8_t> output_buffer(1 << 20);  // 1 MB\n+\n+  while (input_len > 0) {\n+    int64_t bytes_read = 0, bytes_written = 0;\n+    ABORT_NOT_OK(compressor->Compress(input_len, input, output_buffer.size(),\n+                                      output_buffer.data(), &bytes_read, &bytes_written));\n+    input += bytes_read;\n+    input_len -= bytes_read;\n+    compressed_size += bytes_written;\n+    if (compressed_data != nullptr && bytes_written > 0) {\n+      compressed_data->resize(compressed_data->size() + bytes_written);\n+      memcpy(compressed_data->data() + compressed_data->size() - bytes_written,\n+             output_buffer.data(), bytes_written);\n+    }\n+    if (bytes_read == 0) {\n+      // Need to enlarge output buffer\n+      output_buffer.resize(output_buffer.size() * 2);\n+    }\n+  }\n+  while (true) {\n+    bool should_retry;\n+    int64_t bytes_written;\n+    ABORT_NOT_OK(compressor->End(output_buffer.size(), output_buffer.data(),\n+                                 &bytes_written, &should_retry));\n+    compressed_size += bytes_written;\n+    if (compressed_data != nullptr && bytes_written > 0) {\n+      compressed_data->resize(compressed_data->size() + bytes_written);\n+      memcpy(compressed_data->data() + compressed_data->size() - bytes_written,\n+             output_buffer.data(), bytes_written);\n+    }\n+    if (should_retry) {\n+      // Need to enlarge output buffer\n+      output_buffer.resize(output_buffer.size() * 2);\n+    } else {\n+      break;\n+    }\n+  }\n+  return compressed_size;\n+}\n+\n+static void BM_StreamingCompression(\n+    Compression::type compression, const std::vector<uint8_t>& data,\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  std::unique_ptr<Codec> codec;\n+  ABORT_NOT_OK(Codec::Create(compression, &codec));\n+\n+  while (state.KeepRunning()) {\n+    int64_t compressed_size = StreamingCompress(codec.get(), data);\n+    state.counters[\"ratio\"] =\n+        static_cast<double>(data.size()) / static_cast<double>(compressed_size);\n+  }\n+  state.SetBytesProcessed(state.iterations() * data.size());\n+}\n+\n+template <Compression::type COMPRESSION>\n+static void BM_StreamingCompression(\n+    benchmark::State& state) {                        // NOLINT non-const reference\n+  auto data = MakeCompressibleData(8 * 1024 * 1024);  // 8 MB\n+\n+  BM_StreamingCompression(COMPRESSION, data, state);\n+}\n+\n+static void BM_StreamingDecompression(\n+    Compression::type compression, const std::vector<uint8_t>& data,\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  std::unique_ptr<Codec> codec;\n+  ABORT_NOT_OK(Codec::Create(compression, &codec));\n+\n+  std::vector<uint8_t> compressed_data;\n+  ARROW_UNUSED(StreamingCompress(codec.get(), data, &compressed_data));\n+  state.counters[\"ratio\"] =\n+      static_cast<double>(data.size()) / static_cast<double>(compressed_data.size());\n+\n+  while (state.KeepRunning()) {\n+    std::shared_ptr<Decompressor> decompressor;\n+    ABORT_NOT_OK(codec->MakeDecompressor(&decompressor));\n+\n+    const uint8_t* input = compressed_data.data();\n+    int64_t input_len = compressed_data.size();\n+    int64_t decompressed_size = 0;\n+\n+    std::vector<uint8_t> output_buffer(1 << 20);  // 1 MB\n+    while (!decompressor->IsFinished()) {\n+      int64_t bytes_read, bytes_written;\n+      bool need_more_output;\n+      ABORT_NOT_OK(decompressor->Decompress(input_len, input, output_buffer.size(),\n+                                            output_buffer.data(), &bytes_read,\n+                                            &bytes_written, &need_more_output));\n+      input += bytes_read;\n+      input_len -= bytes_read;\n+      decompressed_size += bytes_written;\n+      if (need_more_output) {\n+        // Enlarge output buffer\n+        output_buffer.resize(output_buffer.size() * 2);\n+      }\n+    }\n+    ARROW_CHECK(decompressed_size == static_cast<int64_t>(data.size()));\n+  }\n+  state.SetBytesProcessed(state.iterations() * data.size());\n+}\n+\n+template <Compression::type COMPRESSION>\n+static void BM_StreamingDecompression(\n+    benchmark::State& state) {                        // NOLINT non-const reference\n+  auto data = MakeCompressibleData(8 * 1024 * 1024);  // 8 MB\n+\n+  BM_StreamingDecompression(COMPRESSION, data, state);\n+}\n+\n+BENCHMARK_TEMPLATE(BM_StreamingCompression, Compression::GZIP)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingCompression, Compression::BROTLI)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingCompression, Compression::ZSTD)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingCompression, Compression::LZ4)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+\n+BENCHMARK_TEMPLATE(BM_StreamingDecompression, Compression::GZIP)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingDecompression, Compression::BROTLI)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingDecompression, Compression::ZSTD)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+BENCHMARK_TEMPLATE(BM_StreamingDecompression, Compression::LZ4)\n+    ->Unit(benchmark::kMillisecond)\n+    ->Repetitions(1);\n+\n+}  // namespace util\n+}  // namespace arrow\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-17T02:29:11.134+0000",
                    "updated": "2018-10-17T02:29:11.134+0000",
                    "started": "2018-10-17T02:29:11.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155248",
                    "issueId": "13111044"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1430896d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@527a5034[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@178fcc40[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@17f4c575[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f8abb28[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3a7aabbf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53fe9d7c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6210351b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2809818a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4741e067[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6073908e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a8d976[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 17 02:28:59 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-17T02:28:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1696/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2017-10-20T17:28:02.000+0000",
        "updated": "2018-10-17T02:29:11.000+0000",
        "timeoriginalestimate": null,
        "description": "This will also help users validate in release builds that the compression libraries have been built with the appropriate optimization levels, etc.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add codec benchmarks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111044/comment/16652869",
                    "id": "16652869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2762\n[https://github.com/apache/arrow/pull/2762]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-17T02:28:59.243+0000",
                    "updated": "2018-10-17T02:28:59.243+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lj1b:",
        "customfield_12314139": null
    }
}