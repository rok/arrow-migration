{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13255661",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661",
    "key": "ARROW-6494",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12572105",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12572105",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13262678",
                    "key": "ARROW-6906",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13262678",
                    "fields": {
                        "summary": "[C++] Use re2 instead of std::regex in Dataset partitionschemes implementation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6494/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 47,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/315269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443\n \n \n   Implements SimplePartitonScheme (ignores paths in favor of a preconfigured partition expression) and HivePartitionScheme (which parses paths containing embedded equality expressions)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T19:34:39.647+0000",
                    "updated": "2019-09-19T19:34:39.647+0000",
                    "started": "2019-09-19T19:34:39.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315269",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329126369\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition_test.cc\n ##########\n @@ -0,0 +1,137 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/dataset/api.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/filesystem/localfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+class TestPartitionScheme : public ::testing::Test {\n+ public:\n+  void AssertParseError(const std::string& path) {\n+    std::string unconsumed;\n+    std::shared_ptr<Expression> ignored;\n+    ASSERT_RAISES(Invalid, scheme_->Parse(path, &unconsumed, &ignored));\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed,\n+                   std::shared_ptr<Expression> expected) {\n+    for (std::string suffix : {\"\", \"/dat.parquet\"}) {\n+      std::string unconsumed;\n+      std::shared_ptr<Expression> parsed;\n+      ASSERT_OK(scheme_->Parse(expected_consumed + expected_unconsumed + suffix,\n+                               &unconsumed, &parsed));\n+\n+      ASSERT_NE(parsed, nullptr);\n+      ASSERT_EQ(expected_unconsumed + suffix, unconsumed);\n+      ASSERT_TRUE(parsed->Equals(*expected)) << parsed->ToString() << \"\\n\"\n+                                             << expected->ToString();\n+    }\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed, const Expression& expected) {\n+    AssertParse(expected_consumed, expected_unconsumed, expected.Copy());\n+  }\n+\n+ protected:\n+  std::shared_ptr<PartitionScheme> scheme_;\n+};\n+\n+TEST_F(TestPartitionScheme, Simple) {\n+  auto expr = equal(field_ref(\"alpha\"), scalar<int16_t>(3));\n+  scheme_ = std::make_shared<SimplePartitionScheme>(expr);\n+  AssertParse(\"\", \"/hello/world\", expr);\n+}\n+\n+TEST_F(TestPartitionScheme, Hive) {\n+  scheme_ = std::make_shared<HivePartitionScheme>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}));\n+\n+  AssertParse(\"/alpha=0/beta=3.25\", \"\", \"alpha\"_ == int32_t(0) and \"beta\"_ == 3.25f);\n+  AssertParse(\"/beta=3.25/alpha=0\", \"\", \"beta\"_ == 3.25f and \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/alpha=0\", \"\", \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/beta=3.25\", \"\", \"beta\"_ == 3.25f);\n+\n+  AssertParse(\"/alpha=0\", \"/unexpected/beta=3.25\", \"alpha\"_ == int32_t(0));\n \n Review comment:\n   @nealrichardson Read as: given schema `alpha:int, beta:float`, the path `/alpha=0/unexpected/beta/3.25` will not be parsed beyond `/unexpected`, causing the beta condition to not be found.\r\n   \r\n   Is this what you would expect?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T15:24:47.517+0000",
                    "updated": "2019-09-27T15:24:47.517+0000",
                    "started": "2019-09-27T15:24:47.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319611",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5443: ARROW-6494: [C++] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329130628\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition_test.cc\n ##########\n @@ -0,0 +1,137 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/dataset/api.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/filesystem/localfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+class TestPartitionScheme : public ::testing::Test {\n+ public:\n+  void AssertParseError(const std::string& path) {\n+    std::string unconsumed;\n+    std::shared_ptr<Expression> ignored;\n+    ASSERT_RAISES(Invalid, scheme_->Parse(path, &unconsumed, &ignored));\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed,\n+                   std::shared_ptr<Expression> expected) {\n+    for (std::string suffix : {\"\", \"/dat.parquet\"}) {\n+      std::string unconsumed;\n+      std::shared_ptr<Expression> parsed;\n+      ASSERT_OK(scheme_->Parse(expected_consumed + expected_unconsumed + suffix,\n+                               &unconsumed, &parsed));\n+\n+      ASSERT_NE(parsed, nullptr);\n+      ASSERT_EQ(expected_unconsumed + suffix, unconsumed);\n+      ASSERT_TRUE(parsed->Equals(*expected)) << parsed->ToString() << \"\\n\"\n+                                             << expected->ToString();\n+    }\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed, const Expression& expected) {\n+    AssertParse(expected_consumed, expected_unconsumed, expected.Copy());\n+  }\n+\n+ protected:\n+  std::shared_ptr<PartitionScheme> scheme_;\n+};\n+\n+TEST_F(TestPartitionScheme, Simple) {\n+  auto expr = equal(field_ref(\"alpha\"), scalar<int16_t>(3));\n+  scheme_ = std::make_shared<SimplePartitionScheme>(expr);\n+  AssertParse(\"\", \"/hello/world\", expr);\n+}\n+\n+TEST_F(TestPartitionScheme, Hive) {\n+  scheme_ = std::make_shared<HivePartitionScheme>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}));\n+\n+  AssertParse(\"/alpha=0/beta=3.25\", \"\", \"alpha\"_ == int32_t(0) and \"beta\"_ == 3.25f);\n+  AssertParse(\"/beta=3.25/alpha=0\", \"\", \"beta\"_ == 3.25f and \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/alpha=0\", \"\", \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/beta=3.25\", \"\", \"beta\"_ == 3.25f);\n+\n+  AssertParse(\"/alpha=0\", \"/unexpected/beta=3.25\", \"alpha\"_ == int32_t(0));\n \n Review comment:\n   If this is Hive-style, I'll defer to whatever the Hive spec says, or whatever the consensus is among software that implements Hive-style partitioning.\r\n   \r\n   With generic regular-expression parsing of partitions from file paths, you should be able to define an expression that allows \"unexpected\" path segments.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T15:32:45.512+0000",
                    "updated": "2019-09-27T15:32:45.512+0000",
                    "started": "2019-09-27T15:32:45.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319617",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r328615601\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n Review comment:\n   Can't we just return a nullptr and avoid this function?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:55.853+0000",
                    "updated": "2019-09-27T16:53:55.853+0000",
                    "started": "2019-09-27T16:53:55.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319666",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329155510\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition_test.cc\n ##########\n @@ -0,0 +1,137 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/dataset/api.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/filesystem/localfs.h\"\n+#include \"arrow/filesystem/path_util.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+class TestPartitionScheme : public ::testing::Test {\n+ public:\n+  void AssertParseError(const std::string& path) {\n+    std::string unconsumed;\n+    std::shared_ptr<Expression> ignored;\n+    ASSERT_RAISES(Invalid, scheme_->Parse(path, &unconsumed, &ignored));\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed,\n+                   std::shared_ptr<Expression> expected) {\n+    for (std::string suffix : {\"\", \"/dat.parquet\"}) {\n+      std::string unconsumed;\n+      std::shared_ptr<Expression> parsed;\n+      ASSERT_OK(scheme_->Parse(expected_consumed + expected_unconsumed + suffix,\n+                               &unconsumed, &parsed));\n+\n+      ASSERT_NE(parsed, nullptr);\n+      ASSERT_EQ(expected_unconsumed + suffix, unconsumed);\n+      ASSERT_TRUE(parsed->Equals(*expected)) << parsed->ToString() << \"\\n\"\n+                                             << expected->ToString();\n+    }\n+  }\n+\n+  void AssertParse(const std::string& expected_consumed,\n+                   const std::string& expected_unconsumed, const Expression& expected) {\n+    AssertParse(expected_consumed, expected_unconsumed, expected.Copy());\n+  }\n+\n+ protected:\n+  std::shared_ptr<PartitionScheme> scheme_;\n+};\n+\n+TEST_F(TestPartitionScheme, Simple) {\n+  auto expr = equal(field_ref(\"alpha\"), scalar<int16_t>(3));\n+  scheme_ = std::make_shared<SimplePartitionScheme>(expr);\n+  AssertParse(\"\", \"/hello/world\", expr);\n+}\n+\n+TEST_F(TestPartitionScheme, Hive) {\n+  scheme_ = std::make_shared<HivePartitionScheme>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}));\n+\n+  AssertParse(\"/alpha=0/beta=3.25\", \"\", \"alpha\"_ == int32_t(0) and \"beta\"_ == 3.25f);\n+  AssertParse(\"/beta=3.25/alpha=0\", \"\", \"beta\"_ == 3.25f and \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/alpha=0\", \"\", \"alpha\"_ == int32_t(0));\n+  AssertParse(\"/beta=3.25\", \"\", \"beta\"_ == 3.25f);\n+\n+  AssertParse(\"/alpha=0\", \"/unexpected/beta=3.25\", \"alpha\"_ == int32_t(0));\n \n Review comment:\n   See my comments in partition.h on `PartitionScheme::Parse`. IMHO, exposing a partial parser and unconsumed strings is too complex for few benefits. For complex usage, the user should be able to provide a custom partition scheme, likely backed by an implementation (R/Python) language lambda.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.105+0000",
                    "updated": "2019-09-27T16:53:56.105+0000",
                    "started": "2019-09-27T16:53:56.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319667",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r328615906\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n-  virtual Status ParseKey(const std::string& path, PartitionKeyData* out) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  virtual Status Parse(util::string_view path,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+};\n+\n+/// \\brief Trivial partition scheme which does not actually parse paths.\n+/// Instead it returns an expression provided on construction whatever the path.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n+ public:\n+  explicit SimplePartitionScheme(std::shared_ptr<Expression> expr)\n+      : partition_expression_(std::move(expr)) {}\n+\n+  std::string name() const override { return \"simple_partition_scheme\"; }\n+\n+  bool CanParse(util::string_view path) const override { return true; }\n+\n+  Status Parse(util::string_view path, std::shared_ptr<Expression>* out) const override {\n+    *out = partition_expression_;\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Expression> partition_expression_;\n \n Review comment:\n   Just call it `expression`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.155+0000",
                    "updated": "2019-09-27T16:53:56.155+0000",
                    "started": "2019-09-27T16:53:56.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319668",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329162673\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -108,10 +135,25 @@ class ARROW_DS_EXPORT PartitionScheme {\n /// the form $key=$value in directory names\n class ARROW_DS_EXPORT HivePartitionScheme : public PartitionScheme {\n  public:\n-  /// \\brief Return true if path\n-  bool PathMatchesScheme(const std::string& path) const override;\n+  explicit HivePartitionScheme(std::shared_ptr<Schema> schema)\n+      : schema_(std::move(schema)) {}\n+\n+  std::string name() const override { return \"hive_partition_scheme\"; }\n \n-  virtual Status ParseKey(const std::string& path, PartitionKeyData* out) const = 0;\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+  std::vector<UnconvertedKey> GetUnconvertedKeys(const std::string& path,\n+                                                 std::string* unconsumed) const;\n+\n+ protected:\n+  /// XXX do we have a schema when constructing partition schemes?\n \n Review comment:\n   The user is usually aware of the types and names of the keys. It should be passed at construction time. If none is passed, we should default to string types.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.158+0000",
                    "updated": "2019-09-27T16:53:56.158+0000",
                    "started": "2019-09-27T16:53:56.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319669",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r328614959\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n-  virtual Status ParseKey(const std::string& path, PartitionKeyData* out) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  virtual Status Parse(util::string_view path,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+};\n+\n+/// \\brief Trivial partition scheme which does not actually parse paths.\n+/// Instead it returns an expression provided on construction whatever the path.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n \n Review comment:\n   In this case, I'd say \"ConstantPartitionScheme\" is probably a better name.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.171+0000",
                    "updated": "2019-09-27T16:53:56.171+0000",
                    "started": "2019-09-27T16:53:56.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319671",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329158220\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -715,34 +707,46 @@ std::string OperatorName(compute::CompareOperator op) {\n   return \"\";\n }\n \n+// TODO(bkietz) extract this to Scalar::ToString()\n+struct ScalarExpressionToString {\n+  Status Visit(const BooleanType&) {\n+    return Finish(CastValue<BooleanType>().value ? \"true\" : \"false\");\n+  }\n+\n+  template <typename T>\n+  enable_if_number<T, Status> Visit(const T&) {\n+    return Finish(std::to_string(CastValue<T>().value));\n+  }\n+\n+  Status Visit(const StringType&) {\n+    return Finish(CastValue<StringType>().value->ToString());\n+  }\n+\n+  Status Visit(const DataType&) { return Finish(\"TODO(bkietz)\"); }\n \n Review comment:\n   Return `Status::NoImplemented`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.171+0000",
                    "updated": "2019-09-27T16:53:56.171+0000",
                    "started": "2019-09-27T16:53:56.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319670",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329158728\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -855,11 +859,36 @@ std::shared_ptr<AndExpression> and_(std::shared_ptr<Expression> lhs,\n   return std::make_shared<AndExpression>(std::move(lhs), std::move(rhs));\n }\n \n+std::shared_ptr<Expression> and_(\n+    std::vector<std::shared_ptr<Expression>> subexpressions) {\n+  if (subexpressions.size() == 0) {\n+    return scalar(true);\n+  }\n+  if (subexpressions.size() == 1) {\n+    return std::move(subexpressions[0]);\n+  }\n+  auto back = std::move(subexpressions.back());\n+  subexpressions.pop_back();\n+  return and_(and_(std::move(subexpressions)), std::move(back));\n \n Review comment:\n   Avoid recursion if possible.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.176+0000",
                    "updated": "2019-09-27T16:53:56.176+0000",
                    "started": "2019-09-27T16:53:56.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319672",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329161334\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -18,87 +18,114 @@\n #pragma once\n \n #include <memory>\n+#include <regex>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n #include \"arrow/dataset/dataset.h\"\n+#include \"arrow/dataset/filter.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n \n namespace arrow {\n namespace dataset {\n \n // ----------------------------------------------------------------------\n-// Computing partition values\n-\n-// TODO(wesm): API for computing partition keys derived from raw\n-// values. For example, year(value) or hash_function(value) instead of\n-// simply value, so a dataset with a timestamp column might group all\n-// data with year 2009 in the same partition\n-\n-// /// \\brief\n-// class ScalarTransform {\n-//  public:\n-//   virtual Status Transform(const std::shared_ptr<Scalar>& input,\n-//                            std::shared_ptr<Scalar>* output) const = 0;\n-// };\n-\n-// class PartitionField {\n-//  public:\n-\n-//  private:\n-//   std::string field_name_;\n-// };\n-\n-// ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n+// Partition schemes\n \n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n+struct ARROW_DS_EXPORT UnconvertedKey {\n+  std::string name, value;\n };\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Helper function for the common case of combining partition information\n+/// consisting of equality expressions into a single conjunction expression\n+ARROW_DS_EXPORT\n+Status ConvertPartitionKeys(const std::vector<UnconvertedKey>& keys, const Schema& schema,\n+                            std::shared_ptr<Expression>* out);\n+\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n+///\n+/// Paths are consumed from left to right. Paths must be relative to\n+/// the root of a partition; path prefixes must be removed before passing\n+/// the path to a scheme for parsing.\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// \\param[in] path the partition identifier to parse\n+  /// \\param[out] unconsumed a suffix of path which was not consumed\n+  /// \\param[out] out the parsed expression\n+  virtual Status Parse(const std::string& path, std::string* unconsumed,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// Helper for use by a root PartitionScheme; consumes whole path.\n+  Status Parse(const std::string& path, std::shared_ptr<Expression>* out) const;\n+};\n+\n+/// \\brief Trivial partition scheme which only consumes a specified prefix (empty by\n+/// default) from a path, yielding an expression provided on construction.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n+ public:\n+  explicit SimplePartitionScheme(std::shared_ptr<Expression> expr,\n+                                 std::string ignored = \"\")\n+      : partition_expression_(std::move(expr)), ignored_(std::move(ignored)) {}\n+\n+  std::string name() const override { return \"simple_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ private:\n+  std::shared_ptr<Expression> partition_expression_;\n+  std::string ignored_;\n+};\n+\n+/// \\brief Combine partition schemes\n+class ARROW_DS_EXPORT ChainPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit ChainPartitionScheme(std::vector<std::unique_ptr<PartitionScheme>> schemes)\n+      : schemes_(std::move(schemes)) {}\n+\n+  std::string name() const override { return \"chain_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ protected:\n+  std::vector<std::unique_ptr<PartitionScheme>> schemes_;\n+};\n+\n+/// \\brief Parse a single field from a single path segment\n+class ARROW_DS_EXPORT FieldPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit FieldPartitionScheme(std::shared_ptr<Field> field)\n \n Review comment:\n   I know chain exists, but why not also take a schema and consume paths?\r\n   \r\n   ```f = FieldPartitionScheme(schema({field(\"year\", int64()), field(\"month\", int64()), field(\"day\", int64())}))\r\n   f.Parse(\"/2017\") = { \"year\": 2017 }\r\n   f.Parse(\"/2017/05\") = { \"year\": 2017, \"month\": 05 }\r\n   f.Parse(\"/2017/05/12\") = { \"year\": 2017, \"month\": 05, \"day\": 12}\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.176+0000",
                    "updated": "2019-09-27T16:53:56.176+0000",
                    "started": "2019-09-27T16:53:56.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319673",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329157373\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -18,87 +18,114 @@\n #pragma once\n \n #include <memory>\n+#include <regex>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n #include \"arrow/dataset/dataset.h\"\n+#include \"arrow/dataset/filter.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n \n namespace arrow {\n namespace dataset {\n \n // ----------------------------------------------------------------------\n-// Computing partition values\n-\n-// TODO(wesm): API for computing partition keys derived from raw\n-// values. For example, year(value) or hash_function(value) instead of\n-// simply value, so a dataset with a timestamp column might group all\n-// data with year 2009 in the same partition\n-\n-// /// \\brief\n-// class ScalarTransform {\n-//  public:\n-//   virtual Status Transform(const std::shared_ptr<Scalar>& input,\n-//                            std::shared_ptr<Scalar>* output) const = 0;\n-// };\n-\n-// class PartitionField {\n-//  public:\n-\n-//  private:\n-//   std::string field_name_;\n-// };\n-\n-// ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n+// Partition schemes\n \n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n+struct ARROW_DS_EXPORT UnconvertedKey {\n+  std::string name, value;\n };\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Helper function for the common case of combining partition information\n+/// consisting of equality expressions into a single conjunction expression\n+ARROW_DS_EXPORT\n+Status ConvertPartitionKeys(const std::vector<UnconvertedKey>& keys, const Schema& schema,\n+                            std::shared_ptr<Expression>* out);\n+\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n+///\n+/// Paths are consumed from left to right. Paths must be relative to\n+/// the root of a partition; path prefixes must be removed before passing\n+/// the path to a scheme for parsing.\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// \\param[in] path the partition identifier to parse\n+  /// \\param[out] unconsumed a suffix of path which was not consumed\n+  /// \\param[out] out the parsed expression\n+  virtual Status Parse(const std::string& path, std::string* unconsumed,\n \n Review comment:\n   I recommend that we drop the `std::string* unconsumed` parameter from the `PartitionScheme::Parse` signature. The current draft requires that PartitionScheme stops and indicate when they can't consume a part of the path (string). I don't think this is needed, i.e. we should stick to `Parse(string) -> expression`.\r\n   \r\n   My observations are the following:\r\n   \r\n   1. Users should be exposed the simplest interface.\r\n   2. Users will use 0 or 1 partition scheme, rarely will they have more than 1 (for a single data source). This make chaining a low priority item.\r\n   3. It's debatable if `HivePartitionScheme.Parse(\"/a=1/b=2/blah/c=3\")` returns `{a: 1, b:2, c:3}` or `{a: 1: b:2}`. Impala/Hive doc is not clear on this, I suspect it's impossible. We can expose a flag in the constructor that dictate the desired behaviour.\r\n   4. The natural expectation is that chaining would just concatenate their extracted partitions from the full path each time, not consume the leftover of the previous scheme. If the user wants a complex scheme, he can implement one.\r\n   ```\r\n   partitions = map(schemes, lambda s: s.Parse(path))\r\n   return fold(partitions, expr(true), lambda e_1, e_2: e_1 && e_2)\r\n   ```\r\n   \r\n   We're making the interface more complex (partial parsing chaining) for very little benefit. Instead, we should offer very basic PartitionScheme, e.g. RegularExpression and Lambda.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:53:56.223+0000",
                    "updated": "2019-09-27T16:53:56.223+0000",
                    "started": "2019-09-27T16:53:56.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319674",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329164917\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n-  virtual Status ParseKey(const std::string& path, PartitionKeyData* out) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  virtual Status Parse(util::string_view path,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+};\n+\n+/// \\brief Trivial partition scheme which does not actually parse paths.\n+/// Instead it returns an expression provided on construction whatever the path.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n \n Review comment:\n   alright\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:57:59.097+0000",
                    "updated": "2019-09-27T16:57:59.097+0000",
                    "started": "2019-09-27T16:57:59.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319677",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329165445\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n Review comment:\n   I've removed this function. Now implementations will just error out if the partition scheme doesn't mathc\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:59:32.014+0000",
                    "updated": "2019-09-27T16:59:32.014+0000",
                    "started": "2019-09-27T16:59:32.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319678",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329165445\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -52,53 +54,51 @@ namespace dataset {\n // };\n \n // ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n-\n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n-};\n+// Partition schemes\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Return true if path can be parsed\n+  virtual bool CanParse(util::string_view path) const = 0;\n \n Review comment:\n   I've removed this function. Now implementations will just error out if the partition scheme doesn't match\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T16:59:39.261+0000",
                    "updated": "2019-09-27T16:59:39.261+0000",
                    "started": "2019-09-27T16:59:39.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319679",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329168865\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -18,87 +18,114 @@\n #pragma once\n \n #include <memory>\n+#include <regex>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n #include \"arrow/dataset/dataset.h\"\n+#include \"arrow/dataset/filter.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n \n namespace arrow {\n namespace dataset {\n \n // ----------------------------------------------------------------------\n-// Computing partition values\n-\n-// TODO(wesm): API for computing partition keys derived from raw\n-// values. For example, year(value) or hash_function(value) instead of\n-// simply value, so a dataset with a timestamp column might group all\n-// data with year 2009 in the same partition\n-\n-// /// \\brief\n-// class ScalarTransform {\n-//  public:\n-//   virtual Status Transform(const std::shared_ptr<Scalar>& input,\n-//                            std::shared_ptr<Scalar>* output) const = 0;\n-// };\n-\n-// class PartitionField {\n-//  public:\n-\n-//  private:\n-//   std::string field_name_;\n-// };\n-\n-// ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n+// Partition schemes\n \n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n+struct ARROW_DS_EXPORT UnconvertedKey {\n+  std::string name, value;\n };\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Helper function for the common case of combining partition information\n+/// consisting of equality expressions into a single conjunction expression\n+ARROW_DS_EXPORT\n+Status ConvertPartitionKeys(const std::vector<UnconvertedKey>& keys, const Schema& schema,\n+                            std::shared_ptr<Expression>* out);\n+\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n+///\n+/// Paths are consumed from left to right. Paths must be relative to\n+/// the root of a partition; path prefixes must be removed before passing\n+/// the path to a scheme for parsing.\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// \\param[in] path the partition identifier to parse\n+  /// \\param[out] unconsumed a suffix of path which was not consumed\n+  /// \\param[out] out the parsed expression\n+  virtual Status Parse(const std::string& path, std::string* unconsumed,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// Helper for use by a root PartitionScheme; consumes whole path.\n+  Status Parse(const std::string& path, std::shared_ptr<Expression>* out) const;\n+};\n+\n+/// \\brief Trivial partition scheme which only consumes a specified prefix (empty by\n+/// default) from a path, yielding an expression provided on construction.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n+ public:\n+  explicit SimplePartitionScheme(std::shared_ptr<Expression> expr,\n+                                 std::string ignored = \"\")\n+      : partition_expression_(std::move(expr)), ignored_(std::move(ignored)) {}\n+\n+  std::string name() const override { return \"simple_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ private:\n+  std::shared_ptr<Expression> partition_expression_;\n+  std::string ignored_;\n+};\n+\n+/// \\brief Combine partition schemes\n+class ARROW_DS_EXPORT ChainPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit ChainPartitionScheme(std::vector<std::unique_ptr<PartitionScheme>> schemes)\n+      : schemes_(std::move(schemes)) {}\n+\n+  std::string name() const override { return \"chain_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ protected:\n+  std::vector<std::unique_ptr<PartitionScheme>> schemes_;\n+};\n+\n+/// \\brief Parse a single field from a single path segment\n+class ARROW_DS_EXPORT FieldPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit FieldPartitionScheme(std::shared_ptr<Field> field)\n \n Review comment:\n   Since the field names are not present in the path, that would rely on ordering of fields within a schema (which is supposed to be an associative structure)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T17:09:10.954+0000",
                    "updated": "2019-09-27T17:09:10.954+0000",
                    "started": "2019-09-27T17:09:10.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319683",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329169670\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -18,87 +18,114 @@\n #pragma once\n \n #include <memory>\n+#include <regex>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n #include \"arrow/dataset/dataset.h\"\n+#include \"arrow/dataset/filter.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n \n namespace arrow {\n namespace dataset {\n \n // ----------------------------------------------------------------------\n-// Computing partition values\n-\n-// TODO(wesm): API for computing partition keys derived from raw\n-// values. For example, year(value) or hash_function(value) instead of\n-// simply value, so a dataset with a timestamp column might group all\n-// data with year 2009 in the same partition\n-\n-// /// \\brief\n-// class ScalarTransform {\n-//  public:\n-//   virtual Status Transform(const std::shared_ptr<Scalar>& input,\n-//                            std::shared_ptr<Scalar>* output) const = 0;\n-// };\n-\n-// class PartitionField {\n-//  public:\n-\n-//  private:\n-//   std::string field_name_;\n-// };\n-\n-// ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n+// Partition schemes\n \n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n+struct ARROW_DS_EXPORT UnconvertedKey {\n+  std::string name, value;\n };\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Helper function for the common case of combining partition information\n+/// consisting of equality expressions into a single conjunction expression\n+ARROW_DS_EXPORT\n+Status ConvertPartitionKeys(const std::vector<UnconvertedKey>& keys, const Schema& schema,\n+                            std::shared_ptr<Expression>* out);\n+\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n+///\n+/// Paths are consumed from left to right. Paths must be relative to\n+/// the root of a partition; path prefixes must be removed before passing\n+/// the path to a scheme for parsing.\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// \\param[in] path the partition identifier to parse\n+  /// \\param[out] unconsumed a suffix of path which was not consumed\n+  /// \\param[out] out the parsed expression\n+  virtual Status Parse(const std::string& path, std::string* unconsumed,\n+                       std::shared_ptr<Expression>* out) const = 0;\n+\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// Helper for use by a root PartitionScheme; consumes whole path.\n+  Status Parse(const std::string& path, std::shared_ptr<Expression>* out) const;\n+};\n+\n+/// \\brief Trivial partition scheme which only consumes a specified prefix (empty by\n+/// default) from a path, yielding an expression provided on construction.\n+class ARROW_DS_EXPORT SimplePartitionScheme : public PartitionScheme {\n+ public:\n+  explicit SimplePartitionScheme(std::shared_ptr<Expression> expr,\n+                                 std::string ignored = \"\")\n+      : partition_expression_(std::move(expr)), ignored_(std::move(ignored)) {}\n+\n+  std::string name() const override { return \"simple_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ private:\n+  std::shared_ptr<Expression> partition_expression_;\n+  std::string ignored_;\n+};\n+\n+/// \\brief Combine partition schemes\n+class ARROW_DS_EXPORT ChainPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit ChainPartitionScheme(std::vector<std::unique_ptr<PartitionScheme>> schemes)\n+      : schemes_(std::move(schemes)) {}\n+\n+  std::string name() const override { return \"chain_partition_scheme\"; }\n+\n+  Status Parse(const std::string& path, std::string* unconsumed,\n+               std::shared_ptr<Expression>* out) const override;\n+\n+ protected:\n+  std::vector<std::unique_ptr<PartitionScheme>> schemes_;\n+};\n+\n+/// \\brief Parse a single field from a single path segment\n+class ARROW_DS_EXPORT FieldPartitionScheme : public PartitionScheme {\n+ public:\n+  explicit FieldPartitionScheme(std::shared_ptr<Field> field)\n \n Review comment:\n   Correct. But the schema is ordered (as per the Equals method).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T17:11:23.780+0000",
                    "updated": "2019-09-27T17:11:23.780+0000",
                    "started": "2019-09-27T17:11:23.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319685",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329172801\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.h\n ##########\n @@ -18,87 +18,114 @@\n #pragma once\n \n #include <memory>\n+#include <regex>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n #include \"arrow/dataset/dataset.h\"\n+#include \"arrow/dataset/filter.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n \n namespace arrow {\n namespace dataset {\n \n // ----------------------------------------------------------------------\n-// Computing partition values\n-\n-// TODO(wesm): API for computing partition keys derived from raw\n-// values. For example, year(value) or hash_function(value) instead of\n-// simply value, so a dataset with a timestamp column might group all\n-// data with year 2009 in the same partition\n-\n-// /// \\brief\n-// class ScalarTransform {\n-//  public:\n-//   virtual Status Transform(const std::shared_ptr<Scalar>& input,\n-//                            std::shared_ptr<Scalar>* output) const = 0;\n-// };\n-\n-// class PartitionField {\n-//  public:\n-\n-//  private:\n-//   std::string field_name_;\n-// };\n-\n-// ----------------------------------------------------------------------\n-// Partition identifiers\n-\n-/// \\brief A partition level identifier which can be used\n-///\n-/// TODO(wesm): Is this general enough? What other kinds of partition\n-/// keys exist and do we need to support them?\n-class PartitionKey {\n- public:\n-  const std::vector<std::string>& fields() const { return fields_; }\n-  const std::vector<std::shared_ptr<Scalar>>& values() const { return values_; }\n+// Partition schemes\n \n- private:\n-  std::vector<std::string> fields_;\n-  std::vector<std::shared_ptr<Scalar>> values_;\n+struct ARROW_DS_EXPORT UnconvertedKey {\n+  std::string name, value;\n };\n \n-/// \\brief Intermediate data structure for data parsed from a string\n-/// partition identifier.\n+/// \\brief Helper function for the common case of combining partition information\n+/// consisting of equality expressions into a single conjunction expression\n+ARROW_DS_EXPORT\n+Status ConvertPartitionKeys(const std::vector<UnconvertedKey>& keys, const Schema& schema,\n+                            std::shared_ptr<Expression>* out);\n+\n+/// \\brief Interface for parsing partition expressions from string partition\n+/// identifiers.\n ///\n-/// For example, the identifier \"foo=5\" might be parsed with a single\n-/// \"foo\" field and the value 5. A more complex identifier might be\n-/// written as \"foo=5,bar=2\", which would yield two fields and two\n-/// values.\n+/// For example, the identifier \"foo=5\" might be parsed to an equality expression\n+/// between the \"foo\" field and the value 5.\n ///\n /// Some partition schemes may store the field names in a metadata\n /// store instead of in file paths, for example\n /// dataset_root/2009/11/... could be used when the partition fields\n /// are \"year\" and \"month\"\n-struct PartitionKeyData {\n-  std::vector<std::string> fields;\n-  std::vector<std::shared_ptr<Scalar>> values;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Partition schemes\n-\n-/// \\brief\n+///\n+/// Paths are consumed from left to right. Paths must be relative to\n+/// the root of a partition; path prefixes must be removed before passing\n+/// the path to a scheme for parsing.\n class ARROW_DS_EXPORT PartitionScheme {\n  public:\n   virtual ~PartitionScheme() = default;\n \n   /// \\brief The name identifying the kind of partition scheme\n   virtual std::string name() const = 0;\n \n-  virtual bool PathMatchesScheme(const std::string& path) const = 0;\n+  /// \\brief Parse a path into a partition expression\n+  ///\n+  /// \\param[in] path the partition identifier to parse\n+  /// \\param[out] unconsumed a suffix of path which was not consumed\n+  /// \\param[out] out the parsed expression\n+  virtual Status Parse(const std::string& path, std::string* unconsumed,\n \n Review comment:\n   Although `(path)-> expression, unconsumed` is a slightly more complicated interface than `(path)-> expression` I think it is more important make path scanning unsurprising. Strict left to right consumption ensures that two chained schemes are not parsing information which wasn't intended for them. If we don't provide guarantees about how the path is consumed users have to address this by tinkering with their regular expressions (not catastrophic, but it seems more fragile IMHO)\r\n   \r\n   We could remove chaining altogether but from a design perspective it seems more favorable to make modular components which can be straightforwardly composed. I think we're going to want the ability to stack schemes\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T17:20:09.197+0000",
                    "updated": "2019-09-27T17:20:09.197+0000",
                    "started": "2019-09-27T17:20:09.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319688",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329173858\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -715,34 +707,46 @@ std::string OperatorName(compute::CompareOperator op) {\n   return \"\";\n }\n \n+// TODO(bkietz) extract this to Scalar::ToString()\n+struct ScalarExpressionToString {\n+  Status Visit(const BooleanType&) {\n+    return Finish(CastValue<BooleanType>().value ? \"true\" : \"false\");\n+  }\n+\n+  template <typename T>\n+  enable_if_number<T, Status> Visit(const T&) {\n+    return Finish(std::to_string(CastValue<T>().value));\n+  }\n+\n+  Status Visit(const StringType&) {\n+    return Finish(CastValue<StringType>().value->ToString());\n+  }\n+\n+  Status Visit(const DataType&) { return Finish(\"TODO(bkietz)\"); }\n \n Review comment:\n   This is used in non-failable `std::string ToString()` so I DCHECK the result of this visitor. Returning `NotImplemented` will abort if ToString() is called on a scalar expression which I haven't provided print method for, is that better?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T17:23:04.074+0000",
                    "updated": "2019-09-27T17:23:04.074+0000",
                    "started": "2019-09-27T17:23:04.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319691",
                    "issueId": "13255661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/worklog/319692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5443: ARROW-6494: [C++][Dataset] Implement PartitionSchemes\nURL: https://github.com/apache/arrow/pull/5443#discussion_r329173909\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -855,11 +859,36 @@ std::shared_ptr<AndExpression> and_(std::shared_ptr<Expression> lhs,\n   return std::make_shared<AndExpression>(std::move(lhs), std::move(rhs));\n }\n \n+std::shared_ptr<Expression> and_(\n+    std::vector<std::shared_ptr<Expression>> subexpressions) {\n+  if (subexpressions.size() == 0) {\n+    return scalar(true);\n+  }\n+  if (subexpressions.size() == 1) {\n+    return std::move(subexpressions[0]);\n+  }\n+  auto back = std::move(subexpressions.back());\n+  subexpressions.pop_back();\n+  return and_(and_(std::move(subexpressions)), std::move(back));\n \n Review comment:\n   I'll rewrite it\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T17:23:11.818+0000",
                    "updated": "2019-09-27T17:23:11.818+0000",
                    "started": "2019-09-27T17:23:11.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319692",
                    "issueId": "13255661"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@56c75198[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@204b4d09[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5aa75b65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20fe763d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76bab85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3564e133[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5578f889[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6e43385[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c89875f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4e769884[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cd88d73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7b87f576[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 03 17:43:05 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-03T17:43:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6494/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-09-09T14:39:09.000+0000",
        "updated": "2019-10-16T17:26:00.000+0000",
        "timeoriginalestimate": null,
        "description": "The PartitionScheme interface parses paths and yields the partition expressions which are encoded in those paths. For example, the Hive partition scheme would yield {{\"a\"_ = 2 and \"b\"_ = 3}} from \"a=2/b=3/*.parquet\".",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Implement basic PartitionScheme",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13255661/comment/16943783",
                    "id": "16943783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5443\n[https://github.com/apache/arrow/pull/5443]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-03T17:43:05.837+0000",
                    "updated": "2019-10-03T17:43:05.837+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06gv4:",
        "customfield_12314139": null
    }
}