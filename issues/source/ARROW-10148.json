{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13330232",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232",
    "key": "ARROW-10148",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10148/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232/worklog/493118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8310:\nURL: https://github.com/apache/arrow/pull/8310\n\n\n   This is a revamp of the landing page of Arrow's crate in docs.rs.\r\n   \r\n   * Moved most documentation from README to `src/lib.rs`\r\n   * expanded documentation with implemented functionality, including links to each part in the project\r\n   * added a minimal example demonstrating basic functionality\r\n   \r\n   How it looks like:\r\n   \r\n   <img width=\"1346\" alt=\"Screenshot 2020-09-30 at 20 43 10\" src=\"https://user-images.githubusercontent.com/2772607/94726491-9ca78c00-035d-11eb-89a8-187a9d3dbddc.png\">\r\n   \r\n   We can still do better, but IMO is better than the current version: https://docs.rs/arrow/1.0.1/arrow/\r\n   \r\n   I moved docs from the `README` to this page, so that we do not have to maintain it in two places, and added a link in the README to the `src/lib.rc` to refer for details.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T18:48:14.255+0000",
                    "updated": "2020-09-30T18:48:14.255+0000",
                    "started": "2020-09-30T18:48:14.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493118",
                    "issueId": "13330232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232/worklog/493131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8310:\nURL: https://github.com/apache/arrow/pull/8310#issuecomment-701585395\n\n\n   https://issues.apache.org/jira/browse/ARROW-10148\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T19:06:06.987+0000",
                    "updated": "2020-09-30T19:06:06.987+0000",
                    "started": "2020-09-30T19:06:06.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493131",
                    "issueId": "13330232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232/worklog/493552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8310:\nURL: https://github.com/apache/arrow/pull/8310#discussion_r498345323\n\n\n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n\nReview comment:\n       ```suggestion\r\n   //! One way to think about an arrow [`Array`](array::Array) is a `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\r\n   ```\n\n##########\nFile path: rust/arrow/src/ipc/gen/SparseTensor.rs\n##########\n@@ -389,7 +389,7 @@ impl<'a> SparseMatrixIndexCSX<'a> {\n     }\n     /// indptrBuffer stores the location and size of indptr array that\n     /// represents the range of the rows.\n-    /// The i-th row spans from indptr[i] to indptr[i+1] in the data.\n+    /// The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.\n\nReview comment:\n       I was seeing `cargo doc` warnings about these lines just this morning. \ud83d\udc4d  for fixing them\n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n+//! another [`Array`](array::Array).\n+//!\n+//! [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,\n+//! can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use\n+//!\n+//! ```rust\n+//! use arrow::array::{Array, PrimitiveArrayOps, UInt32Array};\n+//! let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! assert_eq!(array.len(), 3);\n+//! assert_eq!(array.value(0), 1);\n+//! assert_eq!(array.is_null(1), true);\n+//! ```\n+//!\n+//! To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! use arrow::datatypes::DataType;\n+//! use arrow::array::{UInt32Array, ArrayRef};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! let array: ArrayRef = Arc::new(array);\n+//! assert_eq!(array.len(), 3);\n+//! // array.value() is not available in the dynamcally-typed version\n+//! assert_eq!(array.is_null(1), true);\n+//! assert_eq!(array.data_type(), &DataType::UInt32);\n+//! ```\n+//!\n+//! to downcast, use `as_any()`:\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n+//! another [`Array`](array::Array).\n+//!\n+//! [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,\n+//! can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use\n+//!\n+//! ```rust\n+//! use arrow::array::{Array, PrimitiveArrayOps, UInt32Array};\n+//! let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! assert_eq!(array.len(), 3);\n+//! assert_eq!(array.value(0), 1);\n+//! assert_eq!(array.is_null(1), true);\n+//! ```\n+//!\n+//! To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! use arrow::datatypes::DataType;\n+//! use arrow::array::{UInt32Array, ArrayRef};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! let array: ArrayRef = Arc::new(array);\n+//! assert_eq!(array.len(), 3);\n+//! // array.value() is not available in the dynamcally-typed version\n+//! assert_eq!(array.is_null(1), true);\n+//! assert_eq!(array.data_type(), &DataType::UInt32);\n+//! ```\n+//!\n+//! to downcast, use `as_any()`:\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! # use arrow::array::{UInt32Array, ArrayRef, PrimitiveArrayOps};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! # let array: ArrayRef = Arc::new(array);\n+//! let array = array.as_any().downcast_ref::<UInt32Array>().unwrap();\n+//! assert_eq!(array.value(0), 1);\n+//! ```\n+//!\n+//! ## Memory and Buffers\n+//!\n+//! Data in [`Array`](array::Array) is stored in [`ArrayData`](array::data::ArrayData), that in turn\n+//! is a collection of other [`ArrayData`](array::data::ArrayData) and [`Buffers`](buffer::Buffer).\n+//! [`Buffers`](buffer::Buffer) is the central struct that array implementations use keep allocated memory and pointers.\n+//! The [`MutableBuffer`](buffer::MutableBuffer) is the mutable counter-part of[`Buffer`](buffer::Buffer).\n+//! These are the lowest abstractions of this crate, and are used throughout the crate to\n+//! efficiently allocate, write, read and deallocate memory.\n+//!\n+//! ## Field, Schema and RecordBatch\n+//!\n+//! [`Field`](datatypes::Field) is a struct that contains an arrays' metadata (datatype and whether its values\n\nReview comment:\n       ```suggestion\r\n   //! [`Field`](datatypes::Field) is a struct that contains an array's metadata (datatype and whether its values\r\n   ```\n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n+//! another [`Array`](array::Array).\n+//!\n+//! [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,\n+//! can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use\n+//!\n+//! ```rust\n+//! use arrow::array::{Array, PrimitiveArrayOps, UInt32Array};\n+//! let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! assert_eq!(array.len(), 3);\n+//! assert_eq!(array.value(0), 1);\n+//! assert_eq!(array.is_null(1), true);\n+//! ```\n+//!\n+//! To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! use arrow::datatypes::DataType;\n+//! use arrow::array::{UInt32Array, ArrayRef};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! let array: ArrayRef = Arc::new(array);\n+//! assert_eq!(array.len(), 3);\n+//! // array.value() is not available in the dynamcally-typed version\n+//! assert_eq!(array.is_null(1), true);\n+//! assert_eq!(array.data_type(), &DataType::UInt32);\n+//! ```\n+//!\n+//! to downcast, use `as_any()`:\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! # use arrow::array::{UInt32Array, ArrayRef, PrimitiveArrayOps};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! # let array: ArrayRef = Arc::new(array);\n+//! let array = array.as_any().downcast_ref::<UInt32Array>().unwrap();\n+//! assert_eq!(array.value(0), 1);\n+//! ```\n+//!\n+//! ## Memory and Buffers\n+//!\n+//! Data in [`Array`](array::Array) is stored in [`ArrayData`](array::data::ArrayData), that in turn\n+//! is a collection of other [`ArrayData`](array::data::ArrayData) and [`Buffers`](buffer::Buffer).\n+//! [`Buffers`](buffer::Buffer) is the central struct that array implementations use keep allocated memory and pointers.\n+//! The [`MutableBuffer`](buffer::MutableBuffer) is the mutable counter-part of[`Buffer`](buffer::Buffer).\n+//! These are the lowest abstractions of this crate, and are used throughout the crate to\n+//! efficiently allocate, write, read and deallocate memory.\n+//!\n+//! ## Field, Schema and RecordBatch\n+//!\n+//! [`Field`](datatypes::Field) is a struct that contains an arrays' metadata (datatype and whether its values\n+//! can be null), and a name. [`Schema`](datatypes::Schema) is a vector of fields with optional metadata, and together with\n+//! Together, they form the basis of a schematic representation of a group of [`Arrays`](array::Array).\n+//!\n+//! In fact, [`RecordBatch`](record_batch::RecordBatch) is a struct with a [`Schema`](datatypes::Schema) and a vector of\n+//! [`Array`](array::Array)s, all with the same `len`. A record batch is the highest order struct that this crate currently offersm\n\nReview comment:\n       ```suggestion\r\n   //! [`Array`](array::Array)s, all with the same `len`. A record batch is the highest order struct that this crate currently offers\r\n   ```\n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n+//! another [`Array`](array::Array).\n+//!\n+//! [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,\n+//! can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use\n+//!\n+//! ```rust\n+//! use arrow::array::{Array, PrimitiveArrayOps, UInt32Array};\n+//! let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! assert_eq!(array.len(), 3);\n+//! assert_eq!(array.value(0), 1);\n+//! assert_eq!(array.is_null(1), true);\n+//! ```\n+//!\n+//! To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! use arrow::datatypes::DataType;\n+//! use arrow::array::{UInt32Array, ArrayRef};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! let array: ArrayRef = Arc::new(array);\n+//! assert_eq!(array.len(), 3);\n+//! // array.value() is not available in the dynamcally-typed version\n+//! assert_eq!(array.is_null(1), true);\n+//! assert_eq!(array.data_type(), &DataType::UInt32);\n+//! ```\n+//!\n+//! to downcast, use `as_any()`:\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! # use arrow::array::{UInt32Array, ArrayRef, PrimitiveArrayOps};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! # let array: ArrayRef = Arc::new(array);\n+//! let array = array.as_any().downcast_ref::<UInt32Array>().unwrap();\n+//! assert_eq!(array.value(0), 1);\n+//! ```\n+//!\n+//! ## Memory and Buffers\n+//!\n+//! Data in [`Array`](array::Array) is stored in [`ArrayData`](array::data::ArrayData), that in turn\n+//! is a collection of other [`ArrayData`](array::data::ArrayData) and [`Buffers`](buffer::Buffer).\n+//! [`Buffers`](buffer::Buffer) is the central struct that array implementations use keep allocated memory and pointers.\n+//! The [`MutableBuffer`](buffer::MutableBuffer) is the mutable counter-part of[`Buffer`](buffer::Buffer).\n+//! These are the lowest abstractions of this crate, and are used throughout the crate to\n+//! efficiently allocate, write, read and deallocate memory.\n+//!\n+//! ## Field, Schema and RecordBatch\n+//!\n+//! [`Field`](datatypes::Field) is a struct that contains an arrays' metadata (datatype and whether its values\n+//! can be null), and a name. [`Schema`](datatypes::Schema) is a vector of fields with optional metadata, and together with\n+//! Together, they form the basis of a schematic representation of a group of [`Arrays`](array::Array).\n+//!\n+//! In fact, [`RecordBatch`](record_batch::RecordBatch) is a struct with a [`Schema`](datatypes::Schema) and a vector of\n+//! [`Array`](array::Array)s, all with the same `len`. A record batch is the highest order struct that this crate currently offersm\n+//! and is broadly used to represent a table where each column in an `Array`.\n+//!\n+//! ## Compute\n+//!\n+//! This crate offers many operations (called kernels) to operate on `Array`s, that you can find at [compute::kernels].\n+//! It has both vertial and horizontal operations, and some of them have an SIMD implementation.\n+//!\n+//! ## Status\n+//!\n+//! This crate has most of the implementation of the arrow specification. Specifically, it supports the following types:\n+//!\n+//! * All arrow primitive types, such as [`Int32Array`](array::UInt8Array), [`BooleanArray`](array::BooleanArray) and [`Float64Array`](array::Float64Array).\n+//! * All arrow variable length types, such as [`StringArray`](array::StringArray) and [`BinaryArray`](array::BinaryArray)\n+//! * All composite types such as [`StructArray`](array::StructArray) and [`ListArray`](array::ListArray)\n\nReview comment:\n       ```suggestion\r\n   //! * All composite types such as [`StructArray`](array::StructArray) and [`ListArray`](array::ListArray)\r\n   //! * Dictionary types  [`DictionaryArray`](array::DictionaryArray) \r\n   \r\n   ```\n\n##########\nFile path: rust/arrow/src/lib.rs\n##########\n@@ -18,8 +18,109 @@\n //! A native Rust implementation of [Apache Arrow](https://arrow.apache.org), a cross-language\n //! development platform for in-memory data.\n //!\n-//! Currently the project is developed and tested against nightly Rust. To learn more\n-//! about the status of Arrow in Rust, see `README.md`.\n+//! ### DataType\n+//!\n+//! Every [`Array`](array::Array) in this crate has an associated [`DataType`](datatypes::DataType),\n+//! that specifies how its data is layed in memory and represented.\n+//! Thus, a central enum of this crate is [`DataType`](datatypes::DataType), that contains the set of valid\n+//! DataTypes in the specification. For example, [`DataType::Utf8`](datatypes::DataType::Utf8).\n+//!\n+//! ## Array\n+//!\n+//! The central trait of this package is the dynamically-typed [`Array`](array::Array) that\n+//! represents a fixed-sized, immutable, Send + Sync Array of nullable elements. An example of such an array is [`UInt32Array`](array::UInt32Array).\n+//! One way to think about an arrow [`Array`](array::Array) isa `Arc<[Option<T>; len]>` where T can be anything ranging from an integer to a string, or even\n+//! another [`Array`](array::Array).\n+//!\n+//! [`Arrays`](array::Array) have [`len()`](array::Array::len), [`data_type()`](array::Array::data_type), and the nullability of each of its elements,\n+//! can be obtained via [`is_null(index)`](array::Array::is_null). To downcast an [`Array`](array::Array) to a specific implementation, you can use\n+//!\n+//! ```rust\n+//! use arrow::array::{Array, PrimitiveArrayOps, UInt32Array};\n+//! let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! assert_eq!(array.len(), 3);\n+//! assert_eq!(array.value(0), 1);\n+//! assert_eq!(array.is_null(1), true);\n+//! ```\n+//!\n+//! To make the array dynamically typed, we wrap it in an [`Arc`](std::sync::Arc):\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! use arrow::datatypes::DataType;\n+//! use arrow::array::{UInt32Array, ArrayRef};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! let array: ArrayRef = Arc::new(array);\n+//! assert_eq!(array.len(), 3);\n+//! // array.value() is not available in the dynamcally-typed version\n+//! assert_eq!(array.is_null(1), true);\n+//! assert_eq!(array.data_type(), &DataType::UInt32);\n+//! ```\n+//!\n+//! to downcast, use `as_any()`:\n+//!\n+//! ```rust\n+//! # use std::sync::Arc;\n+//! # use arrow::array::{UInt32Array, ArrayRef, PrimitiveArrayOps};\n+//! # let array = UInt32Array::from(vec![Some(1), None, Some(3)]);\n+//! # let array: ArrayRef = Arc::new(array);\n+//! let array = array.as_any().downcast_ref::<UInt32Array>().unwrap();\n+//! assert_eq!(array.value(0), 1);\n+//! ```\n+//!\n+//! ## Memory and Buffers\n+//!\n+//! Data in [`Array`](array::Array) is stored in [`ArrayData`](array::data::ArrayData), that in turn\n+//! is a collection of other [`ArrayData`](array::data::ArrayData) and [`Buffers`](buffer::Buffer).\n+//! [`Buffers`](buffer::Buffer) is the central struct that array implementations use keep allocated memory and pointers.\n+//! The [`MutableBuffer`](buffer::MutableBuffer) is the mutable counter-part of[`Buffer`](buffer::Buffer).\n+//! These are the lowest abstractions of this crate, and are used throughout the crate to\n+//! efficiently allocate, write, read and deallocate memory.\n+//!\n+//! ## Field, Schema and RecordBatch\n+//!\n+//! [`Field`](datatypes::Field) is a struct that contains an arrays' metadata (datatype and whether its values\n+//! can be null), and a name. [`Schema`](datatypes::Schema) is a vector of fields with optional metadata, and together with\n\nReview comment:\n       ```suggestion\r\n   //! can be null), and a name. [`Schema`](datatypes::Schema) is a vector of fields with optional metadata. \r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-01T15:49:38.191+0000",
                    "updated": "2020-10-01T15:49:38.191+0000",
                    "started": "2020-10-01T15:49:38.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493552",
                    "issueId": "13330232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232/worklog/493781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8310:\nURL: https://github.com/apache/arrow/pull/8310\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-02T02:31:49.333+0000",
                    "updated": "2020-10-02T02:31:49.333+0000",
                    "started": "2020-10-02T02:31:49.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493781",
                    "issueId": "13330232"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2add7750[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ef47b8b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22990888[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5fcc0773[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2df3af6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3271e3df[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58466051[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@678e03b5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57b640ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6ae42edc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1cb9f39[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@164fb71e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 02 02:31:33 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-02T02:31:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10148/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-30T18:29:53.000+0000",
        "updated": "2020-10-02T02:31:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, the crate page looks rather empty.\r\n\r\nThis issue aims to move the documentation from the README to the crate, so that it has a broader audience and follows Rust best practices.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add documentation to lib.rs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330232/comment/17205942",
                    "id": "17205942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8310\n[https://github.com/apache/arrow/pull/8310]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-10-02T02:31:33.312+0000",
                    "updated": "2020-10-02T02:31:33.312+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0j24w:",
        "customfield_12314139": null
    }
}