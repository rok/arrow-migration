{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13190321",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321",
    "key": "ARROW-3470",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12549294",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12549294",
                "type": {
                    "id": "12310361",
                    "name": "Blocked",
                    "inward": "Blocked",
                    "outward": "Blocked",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310361"
                },
                "outwardIssue": {
                    "id": "13199187",
                    "key": "ARROW-3834",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199187",
                    "fields": {
                        "summary": "[Doc] Merge Python & C++ and move to top-level",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3470/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques opened a new pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078\n \n \n   - Implement the `ADD_EXAMPLE` cmake function with new ctest label\r\n     `example`, also covered by the `runexample` target. This can be\r\n     toggled via the `ARROW_BUILD_EXAMPLES` option which is ON by default.\r\n   - Implement fully working `row-wise-conversion-example.cc` and add it to\r\n     the default build.\r\n   - Update documentation to embed (manually) the newly created example.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T19:10:41.227+0000",
                    "updated": "2018-12-03T19:10:41.227+0000",
                    "started": "2018-12-03T19:10:41.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171680",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-443871338\n \n \n   This might be conflicting with https://github.com/apache/arrow/pull/2856. Can we include the C++ file in the generated docs without copying it manually?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T21:10:23.036+0000",
                    "updated": "2018-12-03T21:10:23.036+0000",
                    "started": "2018-12-03T21:10:23.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171709",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-443884671\n \n \n   We should be able to include a whole file into the Sphinx docs via https://breathe.readthedocs.io/en/latest/directives.html#doxygenfile\r\n   \r\n   I'll merge #2856 as soon as the build passes, so that this PR can rebase on top. We should get rid of the `doxygen` tutorials completely soon. We may still build the doxygen HTML but only as API docs. All prose documentation should be in Sphinx.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T21:54:14.418+0000",
                    "updated": "2018-12-03T21:54:14.418+0000",
                    "started": "2018-12-03T21:54:14.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171720",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r238452702\n \n \n\n ##########\n File path: cpp/apidoc/tutorials/row_wise_conversion.md\n ##########\n @@ -20,175 +20,175 @@\n Convert a vector of row-wise data into an Arrow table\n =====================================================\n \n-While we want to use columnar data structures to build efficient operations, we\n-often receive data in a row-wise fashion from other systems. In the following,\n-we want give a brief introduction into the classes provided by Apache Arrow by\n-showing how to transform row-wise data into a columnar table.\n+```cpp\n+#include <cstdint>\n+#include <iostream>\n+#include <vector>\n \n-The data in this example is stored in the following struct:\n-\n-```\n-struct data_row {\n-    int64_t id;\n-    double cost;\n-    std::vector<double> cost_components;\n-};\n-\n-std::vector<data_row> rows;\n-```\n-\n-The final representation should be an `arrow::Table` which in turn is made up of\n-an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n-named collection of one or more `arrow::Array` instances. As the first step, we\n-will iterate over the data and build up the arrays incrementally. For this task,\n-we provide `arrow::ArrayBuilder` classes that help in the construction of the\n-final `arrow::Array` instances.\n-\n-For each type, Arrow has a specially typed builder class. For the primitive\n-values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n-`arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n-builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n-a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n-is referenced by the offsets in the former array.\n-\n-```\n-// The builders are more efficient using\n-// arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n-// the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n-// supported on Unix systems, not Windows.\n+#include <arrow/api.h>\n \n using arrow::DoubleBuilder;\n using arrow::Int64Builder;\n using arrow::ListBuilder;\n \n-arrow::MemoryPool* pool = arrow::default_memory_pool();\n-Int64Builder id_builder(pool);\n-DoubleBuilder cost_builder(pool);\n-std::unique_ptr<DoubleBuilder> components_values_builder(new DoubleBuilder(pool));\n-ListBuilder components_builder(pool, std::move(components_values_builder));\n-```\n-\n-Now we can loop over our existing data and insert it into the builders. The\n-`Append` calls here may fail (e.g. we cannot allocate enough additional memory).\n-Thus we need to check their return values. For more information on these values,\n-check the documentation about `arrow::Status`.\n+// While we want to use columnar data structures to build efficient operations, we\n+// often receive data in a row-wise fashion from other systems. In the following,\n+// we want give a brief introduction into the classes provided by Apache Arrow by\n+// showing how to transform row-wise data into a columnar table.\n+//\n+// The data in this example is stored in the following struct:\n+struct data_row {\n+  int64_t id;\n+  double cost;\n+  std::vector<double> cost_components;\n+};\n \n-```\n-for (const data_row& row : rows) {\n-    ARROW_RETURN_NOT_OK(id_builder.Append(row.id));\n-    ARROW_RETURN_NOT_OK(cost_builder.Append(row.cost));\n+// Transforming a vector of structs into a columnar Table.\n+//\n+// The final representation should be an `arrow::Table` which in turn is made up of\n+// an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n+// named collection of one or more `arrow::Array` instances. As the first step, we\n+// will iterate over the data and build up the arrays incrementally. For this task,\n+// we provide `arrow::ArrayBuilder` classes that help in the construction of the\n+// final `arrow::Array` instances.\n+//\n+// For each type, Arrow has a specially typed builder class. For the primitive\n+// values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n+// `arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n+// builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n+// a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n+// is referenced by the offsets in the former array.\n+arrow::Status VectorToColumnarTable(const std::vector<struct data_row>& rows,\n+                                    std::shared_ptr<arrow::Table>* table) {\n+  // The builders are more efficient using\n+  // arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n+  // the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n+  // supported on Unix systems, not Windows.\n+  arrow::MemoryPool* pool = arrow::default_memory_pool();\n+\n+  auto id_builder = std::make_shared<Int64Builder>(pool);\n \n Review comment:\n   These builders are only used in the local scope. We should make them simple stack variables without wrapping them into `std::shared_ptr`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T21:56:47.629+0000",
                    "updated": "2018-12-03T21:56:47.629+0000",
                    "started": "2018-12-03T21:56:47.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171722",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r238458335\n \n \n\n ##########\n File path: cpp/apidoc/tutorials/row_wise_conversion.md\n ##########\n @@ -20,175 +20,175 @@\n Convert a vector of row-wise data into an Arrow table\n =====================================================\n \n-While we want to use columnar data structures to build efficient operations, we\n-often receive data in a row-wise fashion from other systems. In the following,\n-we want give a brief introduction into the classes provided by Apache Arrow by\n-showing how to transform row-wise data into a columnar table.\n+```cpp\n+#include <cstdint>\n+#include <iostream>\n+#include <vector>\n \n-The data in this example is stored in the following struct:\n-\n-```\n-struct data_row {\n-    int64_t id;\n-    double cost;\n-    std::vector<double> cost_components;\n-};\n-\n-std::vector<data_row> rows;\n-```\n-\n-The final representation should be an `arrow::Table` which in turn is made up of\n-an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n-named collection of one or more `arrow::Array` instances. As the first step, we\n-will iterate over the data and build up the arrays incrementally. For this task,\n-we provide `arrow::ArrayBuilder` classes that help in the construction of the\n-final `arrow::Array` instances.\n-\n-For each type, Arrow has a specially typed builder class. For the primitive\n-values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n-`arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n-builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n-a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n-is referenced by the offsets in the former array.\n-\n-```\n-// The builders are more efficient using\n-// arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n-// the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n-// supported on Unix systems, not Windows.\n+#include <arrow/api.h>\n \n using arrow::DoubleBuilder;\n using arrow::Int64Builder;\n using arrow::ListBuilder;\n \n-arrow::MemoryPool* pool = arrow::default_memory_pool();\n-Int64Builder id_builder(pool);\n-DoubleBuilder cost_builder(pool);\n-std::unique_ptr<DoubleBuilder> components_values_builder(new DoubleBuilder(pool));\n-ListBuilder components_builder(pool, std::move(components_values_builder));\n-```\n-\n-Now we can loop over our existing data and insert it into the builders. The\n-`Append` calls here may fail (e.g. we cannot allocate enough additional memory).\n-Thus we need to check their return values. For more information on these values,\n-check the documentation about `arrow::Status`.\n+// While we want to use columnar data structures to build efficient operations, we\n+// often receive data in a row-wise fashion from other systems. In the following,\n+// we want give a brief introduction into the classes provided by Apache Arrow by\n+// showing how to transform row-wise data into a columnar table.\n+//\n+// The data in this example is stored in the following struct:\n+struct data_row {\n+  int64_t id;\n+  double cost;\n+  std::vector<double> cost_components;\n+};\n \n-```\n-for (const data_row& row : rows) {\n-    ARROW_RETURN_NOT_OK(id_builder.Append(row.id));\n-    ARROW_RETURN_NOT_OK(cost_builder.Append(row.cost));\n+// Transforming a vector of structs into a columnar Table.\n+//\n+// The final representation should be an `arrow::Table` which in turn is made up of\n+// an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n+// named collection of one or more `arrow::Array` instances. As the first step, we\n+// will iterate over the data and build up the arrays incrementally. For this task,\n+// we provide `arrow::ArrayBuilder` classes that help in the construction of the\n+// final `arrow::Array` instances.\n+//\n+// For each type, Arrow has a specially typed builder class. For the primitive\n+// values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n+// `arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n+// builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n+// a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n+// is referenced by the offsets in the former array.\n+arrow::Status VectorToColumnarTable(const std::vector<struct data_row>& rows,\n+                                    std::shared_ptr<arrow::Table>* table) {\n+  // The builders are more efficient using\n+  // arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n+  // the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n+  // supported on Unix systems, not Windows.\n+  arrow::MemoryPool* pool = arrow::default_memory_pool();\n+\n+  auto id_builder = std::make_shared<Int64Builder>(pool);\n \n Review comment:\n   I wrapped them out of uniformity. The `cost_components_builder` has to be in a shared_ptr to be passed to the `components_builder`. The previous version was wrongly using a std::move then referencing again the (moved out) builder.\r\n   \r\n   Our choice is between:\r\n   - 3 local and 1 shared_ptr builder\r\n   - 4 shared_ptr builders\r\n   \r\n   I can revert this choice.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T22:12:17.428+0000",
                    "updated": "2018-12-03T22:12:17.428+0000",
                    "started": "2018-12-03T22:12:17.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171724",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-444149995\n \n \n   If you want to include the _source_ for a file in a Sphinx document, you can use the `literalinclude` directive: https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-literalinclude\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T15:53:08.224+0000",
                    "updated": "2018-12-04T15:53:08.224+0000",
                    "started": "2018-12-04T15:53:08.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171938",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/171943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-444155087\n \n \n   Yeah, pre #2856 I was looking at Doxygen documentation to achieve this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T16:06:35.870+0000",
                    "updated": "2018-12-04T16:06:35.870+0000",
                    "started": "2018-12-04T16:06:35.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171943",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/173038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-445323603\n \n \n   I tend to prefer prose as a single file with prose comments as it allows to copy-paste in a single pass for users. Anyone objects that I go this route? It'll also give CI testing of C++ examples documentation.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T18:32:27.730+0000",
                    "updated": "2018-12-07T18:32:27.730+0000",
                    "started": "2018-12-07T18:32:27.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173038",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/173046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-445343118\n \n \n   No objections here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T19:40:27.438+0000",
                    "updated": "2018-12-07T19:40:27.438+0000",
                    "started": "2018-12-07T19:40:27.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173046",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-446197355\n \n \n   @xhochy that would be ready to review\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T13:13:01.842+0000",
                    "updated": "2018-12-11T13:13:01.842+0000",
                    "started": "2018-12-11T13:13:01.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174073",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241078091\n \n \n\n ##########\n File path: cpp/CMakeLists.txt\n ##########\n @@ -130,6 +130,10 @@ Pass multiple labels by dividing with semicolons\")\n     \"Build the Arrow micro benchmarks\"\n     OFF)\n \n+  option(ARROW_BUILD_EXAMPLES\n+    \"Build the Arrow examples.\"\n+    ON)\n \n Review comment:\n   Please set the default to OFF\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:11:51.432+0000",
                    "updated": "2018-12-12T16:11:51.432+0000",
                    "started": "2018-12-12T16:11:51.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174556",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241079068\n \n \n\n ##########\n File path: cpp/examples/arrow/row-wise-conversion-example.cc\n ##########\n @@ -0,0 +1,190 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <vector>\n+\n+#include <arrow/api.h>\n+\n+using arrow::DoubleBuilder;\n+using arrow::Int64Builder;\n+using arrow::ListBuilder;\n+\n+// While we want to use columnar data structures to build efficient operations, we\n+// often receive data in a row-wise fashion from other systems. In the following,\n+// we want give a brief introduction into the classes provided by Apache Arrow by\n+// showing how to transform row-wise data into a columnar table.\n+//\n+// The data in this example is stored in the following struct:\n+struct data_row {\n+  int64_t id;\n+  double cost;\n+  std::vector<double> cost_components;\n+};\n+\n+// Transforming a vector of structs into a columnar Table.\n+//\n+// The final representation should be an `arrow::Table` which in turn is made up of\n+// an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n+// named collection of one or more `arrow::Array` instances. As the first step, we\n+// will iterate over the data and build up the arrays incrementally. For this task,\n+// we provide `arrow::ArrayBuilder` classes that help in the construction of the\n+// final `arrow::Array` instances.\n+//\n+// For each type, Arrow has a specially typed builder class. For the primitive\n+// values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n+// `arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n+// builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n+// a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n+// is referenced by the offsets in the former array.\n+arrow::Status VectorToColumnarTable(const std::vector<struct data_row>& rows,\n+                                    std::shared_ptr<arrow::Table>* table) {\n+  // The builders are more efficient using\n+  // arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n+  // the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n+  // supported on Unix systems, not Windows.\n+  arrow::MemoryPool* pool = arrow::default_memory_pool();\n+\n+  Int64Builder id_builder(pool);\n+  DoubleBuilder cost_builder(pool);\n+  ListBuilder components_builder(pool, std::make_shared<DoubleBuilder>(pool));\n+  // The following builder is owned by components_builder.\n+  DoubleBuilder& cost_components_builder =\n+      *(static_cast<DoubleBuilder*>(components_builder.value_builder()));\n+\n+  // Now we can loop over our existing data and insert it into the builders. The\n+  // `Append` calls here may fail (e.g. we cannot allocate enough additional memory).\n+  // Thus we need to check their return values. For more information on these values,\n+  // check the documentation about `arrow::Status`.\n+  for (const data_row& row : rows) {\n+    ARROW_RETURN_NOT_OK(id_builder.Append(row.id));\n+    ARROW_RETURN_NOT_OK(cost_builder.Append(row.cost));\n+\n+    // Indicate the start of a new list row. This will memorise the current\n+    // offset in the values builder.\n+    ARROW_RETURN_NOT_OK(components_builder.Append());\n+    // Store the actual values. The final nullptr argument tells the underyling\n+    // builder that all added values are valid, i.e. non-null.\n+    ARROW_RETURN_NOT_OK(cost_components_builder.AppendValues(row.cost_components.data(),\n+                                                             row.cost_components.size()));\n+  }\n+\n+  // At the end, we finalise the arrays, declare the (type) schema and combine them\n+  // into a single `arrow::Table`:\n+  std::shared_ptr<arrow::Array> id_array;\n+  ARROW_RETURN_NOT_OK(id_builder.Finish(&id_array));\n+  std::shared_ptr<arrow::Array> cost_array;\n+  ARROW_RETURN_NOT_OK(cost_builder.Finish(&cost_array));\n+  // No need to invoke cost_components_builder.Finish because it is implied by\n+  // the parent builder's Finish invocation.\n+  std::shared_ptr<arrow::Array> cost_components_array;\n+  ARROW_RETURN_NOT_OK(components_builder.Finish(&cost_components_array));\n+\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+\n+  auto schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  // The final `table` variable is the one we then can pass on to other functions\n+  // that can consume Apache Arrow memory structures. This object has ownership of\n+  // all referenced data, thus we don't have to care about undefined references once\n+  // we leave the scope of the function building the table and its underlying arrays.\n+  *table = arrow::Table::Make(schema, {id_array, cost_array, cost_components_array});\n+\n+  return arrow::Status::OK();\n+}\n+\n+arrow::Status ColumnarTableToVector(const std::shared_ptr<arrow::Table>& table,\n+                                    std::vector<struct data_row>* rows) {\n+  // To convert an Arrow table back into the same row-wise representation as in the\n+  // above section, we first will check that the table conforms to our expected\n+  // schema and then will build up the vector of rows incrementally.\n+  //\n+  // For the check if the table is as expected, we can utilise solely its schema.\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+  auto expected_schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  if (!expected_schema->Equals(*table->schema())) {\n+    // The table doesn't have the expected schema thus we cannot directly\n+    // convert it to our target representation.\n+    return arrow::Status::Invalid(\"Schemas are not matching!\");\n+  }\n+\n+  // As we have ensured that the table has the expected structure, we can unpack the\n+  // underlying arrays. For the primitive columns `id` and `cost` we can use the high\n+  // level functions to get the values whereas for the nested column\n+  // `cost_components` we need to access the C-pointer to the data to copy its\n+  // contents into the resulting `std::vector<double>`. Here we need to be care to\n+  // also add the offset to the pointer. This offset is needed to enable zero-copy\n+  // slicing operations. While this could be adjusted automatically for double\n+  // arrays, this cannot be done for the accompanying bitmap as often the slicing\n+  // border would be inside a byte.\n+\n+  auto ids =\n+      std::static_pointer_cast<arrow::Int64Array>(table->column(0)->data()->chunk(0));\n+  auto costs =\n+      std::static_pointer_cast<arrow::DoubleArray>(table->column(1)->data()->chunk(0));\n+  auto cost_components =\n+      std::static_pointer_cast<arrow::ListArray>(table->column(2)->data()->chunk(0));\n+  auto cost_components_values =\n+      std::static_pointer_cast<arrow::DoubleArray>(cost_components->values());\n+  // To enable zero-copy slices, the native values pointer might need to account\n+  // for this slicing offset. This is not needed for the higher level functions\n+  // like Value(\u2026) that already account for this offset internally.\n+  const double* ccv_ptr = cost_components_values->data()->GetValues<double>(1);\n+\n+  for (int64_t i = 0; i < table->num_rows(); i++) {\n+    // Another simplification in this example is that we assume that there are\n+    // no null entries, e.g. each row is fill with valid values.\n+    int64_t id = ids->Value(i);\n+    double cost = costs->Value(i);\n+    const double* first = ccv_ptr + cost_components->value_offset(i);\n+    const double* last = ccv_ptr + cost_components->value_offset(i + 1);\n+    std::vector<double> components_vec(first, last);\n+    rows->push_back({id, cost, components_vec});\n+  }\n+\n+  return arrow::Status::OK();\n+}\n+\n+#define EXIT_ON_FAILURE(expr)                      \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      return EXIT_FAILURE;                         \\\n+    }                                              \\\n+  } while (0);\n \n Review comment:\n   Do we want to add an `ARROW_ABORT_NOT_OK`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:11:51.483+0000",
                    "updated": "2018-12-12T16:11:51.483+0000",
                    "started": "2018-12-12T16:11:51.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174557",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241078308\n \n \n\n ##########\n File path: cpp/cmake_modules/BuildUtils.cmake\n ##########\n @@ -468,6 +468,77 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     LABELS ${ARG_LABELS})\n endfunction()\n \n+############################################################\n+# Examples\n+############################################################\n+# Add a new example, with or without an executable that should be built.\n+# If examples are enabled then they will be run along side unit tests with ctest.\n+# 'make runexample' to build/run only examples.\n+#\n+# REL_EXAMPLE_NAME is the name of the example app. It may be a single component\n+# (e.g. monotime-example) or contain additional components (e.g.\n+# net/net_util-example). Either way, the last component must be a globally\n+# unique name.\n+\n+# The example will registered as unit test with ctest with a label\n+# of 'example'.\n+#\n+# Arguments after the test name will be passed to set_tests_properties().\n+#\n+# \\arg PREFIX a string to append to the name of the example executable. For\n+# example, if you have src/arrow/foo/bar-example.cc, then PREFIX \"foo\" will\n+# create test executable foo-bar-example\n+function(ADD_ARROW_EXAMPLE REL_EXAMPLE_NAME)\n+  set(options)\n+  set(one_value_args)\n+  set(multi_value_args EXTRA_LINK_LIBS DEPENDENCIES PREFIX)\n+  cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n+  if(ARG_UNPARSED_ARGUMENTS)\n+    message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n+  endif()\n+\n+  if(NO_EXAMPLES)\n+    return()\n+  endif()\n+  get_filename_component(EXAMPLE_NAME ${REL_EXAMPLE_NAME} NAME_WE)\n+\n+  if(ARG_PREFIX)\n+    set(EXAMPLE_NAME \"${ARG_PREFIX}-${EXAMPLE_NAME}\")\n+  endif()\n+\n+  if(EXISTS ${CMAKE_SOURCE_DIR}/examples/arrow/${REL_EXAMPLE_NAME}.cc)\n+    # This example has a corresponding .cc file, set it up as an executable.\n+    set(EXAMPLE_PATH \"${EXECUTABLE_OUTPUT_PATH}/${EXAMPLE_NAME}\")\n+    add_executable(${EXAMPLE_NAME} \"${REL_EXAMPLE_NAME}.cc\")\n+    target_link_libraries(${EXAMPLE_NAME} ${ARROW_EXAMPLE_LINK_LIBS})\n+    add_dependencies(runexample ${EXAMPLE_NAME})\n+    set(NO_COLOR \"--color_print=false\")\n+\n+    if (ARG_EXTRA_LINK_LIBS)\n+      target_link_libraries(${EXAMPLE_NAME} ${ARG_EXTRA_LINK_LIBS})\n+    endif()\n+  else()\n+    message(\"DERp derp\")\n \n Review comment:\n   remove this, maybe the whole else block\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:11:51.487+0000",
                    "updated": "2018-12-12T16:11:51.487+0000",
                    "started": "2018-12-12T16:11:51.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174558",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241078753\n \n \n\n ##########\n File path: cpp/examples/arrow/CMakeLists.txt\n ##########\n @@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#add_executable(row-wise-conversion-example row-wise-conversion.cc)\n+#target_link_libraries(row-wise-conversion-example arrow)\n \n Review comment:\n   Cruft\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:11:51.491+0000",
                    "updated": "2018-12-12T16:11:51.491+0000",
                    "started": "2018-12-12T16:11:51.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174559",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241078677\n \n \n\n ##########\n File path: cpp/cmake_modules/BuildUtils.cmake\n ##########\n @@ -468,6 +468,77 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     LABELS ${ARG_LABELS})\n endfunction()\n \n+############################################################\n+# Examples\n+############################################################\n+# Add a new example, with or without an executable that should be built.\n+# If examples are enabled then they will be run along side unit tests with ctest.\n+# 'make runexample' to build/run only examples.\n+#\n+# REL_EXAMPLE_NAME is the name of the example app. It may be a single component\n+# (e.g. monotime-example) or contain additional components (e.g.\n+# net/net_util-example). Either way, the last component must be a globally\n+# unique name.\n+\n+# The example will registered as unit test with ctest with a label\n+# of 'example'.\n+#\n+# Arguments after the test name will be passed to set_tests_properties().\n+#\n+# \\arg PREFIX a string to append to the name of the example executable. For\n+# example, if you have src/arrow/foo/bar-example.cc, then PREFIX \"foo\" will\n+# create test executable foo-bar-example\n+function(ADD_ARROW_EXAMPLE REL_EXAMPLE_NAME)\n+  set(options)\n+  set(one_value_args)\n+  set(multi_value_args EXTRA_LINK_LIBS DEPENDENCIES PREFIX)\n+  cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n+  if(ARG_UNPARSED_ARGUMENTS)\n+    message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n+  endif()\n+\n+  if(NO_EXAMPLES)\n+    return()\n+  endif()\n+  get_filename_component(EXAMPLE_NAME ${REL_EXAMPLE_NAME} NAME_WE)\n+\n+  if(ARG_PREFIX)\n+    set(EXAMPLE_NAME \"${ARG_PREFIX}-${EXAMPLE_NAME}\")\n+  endif()\n+\n+  if(EXISTS ${CMAKE_SOURCE_DIR}/examples/arrow/${REL_EXAMPLE_NAME}.cc)\n+    # This example has a corresponding .cc file, set it up as an executable.\n+    set(EXAMPLE_PATH \"${EXECUTABLE_OUTPUT_PATH}/${EXAMPLE_NAME}\")\n+    add_executable(${EXAMPLE_NAME} \"${REL_EXAMPLE_NAME}.cc\")\n+    target_link_libraries(${EXAMPLE_NAME} ${ARROW_EXAMPLE_LINK_LIBS})\n+    add_dependencies(runexample ${EXAMPLE_NAME})\n+    set(NO_COLOR \"--color_print=false\")\n+\n+    if (ARG_EXTRA_LINK_LIBS)\n+      target_link_libraries(${EXAMPLE_NAME} ${ARG_EXTRA_LINK_LIBS})\n+    endif()\n+  else()\n+    message(\"DERp derp\")\n+    # No executable, just invoke the example (probably a script) directly.\n+    set(EXAMPLE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${REL_EXAMPLE_NAME})\n+    set(NO_COLOR \"\")\n+  endif()\n+\n+  if (ARG_DEPENDENCIES)\n+    add_dependencies(${EXAMPLE_NAME} ${ARG_DEPENDENCIES})\n+  endif()\n+\n+\n+  if(MSVC)\n+    add_test(${EXAMPLE_NAME} ${EXAMPLE_PATH})\n+  else()\n+    add_test(${EXAMPLE_NAME}\n+      ${BUILD_SUPPORT_DIR}/run-test.sh ${CMAKE_BINARY_DIR} example ${EXAMPLE_PATH} ${NO_COLOR})\n+  endif()\n \n Review comment:\n   Are all examples supposed to be runnable like tests?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:11:51.495+0000",
                    "updated": "2018-12-12T16:11:51.495+0000",
                    "started": "2018-12-12T16:11:51.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174560",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241085516\n \n \n\n ##########\n File path: cpp/cmake_modules/BuildUtils.cmake\n ##########\n @@ -468,6 +468,77 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     LABELS ${ARG_LABELS})\n endfunction()\n \n+############################################################\n+# Examples\n+############################################################\n+# Add a new example, with or without an executable that should be built.\n+# If examples are enabled then they will be run along side unit tests with ctest.\n+# 'make runexample' to build/run only examples.\n+#\n+# REL_EXAMPLE_NAME is the name of the example app. It may be a single component\n+# (e.g. monotime-example) or contain additional components (e.g.\n+# net/net_util-example). Either way, the last component must be a globally\n+# unique name.\n+\n+# The example will registered as unit test with ctest with a label\n+# of 'example'.\n+#\n+# Arguments after the test name will be passed to set_tests_properties().\n+#\n+# \\arg PREFIX a string to append to the name of the example executable. For\n+# example, if you have src/arrow/foo/bar-example.cc, then PREFIX \"foo\" will\n+# create test executable foo-bar-example\n+function(ADD_ARROW_EXAMPLE REL_EXAMPLE_NAME)\n+  set(options)\n+  set(one_value_args)\n+  set(multi_value_args EXTRA_LINK_LIBS DEPENDENCIES PREFIX)\n+  cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n+  if(ARG_UNPARSED_ARGUMENTS)\n+    message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n+  endif()\n+\n+  if(NO_EXAMPLES)\n+    return()\n+  endif()\n+  get_filename_component(EXAMPLE_NAME ${REL_EXAMPLE_NAME} NAME_WE)\n+\n+  if(ARG_PREFIX)\n+    set(EXAMPLE_NAME \"${ARG_PREFIX}-${EXAMPLE_NAME}\")\n+  endif()\n+\n+  if(EXISTS ${CMAKE_SOURCE_DIR}/examples/arrow/${REL_EXAMPLE_NAME}.cc)\n+    # This example has a corresponding .cc file, set it up as an executable.\n+    set(EXAMPLE_PATH \"${EXECUTABLE_OUTPUT_PATH}/${EXAMPLE_NAME}\")\n+    add_executable(${EXAMPLE_NAME} \"${REL_EXAMPLE_NAME}.cc\")\n+    target_link_libraries(${EXAMPLE_NAME} ${ARROW_EXAMPLE_LINK_LIBS})\n+    add_dependencies(runexample ${EXAMPLE_NAME})\n+    set(NO_COLOR \"--color_print=false\")\n+\n+    if (ARG_EXTRA_LINK_LIBS)\n+      target_link_libraries(${EXAMPLE_NAME} ${ARG_EXTRA_LINK_LIBS})\n+    endif()\n+  else()\n+    message(\"DERp derp\")\n+    # No executable, just invoke the example (probably a script) directly.\n+    set(EXAMPLE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${REL_EXAMPLE_NAME})\n+    set(NO_COLOR \"\")\n+  endif()\n+\n+  if (ARG_DEPENDENCIES)\n+    add_dependencies(${EXAMPLE_NAME} ${ARG_DEPENDENCIES})\n+  endif()\n+\n+\n+  if(MSVC)\n+    add_test(${EXAMPLE_NAME} ${EXAMPLE_PATH})\n+  else()\n+    add_test(${EXAMPLE_NAME}\n+      ${BUILD_SUPPORT_DIR}/run-test.sh ${CMAKE_BINARY_DIR} example ${EXAMPLE_PATH} ${NO_COLOR})\n+  endif()\n \n Review comment:\n   I was under the impression that it would run with sanitizers, but closely looking at `run-test.sh` implementation, it switches according to RUN_TYPES == test for this. Thus I'll just disable this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:26:21.957+0000",
                    "updated": "2018-12-12T16:26:21.957+0000",
                    "started": "2018-12-12T16:26:21.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174585",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241086934\n \n \n\n ##########\n File path: cpp/examples/arrow/row-wise-conversion-example.cc\n ##########\n @@ -0,0 +1,190 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <vector>\n+\n+#include <arrow/api.h>\n+\n+using arrow::DoubleBuilder;\n+using arrow::Int64Builder;\n+using arrow::ListBuilder;\n+\n+// While we want to use columnar data structures to build efficient operations, we\n+// often receive data in a row-wise fashion from other systems. In the following,\n+// we want give a brief introduction into the classes provided by Apache Arrow by\n+// showing how to transform row-wise data into a columnar table.\n+//\n+// The data in this example is stored in the following struct:\n+struct data_row {\n+  int64_t id;\n+  double cost;\n+  std::vector<double> cost_components;\n+};\n+\n+// Transforming a vector of structs into a columnar Table.\n+//\n+// The final representation should be an `arrow::Table` which in turn is made up of\n+// an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n+// named collection of one or more `arrow::Array` instances. As the first step, we\n+// will iterate over the data and build up the arrays incrementally. For this task,\n+// we provide `arrow::ArrayBuilder` classes that help in the construction of the\n+// final `arrow::Array` instances.\n+//\n+// For each type, Arrow has a specially typed builder class. For the primitive\n+// values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n+// `arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n+// builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n+// a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n+// is referenced by the offsets in the former array.\n+arrow::Status VectorToColumnarTable(const std::vector<struct data_row>& rows,\n+                                    std::shared_ptr<arrow::Table>* table) {\n+  // The builders are more efficient using\n+  // arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n+  // the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n+  // supported on Unix systems, not Windows.\n+  arrow::MemoryPool* pool = arrow::default_memory_pool();\n+\n+  Int64Builder id_builder(pool);\n+  DoubleBuilder cost_builder(pool);\n+  ListBuilder components_builder(pool, std::make_shared<DoubleBuilder>(pool));\n+  // The following builder is owned by components_builder.\n+  DoubleBuilder& cost_components_builder =\n+      *(static_cast<DoubleBuilder*>(components_builder.value_builder()));\n+\n+  // Now we can loop over our existing data and insert it into the builders. The\n+  // `Append` calls here may fail (e.g. we cannot allocate enough additional memory).\n+  // Thus we need to check their return values. For more information on these values,\n+  // check the documentation about `arrow::Status`.\n+  for (const data_row& row : rows) {\n+    ARROW_RETURN_NOT_OK(id_builder.Append(row.id));\n+    ARROW_RETURN_NOT_OK(cost_builder.Append(row.cost));\n+\n+    // Indicate the start of a new list row. This will memorise the current\n+    // offset in the values builder.\n+    ARROW_RETURN_NOT_OK(components_builder.Append());\n+    // Store the actual values. The final nullptr argument tells the underyling\n+    // builder that all added values are valid, i.e. non-null.\n+    ARROW_RETURN_NOT_OK(cost_components_builder.AppendValues(row.cost_components.data(),\n+                                                             row.cost_components.size()));\n+  }\n+\n+  // At the end, we finalise the arrays, declare the (type) schema and combine them\n+  // into a single `arrow::Table`:\n+  std::shared_ptr<arrow::Array> id_array;\n+  ARROW_RETURN_NOT_OK(id_builder.Finish(&id_array));\n+  std::shared_ptr<arrow::Array> cost_array;\n+  ARROW_RETURN_NOT_OK(cost_builder.Finish(&cost_array));\n+  // No need to invoke cost_components_builder.Finish because it is implied by\n+  // the parent builder's Finish invocation.\n+  std::shared_ptr<arrow::Array> cost_components_array;\n+  ARROW_RETURN_NOT_OK(components_builder.Finish(&cost_components_array));\n+\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+\n+  auto schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  // The final `table` variable is the one we then can pass on to other functions\n+  // that can consume Apache Arrow memory structures. This object has ownership of\n+  // all referenced data, thus we don't have to care about undefined references once\n+  // we leave the scope of the function building the table and its underlying arrays.\n+  *table = arrow::Table::Make(schema, {id_array, cost_array, cost_components_array});\n+\n+  return arrow::Status::OK();\n+}\n+\n+arrow::Status ColumnarTableToVector(const std::shared_ptr<arrow::Table>& table,\n+                                    std::vector<struct data_row>* rows) {\n+  // To convert an Arrow table back into the same row-wise representation as in the\n+  // above section, we first will check that the table conforms to our expected\n+  // schema and then will build up the vector of rows incrementally.\n+  //\n+  // For the check if the table is as expected, we can utilise solely its schema.\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+  auto expected_schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  if (!expected_schema->Equals(*table->schema())) {\n+    // The table doesn't have the expected schema thus we cannot directly\n+    // convert it to our target representation.\n+    return arrow::Status::Invalid(\"Schemas are not matching!\");\n+  }\n+\n+  // As we have ensured that the table has the expected structure, we can unpack the\n+  // underlying arrays. For the primitive columns `id` and `cost` we can use the high\n+  // level functions to get the values whereas for the nested column\n+  // `cost_components` we need to access the C-pointer to the data to copy its\n+  // contents into the resulting `std::vector<double>`. Here we need to be care to\n+  // also add the offset to the pointer. This offset is needed to enable zero-copy\n+  // slicing operations. While this could be adjusted automatically for double\n+  // arrays, this cannot be done for the accompanying bitmap as often the slicing\n+  // border would be inside a byte.\n+\n+  auto ids =\n+      std::static_pointer_cast<arrow::Int64Array>(table->column(0)->data()->chunk(0));\n+  auto costs =\n+      std::static_pointer_cast<arrow::DoubleArray>(table->column(1)->data()->chunk(0));\n+  auto cost_components =\n+      std::static_pointer_cast<arrow::ListArray>(table->column(2)->data()->chunk(0));\n+  auto cost_components_values =\n+      std::static_pointer_cast<arrow::DoubleArray>(cost_components->values());\n+  // To enable zero-copy slices, the native values pointer might need to account\n+  // for this slicing offset. This is not needed for the higher level functions\n+  // like Value(\u2026) that already account for this offset internally.\n+  const double* ccv_ptr = cost_components_values->data()->GetValues<double>(1);\n+\n+  for (int64_t i = 0; i < table->num_rows(); i++) {\n+    // Another simplification in this example is that we assume that there are\n+    // no null entries, e.g. each row is fill with valid values.\n+    int64_t id = ids->Value(i);\n+    double cost = costs->Value(i);\n+    const double* first = ccv_ptr + cost_components->value_offset(i);\n+    const double* last = ccv_ptr + cost_components->value_offset(i + 1);\n+    std::vector<double> components_vec(first, last);\n+    rows->push_back({id, cost, components_vec});\n+  }\n+\n+  return arrow::Status::OK();\n+}\n+\n+#define EXIT_ON_FAILURE(expr)                      \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      return EXIT_FAILURE;                         \\\n+    }                                              \\\n+  } while (0);\n \n Review comment:\n   In this case, I just wanted the user to know what to do with failed status in `main`. I'd leave the exit procedure to be implemented by users (I don't like when libraries invokes abort/exit).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:29:43.344+0000",
                    "updated": "2018-12-12T16:29:43.344+0000",
                    "started": "2018-12-12T16:29:43.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174586",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241088749\n \n \n\n ##########\n File path: cpp/examples/arrow/row-wise-conversion-example.cc\n ##########\n @@ -0,0 +1,190 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <vector>\n+\n+#include <arrow/api.h>\n+\n+using arrow::DoubleBuilder;\n+using arrow::Int64Builder;\n+using arrow::ListBuilder;\n+\n+// While we want to use columnar data structures to build efficient operations, we\n+// often receive data in a row-wise fashion from other systems. In the following,\n+// we want give a brief introduction into the classes provided by Apache Arrow by\n+// showing how to transform row-wise data into a columnar table.\n+//\n+// The data in this example is stored in the following struct:\n+struct data_row {\n+  int64_t id;\n+  double cost;\n+  std::vector<double> cost_components;\n+};\n+\n+// Transforming a vector of structs into a columnar Table.\n+//\n+// The final representation should be an `arrow::Table` which in turn is made up of\n+// an `arrow::Schema` and a list of `arrow::Column`. An `arrow::Column` is again a\n+// named collection of one or more `arrow::Array` instances. As the first step, we\n+// will iterate over the data and build up the arrays incrementally. For this task,\n+// we provide `arrow::ArrayBuilder` classes that help in the construction of the\n+// final `arrow::Array` instances.\n+//\n+// For each type, Arrow has a specially typed builder class. For the primitive\n+// values `id` and `cost` we can use the respective `arrow::Int64Builder` and\n+// `arrow::DoubleBuilder`. For the `cost_components` vector, we need to have two\n+// builders, a top-level `arrow::ListBuilder` that builds the array of offsets and\n+// a nested `arrow::DoubleBuilder` that constructs the underlying values array that\n+// is referenced by the offsets in the former array.\n+arrow::Status VectorToColumnarTable(const std::vector<struct data_row>& rows,\n+                                    std::shared_ptr<arrow::Table>* table) {\n+  // The builders are more efficient using\n+  // arrow::jemalloc::MemoryPool::default_pool() as this can increase the size of\n+  // the underlying memory regions in-place. At the moment, arrow::jemalloc is only\n+  // supported on Unix systems, not Windows.\n+  arrow::MemoryPool* pool = arrow::default_memory_pool();\n+\n+  Int64Builder id_builder(pool);\n+  DoubleBuilder cost_builder(pool);\n+  ListBuilder components_builder(pool, std::make_shared<DoubleBuilder>(pool));\n+  // The following builder is owned by components_builder.\n+  DoubleBuilder& cost_components_builder =\n+      *(static_cast<DoubleBuilder*>(components_builder.value_builder()));\n+\n+  // Now we can loop over our existing data and insert it into the builders. The\n+  // `Append` calls here may fail (e.g. we cannot allocate enough additional memory).\n+  // Thus we need to check their return values. For more information on these values,\n+  // check the documentation about `arrow::Status`.\n+  for (const data_row& row : rows) {\n+    ARROW_RETURN_NOT_OK(id_builder.Append(row.id));\n+    ARROW_RETURN_NOT_OK(cost_builder.Append(row.cost));\n+\n+    // Indicate the start of a new list row. This will memorise the current\n+    // offset in the values builder.\n+    ARROW_RETURN_NOT_OK(components_builder.Append());\n+    // Store the actual values. The final nullptr argument tells the underyling\n+    // builder that all added values are valid, i.e. non-null.\n+    ARROW_RETURN_NOT_OK(cost_components_builder.AppendValues(row.cost_components.data(),\n+                                                             row.cost_components.size()));\n+  }\n+\n+  // At the end, we finalise the arrays, declare the (type) schema and combine them\n+  // into a single `arrow::Table`:\n+  std::shared_ptr<arrow::Array> id_array;\n+  ARROW_RETURN_NOT_OK(id_builder.Finish(&id_array));\n+  std::shared_ptr<arrow::Array> cost_array;\n+  ARROW_RETURN_NOT_OK(cost_builder.Finish(&cost_array));\n+  // No need to invoke cost_components_builder.Finish because it is implied by\n+  // the parent builder's Finish invocation.\n+  std::shared_ptr<arrow::Array> cost_components_array;\n+  ARROW_RETURN_NOT_OK(components_builder.Finish(&cost_components_array));\n+\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+\n+  auto schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  // The final `table` variable is the one we then can pass on to other functions\n+  // that can consume Apache Arrow memory structures. This object has ownership of\n+  // all referenced data, thus we don't have to care about undefined references once\n+  // we leave the scope of the function building the table and its underlying arrays.\n+  *table = arrow::Table::Make(schema, {id_array, cost_array, cost_components_array});\n+\n+  return arrow::Status::OK();\n+}\n+\n+arrow::Status ColumnarTableToVector(const std::shared_ptr<arrow::Table>& table,\n+                                    std::vector<struct data_row>* rows) {\n+  // To convert an Arrow table back into the same row-wise representation as in the\n+  // above section, we first will check that the table conforms to our expected\n+  // schema and then will build up the vector of rows incrementally.\n+  //\n+  // For the check if the table is as expected, we can utilise solely its schema.\n+  std::vector<std::shared_ptr<arrow::Field>> schema_vector = {\n+      arrow::field(\"id\", arrow::int64()), arrow::field(\"cost\", arrow::float64()),\n+      arrow::field(\"cost_components\", arrow::list(arrow::float64()))};\n+  auto expected_schema = std::make_shared<arrow::Schema>(schema_vector);\n+\n+  if (!expected_schema->Equals(*table->schema())) {\n+    // The table doesn't have the expected schema thus we cannot directly\n+    // convert it to our target representation.\n+    return arrow::Status::Invalid(\"Schemas are not matching!\");\n+  }\n+\n+  // As we have ensured that the table has the expected structure, we can unpack the\n+  // underlying arrays. For the primitive columns `id` and `cost` we can use the high\n+  // level functions to get the values whereas for the nested column\n+  // `cost_components` we need to access the C-pointer to the data to copy its\n+  // contents into the resulting `std::vector<double>`. Here we need to be care to\n+  // also add the offset to the pointer. This offset is needed to enable zero-copy\n+  // slicing operations. While this could be adjusted automatically for double\n+  // arrays, this cannot be done for the accompanying bitmap as often the slicing\n+  // border would be inside a byte.\n+\n+  auto ids =\n+      std::static_pointer_cast<arrow::Int64Array>(table->column(0)->data()->chunk(0));\n+  auto costs =\n+      std::static_pointer_cast<arrow::DoubleArray>(table->column(1)->data()->chunk(0));\n+  auto cost_components =\n+      std::static_pointer_cast<arrow::ListArray>(table->column(2)->data()->chunk(0));\n+  auto cost_components_values =\n+      std::static_pointer_cast<arrow::DoubleArray>(cost_components->values());\n+  // To enable zero-copy slices, the native values pointer might need to account\n+  // for this slicing offset. This is not needed for the higher level functions\n+  // like Value(\u2026) that already account for this offset internally.\n+  const double* ccv_ptr = cost_components_values->data()->GetValues<double>(1);\n+\n+  for (int64_t i = 0; i < table->num_rows(); i++) {\n+    // Another simplification in this example is that we assume that there are\n+    // no null entries, e.g. each row is fill with valid values.\n+    int64_t id = ids->Value(i);\n+    double cost = costs->Value(i);\n+    const double* first = ccv_ptr + cost_components->value_offset(i);\n+    const double* last = ccv_ptr + cost_components->value_offset(i + 1);\n+    std::vector<double> components_vec(first, last);\n+    rows->push_back({id, cost, components_vec});\n+  }\n+\n+  return arrow::Status::OK();\n+}\n+\n+#define EXIT_ON_FAILURE(expr)                      \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      return EXIT_FAILURE;                         \\\n+    }                                              \\\n+  } while (0);\n \n Review comment:\n   OK. It is not necessary to resolve this here, but it would be useful for the library to come with various Status-handling macros built-in to accommodate different needs, so users don't have to implement their own. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:33:37.575+0000",
                    "updated": "2018-12-12T16:33:37.575+0000",
                    "started": "2018-12-12T16:33:37.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174587",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174592",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#issuecomment-446655637\n \n \n   I addressed the comments and replicated what was done to CI scripts with the new tests default to off.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:41:31.382+0000",
                    "updated": "2018-12-12T16:41:31.382+0000",
                    "started": "2018-12-12T16:41:31.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174592",
                    "issueId": "13190321"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/worklog/174595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3078: ARROW-3470: [C++] Fix row-wise example\nURL: https://github.com/apache/arrow/pull/3078#discussion_r241097915\n \n \n\n ##########\n File path: docs/source/cpp/index.rst\n ##########\n @@ -23,3 +23,4 @@ C++ Implementation\n \n    getting_started\n    api\n+   examples\n \n Review comment:\n   The examples should come before the API IMHO.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-12T16:54:09.412+0000",
                    "updated": "2018-12-12T16:54:09.412+0000",
                    "started": "2018-12-12T16:54:09.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "174595",
                    "issueId": "13190321"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@120eecbb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47fa6a7c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a74d751[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6ec9ebe9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27dd2472[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6cb5002b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30278cb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1110affd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f20e719[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1bd0108e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@171e5553[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3e57f0a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 12 18:54:56 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-12T18:54:56.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3470/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-09T09:08:10.000+0000",
        "updated": "2018-12-12T18:55:04.000+0000",
        "timeoriginalestimate": null,
        "description": "As reported on user@ list",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Row-wise conversion tutorial has fallen out of date",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/comment/16707519",
                    "id": "16707519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I've extracted the full example into a single file and added multiple cmake functionnality to build it (mimicking the benchmark/test\u00a0facility). I'm wondering if it's ok to simplify the whole documented example with a single\u00a0code block where the text is in comments?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-03T16:56:16.707+0000",
                    "updated": "2018-12-03T16:56:16.707+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/comment/16707664",
                    "id": "16707664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "See added PR for the difference in documentation (single embedded code block with comments).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-03T19:11:08.015+0000",
                    "updated": "2018-12-03T19:11:08.015+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190321/comment/16719306",
                    "id": "16719306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3078\n[https://github.com/apache/arrow/pull/3078]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-12-12T18:54:56.878+0000",
                    "updated": "2018-12-12T18:54:56.878+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yzd3:",
        "customfield_12314139": null
    }
}