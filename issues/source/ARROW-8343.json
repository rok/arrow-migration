{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13296453",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453",
    "key": "ARROW-8343",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8343/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/416427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847\n \n \n   I'd like to add `GArrowRecordBatchIterator` as a binding of `arrow::RecordBatchIterator` class.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-06T08:44:42.909+0000",
                    "updated": "2020-04-06T08:44:42.909+0000",
                    "started": "2020-04-06T08:44:42.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "416427",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/416429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#issuecomment-609659915\n \n \n   https://issues.apache.org/jira/browse/ARROW-8343\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-06T08:46:46.228+0000",
                    "updated": "2020-04-06T08:46:46.228+0000",
                    "started": "2020-04-06T08:46:46.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "416429",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404525048\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   I came up with the idea that it can avoid making a vector to introduce `GListIterator<T>` like `arrow::VectorIterator<T>`.\r\n   \r\n   @kou How do you think about this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T04:16:23.233+0000",
                    "updated": "2020-04-07T04:16:23.233+0000",
                    "started": "2020-04-07T04:16:23.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417435",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404535401\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   It's a good idea!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T04:58:30.251+0000",
                    "updated": "2020-04-07T04:58:30.251+0000",
                    "started": "2020-04-07T04:58:30.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417447",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404535907\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   FYI: I've removed temporary vector in `garrow_record_batch_iterator_to_list()`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T05:00:12.101+0000",
                    "updated": "2020-04-07T05:00:12.101+0000",
                    "started": "2020-04-07T05:00:12.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417450",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevedanOgochu commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404547927\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   > I came up with the idea that it can avoid making a vector to introduce `GListIterator<T>` like `arrow::VectorIterator<T>`.\r\n   > \r\n   > @kou How do you think about this?\r\n   \r\n   How do you create a Glist  of anything, especially fields. It is not clear how do just looking at the api funtions available. Please I would be gratefull. \r\n   \r\n   What I  understand so far is, \r\n   \r\n   To create a GList of fields,  your need this funtionn call -> \r\n   GList * garrow_struct_data_type_get_fields (GArrowStructDataType *struct_data_type);\r\n   \r\n   which means you have to create a GArrowStructDatatype -> which is dont with this function call\r\n   \r\n   GArrowStructDataType *\r\n   garrow_struct_data_type_new (GList *fields);, which also depends on GList, I am a bit confused, how to a funtion depends on another function that depends on it self. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T05:42:10.626+0000",
                    "updated": "2020-04-07T05:42:10.626+0000",
                    "started": "2020-04-07T05:42:10.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417463",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevedanOgochu commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404547927\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   > I came up with the idea that it can avoid making a vector to introduce `GListIterator<T>` like `arrow::VectorIterator<T>`.\r\n   > \r\n   > @kou How do you think about this?\r\n   \r\n   How do you create a Glist  of anything, especially fields. It is not clear how do just looking at the api funtions available. Please I would be gratefull. \r\n   \r\n   What I  understand so far is, \r\n   \r\n   To create a GList of fields,  your need this funtionn call -> \r\n   GList * garrow_struct_data_type_get_fields (GArrowStructDataType *struct_data_type);\r\n   \r\n   which means you have to create a GArrowStructDatatype -> which is dont with this function call\r\n   \r\n   GArrowStructDataType *\r\n   garrow_struct_data_type_new (GList *fields);, which also depends on GList, I am a bit confused, how to a funtion depends on another function that depends on it self. \r\n   \r\n   An example how to create Glist  would be really appreciated. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T05:43:29.461+0000",
                    "updated": "2020-04-07T05:43:29.461+0000",
                    "started": "2020-04-07T05:43:29.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417464",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevedanOgochu commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404547927\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   > I came up with the idea that it can avoid making a vector to introduce `GListIterator<T>` like `arrow::VectorIterator<T>`.\r\n   > \r\n   > @kou How do you think about this?\r\n   \r\n   How do you create a Glist  of anything, especially fields. It is not clear how do just looking at the api funtions available. Please I would be gratefull. \r\n   \r\n   What I  understand so far is, \r\n   \r\n   To create a GList of fields,  your need this funtionn call -> \r\n   GList * garrow_struct_data_type_get_fields (GArrowStructDataType *struct_data_type);\r\n   \r\n   which means you have to create a GArrowStructDatatype -> which is dont with this function call\r\n   \r\n   GArrowStructDataType *\r\n   garrow_struct_data_type_new (GList *fields);, which also depends on GList, I am a bit confused, how to a funtion depends on another function that depends on it self. \r\n   \r\n   An example how to create Glist  would be really appreciated. \r\n   \r\n   I also tried creating each field and when creating the schema, initializing it like this, {filedx, filedy} but it gives an error.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T05:51:52.639+0000",
                    "updated": "2020-04-07T05:51:52.639+0000",
                    "started": "2020-04-07T05:51:52.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417467",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404554337\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   See https://github.com/apache/arrow/blob/master/c_glib/arrow-glib/schema.cpp#L241-L247, this is a typical pattern to make a `GList` from scratch.\r\n   \r\n   By the way, please do not ask unrelated things to this pull-request here.\r\n   You can ask anything about Apache Arrow in the mailing list.\r\n   http://mail-archives.apache.org/mod_mbox/arrow-dev/\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T06:01:27.338+0000",
                    "updated": "2020-04-07T06:01:27.338+0000",
                    "started": "2020-04-07T06:01:27.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417468",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/417469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevedanOgochu commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r404554682\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   thank you very much, I am sorry  asking here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-07T06:02:27.736+0000",
                    "updated": "2020-04-07T06:02:27.736+0000",
                    "started": "2020-04-07T06:02:27.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "417469",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r405207573\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   @kou I noticed `GListIterator` is not usable for implementing `GArrowRecordBatchIterator` because it is a binding of single `arrow::RecordBatchIterator` instead of a list of `GArrowRecordBatch`.\r\n   \r\n   I postponed to introduce `GListIterator` until we actually need it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:32:13.680+0000",
                    "updated": "2020-04-08T01:32:13.680+0000",
                    "started": "2020-04-08T01:32:13.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418113",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r405208877\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   OK. Then I'll merge this pull request.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:37:16.299+0000",
                    "updated": "2020-04-08T01:37:16.299+0000",
                    "started": "2020-04-08T01:37:16.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418114",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:38:06.158+0000",
                    "updated": "2020-04-08T01:38:06.158+0000",
                    "started": "2020-04-08T01:38:06.157+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418115",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r405209328\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   @kou I noticed again that `GListIterator` can be used just only for `garrow_record_batch_iterator_new`.  I was confused.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:38:58.860+0000",
                    "updated": "2020-04-08T01:38:58.860+0000",
                    "started": "2020-04-08T01:38:58.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418116",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r405209620\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   OK. We can work on it as a follow-up pull request.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T01:40:09.726+0000",
                    "updated": "2020-04-08T01:40:09.726+0000",
                    "started": "2020-04-08T01:40:09.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418117",
                    "issueId": "13296453"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/worklog/418127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6847: ARROW-8343: [GLib] Add GArrowRecordBatchIterator\nURL: https://github.com/apache/arrow/pull/6847#discussion_r405215090\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -402,6 +408,173 @@ garrow_record_batch_remove_column(GArrowRecordBatch *record_batch,\n   }\n }\n \n+\n+typedef struct GArrowRecordBatchIteratorPrivate_ {\n+  arrow::RecordBatchIterator iterator;\n+} GArrowRecordBatchIteratorPrivate;\n+\n+enum {\n+  PROP_ITERATOR = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowRecordBatchIterator,\n+                           garrow_record_batch_iterator,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowRecordBatchIteratorPrivate *>(           \\\n+     garrow_record_batch_iterator_get_instance_private(      \\\n+       GARROW_RECORD_BATCH_ITERATOR(obj)))\n+\n+static void\n+garrow_record_batch_iterator_finalize(GObject *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  priv->iterator.~Iterator();\n+\n+  G_OBJECT_CLASS(garrow_record_batch_iterator_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_record_batch_iterator_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ITERATOR:\n+    priv->iterator =\n+      std::move(*static_cast<arrow::RecordBatchIterator *>(g_value_get_pointer(value)));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_record_batch_iterator_init(GArrowRecordBatchIterator *object)\n+{\n+  auto priv = GARROW_RECORD_BATCH_ITERATOR_GET_PRIVATE(object);\n+  new(&priv->iterator) arrow::RecordBatchIterator;\n+}\n+\n+static void\n+garrow_record_batch_iterator_class_init(GArrowRecordBatchIteratorClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_record_batch_iterator_finalize;\n+  gobject_class->set_property = garrow_record_batch_iterator_set_property;\n+\n+  GParamSpec *spec;\n+\n+  spec = g_param_spec_pointer(\"iterator\",\n+                              \"Iterator\",\n+                              \"The raw arrow::RecordBatchIterator\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ITERATOR, spec);\n+}\n+\n+/**\n+ * garrow_record_batch_iterator_new:\n+ * @record_batches: (element-type GArrowRecordBatch):\n+ *   The record batches.\n+ *\n+ * Returns: A newly created #GArrowRecordBatchIterator.\n+ *\n+ * Since: 0.17.0\n+ */\n+GArrowRecordBatchIterator *\n+garrow_record_batch_iterator_new(GList *record_batches)\n+{\n+  std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_record_batches;\n \n Review comment:\n   OK!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-08T02:00:44.099+0000",
                    "updated": "2020-04-08T02:00:44.099+0000",
                    "started": "2020-04-08T02:00:44.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "418127",
                    "issueId": "13296453"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@59206ab8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6508967d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@220116d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@31bd790[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5700bd88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5996d9ca[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@730bfba5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2ef11503[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c4f11a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1378df62[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f02c87b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@197d9b95[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 08 01:38:18 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-08T01:38:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8343/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-04-06T08:36:34.000+0000",
        "updated": "2020-04-08T02:00:44.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrowRecordBatchIterator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13296453/comment/17077737",
                    "id": "17077737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 6847\n[https://github.com/apache/arrow/pull/6847]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2020-04-08T01:38:18.327+0000",
                    "updated": "2020-04-08T01:38:18.327+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0db5c:",
        "customfield_12314139": null
    }
}