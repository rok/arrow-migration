{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13469528",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528",
    "key": "ARROW-16945",
    "fields": {
        "parent": {
            "id": "13308571",
            "key": "ARROW-8991",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13308571",
            "fields": {
                "summary": "[C++][Compute] Add scalar_hash function",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                    "description": "This issue is being actively worked on at the moment by the assignee.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                    "name": "In Progress",
                    "id": "3",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                        "id": 4,
                        "key": "indeterminate",
                        "colorName": "yellow",
                        "name": "In Progress"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/11",
            "id": "11",
            "description": "",
            "name": "Done"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
            "name": "octalene",
            "key": "octalene",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
            },
            "displayName": "Aldrin Montana",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
            "name": "octalene",
            "key": "octalene",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
            },
            "displayName": "Aldrin Montana",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
            "name": "octalene",
            "key": "octalene",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
            },
            "displayName": "Aldrin Montana",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16945/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/786850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1171714784\n\n   > I'm not sure how to validate the hash outputs are \"as expected\". Further, unit tests for the hashing functions don't seem to validate hash outputs.\r\n   \r\n   For a hashing function I would expect:\r\n    * If two values are equal then their hashes are equal\r\n    * Given a random selection of non-equal values there should be some kind of expected false positive rate (e.g. equal hashes on unequal values).  Ideally we would include, as part of this, a benchmark that measures the FPR on random values.  You could then take then, pick a safe threshold (e.g. if the benchmark tends to show a 5% FPR then pick 10%) and put that into the unit test (e.g. assert the FPR is less than the safe threshold).\n\n\n",
                    "created": "2022-06-30T21:53:31.160+0000",
                    "updated": "2022-06-30T21:53:31.160+0000",
                    "started": "2022-06-30T21:53:31.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786850",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/786851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1171715112\n\n   https://issues.apache.org/jira/browse/ARROW-16945\n\n\n",
                    "created": "2022-06-30T21:53:55.187+0000",
                    "updated": "2022-06-30T21:53:55.187+0000",
                    "started": "2022-06-30T21:53:55.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786851",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/786852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1171715133\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-30T21:53:58.857+0000",
                    "updated": "2022-06-30T21:53:58.857+0000",
                    "started": "2022-06-30T21:53:58.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786852",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/786853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1171715269\n\n   @save-buffer would you mind reviewing this when you get a chance?\n\n\n",
                    "created": "2022-06-30T21:54:08.570+0000",
                    "updated": "2022-06-30T21:54:08.570+0000",
                    "started": "2022-06-30T21:54:08.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786853",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/786854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1171715508\n\n   I renamed this PR for ARROW-16945, so that I can track just a 32-bit version for now. Not sure if this will confuse some of the automated issue tracking/associations\n\n\n",
                    "created": "2022-06-30T21:54:29.968+0000",
                    "updated": "2022-06-30T21:54:29.968+0000",
                    "started": "2022-06-30T21:54:29.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786854",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1188827906\n\n   > * Given a random selection of non-equal values\r\n   \r\n   I'd add that non-random but likely selections should also show a nice hash distribution. Including:\r\n   * ranges of consecutive `[0, N]` numbers\r\n   * clustered strings (for example a subset of `/usr/share/dict/words`, or something generated that looks like that)\r\n   \n\n\n",
                    "created": "2022-07-19T09:35:38.093+0000",
                    "updated": "2022-07-19T09:35:38.093+0000",
                    "started": "2022-07-19T09:35:38.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792543",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1188828058\n\n   Why 32-bit rather than 64-bit?\n\n\n",
                    "created": "2022-07-19T09:35:46.764+0000",
                    "updated": "2022-07-19T09:35:46.764+0000",
                    "started": "2022-07-19T09:35:46.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792544",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1189382526\n\n   > Why 32-bit rather than 64-bit?\r\n   \r\n   I think Weston mentioned 32-bit in passing and I just made a semi-arbitrary decision to start there. I plan on following this up with a 64-bit version, though not sure if other things should be addressed before I do so (memory management, etc.).\n\n\n",
                    "created": "2022-07-19T17:49:38.783+0000",
                    "updated": "2022-07-19T17:49:38.783+0000",
                    "started": "2022-07-19T17:49:38.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792855",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1189604651\n\n   > I'd add that non-random but likely selections should also show a nice hash distribution. Including:\r\n   > The implementations from arrow/util/hashing.h try to satisfy those requirements, btw, so you could reuse them.\r\n   \r\n   It would be great, by the way, to have benchmarks of the two hashing utilities we have.  I believe the utilities we have in `key_hash.h` trade off some distribution performance in favor of runtime performance when compared with the utilities in `hashing.h`.  It would be nice to have some objective measures of this tradeoff.\r\n   \r\n   Also, can we expand in the function doc that these hashes are not suitable for cryptographic purposes?\n\n\n",
                    "created": "2022-07-19T22:15:06.624+0000",
                    "updated": "2022-07-19T22:15:06.624+0000",
                    "started": "2022-07-19T22:15:06.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792943",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1189624749\n\n   There's https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/hashing_benchmark.cc at least\n\n\n",
                    "created": "2022-07-19T22:49:22.457+0000",
                    "updated": "2022-07-19T22:49:22.457+0000",
                    "started": "2022-07-19T22:49:22.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792950",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/792963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1189656685\n\n   Thanks @pitrou , I'll start with that as a base and add benchmarks that use the utilities from key_hash.h (I'll see if these also exist elsewhere).\r\n   \r\n   I recently was exposed to `hashing.h` when looking at the `count_distinct` function, so I should be able to compare them. Maybe I'll skeleton another compute function, `StandardHash` (arbitrary, temporary name to distinguish from `FastHash`), and we can use it to better consider how many hash functions we should have vs what should be knobs available via an `Options` class.\n\n\n",
                    "created": "2022-07-19T23:49:38.505+0000",
                    "updated": "2022-07-19T23:49:38.505+0000",
                    "started": "2022-07-19T23:49:38.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792963",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1189773021\n\n   rebased\n\n\n",
                    "created": "2022-07-20T03:27:44.915+0000",
                    "updated": "2022-07-20T03:27:44.915+0000",
                    "started": "2022-07-20T03:27:44.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793004",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190604497\n\n   I wanted to update with initial changes to `hashing_benchmark.cc`. To make sure comparisons covered at least a few cases, I decided to add FastHash64, although it is currently very copy pasta.\r\n   \r\n   Barring code style/organization improvements, I was hoping to get some feedback on whether these benchmarks are fundamentally what we would like to see. Some questions I have:\r\n   - how do I ensure I am not including the time to construct an arrow::Array from a vector in the benchmark time?\r\n   - do we want to time calling the function, or just the mechanisms that the compute function wraps?\r\n      - do we want to do both to also capture any overhead in compute kernel invocation?\n\n\n",
                    "created": "2022-07-20T18:15:57.101+0000",
                    "updated": "2022-07-20T18:15:57.101+0000",
                    "started": "2022-07-20T18:15:57.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793374",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190606383\n\n   Also, I see now that `util/hashing.h` wraps xxHash, vendored from Cyan4973's github repo. Hashing32 has the following comment above it:\r\n   \r\n       // Implementations are based on xxh3 32-bit algorithm description from:\r\n       // https://github.com/Cyan4973/xxHash/blob/dev/doc/xxhash_spec.md\r\n   \r\n   I need to experiment a bit, but I suspect that for int primitives, Hashing32 and Hashing64 just wrap xxHash and add logic for iterating over rows and columns. Specifically, [key_hash.cc#L745](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec/key_hash.cc#L745) looks a lot like [hashing.h#L88](https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/hashing.h#L88). [hashing_benchmark.cc#L70](https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/hashing_benchmark.cc#L70) benchmarks using 2 multipliers, and I think if it uses just the 1 multiplier then the implementation looks a lot like Hashing64.\r\n   \r\n   All this to say that I think it should be accommodated in the benchmark, but I also wonder if some of the hashing code can be simplified/better organized in case they aren't as independent as they seem at first glance.\n\n\n",
                    "created": "2022-07-20T18:18:02.426+0000",
                    "updated": "2022-07-20T18:18:02.426+0000",
                    "started": "2022-07-20T18:18:02.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793378",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190658559\n\n   Here is my understanding, which may not be complete:\r\n   \r\n   `util/hashing.h` is a more-or-less direct adapter between Arrow and xxhash.\r\n   \r\n   `key_hash.cc` is based on xxhash but most of the algorithms have been reimplemented to some degree. The `key_hash.cc` utilities are, in theory, better suited to take advantage of columnar formats and/or vectorized CPUs.  However, as part of this rewrite, certain sacrifices were made in hash quality, in favor of performance.  This is primarily (only?) used today in Acero for the hash-join and hash-aggregate.\r\n   \r\n   In theory, `util/hashing.cc` should have a better distribution but worse performance than `key_hash.cc`.\r\n   \r\n   \n\n\n",
                    "created": "2022-07-20T19:16:32.296+0000",
                    "updated": "2022-07-20T19:16:32.296+0000",
                    "started": "2022-07-20T19:16:32.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793402",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190686364\n\n   Weston is correct, the `key_hash` interface is only meant for internal use of hash tables. It subtly doesn't match xxh in some cases (iirc it for example can pad with 0's instead of having special handling for arbitrary lengths). The interface is also optimized for hashing in mini batches and reusing as much memory as possible. In general I would suggest using `util/hashing` instead of `key_hash`, as `key_hash` is for internal use; we may want to change it at any time (e.g. we had an idea to see if we can make a really crappy hash that's very fast to compute but is \"good enough\" for a hash table). \r\n   \r\n   I can leave a review of the current code, but I'd suggest moving away from the `key_hash` interface overall.\n\n\n",
                    "created": "2022-07-20T19:46:23.301+0000",
                    "updated": "2022-07-20T19:46:23.301+0000",
                    "started": "2022-07-20T19:46:23.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793408",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on code in PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#discussion_r926010973\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n+\n+    // Prepare input data structure for propagation to hash function\n+    ArraySpan hash_input = input_arg[0].array;\n+    ARROW_ASSIGN_OR_RAISE(KeyColumnArray input_keycol,\n+                          ColumnArrayFromArrayData(hash_input.ToArrayData(),\n+                                                   default_rstart, hash_input.length));\n+\n+    // Call hashing function\n+    std::vector<uint32_t> hash_results(hash_input.length);\n\nReview Comment:\n   You should allocate your hash array up front and write directly into it. Specifically, don't use `builder`, just do `std::unique_ptr<Buffer> hash_buffer = AllocateBuffer(length * sizeof(uint32_t))` and pass `hash_buffer->mutable_data()` into the `HashMultiColumn`.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n+\n+    // Prepare input data structure for propagation to hash function\n+    ArraySpan hash_input = input_arg[0].array;\n+    ARROW_ASSIGN_OR_RAISE(KeyColumnArray input_keycol,\n+                          ColumnArrayFromArrayData(hash_input.ToArrayData(),\n+                                                   default_rstart, hash_input.length));\n+\n+    // Call hashing function\n+    std::vector<uint32_t> hash_results(hash_input.length);\n+    LightContext hash_ctx;\n+\n+    hash_ctx.hardware_flags = ctx->exec_context()->cpu_info()->hardware_flags();\n+    hash_ctx.stack = &stack_memallocator;\n+    Hashing32::HashMultiColumn({input_keycol}, &hash_ctx, hash_results.data());\n+\n+    // Prepare results of hash function for kernel output argument\n+    arrow::UInt32Builder builder;\n+    ARROW_RETURN_NOT_OK(builder.Reserve(hash_results.size()));\n+    ARROW_RETURN_NOT_OK(builder.AppendValues(hash_results));\n+    ARROW_ASSIGN_OR_RAISE(auto result_array, builder.Finish());\n\nReview Comment:\n   What this is currently doing now is allocating two chunks of memory, computing the hashes into the first one, copying from the first to the second, freeing the first, and returning the second.  \r\n   \r\n   Instead (as per suggestion above), just allocate once and copy write results into it.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n\nReview Comment:\n   Can `exec_context()` ever be null here?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n\nReview Comment:\n   You are currently allocating `96 * 1024` bytes; I'd suggest changing this to just `3 * sizeof(uint32_t) * util::MiniBatch::kMiniBatchSize`. \n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n+\n+    // Prepare input data structure for propagation to hash function\n+    ArraySpan hash_input = input_arg[0].array;\n+    ARROW_ASSIGN_OR_RAISE(KeyColumnArray input_keycol,\n+                          ColumnArrayFromArrayData(hash_input.ToArrayData(),\n+                                                   default_rstart, hash_input.length));\n+\n+    // Call hashing function\n+    std::vector<uint32_t> hash_results(hash_input.length);\n+    LightContext hash_ctx;\n+\n+    hash_ctx.hardware_flags = ctx->exec_context()->cpu_info()->hardware_flags();\n+    hash_ctx.stack = &stack_memallocator;\n+    Hashing32::HashMultiColumn({input_keycol}, &hash_ctx, hash_results.data());\n+\n+    // Prepare results of hash function for kernel output argument\n+    arrow::UInt32Builder builder;\n+    ARROW_RETURN_NOT_OK(builder.Reserve(hash_results.size()));\n+    ARROW_RETURN_NOT_OK(builder.AppendValues(hash_results));\n+    ARROW_ASSIGN_OR_RAISE(auto result_array, builder.Finish());\n+\n+    out->value = ArraySpan{*(result_array->data())};\n+    return Status::OK();\n+  }\n+\n+  // This 96 represents the most bits *per row* that the Hashing32 and Hashing64\n+  // algorithms allocate from the provided `TempVectorStack`\n+  static constexpr uint32_t max_bitwidth = 96;\n\nReview Comment:\n   I found this confusing at first, usually \"bit width\" implies a single value that is this many bits wide. I'd suggest changing this to `max_bytes_per_value`, or even better just removing this constant altogether. \n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n+\n+    // Prepare input data structure for propagation to hash function\n+    ArraySpan hash_input = input_arg[0].array;\n+    ARROW_ASSIGN_OR_RAISE(KeyColumnArray input_keycol,\n+                          ColumnArrayFromArrayData(hash_input.ToArrayData(),\n+                                                   default_rstart, hash_input.length));\n+\n+    // Call hashing function\n+    std::vector<uint32_t> hash_results(hash_input.length);\n+    LightContext hash_ctx;\n+\n+    hash_ctx.hardware_flags = ctx->exec_context()->cpu_info()->hardware_flags();\n+    hash_ctx.stack = &stack_memallocator;\n+    Hashing32::HashMultiColumn({input_keycol}, &hash_ctx, hash_results.data());\n+\n+    // Prepare results of hash function for kernel output argument\n+    arrow::UInt32Builder builder;\n+    ARROW_RETURN_NOT_OK(builder.Reserve(hash_results.size()));\n+    ARROW_RETURN_NOT_OK(builder.AppendValues(hash_results));\n+    ARROW_ASSIGN_OR_RAISE(auto result_array, builder.Finish());\n+\n+    out->value = ArraySpan{*(result_array->data())};\n+    return Status::OK();\n+  }\n+\n+  // This 96 represents the most bits *per row* that the Hashing32 and Hashing64\n+  // algorithms allocate from the provided `TempVectorStack`\n+  static constexpr uint32_t max_bitwidth = 96;\n+  static constexpr uint32_t max_batchsize = util::MiniBatch::kMiniBatchLength;\n\nReview Comment:\n   Same with this constant, I'd just use `util::MiniBatch::kMiniBatchLength` directly in the code.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n+                                                max_bitwidth * max_batchsize));\n+\n+    // Prepare input data structure for propagation to hash function\n+    ArraySpan hash_input = input_arg[0].array;\n+    ARROW_ASSIGN_OR_RAISE(KeyColumnArray input_keycol,\n+                          ColumnArrayFromArrayData(hash_input.ToArrayData(),\n+                                                   default_rstart, hash_input.length));\n+\n+    // Call hashing function\n+    std::vector<uint32_t> hash_results(hash_input.length);\n+    LightContext hash_ctx;\n+\n+    hash_ctx.hardware_flags = ctx->exec_context()->cpu_info()->hardware_flags();\n+    hash_ctx.stack = &stack_memallocator;\n+    Hashing32::HashMultiColumn({input_keycol}, &hash_ctx, hash_results.data());\n+\n+    // Prepare results of hash function for kernel output argument\n+    arrow::UInt32Builder builder;\n+    ARROW_RETURN_NOT_OK(builder.Reserve(hash_results.size()));\n+    ARROW_RETURN_NOT_OK(builder.AppendValues(hash_results));\n+    ARROW_ASSIGN_OR_RAISE(auto result_array, builder.Finish());\n+\n+    out->value = ArraySpan{*(result_array->data())};\n+    return Status::OK();\n+  }\n+\n+  // This 96 represents the most bits *per row* that the Hashing32 and Hashing64\n+  // algorithms allocate from the provided `TempVectorStack`\n+  static constexpr uint32_t max_bitwidth = 96;\n+  static constexpr uint32_t max_batchsize = util::MiniBatch::kMiniBatchLength;\n+  static constexpr int64_t default_rstart = 0;\n+};\n+\n+struct FastHash64Scalar {\n\nReview Comment:\n   My comments from above apply here too.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n\nReview Comment:\n   Use `|| !input_arg[0].is_array())` please\n\n\n\n",
                    "created": "2022-07-20T20:17:10.434+0000",
                    "updated": "2022-07-20T20:17:10.434+0000",
                    "started": "2022-07-20T20:17:10.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793420",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190754294\n\n   > Biggest feedback is to not allocate a large temporary `std::vector` and instead write directly into the buffer you'll be returning. Also you made your TempVectorStack way too big. \n   \n   thanks! I had troubles with smaller sizes and tried to not size it too large, but I'll revisit.\n   \n   For writing directly into the buffer to return, I assume that means I need to create an ArrayData? is there a better interface via Builders?\n\n\n",
                    "created": "2022-07-20T21:02:01.101+0000",
                    "updated": "2022-07-20T21:02:01.101+0000",
                    "started": "2022-07-20T21:02:01.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793429",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#issuecomment-1190755307\n\n   never mind, you actually mentioned how to do it already. the mobile interface hid it\n\n\n",
                    "created": "2022-07-20T21:03:14.181+0000",
                    "updated": "2022-07-20T21:03:14.181+0000",
                    "started": "2022-07-20T21:03:14.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793431",
                    "issueId": "13469528"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/worklog/793432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13487:\nURL: https://github.com/apache/arrow/pull/13487#discussion_r926054959\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_hash.cc:\n##########\n@@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/**\n+ * @file  scalar_hash.cc\n+ * @brief Element-wise (scalar) kernels for hashing values.\n+ */\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include \"arrow/array/array_base.h\"\n+#include \"arrow/array/builder_primitive.h\"\n+#include \"arrow/compute/exec/key_hash.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/compute/light_array.h\"\n+#include \"arrow/result.h\"\n+\n+// NOTES:\n+// * `KeyColumnArray` comes from light_array.h\n+//   * Should be replaceable with `ExecSpan`\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+// Define symbols visible within `arrow::compute::internal` in this file;\n+// these symbols are not visible outside of this file.\n+namespace {\n+\n+// ------------------------------\n+// Function documentation\n+const FunctionDoc fast_hash_32_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 32-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+const FunctionDoc fast_hash_64_doc{\n+    \"Construct a hash for every element of the input argument\",\n+    (\"An element-wise function that uses an xxHash-like algorithm.\\n\"\n+     \"This function is not suitable for cryptographic purposes.\\n\"\n+     \"Hash results are 64-bit and emitted for each valid row.\\n\"\n+     \"Null (or invalid) rows emit a null in the output.\"),\n+    {\"hash_input\"}};\n+\n+// ------------------------------\n+// Kernel implementations\n+struct FastHash32Scalar {\n+  static Status Exec(KernelContext* ctx, const ExecSpan& input_arg, ExecResult* out) {\n+    if (input_arg.num_values() != 1 or not input_arg[0].is_array()) {\n+      return Status::Invalid(\"FastHash32 currently supports a single array input\");\n+    }\n+\n+    // Initialize stack-based memory allocator with an allocator and memory size\n+    util::TempVectorStack stack_memallocator;\n+    ARROW_RETURN_NOT_OK(stack_memallocator.Init(ctx->exec_context()->memory_pool(),\n\nReview Comment:\n   I didn't think so but I can guard against it\n\n\n\n",
                    "created": "2022-07-20T21:07:15.037+0000",
                    "updated": "2022-07-20T21:07:15.037+0000",
                    "started": "2022-07-20T21:07:15.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793432",
                    "issueId": "13469528"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4ac67f4e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20ff5bf6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c0c7b1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6f6bb80[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44d32eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b8c60fa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5467320c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@677eb9bb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ac915d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ca3fc6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fd09ac1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7d7155e1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 02 06:07:11 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-02T06:07:11.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16945/watchers",
            "watchCount": 0,
            "isWatching": false
        },
        "created": "2022-06-30T21:52:16.000+0000",
        "updated": "2022-08-02T06:07:11.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a subtask of ARROW-8991 in order to track that this is a 32-bit version of the scalar_hash function. ARROW-8991 can be treated as an overall task to track if we want other versions of the function or additional kernels and options.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add FastHash32 as a 32-bit version of a scalar hash function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/comment/17574063",
                    "id": "17574063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "going to close this sub-task, as I've already scope creeped past just a 32-bit version.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-02T06:05:40.358+0000",
                    "updated": "2022-08-02T06:05:40.358+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13469528/comment/17574064",
                    "id": "17574064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "choosing \"done\" because it is not useful anymore but it is not quite \"invalid\"",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-02T06:07:11.513+0000",
                    "updated": "2022-08-02T06:07:11.513+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z16iig:",
        "customfield_12314139": null
    }
}