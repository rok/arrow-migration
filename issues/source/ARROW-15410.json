{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13424108",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108",
    "key": "ARROW-15410",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12631784",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12631784",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13424109",
                    "key": "ARROW-15411",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424109",
                    "fields": {
                        "summary": "[C++][Datasets] Improve memory usage of datasets",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15410/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/735583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1057375461\n\n\n   https://issues.apache.org/jira/browse/ARROW-15410\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-02T21:01:07.497+0000",
                    "updated": "2022-03-02T21:01:07.497+0000",
                    "started": "2022-03-02T21:01:07.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735583",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/759888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1104958092\n\n   @lidavidm Unfortunately, when adding tests, I ran into a few issues and so this PR has evolved quite a bit from the last time you reviewed it.  It probably needs a fresh look at this point.\n\n\n",
                    "created": "2022-04-21T09:36:03.808+0000",
                    "updated": "2022-04-21T09:36:03.808+0000",
                    "started": "2022-04-21T09:36:03.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "759888",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/759891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1104964068\n\n   I've created ARROW-16263 for the documentation tasks.\n\n\n",
                    "created": "2022-04-21T09:40:00.257+0000",
                    "updated": "2022-04-21T09:40:00.257+0000",
                    "started": "2022-04-21T09:40:00.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "759891",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855431141\n\n\n##########\ncpp/src/arrow/compute/exec/hash_join_node.cc:\n##########\n@@ -593,9 +593,13 @@ class HashJoinNode : public ExecNode {\n     return Status::OK();\n   }\n \n-  void PauseProducing(ExecNode* output) override { EVENT(span_, \"PauseProducing\"); }\n+  void PauseProducing(ExecNode* output, int32_t counter) override {\n+    // TODO(ARROW-16246)\n\nReview Comment:\n   Should we keep the EVENT calls at least?\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n+      : generator(generator),\n+        backpressure(std::move(backpressure)),\n+        backpressure_monitor(backpressure_monitor) {}\n+\n+  /// \\brief A pointer to a generator of batches.\n+  ///\n+  /// This will be set when the node is added to the plan and should be used to consume\n+  /// data from the plan.  If this function is not called frequently enough then the sink\n+  /// node will start to accumulate data and may apply backpressure.\n   std::function<Future<util::optional<ExecBatch>>()>* generator;\n-  util::BackpressureOptions backpressure;\n+  /// \\brief Options to control when to apply backpressure\n+  ///\n+  /// This is optional, the default is to never apply backpressure.  If the plan is not\n+  /// consumed quickly enough the system may eventually run out of memory.\n+  BackpressureOptions backpressure;\n+  /// \\brief A pointer to a backpressure monitor\n+  ///\n+  /// This will be set when the node is added to the plan.  This can be used to inspect\n+  /// the amount of data currently queued in the sink node.  This is an optional utility\n+  /// and backpressure can be applied even if this is not used.\n+  std::shared_ptr<BackpressureMonitor>* backpressure_monitor;\n+};\n+\n+/// \\brief Control used by a SinkNodeConsumer to pause & resume\n+///\n+/// Callers should ensure that they do not call Pause and Resume simultaneously and they\n+/// should sequence things so that a call to Pause() is always followed by an eventual\n+/// call to Resume()\n+class BackpressureControl {\n\nReview Comment:\n   probably needs ARROW_EXPORT\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n\nReview Comment:\n   probably needs an ARROW_EXPORT?\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n\nReview Comment:\n   Seems weird to have ptr-to-shared-ptr, vs. just a shared_ptr that might hold nullptr.\n\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n\nReview Comment:\n   nit but seems it's spelled Rese**r**voir\n\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -103,6 +157,28 @@ class SinkNode : public ExecNode {\n \n   Future<> finished() override { return finished_; }\n \n+  void RecordBackpressureBytesUsed(const ExecBatch& batch) {\n+    if (backpressure_queue_->enabled()) {\n+      uint64_t bytes_used = static_cast<uint64_t>(batch.TotalBufferSize());\n+      auto state_change = backpressure_queue_->RecordProduced(bytes_used);\n+      if (state_change >= 0) {\n+        EVENT(span_, \"Backpressure applied\", {{\"counter\", state_change}});\n\nReview Comment:\n   nit, but maybe namespace the span attribute name?\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n\nReview Comment:\n   Ah, this is because it's an out pointer?\n\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n+    std::lock_guard<std::mutex> lg(mutex_);\n+    bool was_under = bytes_used_ <= pause_if_above_;\n+    bytes_used_ += num_bytes;\n+    if (was_under && bytes_used_ > pause_if_above_) {\n+      return ++state_change_counter_;\n+    }\n+    return -1;\n+  }\n+\n+  int32_t RecordConsumed(uint64_t num_bytes) {\n+    std::lock_guard<std::mutex> lg(mutex_);\n+    bool was_over = bytes_used_ >= resume_if_below_;\n+    bytes_used_ -= num_bytes;\n+    if (was_over && bytes_used_ < resume_if_below_) {\n+      return ++state_change_counter_;\n+    }\n+    return -1;\n+  }\n+\n+ private:\n+  std::mutex mutex_;\n+  uint64_t bytes_used_;\n+  int32_t state_change_counter_;\n+  const uint64_t resume_if_below_;\n+  const uint64_t pause_if_above_;\n+};\n+\n class SinkNode : public ExecNode {\n  public:\n   SinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n            AsyncGenerator<util::optional<ExecBatch>>* generator,\n-           util::BackpressureOptions backpressure)\n+           BackpressureOptions backpressure,\n+           std::shared_ptr<BackpressureMonitor>* backpressure_monitor_out)\n       : ExecNode(plan, std::move(inputs), {\"collected\"}, {},\n                  /*num_outputs=*/0),\n-        producer_(MakeProducer(generator, std::move(backpressure))) {}\n+        backpressure_queue_(std::make_shared<BackpressureResevoir>(\n+            backpressure.resume_if_below, backpressure.pause_if_above)),\n+        push_gen_(),\n+        producer_(push_gen_.producer()) {\n+    if (backpressure_monitor_out) {\n+      *backpressure_monitor_out = backpressure_queue_;\n+    }\n+    AsyncGenerator<util::optional<ExecBatch>> captured_gen = push_gen_;\n\nReview Comment:\n   nit, but if we're capturing `this` already, is it necessary to also copy/capture the generator separately?\n\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n\nReview Comment:\n   It seems the exact return value is never used, perhaps return bool instead?\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n\nReview Comment:\n   Does this need to be `inline`?\n\n\n\n",
                    "created": "2022-04-21T18:29:32.143+0000",
                    "updated": "2022-04-21T18:29:32.143+0000",
                    "started": "2022-04-21T18:29:32.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760283",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855737474\n\n\n##########\ncpp/src/arrow/compute/exec/hash_join_node.cc:\n##########\n@@ -593,9 +593,13 @@ class HashJoinNode : public ExecNode {\n     return Status::OK();\n   }\n \n-  void PauseProducing(ExecNode* output) override { EVENT(span_, \"PauseProducing\"); }\n+  void PauseProducing(ExecNode* output, int32_t counter) override {\n+    // TODO(ARROW-16246)\n\nReview Comment:\n   I'm not really a fan of these if we're not actually doing anything (or just proxying info) but I can put it back in.  In general I think `EVENT` is more meaningful when we've made some kind of decision based on data (e.g. when we decide we need to apply backpressure) or an external signal.\n\n\n\n",
                    "created": "2022-04-22T03:24:44.267+0000",
                    "updated": "2022-04-22T03:24:44.267+0000",
                    "started": "2022-04-22T03:24:44.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760572",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855737474\n\n\n##########\ncpp/src/arrow/compute/exec/hash_join_node.cc:\n##########\n@@ -593,9 +593,13 @@ class HashJoinNode : public ExecNode {\n     return Status::OK();\n   }\n \n-  void PauseProducing(ExecNode* output) override { EVENT(span_, \"PauseProducing\"); }\n+  void PauseProducing(ExecNode* output, int32_t counter) override {\n+    // TODO(ARROW-16246)\n\nReview Comment:\n   I'm not really a fan of these if we're not actually doing anything (or just forwarding the signal) but I can put it back in.  In general I think `EVENT` is more meaningful when we've made some kind of decision based on data (e.g. when we decide we need to apply backpressure) or an external signal.\n\n\n\n",
                    "created": "2022-04-22T03:24:59.421+0000",
                    "updated": "2022-04-22T03:24:59.421+0000",
                    "started": "2022-04-22T03:24:59.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760573",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855738848\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n\nReview Comment:\n   It's an out pointer that we want to share ownership.  I was a little torn on this as we could use a raw pointer but then it wouldn't be valid to call any of the monitor methods after the plan is destroyed.  I think that is probably ok in general but `generator` _will_ actually keep the queue alive beyond the plan (`std::function` is essentially a shared pointer to its target) and so I wanted to match the lifetime.\n\n\n\n",
                    "created": "2022-04-22T03:29:19.506+0000",
                    "updated": "2022-04-22T03:29:19.506+0000",
                    "started": "2022-04-22T03:29:19.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760574",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855743738\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n\nReview Comment:\n   Which return value are you referring to?  The return value from `RecordProduced` is important as its the signal we send through the plan:\r\n   \r\n   ```\r\n         auto state_change = backpressure_queue_.RecordProduced(bytes_used);\r\n         if (state_change >= 0) {\r\n           EVENT(span_, \"Backpressure applied\", {{\"backpressure.counter\", state_change}});\r\n           inputs_[0]->PauseProducing(this, state_change);\r\n         }\r\n   ```\r\n   \r\n   ...and then later in the source node it shows up as `counter`...\r\n   \r\n   ```\r\n     void PauseProducing(ExecNode* output, int32_t counter) override {\r\n       std::lock_guard<std::mutex> lg(mutex_);\r\n       if (counter <= backpressure_counter_) {\r\n         return;\r\n       }\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n\nReview Comment:\n   Which return value are you referring to?  The return value from `RecordProduced` is important as it's the signal we send through the plan:\r\n   \r\n   ```\r\n         auto state_change = backpressure_queue_.RecordProduced(bytes_used);\r\n         if (state_change >= 0) {\r\n           EVENT(span_, \"Backpressure applied\", {{\"backpressure.counter\", state_change}});\r\n           inputs_[0]->PauseProducing(this, state_change);\r\n         }\r\n   ```\r\n   \r\n   ...and then later in the source node it shows up as `counter`...\r\n   \r\n   ```\r\n     void PauseProducing(ExecNode* output, int32_t counter) override {\r\n       std::lock_guard<std::mutex> lg(mutex_);\r\n       if (counter <= backpressure_counter_) {\r\n         return;\r\n       }\r\n   ```\n\n\n\n",
                    "created": "2022-04-22T03:45:10.948+0000",
                    "updated": "2022-04-22T03:45:10.948+0000",
                    "started": "2022-04-22T03:45:10.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760578",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855744214\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n\nReview Comment:\n   Thanks.  Added.\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n+      : generator(generator),\n+        backpressure(std::move(backpressure)),\n+        backpressure_monitor(backpressure_monitor) {}\n+\n+  /// \\brief A pointer to a generator of batches.\n+  ///\n+  /// This will be set when the node is added to the plan and should be used to consume\n+  /// data from the plan.  If this function is not called frequently enough then the sink\n+  /// node will start to accumulate data and may apply backpressure.\n   std::function<Future<util::optional<ExecBatch>>()>* generator;\n-  util::BackpressureOptions backpressure;\n+  /// \\brief Options to control when to apply backpressure\n+  ///\n+  /// This is optional, the default is to never apply backpressure.  If the plan is not\n+  /// consumed quickly enough the system may eventually run out of memory.\n+  BackpressureOptions backpressure;\n+  /// \\brief A pointer to a backpressure monitor\n+  ///\n+  /// This will be set when the node is added to the plan.  This can be used to inspect\n+  /// the amount of data currently queued in the sink node.  This is an optional utility\n+  /// and backpressure can be applied even if this is not used.\n+  std::shared_ptr<BackpressureMonitor>* backpressure_monitor;\n+};\n+\n+/// \\brief Control used by a SinkNodeConsumer to pause & resume\n+///\n+/// Callers should ensure that they do not call Pause and Resume simultaneously and they\n+/// should sequence things so that a call to Pause() is always followed by an eventual\n+/// call to Resume()\n+class BackpressureControl {\n\nReview Comment:\n   Added.\n\n\n\n",
                    "created": "2022-04-22T03:46:51.114+0000",
                    "updated": "2022-04-22T03:46:51.114+0000",
                    "started": "2022-04-22T03:46:51.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760579",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748314\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n\nReview Comment:\n   Actually, since the generator is now capturing `this` I rescind my previous statement.  We _could_ change the generator to also capture the backpressure reservoir (so it doesn't have to capture `this`) but I think that starts to complicate things.  I think we want to say:\r\n   \r\n   `All inputs and outputs to a plan become invalid when the plan is destroyed`\r\n   \r\n   This is a slight change in behavior so I added a guard to the AsyncGenerator so it should now be obvious to callers if the generator outlives the plan.\r\n   \r\n   With this change I went ahead and changed `backpressure_monitor` to `BackpressureMonitor**`\n\n\n\n",
                    "created": "2022-04-22T04:00:17.742+0000",
                    "updated": "2022-04-22T04:00:17.742+0000",
                    "started": "2022-04-22T04:00:17.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760583",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748416\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n\nReview Comment:\n   Nope, removed.\n\n\n\n",
                    "created": "2022-04-22T04:00:37.832+0000",
                    "updated": "2022-04-22T04:00:37.832+0000",
                    "started": "2022-04-22T04:00:37.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760584",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748683\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n\nReview Comment:\n   :exploding_head: Fixed...but this is a serious [Berenstain Bears](https://en.wikipedia.org/wiki/Berenstain_Bears#Name_confusion) moment.\n\n\n\n",
                    "created": "2022-04-22T04:01:32.973+0000",
                    "updated": "2022-04-22T04:01:32.973+0000",
                    "started": "2022-04-22T04:01:32.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760585",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748874\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -103,6 +157,28 @@ class SinkNode : public ExecNode {\n \n   Future<> finished() override { return finished_; }\n \n+  void RecordBackpressureBytesUsed(const ExecBatch& batch) {\n+    if (backpressure_queue_->enabled()) {\n+      uint64_t bytes_used = static_cast<uint64_t>(batch.TotalBufferSize());\n+      auto state_change = backpressure_queue_->RecordProduced(bytes_used);\n+      if (state_change >= 0) {\n+        EVENT(span_, \"Backpressure applied\", {{\"counter\", state_change}});\n\nReview Comment:\n   I changed it to `backpressure.counter`.  Is this what you were thinking?  It doesn't seem we are doing much namespacing elsewhere.\n\n\n\n",
                    "created": "2022-04-22T04:02:12.911+0000",
                    "updated": "2022-04-22T04:02:12.911+0000",
                    "started": "2022-04-22T04:02:12.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760586",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748930\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n+    std::lock_guard<std::mutex> lg(mutex_);\n+    bool was_under = bytes_used_ <= pause_if_above_;\n+    bytes_used_ += num_bytes;\n+    if (was_under && bytes_used_ > pause_if_above_) {\n+      return ++state_change_counter_;\n+    }\n+    return -1;\n+  }\n+\n+  int32_t RecordConsumed(uint64_t num_bytes) {\n+    std::lock_guard<std::mutex> lg(mutex_);\n+    bool was_over = bytes_used_ >= resume_if_below_;\n+    bytes_used_ -= num_bytes;\n+    if (was_over && bytes_used_ < resume_if_below_) {\n+      return ++state_change_counter_;\n+    }\n+    return -1;\n+  }\n+\n+ private:\n+  std::mutex mutex_;\n+  uint64_t bytes_used_;\n+  int32_t state_change_counter_;\n+  const uint64_t resume_if_below_;\n+  const uint64_t pause_if_above_;\n+};\n+\n class SinkNode : public ExecNode {\n  public:\n   SinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n            AsyncGenerator<util::optional<ExecBatch>>* generator,\n-           util::BackpressureOptions backpressure)\n+           BackpressureOptions backpressure,\n+           std::shared_ptr<BackpressureMonitor>* backpressure_monitor_out)\n       : ExecNode(plan, std::move(inputs), {\"collected\"}, {},\n                  /*num_outputs=*/0),\n-        producer_(MakeProducer(generator, std::move(backpressure))) {}\n+        backpressure_queue_(std::make_shared<BackpressureResevoir>(\n+            backpressure.resume_if_below, backpressure.pause_if_above)),\n+        push_gen_(),\n+        producer_(push_gen_.producer()) {\n+    if (backpressure_monitor_out) {\n+      *backpressure_monitor_out = backpressure_queue_;\n+    }\n+    AsyncGenerator<util::optional<ExecBatch>> captured_gen = push_gen_;\n\nReview Comment:\n   No, I've changed this.\n\n\n\n",
                    "created": "2022-04-22T04:02:27.963+0000",
                    "updated": "2022-04-22T04:02:27.963+0000",
                    "started": "2022-04-22T04:02:27.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760587",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r855748314\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -129,17 +129,86 @@ class ARROW_EXPORT AggregateNodeOptions : public ExecNodeOptions {\n   std::vector<FieldRef> keys;\n };\n \n+constexpr int32_t kDefaultBackpressureHighBytes = 1 << 30;  // 1GiB\n+constexpr int32_t kDefaultBackpressureLowBytes = 1 << 28;   // 256MiB\n+\n+class BackpressureMonitor {\n+ public:\n+  virtual ~BackpressureMonitor() = default;\n+  virtual uint64_t bytes_in_use() const = 0;\n+  virtual bool is_paused() const = 0;\n+};\n+\n+/// \\brief Options to control backpressure behavior\n+struct ARROW_EXPORT BackpressureOptions {\n+  /// \\brief Create default options that perform no backpressure\n+  BackpressureOptions() : resume_if_below(0), pause_if_above(0) {}\n+  /// \\brief Create options that will perform backpressure\n+  ///\n+  /// \\param resume_if_below The producer should resume producing if the backpressure\n+  ///                        queue has fewer than resume_if_below items.\n+  /// \\param pause_if_above The producer should pause producing if the backpressure\n+  ///                       queue has more than pause_if_above items\n+  BackpressureOptions(uint32_t resume_if_below, uint32_t pause_if_above)\n+      : resume_if_below(resume_if_below), pause_if_above(pause_if_above) {}\n+\n+  static BackpressureOptions DefaultBackpressure() {\n+    return BackpressureOptions(kDefaultBackpressureLowBytes,\n+                               kDefaultBackpressureHighBytes);\n+  }\n+\n+  inline bool should_apply_backpressure() const { return pause_if_above > 0; }\n+\n+  uint64_t resume_if_below;\n+  uint64_t pause_if_above;\n+};\n+\n /// \\brief Add a sink node which forwards to an AsyncGenerator<ExecBatch>\n ///\n /// Emitted batches will not be ordered.\n class ARROW_EXPORT SinkNodeOptions : public ExecNodeOptions {\n  public:\n-  explicit SinkNodeOptions(std::function<Future<util::optional<ExecBatch>>()>* generator,\n-                           util::BackpressureOptions backpressure = {})\n-      : generator(generator), backpressure(std::move(backpressure)) {}\n-\n+  explicit SinkNodeOptions(\n+      std::function<Future<util::optional<ExecBatch>>()>* generator,\n+      BackpressureOptions backpressure = {},\n+      std::shared_ptr<BackpressureMonitor>* backpressure_monitor = NULLPTR)\n\nReview Comment:\n   Actually, since the generator is now capturing `this` I rescind my previous statement.  We _could_ change the generator to also capture both the generator AND the backpressure reservoir (so it doesn't have to capture `this`) but I think that starts to complicate things.  I think we want to say:\r\n   \r\n   `All inputs and outputs to a plan become invalid when the plan is destroyed`\r\n   \r\n   This is a slight change in behavior so I added a guard to the AsyncGenerator so it should now be obvious to callers if the generator outlives the plan.\r\n   \r\n   With this change I went ahead and changed `backpressure_monitor` to `BackpressureMonitor**`\n\n\n\n",
                    "created": "2022-04-22T04:03:18.023+0000",
                    "updated": "2022-04-22T04:03:18.023+0000",
                    "started": "2022-04-22T04:03:18.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760588",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r856185407\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -46,31 +46,81 @@ using internal::checked_cast;\n namespace compute {\n namespace {\n \n+class BackpressureResevoir : public BackpressureMonitor {\n+ public:\n+  BackpressureResevoir(uint64_t resume_if_below, uint64_t pause_if_above)\n+      : bytes_used_(0),\n+        state_change_counter_(0),\n+        resume_if_below_(resume_if_below),\n+        pause_if_above_(pause_if_above) {}\n+\n+  uint64_t bytes_in_use() const override { return bytes_used_; }\n+  bool is_paused() const override { return state_change_counter_ % 2 == 1; }\n+  bool enabled() const { return pause_if_above_ > 0; }\n+\n+  int32_t RecordProduced(uint64_t num_bytes) {\n\nReview Comment:\n   Ah, my bad, I missed that spot.\n\n\n\n",
                    "created": "2022-04-22T12:34:50.805+0000",
                    "updated": "2022-04-22T12:34:50.805+0000",
                    "started": "2022-04-22T12:34:50.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760788",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#discussion_r856185741\n\n\n##########\ncpp/src/arrow/compute/exec/sink_node.cc:\n##########\n@@ -103,6 +157,28 @@ class SinkNode : public ExecNode {\n \n   Future<> finished() override { return finished_; }\n \n+  void RecordBackpressureBytesUsed(const ExecBatch& batch) {\n+    if (backpressure_queue_->enabled()) {\n+      uint64_t bytes_used = static_cast<uint64_t>(batch.TotalBufferSize());\n+      auto state_change = backpressure_queue_->RecordProduced(bytes_used);\n+      if (state_change >= 0) {\n+        EVENT(span_, \"Backpressure applied\", {{\"counter\", state_change}});\n\nReview Comment:\n   That works, I was thinking `arrow....` like in the memory PR but it's not a big deal.\n\n\n\n##########\ncpp/src/arrow/compute/exec/hash_join_node.cc:\n##########\n@@ -593,9 +593,13 @@ class HashJoinNode : public ExecNode {\n     return Status::OK();\n   }\n \n-  void PauseProducing(ExecNode* output) override { EVENT(span_, \"PauseProducing\"); }\n+  void PauseProducing(ExecNode* output, int32_t counter) override {\n+    // TODO(ARROW-16246)\n\nReview Comment:\n   Ah, that's fair. We can leave it out.\n\n\n\n",
                    "created": "2022-04-22T12:35:15.764+0000",
                    "updated": "2022-04-22T12:35:15.764+0000",
                    "started": "2022-04-22T12:35:15.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760789",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/760828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1106515200\n\n   Looks like Ra\u00fal is still working through the Git failures, but we can rebase and merge after that.\n\n\n",
                    "created": "2022-04-22T13:26:37.340+0000",
                    "updated": "2022-04-22T13:26:37.340+0000",
                    "started": "2022-04-22T13:26:37.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760828",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/761135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1106960830\n\n   @lidavidm \r\n   \r\n   Hmm....doing some more testing on this I think this might be non-ideal in a few situations (S3, low number of files, smallish row groups).  This is because we are always reading only 1 row group ahead so we will read, at most, 2 reads in parallel for a single file.\r\n   \r\n   However, the old behavior was also unmaintainable as it would have kicked off dozens of parallel reads and run out of memory.\r\n   \r\n   The ideal approach would be to keep track of how many rows we have \"in flight\" and issue reads until we have batch_size * batch_readahead rows in flight and then pause.  I'm going to work on this but, as we are close to release, I'd prefer to move forward with this sometimes-slower-but-usually-safer approach and put the ideal fix in a follow-up.\n\n\n",
                    "created": "2022-04-22T22:41:15.240+0000",
                    "updated": "2022-04-22T22:41:15.240+0000",
                    "started": "2022-04-22T22:41:15.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761135",
                    "issueId": "13424108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/worklog/761136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #12228:\nURL: https://github.com/apache/arrow/pull/12228#issuecomment-1106961501\n\n   Is there a quick config change we can document for S3?\n\n\n",
                    "created": "2022-04-22T22:42:06.186+0000",
                    "updated": "2022-04-22T22:42:06.186+0000",
                    "started": "2022-04-22T22:42:06.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761136",
                    "issueId": "13424108"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@28ad3577[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3739aa6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f3d9191[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6084827a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f7e0d3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@187bada[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12251262[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5676d50e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@497e3511[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7513178e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f9fbd4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f21df14[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 22 22:54:45 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-22T22:54:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15410/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-01-22T01:40:52.000+0000",
        "updated": "2022-04-27T19:51:41.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a more targeted fix to improve memory usage when scanning parquet files.  It is related to broader issues like ARROW-14648 but those will likely take longer to fix.  The goal here is to make it possible to scan large parquet datasets with many files where each file has reasonably sized row groups (e.g. 1 million rows).  Currently we run out of memory scanning a configuration as simple as:\r\n\r\n21 parquet files\r\nEach parquet file has 10 million rows split into row groups of size 1 million",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Datasets] Improve memory usage of datasets API when scanning parquet",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424108/comment/17526713",
                    "id": "17526713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 12228\n[https://github.com/apache/arrow/pull/12228]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-04-22T22:54:45.507+0000",
                    "updated": "2022-04-22T22:54:45.507+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ytzc:",
        "customfield_12314139": null
    }
}