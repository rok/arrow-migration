{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13185725",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185725",
    "key": "ARROW-3259",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3259/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185725/worklog/145224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2581: ARROW-3259: [GLib] Rename \"writeable\" to \"writable\"\nURL: https://github.com/apache/arrow/pull/2581\n \n \n   Because C++ does the renaming.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T07:33:58.947+0000",
                    "updated": "2018-09-18T07:33:58.947+0000",
                    "started": "2018-09-18T07:33:58.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145224",
                    "issueId": "13185725"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185725/worklog/145225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2581: ARROW-3259: [GLib] Rename \"writeable\" to \"writable\"\nURL: https://github.com/apache/arrow/pull/2581#issuecomment-422286603\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T07:34:08.750+0000",
                    "updated": "2018-09-18T07:34:08.750+0000",
                    "started": "2018-09-18T07:34:08.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145225",
                    "issueId": "13185725"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185725/worklog/145299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2581: ARROW-3259: [GLib] Rename \"writeable\" to \"writable\"\nURL: https://github.com/apache/arrow/pull/2581\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/Makefile.am b/c_glib/arrow-glib/Makefile.am\nindex 13bfe998fa..bc9fceec07 100644\n--- a/c_glib/arrow-glib/Makefile.am\n+++ b/c_glib/arrow-glib/Makefile.am\n@@ -75,8 +75,8 @@ libarrow_glib_la_headers +=\t\t\t\\\n \tinput-stream.h\t\t\t\t\\\n \toutput-stream.h\t\t\t\t\\\n \treadable.h\t\t\t\t\\\n-\twriteable.h\t\t\t\t\\\n-\twriteable-file.h\n+\twritable.h\t\t\t\t\\\n+\twritable-file.h\n \n libarrow_glib_la_headers +=\t\t\t\\\n \tmetadata-version.h\t\t\t\\\n@@ -126,8 +126,8 @@ libarrow_glib_la_sources +=\t\t\t\\\n \tinput-stream.cpp\t\t\t\\\n \toutput-stream.cpp\t\t\t\\\n \treadable.cpp\t\t\t\t\\\n-\twriteable.cpp\t\t\t\t\\\n-\twriteable-file.cpp\n+\twritable.cpp\t\t\t\t\\\n+\twritable-file.cpp\n \n libarrow_glib_la_sources +=\t\t\t\\\n \tmetadata-version.cpp\t\t\t\\\n@@ -168,8 +168,8 @@ libarrow_glib_la_cpp_headers +=\t\t\t\\\n \tinput-stream.hpp\t\t\t\\\n \toutput-stream.hpp\t\t\t\\\n \treadable.hpp\t\t\t\t\\\n-\twriteable.hpp\t\t\t\t\\\n-\twriteable-file.hpp\n+\twritable.hpp\t\t\t\t\\\n+\twritable-file.hpp\n \n libarrow_glib_la_cpp_headers +=\t\t\t\\\n \tmetadata-version.hpp\t\t\t\\\ndiff --git a/c_glib/arrow-glib/arrow-glib.h b/c_glib/arrow-glib/arrow-glib.h\nindex ba33fda46c..492193961c 100644\n--- a/c_glib/arrow-glib/arrow-glib.h\n+++ b/c_glib/arrow-glib/arrow-glib.h\n@@ -43,8 +43,8 @@\n #include <arrow-glib/input-stream.h>\n #include <arrow-glib/output-stream.h>\n #include <arrow-glib/readable.h>\n-#include <arrow-glib/writeable.h>\n-#include <arrow-glib/writeable-file.h>\n+#include <arrow-glib/writable.h>\n+#include <arrow-glib/writable-file.h>\n \n #include <arrow-glib/metadata-version.h>\n #include <arrow-glib/reader.h>\ndiff --git a/c_glib/arrow-glib/arrow-glib.hpp b/c_glib/arrow-glib/arrow-glib.hpp\nindex 0c411346ad..18e992597c 100644\n--- a/c_glib/arrow-glib/arrow-glib.hpp\n+++ b/c_glib/arrow-glib/arrow-glib.hpp\n@@ -41,8 +41,8 @@\n #include <arrow-glib/input-stream.hpp>\n #include <arrow-glib/output-stream.hpp>\n #include <arrow-glib/readable.hpp>\n-#include <arrow-glib/writeable.hpp>\n-#include <arrow-glib/writeable-file.hpp>\n+#include <arrow-glib/writable.hpp>\n+#include <arrow-glib/writable-file.hpp>\n \n #include <arrow-glib/metadata-version.hpp>\n #include <arrow-glib/reader.hpp>\ndiff --git a/c_glib/arrow-glib/gobject-type.h b/c_glib/arrow-glib/gobject-type.h\nindex 41e3a2953d..c9ac9ea817 100644\n--- a/c_glib/arrow-glib/gobject-type.h\n+++ b/c_glib/arrow-glib/gobject-type.h\n@@ -75,3 +75,42 @@\n                                      ObjectName ## Class);              \\\n   }\n #endif\n+\n+#ifndef G_DECLARE_INTERFACE\n+#  define G_DECLARE_INTERFACE(ModuleObjectName,                         \\\n+                              module_object_name,                       \\\n+                              MODULE_NAME,                              \\\n+                              OBJECT_NAME,                              \\\n+                              PrerequisiteName)                         \\\n+  typedef struct                                                        \\\n+    _ ## ModuleObjectName                                               \\\n+    ModuleObjectName;                                                   \\\n+  typedef struct                                                        \\\n+    _ ## ModuleObjectName ## Interface                                  \\\n+    ModuleObjectName ## Interface;                                      \\\n+                                                                        \\\n+  GType module_object_name ## _get_type(void);                          \\\n+                                                                        \\\n+  static inline ModuleObjectName *                                      \\\n+  MODULE_NAME ## _ ## OBJECT_NAME(gpointer object)                      \\\n+  {                                                                     \\\n+   return G_TYPE_CHECK_INSTANCE_CAST(object,                            \\\n+                                     module_object_name ## _get_type(), \\\n+                                     ModuleObjectName);                 \\\n+  }                                                                     \\\n+                                                                        \\\n+  static inline gboolean                                                \\\n+  MODULE_NAME ## _IS_ ## OBJECT_NAME(gpointer object)                   \\\n+  {                                                                     \\\n+    return G_TYPE_CHECK_INSTANCE_TYPE(                                  \\\n+      object, module_object_name ## _get_type());                       \\\n+  }                                                                     \\\n+                                                                        \\\n+  static inline ModuleObjectName ## Interface *                         \\\n+  MODULE_NAME ## _ ## OBJECT_NAME ## _GET_IFACE(gpointer object)        \\\n+  {                                                                     \\\n+   return G_TYPE_INSTANCE_GET_INTERFACE(object,                         \\\n+                                        module_object_name ## _get_type(), \\\n+                                        ModuleObjectName ## Interface); \\\n+  }\n+#endif\ndiff --git a/c_glib/arrow-glib/meson.build b/c_glib/arrow-glib/meson.build\nindex 8279b30171..7f54e4912d 100644\n--- a/c_glib/arrow-glib/meson.build\n+++ b/c_glib/arrow-glib/meson.build\n@@ -43,8 +43,8 @@ sources += files(\n   'input-stream.cpp',\n   'output-stream.cpp',\n   'readable.cpp',\n-  'writeable.cpp',\n-  'writeable-file.cpp',\n+  'writable.cpp',\n+  'writable-file.cpp',\n )\n \n sources += files(\n@@ -94,8 +94,8 @@ c_headers += files(\n   'input-stream.h',\n   'output-stream.h',\n   'readable.h',\n-  'writeable.h',\n-  'writeable-file.h',\n+  'writable.h',\n+  'writable-file.h',\n )\n \n c_headers += files(\n@@ -142,8 +142,8 @@ cpp_headers += files(\n   'input-stream.hpp',\n   'output-stream.hpp',\n   'readable.hpp',\n-  'writeable.hpp',\n-  'writeable-file.hpp',\n+  'writable.hpp',\n+  'writable-file.hpp',\n )\n \n cpp_headers += files(\ndiff --git a/c_glib/arrow-glib/output-stream.cpp b/c_glib/arrow-glib/output-stream.cpp\nindex 9939f4f086..c9f6e71dd6 100644\n--- a/c_glib/arrow-glib/output-stream.cpp\n+++ b/c_glib/arrow-glib/output-stream.cpp\n@@ -29,7 +29,7 @@\n #include <arrow-glib/file.hpp>\n #include <arrow-glib/output-stream.hpp>\n #include <arrow-glib/tensor.hpp>\n-#include <arrow-glib/writeable.hpp>\n+#include <arrow-glib/writable.hpp>\n \n #include <iostream>\n #include <sstream>\n@@ -43,7 +43,7 @@ G_BEGIN_DECLS\n  * @include: arrow-glib/arrow-glib.h\n  *\n  * #GArrowOutputStream is an interface for stream output. Stream\n- * output is file based and writeable\n+ * output is file based and writable\n  *\n  * #GArrowFileOutputStream is a class for file output stream.\n  *\n@@ -77,17 +77,17 @@ garrow_output_stream_file_interface_init(GArrowFileInterface *iface)\n }\n \n static std::shared_ptr<arrow::io::Writable>\n-garrow_output_stream_get_raw_writeable_interface(GArrowWriteable *writeable)\n+garrow_output_stream_get_raw_writable_interface(GArrowWritable *writable)\n {\n-  auto output_stream = GARROW_OUTPUT_STREAM(writeable);\n+  auto output_stream = GARROW_OUTPUT_STREAM(writable);\n   auto arrow_output_stream = garrow_output_stream_get_raw(output_stream);\n   return arrow_output_stream;\n }\n \n static void\n-garrow_output_stream_writeable_interface_init(GArrowWriteableInterface *iface)\n+garrow_output_stream_writable_interface_init(GArrowWritableInterface *iface)\n {\n-  iface->get_raw = garrow_output_stream_get_raw_writeable_interface;\n+  iface->get_raw = garrow_output_stream_get_raw_writable_interface;\n }\n \n G_DEFINE_TYPE_WITH_CODE(GArrowOutputStream,\n@@ -96,8 +96,8 @@ G_DEFINE_TYPE_WITH_CODE(GArrowOutputStream,\n                         G_ADD_PRIVATE(GArrowOutputStream)\n                         G_IMPLEMENT_INTERFACE(GARROW_TYPE_FILE,\n                                               garrow_output_stream_file_interface_init)\n-                        G_IMPLEMENT_INTERFACE(GARROW_TYPE_WRITEABLE,\n-                                              garrow_output_stream_writeable_interface_init));\n+                        G_IMPLEMENT_INTERFACE(GARROW_TYPE_WRITABLE,\n+                                              garrow_output_stream_writable_interface_init));\n \n #define GARROW_OUTPUT_STREAM_GET_PRIVATE(obj)                   \\\n   (G_TYPE_INSTANCE_GET_PRIVATE((obj),                           \\\n@@ -177,7 +177,7 @@ garrow_output_stream_class_init(GArrowOutputStreamClass *klass)\n \n /**\n  * garrow_output_stream_write_tensor:\n- * @stream: A #GArrowWriteable.\n+ * @stream: A #GArrowWritable.\n  * @tensor: A #GArrowTensor to be written.\n  * @error: (nullable): Return location for a #GError or %NULL.\n  *\ndiff --git a/c_glib/arrow-glib/writeable-file.cpp b/c_glib/arrow-glib/writable-file.cpp\nsimilarity index 54%\nrename from c_glib/arrow-glib/writeable-file.cpp\nrename to c_glib/arrow-glib/writable-file.cpp\nindex b717c32932..76c0de6432 100644\n--- a/c_glib/arrow-glib/writeable-file.cpp\n+++ b/c_glib/arrow-glib/writable-file.cpp\n@@ -24,30 +24,30 @@\n #include <arrow/api.h>\n \n #include <arrow-glib/error.hpp>\n-#include <arrow-glib/writeable-file.hpp>\n+#include <arrow-glib/writable-file.hpp>\n \n G_BEGIN_DECLS\n \n /**\n- * SECTION: writeable-file\n- * @title: GArrowWriteableFile\n+ * SECTION: writable-file\n+ * @title: GArrowWritableFile\n  * @short_description: File output interface\n  *\n- * #GArrowWriteableFile is an interface for file output.\n+ * #GArrowWritableFile is an interface for file output.\n  */\n \n-G_DEFINE_INTERFACE(GArrowWriteableFile,\n-                   garrow_writeable_file,\n+G_DEFINE_INTERFACE(GArrowWritableFile,\n+                   garrow_writable_file,\n                    G_TYPE_OBJECT)\n \n static void\n-garrow_writeable_file_default_init (GArrowWriteableFileInterface *iface)\n+garrow_writable_file_default_init(GArrowWritableFileInterface *iface)\n {\n }\n \n /**\n- * garrow_writeable_file_write_at:\n- * @writeable_file: A #GArrowWriteableFile.\n+ * garrow_writable_file_write_at:\n+ * @writable_file: A #GArrowWritableFile.\n  * @position: The write start position.\n  * @data: (array length=n_bytes): The data to be written.\n  * @n_bytes: The number of bytes to be written.\n@@ -56,24 +56,24 @@ garrow_writeable_file_default_init (GArrowWriteableFileInterface *iface)\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  */\n gboolean\n-garrow_writeable_file_write_at(GArrowWriteableFile *writeable_file,\n-                                  gint64 position,\n-                                  const guint8 *data,\n-                                  gint64 n_bytes,\n-                                  GError **error)\n+garrow_writable_file_write_at(GArrowWritableFile *writable_file,\n+                              gint64 position,\n+                              const guint8 *data,\n+                              gint64 n_bytes,\n+                              GError **error)\n {\n-  const auto arrow_writeable_file =\n-    garrow_writeable_file_get_raw(writeable_file);\n+  const auto arrow_writable_file =\n+    garrow_writable_file_get_raw(writable_file);\n \n-  auto status = arrow_writeable_file->WriteAt(position, data, n_bytes);\n-  return garrow_error_check(error, status, \"[io][writeable-file][write-at]\");\n+  auto status = arrow_writable_file->WriteAt(position, data, n_bytes);\n+  return garrow_error_check(error, status, \"[io][writable-file][write-at]\");\n }\n \n G_END_DECLS\n \n-std::shared_ptr<arrow::io::WriteableFile>\n-garrow_writeable_file_get_raw(GArrowWriteableFile *writeable_file)\n+std::shared_ptr<arrow::io::WritableFile>\n+garrow_writable_file_get_raw(GArrowWritableFile *writable_file)\n {\n-  auto *iface = GARROW_WRITEABLE_FILE_GET_IFACE(writeable_file);\n-  return iface->get_raw(writeable_file);\n+  auto *iface = GARROW_WRITABLE_FILE_GET_IFACE(writable_file);\n+  return iface->get_raw(writable_file);\n }\ndiff --git a/c_glib/arrow-glib/writable-file.h b/c_glib/arrow-glib/writable-file.h\nnew file mode 100644\nindex 0000000000..78359f6afa\n--- /dev/null\n+++ b/c_glib/arrow-glib/writable-file.h\n@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/gobject-type.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GARROW_TYPE_WRITABLE_FILE (garrow_writable_file_get_type())\n+G_DECLARE_INTERFACE(GArrowWritableFile,\n+                    garrow_writable_file,\n+                    GARROW,\n+                    WRITABLE_FILE,\n+                    GObject)\n+\n+gboolean garrow_writable_file_write_at(GArrowWritableFile *writable_file,\n+                                       gint64 position,\n+                                       const guint8 *data,\n+                                       gint64 n_bytes,\n+                                       GError **error);\n+\n+G_END_DECLS\ndiff --git a/c_glib/arrow-glib/writeable-file.hpp b/c_glib/arrow-glib/writable-file.hpp\nsimilarity index 73%\nrename from c_glib/arrow-glib/writeable-file.hpp\nrename to c_glib/arrow-glib/writable-file.hpp\nindex aa3cc5082d..c36e24c92f 100644\n--- a/c_glib/arrow-glib/writeable-file.hpp\n+++ b/c_glib/arrow-glib/writable-file.hpp\n@@ -21,18 +21,19 @@\n \n #include <arrow/io/interfaces.h>\n \n-#include <arrow-glib/writeable-file.h>\n+#include <arrow-glib/writable-file.h>\n \n /**\n- * GArrowWriteableFile:\n+ * GArrowWritableFile:\n  *\n- * It wraps `arrow::io::WriteableFile`.\n+ * It wraps `arrow::io::WritableFile`.\n  */\n-struct _GArrowWriteableFileInterface\n+struct _GArrowWritableFileInterface\n {\n   GTypeInterface parent_iface;\n \n-  std::shared_ptr<arrow::io::WriteableFile> (*get_raw)(GArrowWriteableFile *file);\n+  std::shared_ptr<arrow::io::WritableFile> (*get_raw)(GArrowWritableFile *file);\n };\n \n-std::shared_ptr<arrow::io::WriteableFile> garrow_writeable_file_get_raw(GArrowWriteableFile *writeable_file);\n+std::shared_ptr<arrow::io::WritableFile>\n+garrow_writable_file_get_raw(GArrowWritableFile *writable_file);\ndiff --git a/c_glib/arrow-glib/writeable.cpp b/c_glib/arrow-glib/writable.cpp\nsimilarity index 56%\nrename from c_glib/arrow-glib/writeable.cpp\nrename to c_glib/arrow-glib/writable.cpp\nindex a16e43ab17..fb3bfc1a6d 100644\n--- a/c_glib/arrow-glib/writeable.cpp\n+++ b/c_glib/arrow-glib/writable.cpp\n@@ -24,31 +24,31 @@\n #include <arrow/api.h>\n \n #include <arrow-glib/error.hpp>\n-#include <arrow-glib/writeable.hpp>\n+#include <arrow-glib/writable.hpp>\n \n G_BEGIN_DECLS\n \n /**\n- * SECTION: writeable\n- * @title: GArrowWriteable\n+ * SECTION: writable\n+ * @title: GArrowWritable\n  * @short_description: Output interface\n  *\n- * #GArrowWriteable is an interface for output. Output must be\n- * writeable.\n+ * #GArrowWritable is an interface for output. Output must be\n+ * writable.\n  */\n \n-G_DEFINE_INTERFACE(GArrowWriteable,\n-                   garrow_writeable,\n+G_DEFINE_INTERFACE(GArrowWritable,\n+                   garrow_writable,\n                    G_TYPE_OBJECT)\n \n static void\n-garrow_writeable_default_init (GArrowWriteableInterface *iface)\n+garrow_writable_default_init(GArrowWritableInterface *iface)\n {\n }\n \n /**\n- * garrow_writeable_write:\n- * @writeable: A #GArrowWriteable.\n+ * garrow_writable_write:\n+ * @writable: A #GArrowWritable.\n  * @data: (array length=n_bytes): The data to be written.\n  * @n_bytes: The number of bytes to be written.\n  * @error: (nullable): Return location for a #GError or %NULL.\n@@ -56,20 +56,20 @@ garrow_writeable_default_init (GArrowWriteableInterface *iface)\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  */\n gboolean\n-garrow_writeable_write(GArrowWriteable *writeable,\n-                          const guint8 *data,\n-                          gint64 n_bytes,\n-                          GError **error)\n+garrow_writable_write(GArrowWritable *writable,\n+                      const guint8 *data,\n+                      gint64 n_bytes,\n+                      GError **error)\n {\n-  const auto arrow_writeable = garrow_writeable_get_raw(writeable);\n+  const auto arrow_writable = garrow_writable_get_raw(writable);\n \n-  auto status = arrow_writeable->Write(data, n_bytes);\n-  return garrow_error_check(error, status, \"[io][writeable][write]\");\n+  auto status = arrow_writable->Write(data, n_bytes);\n+  return garrow_error_check(error, status, \"[io][writable][write]\");\n }\n \n /**\n- * garrow_writeable_flush:\n- * @writeable: A #GArrowWriteable.\n+ * garrow_writable_flush:\n+ * @writable: A #GArrowWritable.\n  * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * It ensures writing all data on memory to storage.\n@@ -77,20 +77,20 @@ garrow_writeable_write(GArrowWriteable *writeable,\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  */\n gboolean\n-garrow_writeable_flush(GArrowWriteable *writeable,\n-                          GError **error)\n+garrow_writable_flush(GArrowWritable *writable,\n+                      GError **error)\n {\n-  const auto arrow_writeable = garrow_writeable_get_raw(writeable);\n+  const auto arrow_writable = garrow_writable_get_raw(writable);\n \n-  auto status = arrow_writeable->Flush();\n-  return garrow_error_check(error, status, \"[io][writeable][flush]\");\n+  auto status = arrow_writable->Flush();\n+  return garrow_error_check(error, status, \"[io][writable][flush]\");\n }\n \n G_END_DECLS\n \n std::shared_ptr<arrow::io::Writable>\n-garrow_writeable_get_raw(GArrowWriteable *writeable)\n+garrow_writable_get_raw(GArrowWritable *writable)\n {\n-  auto *iface = GARROW_WRITEABLE_GET_IFACE(writeable);\n-  return iface->get_raw(writeable);\n+  auto *iface = GARROW_WRITABLE_GET_IFACE(writable);\n+  return iface->get_raw(writable);\n }\ndiff --git a/c_glib/arrow-glib/writable.h b/c_glib/arrow-glib/writable.h\nnew file mode 100644\nindex 0000000000..151e85d98a\n--- /dev/null\n+++ b/c_glib/arrow-glib/writable.h\n@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/gobject-type.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GARROW_TYPE_WRITABLE (garrow_writable_get_type())\n+G_DECLARE_INTERFACE(GArrowWritable,\n+                    garrow_writable,\n+                    GARROW,\n+                    WRITABLE,\n+                    GObject)\n+\n+gboolean garrow_writable_write(GArrowWritable *writable,\n+                               const guint8 *data,\n+                               gint64 n_bytes,\n+                               GError **error);\n+gboolean garrow_writable_flush(GArrowWritable *writable,\n+                               GError **error);\n+\n+G_END_DECLS\ndiff --git a/c_glib/arrow-glib/writeable.hpp b/c_glib/arrow-glib/writable.hpp\nsimilarity index 78%\nrename from c_glib/arrow-glib/writeable.hpp\nrename to c_glib/arrow-glib/writable.hpp\nindex 806d36fc07..a80ef792b5 100644\n--- a/c_glib/arrow-glib/writeable.hpp\n+++ b/c_glib/arrow-glib/writable.hpp\n@@ -21,18 +21,19 @@\n \n #include <arrow/io/interfaces.h>\n \n-#include <arrow-glib/writeable.h>\n+#include <arrow-glib/writable.h>\n \n /**\n- * GArrowWriteableInterface:\n+ * GArrowWritableInterface:\n  *\n  * It wraps `arrow::io::Writable`.\n  */\n-struct _GArrowWriteableInterface\n+struct _GArrowWritableInterface\n {\n   GTypeInterface parent_iface;\n \n-  std::shared_ptr<arrow::io::Writable> (*get_raw)(GArrowWriteable *file);\n+  std::shared_ptr<arrow::io::Writable> (*get_raw)(GArrowWritable *file);\n };\n \n-std::shared_ptr<arrow::io::Writable> garrow_writeable_get_raw(GArrowWriteable *writeable);\n+std::shared_ptr<arrow::io::Writable>\n+garrow_writable_get_raw(GArrowWritable *writable);\ndiff --git a/c_glib/arrow-glib/writeable-file.h b/c_glib/arrow-glib/writeable-file.h\ndeleted file mode 100644\nindex 7f4c186379..0000000000\n--- a/c_glib/arrow-glib/writeable-file.h\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#pragma once\n-\n-#include <glib-object.h>\n-\n-G_BEGIN_DECLS\n-\n-#define GARROW_TYPE_WRITEABLE_FILE           \\\n-  (garrow_writeable_file_get_type())\n-#define GARROW_WRITEABLE_FILE(obj)                           \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_WRITEABLE_FILE,    \\\n-                              GArrowWriteableFile))\n-#define GARROW_IS_WRITEABLE_FILE(obj)                        \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_WRITEABLE_FILE))\n-#define GARROW_WRITEABLE_FILE_GET_IFACE(obj)                         \\\n-  (G_TYPE_INSTANCE_GET_INTERFACE((obj),                                 \\\n-                                 GARROW_TYPE_WRITEABLE_FILE,         \\\n-                                 GArrowWriteableFileInterface))\n-\n-typedef struct _GArrowWriteableFile          GArrowWriteableFile;\n-typedef struct _GArrowWriteableFileInterface GArrowWriteableFileInterface;\n-\n-GType garrow_writeable_file_get_type(void) G_GNUC_CONST;\n-\n-gboolean garrow_writeable_file_write_at(GArrowWriteableFile *writeable_file,\n-                                           gint64 position,\n-                                           const guint8 *data,\n-                                           gint64 n_bytes,\n-                                           GError **error);\n-\n-G_END_DECLS\ndiff --git a/c_glib/arrow-glib/writeable.h b/c_glib/arrow-glib/writeable.h\ndeleted file mode 100644\nindex 66d6922360..0000000000\n--- a/c_glib/arrow-glib/writeable.h\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#pragma once\n-\n-#include <glib-object.h>\n-\n-G_BEGIN_DECLS\n-\n-#define GARROW_TYPE_WRITEABLE                \\\n-  (garrow_writeable_get_type())\n-#define GARROW_WRITEABLE(obj)                                \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_WRITEABLE,         \\\n-                              GArrowWriteable))\n-#define GARROW_IS_WRITEABLE(obj)                             \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_WRITEABLE))\n-#define GARROW_WRITEABLE_GET_IFACE(obj)                      \\\n-  (G_TYPE_INSTANCE_GET_INTERFACE((obj),                         \\\n-                                 GARROW_TYPE_WRITEABLE,      \\\n-                                 GArrowWriteableInterface))\n-\n-typedef struct _GArrowWriteable          GArrowWriteable;\n-typedef struct _GArrowWriteableInterface GArrowWriteableInterface;\n-\n-GType garrow_writeable_get_type(void) G_GNUC_CONST;\n-\n-gboolean garrow_writeable_write(GArrowWriteable *writeable,\n-                                   const guint8 *data,\n-                                   gint64 n_bytes,\n-                                   GError **error);\n-gboolean garrow_writeable_flush(GArrowWriteable *writeable,\n-                                   GError **error);\n-\n-G_END_DECLS\ndiff --git a/c_glib/doc/reference/arrow-glib-docs.xml b/c_glib/doc/reference/arrow-glib-docs.xml\nindex 776a7b7507..ca6475a4fb 100644\n--- a/c_glib/doc/reference/arrow-glib-docs.xml\n+++ b/c_glib/doc/reference/arrow-glib-docs.xml\n@@ -104,8 +104,8 @@\n     </chapter>\n     <chapter id=\"output\">\n       <title>Output</title>\n-      <xi:include href=\"xml/writeable.xml\"/>\n-      <xi:include href=\"xml/writeable-file.xml\"/>\n+      <xi:include href=\"xml/writable.xml\"/>\n+      <xi:include href=\"xml/writable-file.xml\"/>\n       <xi:include href=\"xml/output-stream.xml\"/>\n     </chapter>\n     <chapter id=\"input-output\">\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T13:59:25.672+0000",
                    "updated": "2018-09-18T13:59:25.672+0000",
                    "started": "2018-09-18T13:59:25.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145299",
                    "issueId": "13185725"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@779b5275[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ba316ce[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c5dff2b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5fcb9708[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a161aca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3bc3a448[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@854b0bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@b240569[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31de9e8d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@17998d1a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a650e05[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@11c14b6d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 18 13:59:16 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-18T13:59:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3259/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-18T07:32:41.000+0000",
        "updated": "2018-09-18T13:59:25.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Rename \"writeable\" to \"writable\"",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185725/comment/16619150",
                    "id": "16619150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2581\n[https://github.com/apache/arrow/pull/2581]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-18T13:59:16.154+0000",
                    "updated": "2018-09-18T13:59:16.154+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3y75z:",
        "customfield_12314139": null
    }
}