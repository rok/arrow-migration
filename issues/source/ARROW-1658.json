{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13107862",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862",
    "key": "ARROW-1658",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341666",
                "id": "12341666",
                "name": "0.7.1",
                "archived": false,
                "released": true,
                "releaseDate": "2017-10-01"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1658/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7e9d0eac[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@758d17d0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f03c4ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@12ad6169[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6efb17a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d7ca71c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c4835c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7517bb00[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43e7bc54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b5bb773[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76f03bac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3e7751c9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 31 16:54:18 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-31T16:54:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1658/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-10-08T19:04:29.000+0000",
        "updated": "2017-10-31T16:54:18.000+0000",
        "timeoriginalestimate": null,
        "description": "Minimal reproduction:\r\n\r\n{code}\r\nimport numpy as np\r\nimport pandas as pd\r\nimport pyarrow as pa\r\n \r\nnum = 100\r\narr = pa.DictionaryArray.from_arrays(\r\n    np.arange(0, num),\r\n    np.array(['a'], np.object),\r\n    np.zeros(num, np.bool),\r\n    True)\r\n\r\nprint(arr.to_pandas())\r\n{code}\r\n\r\nAt no time in the Arrow codebase do we validate that the dictionary indices are in bounds. It seems that pandas is overly trusting of the validity of the indices. So we should add a method someplace to validate that the dictionary non-null indices are not out of bounds (perhaps in {{CategoricalBlock::WriteIndices}}).\r\n\r\nAs an aside: there may be other times when doing analytics on categorical data that external data will have out of bounds index values. We should plan for these and decide whether to raise an exception or treat them as null",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Out of bounds dictionary indices causes segfault after converting to pandas",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862/comment/16199321",
                    "id": "16199321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=njw45",
                        "name": "njw45",
                        "key": "njw45",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick White",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'd definitely encourage failing loudly as early as possible, as trying to work out where corrupt data came from is ...hard",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=njw45",
                        "name": "njw45",
                        "key": "njw45",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick White",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-10T20:41:01.194+0000",
                    "updated": "2017-10-10T20:41:01.194+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862/comment/16225686",
                    "id": "16225686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1270: ARROW-1658: [Python] Add boundschecking of dictionary indices when creating CategoricalBlock\nURL: https://github.com/apache/arrow/pull/1270\n \n \n   We should probably do this bounds-checking earlier and in the main Arrow C++ library when ingesting \"untrusted\" arrays. I will create a JIRA, but this is a stopgap in the meantime\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T20:36:14.571+0000",
                    "updated": "2017-10-30T20:36:14.571+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862/comment/16227100",
                    "id": "16227100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1270: ARROW-1658: [Python] Add boundschecking of dictionary indices when creating CategoricalBlock\nURL: https://github.com/apache/arrow/pull/1270#issuecomment-340828132\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T16:54:01.084+0000",
                    "updated": "2017-10-31T16:54:01.084+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862/comment/16227102",
                    "id": "16227102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1270\n[https://github.com/apache/arrow/pull/1270]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-31T16:54:13.624+0000",
                    "updated": "2017-10-31T16:54:13.624+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13107862/comment/16227103",
                    "id": "16227103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1270: ARROW-1658: [Python] Add boundschecking of dictionary indices when creating CategoricalBlock\nURL: https://github.com/apache/arrow/pull/1270\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.cc b/cpp/src/arrow/ipc/metadata-internal.cc\nindex f04e9b05a..f0f0f6758 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.cc\n+++ b/cpp/src/arrow/ipc/metadata-internal.cc\n@@ -72,7 +72,7 @@ MetadataVersion GetMetadataVersion(flatbuf::MetadataVersion version) {\n     case flatbuf::MetadataVersion_V4:\n       // Arrow >= 0.8\n       return MetadataVersion::V4;\n-      // Add cases as other versions become available\n+    // Add cases as other versions become available\n     default:\n       return MetadataVersion::V4;\n   }\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 7f1591213..c92faede1 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -966,9 +966,10 @@ class CategoricalBlock : public PandasBlock {\n         \"CategoricalBlock allocation happens when calling Write\");\n   }\n \n-  template <int ARROW_INDEX_TYPE>\n+  template <typename ArrowType>\n   Status WriteIndices(const std::shared_ptr<Column>& col) {\n-    using TRAITS = internal::arrow_traits<ARROW_INDEX_TYPE>;\n+    using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+    using TRAITS = internal::arrow_traits<ArrowType::type_id>;\n     using T = typename TRAITS::T;\n     constexpr int npy_type = TRAITS::npy_type;\n \n@@ -977,10 +978,22 @@ class CategoricalBlock : public PandasBlock {\n     // Sniff the first chunk\n     const std::shared_ptr<Array> arr_first = data.chunk(0);\n     const auto& dict_arr_first = static_cast<const DictionaryArray&>(*arr_first);\n-    const auto& indices_first =\n-        static_cast<const PrimitiveArray&>(*dict_arr_first.indices());\n+    const auto& indices_first = static_cast<const ArrayType&>(*dict_arr_first.indices());\n+\n+    auto CheckIndices = [](const ArrayType& arr, int64_t dict_length) {\n+      const T* values = arr.raw_values();\n+      for (int64_t i = 0; i < arr.length(); ++i) {\n+        if (arr.IsValid(i) && (values[i] < 0 || values[i] >= dict_length)) {\n+          std::stringstream ss;\n+          ss << \"Out of bounds dictionary index: \" << static_cast<int64_t>(values[i]);\n+          return Status::Invalid(ss.str());\n+        }\n+      }\n+      return Status::OK();\n+    };\n \n     if (data.num_chunks() == 1 && indices_first.null_count() == 0) {\n+      RETURN_NOT_OK(CheckIndices(indices_first, dict_arr_first.dictionary()->length()));\n       RETURN_NOT_OK(AllocateNDArrayFromIndices<T>(npy_type, indices_first));\n     } else {\n       if (options_.zero_copy_only) {\n@@ -998,9 +1011,10 @@ class CategoricalBlock : public PandasBlock {\n         const std::shared_ptr<Array> arr = data.chunk(c);\n         const auto& dict_arr = static_cast<const DictionaryArray&>(*arr);\n \n-        const auto& indices = static_cast<const PrimitiveArray&>(*dict_arr.indices());\n+        const auto& indices = static_cast<const ArrayType&>(*dict_arr.indices());\n         auto in_values = reinterpret_cast<const T*>(indices.raw_values());\n \n+        RETURN_NOT_OK(CheckIndices(indices, dict_arr.dictionary()->length()));\n         // Null is -1 in CategoricalBlock\n         for (int i = 0; i < arr->length(); ++i) {\n           *out_values++ = indices.IsNull(i) ? -1 : in_values[i];\n@@ -1026,16 +1040,16 @@ class CategoricalBlock : public PandasBlock {\n \n     switch (dict_type.index_type()->id()) {\n       case Type::INT8:\n-        RETURN_NOT_OK(WriteIndices<Type::INT8>(converted_col));\n+        RETURN_NOT_OK(WriteIndices<Int8Type>(converted_col));\n         break;\n       case Type::INT16:\n-        RETURN_NOT_OK(WriteIndices<Type::INT16>(converted_col));\n+        RETURN_NOT_OK(WriteIndices<Int16Type>(converted_col));\n         break;\n       case Type::INT32:\n-        RETURN_NOT_OK(WriteIndices<Type::INT32>(converted_col));\n+        RETURN_NOT_OK(WriteIndices<Int32Type>(converted_col));\n         break;\n       case Type::INT64:\n-        RETURN_NOT_OK(WriteIndices<Type::INT64>(converted_col));\n+        RETURN_NOT_OK(WriteIndices<Int64Type>(converted_col));\n         break;\n       default: {\n         std::stringstream ss;\n@@ -1091,13 +1105,11 @@ class CategoricalBlock : public PandasBlock {\n \n     PyObject* block_arr = PyArray_NewFromDescr(&PyArray_Type, descr, 1, block_dims,\n                                                nullptr, data, NPY_ARRAY_CARRAY, nullptr);\n+    RETURN_IF_PYERROR();\n \n     npy_intp placement_dims[1] = {num_columns_};\n     PyObject* placement_arr = PyArray_SimpleNew(1, placement_dims, NPY_INT64);\n-    if (placement_arr == NULL) {\n-      // TODO(wesm): propagating Python exception\n-      return Status::OK();\n-    }\n+    RETURN_IF_PYERROR();\n \n     block_arr_.reset(block_arr);\n     placement_arr_.reset(placement_arr);\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 7da5c3caf..7752d062a 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -162,6 +162,7 @@ def array(object obj, type=None, mask=None,\n             return DictionaryArray.from_arrays(\n                 values.codes, values.categories.values,\n                 mask=mask, ordered=values.ordered,\n+                from_pandas=from_pandas,\n                 memory_pool=memory_pool)\n         else:\n             values, type = pdcompat.get_datetimetz_type(values, obj.dtype,\n@@ -671,7 +672,7 @@ cdef class DictionaryArray(Array):\n \n     @staticmethod\n     def from_arrays(indices, dictionary, mask=None, ordered=False,\n-                    MemoryPool memory_pool=None):\n+                    from_pandas=False, MemoryPool memory_pool=None):\n         \"\"\"\n         Construct Arrow DictionaryArray from array of indices (must be\n         non-negative integers) and corresponding array of dictionary values\n@@ -682,15 +683,20 @@ cdef class DictionaryArray(Array):\n         dictionary : ndarray or pandas.Series\n         mask : ndarray or pandas.Series, boolean type\n             True values indicate that indices are actually null\n+        from_pandas : boolean, default False\n+            If True, the indices should be treated as though they originated in\n+            a pandas.Categorical (null encoded as -1)\n         ordered : boolean, default False\n             Set to True if the category values are ordered\n+        memory_pool : MemoryPool, default None\n+            For memory allocations, if required, otherwise uses default pool\n \n         Returns\n         -------\n         dict_array : DictionaryArray\n         \"\"\"\n         cdef:\n-            Array arrow_indices, arrow_dictionary\n+            Array _indices, _dictionary\n             DictionaryArray result\n             shared_ptr[CDataType] c_type\n             shared_ptr[CArray] c_result\n@@ -699,29 +705,28 @@ cdef class DictionaryArray(Array):\n             if mask is not None:\n                 raise NotImplementedError(\n                     \"mask not implemented with Arrow array inputs yet\")\n-            arrow_indices = indices\n+            _indices = indices\n         else:\n-            if mask is None:\n-                mask = indices == -1\n-            else:\n-                mask = mask | (indices == -1)\n-            arrow_indices = Array.from_pandas(indices, mask=mask,\n-                                              memory_pool=memory_pool)\n+            if from_pandas:\n+                if mask is None:\n+                    mask = indices == -1\n+                else:\n+                    mask = mask | (indices == -1)\n+            _indices = array(indices, mask=mask, memory_pool=memory_pool)\n \n         if isinstance(dictionary, Array):\n-            arrow_dictionary = dictionary\n+            _dictionary = dictionary\n         else:\n-            arrow_dictionary = Array.from_pandas(dictionary,\n-                                                 memory_pool=memory_pool)\n+            _dictionary = array(dictionary, memory_pool=memory_pool)\n \n-        if not isinstance(arrow_indices, IntegerArray):\n+        if not isinstance(_indices, IntegerArray):\n             raise ValueError('Indices must be integer type')\n \n         cdef c_bool c_ordered = ordered\n \n-        c_type.reset(new CDictionaryType(arrow_indices.type.sp_type,\n-                                         arrow_dictionary.sp_array, c_ordered))\n-        c_result.reset(new CDictionaryArray(c_type, arrow_indices.sp_array))\n+        c_type.reset(new CDictionaryType(_indices.type.sp_type,\n+                                         _dictionary.sp_array, c_ordered))\n+        c_result.reset(new CDictionaryArray(c_type, _indices.sp_array))\n \n         result = DictionaryArray()\n         result.init(c_result)\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 07ecf3010..dabccac37 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -217,6 +217,21 @@ def test_zero_copy_success(self):\n         result = pa.array([0, 1, 2]).to_pandas(zero_copy_only=True)\n         npt.assert_array_equal(result, [0, 1, 2])\n \n+    def test_dictionary_indices_boundscheck(self):\n+        # ARROW-1658. No validation of indices leads to segfaults in pandas\n+        indices = [[0, 1], [0, -1]]\n+\n+        for inds in indices:\n+            arr = pa.DictionaryArray.from_arrays(inds, ['a'])\n+            batch = pa.RecordBatch.from_arrays([arr], ['foo'])\n+            table = pa.Table.from_batches([batch, batch, batch])\n+\n+            with pytest.raises(pa.ArrowException):\n+                arr.to_pandas()\n+\n+            with pytest.raises(pa.ArrowException):\n+                table.to_pandas()\n+\n     def test_zero_copy_dictionaries(self):\n         arr = pa.DictionaryArray.from_arrays(\n             np.array([0, 0]),\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-31T16:54:18.238+0000",
                    "updated": "2017-10-31T16:54:18.238+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3l0d3:",
        "customfield_12314139": null
    }
}