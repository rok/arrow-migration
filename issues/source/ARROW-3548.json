{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192408",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408",
    "key": "ARROW-3548",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
            "name": "robertnishihara",
            "key": "robertnishihara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Robert Nishihara",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
            "name": "robertnishihara",
            "key": "robertnishihara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Robert Nishihara",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
            "name": "robertnishihara",
            "key": "robertnishihara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Robert Nishihara",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3548/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara opened a new pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783\n \n \n   To benchmark, start a store with `plasma_store_server -s /tmp/store -m 1000000000`\r\n   \r\n   Then do\r\n   \r\n   ```python\r\n   import pyarrow.plasma as plasma\r\n   client = plasma.connect('/tmp/store', '', 0)\r\n   ```\r\n   \r\n   ```python\r\n   def before():\r\n       object_id = plasma.ObjectID.from_random()\r\n       client.create(object_id, 20, b'')\r\n       client.seal(object_id)\r\n   \r\n   def after():\r\n       object_id = plasma.ObjectID.from_random()\r\n       client.create_and_seal(object_id, 20 * b'a', b'')\r\n   ```\r\n   \r\n   ```\r\n   %timeit before()\r\n   63.4 \u00b5s \u00b1 631 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\r\n   \r\n   %timeit after()\r\n   30.5 \u00b5s \u00b1 669 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\r\n   ```\r\n   \r\n   There's actually more that could be done in the future in order to not have to wait for the return IPC if the client \"reserves\" a big chunk of memory up front.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T01:31:49.505+0000",
                    "updated": "2018-10-18T01:31:49.505+0000",
                    "started": "2018-10-18T01:31:49.504+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155671",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226167060\n \n \n\n ##########\n File path: cpp/src/plasma/store.cc\n ##########\n @@ -802,6 +802,33 @@ Status PlasmaStore::ProcessMessage(Client* client) {\n         WarnIfSigpipe(send_fd(client->fd, object.store_fd), client->fd);\n       }\n     } break;\n+    case fb::MessageType::PlasmaCreateAndSealRequest: {\n+      std::string data;\n+      std::string metadata;\n+      unsigned char digest[kDigestSize];\n+      RETURN_NOT_OK(ReadCreateAndSealRequest(input, input_size, &object_id, &data,\n+                                             &metadata, &digest[0]));\n+      int device_num = 0;\n \n Review comment:\n   This should be passed through as part of ReadCreateAndSealRequest\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T04:43:10.796+0000",
                    "updated": "2018-10-18T04:43:10.796+0000",
                    "started": "2018-10-18T04:43:10.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155692",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#issuecomment-430874443\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=h1) Report\n   > Merging [#2783](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/56e72ba09c3d886c6a5aeb11fb1642af13819f93?src=pr&el=desc) will **increase** coverage by `0.97%`.\n   > The diff coverage is `96.62%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2783/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2783      +/-   ##\n   ==========================================\n   + Coverage   87.61%   88.59%   +0.97%     \n   ==========================================\n     Files         403      342      -61     \n     Lines       62403    58538    -3865     \n   ==========================================\n   - Hits        54674    51861    -2813     \n   + Misses       7659     6677     -982     \n   + Partials       70        0      -70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/client.h](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50Lmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/plasma/protocol.h](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcHJvdG9jb2wuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | `96.12% <100%> (+0.14%)` | :arrow_up: |\n   | [cpp/src/plasma/protocol.cc](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcHJvdG9jb2wuY2M=) | `95.62% <100%> (+0.25%)` | :arrow_up: |\n   | [python/pyarrow/\\_plasma.pyx](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX3BsYXNtYS5weXg=) | `64.91% <75%> (+0.18%)` | :arrow_up: |\n   | [cpp/src/plasma/store.cc](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvc3RvcmUuY2M=) | `91.37% <94.11%> (+0.09%)` | :arrow_up: |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | `84.66% <95.65%> (+0.23%)` | :arrow_up: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [rust/src/util/bit\\_util.rs](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree#diff-cnVzdC9zcmMvdXRpbC9iaXRfdXRpbC5ycw==) | | |\n   | ... and [58 more](https://codecov.io/gh/apache/arrow/pull/2783/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=footer). Last update [56e72ba...62fea37](https://codecov.io/gh/apache/arrow/pull/2783?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T04:51:25.264+0000",
                    "updated": "2018-10-18T04:51:25.264+0000",
                    "started": "2018-10-18T04:51:25.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155695",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226168321\n \n \n\n ##########\n File path: cpp/src/plasma/store.cc\n ##########\n @@ -802,6 +802,33 @@ Status PlasmaStore::ProcessMessage(Client* client) {\n         WarnIfSigpipe(send_fd(client->fd, object.store_fd), client->fd);\n       }\n     } break;\n+    case fb::MessageType::PlasmaCreateAndSealRequest: {\n+      std::string data;\n+      std::string metadata;\n+      unsigned char digest[kDigestSize];\n+      RETURN_NOT_OK(ReadCreateAndSealRequest(input, input_size, &object_id, &data,\n+                                             &metadata, &digest[0]));\n+      int device_num = 0;\n \n Review comment:\n   I added a comment explaining that it is not supported yet.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T04:54:46.543+0000",
                    "updated": "2018-10-18T04:54:46.543+0000",
                    "started": "2018-10-18T04:54:46.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155696",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "atumanov commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226170873\n \n \n\n ##########\n File path: cpp/src/plasma/client.h\n ##########\n @@ -95,6 +95,17 @@ class ARROW_EXPORT PlasmaClient {\n   Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n \n+  /// Create and seal an object in the object store. This is an optimization\n+  /// which allows small objects to be created quickly with fewer messages to\n+  /// the store.\n+  ///\n+  /// \\param object_id The ID of the object to create.\n+  /// \\param data The data for the object to create.\n+  /// \\param metadata The metadata for the object to create.\n+  /// \\return The return status.\n+  Status CreateAndSeal(const ObjectID& object_id, const std::string& data,\n \n Review comment:\n   question: why `string` data and not an arbitrary byte array with size? \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T05:18:01.066+0000",
                    "updated": "2018-10-18T05:18:01.066+0000",
                    "started": "2018-10-18T05:18:01.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155698",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/155699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226171430\n \n \n\n ##########\n File path: cpp/src/plasma/client.h\n ##########\n @@ -95,6 +95,17 @@ class ARROW_EXPORT PlasmaClient {\n   Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n \n+  /// Create and seal an object in the object store. This is an optimization\n+  /// which allows small objects to be created quickly with fewer messages to\n+  /// the store.\n+  ///\n+  /// \\param object_id The ID of the object to create.\n+  /// \\param data The data for the object to create.\n+  /// \\param metadata The metadata for the object to create.\n+  /// \\return The return status.\n+  Status CreateAndSeal(const ObjectID& object_id, const std::string& data,\n \n Review comment:\n   Using strings seemed like the cleaner C++ way to do it. I think the raw pointers are an artifact of starting with C. Though it's possible that pointers give you a bit more flexibility? @pcmoritz any thoughts about this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T05:21:21.604+0000",
                    "updated": "2018-10-18T05:21:21.604+0000",
                    "started": "2018-10-18T05:21:21.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155699",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226509443\n \n \n\n ##########\n File path: cpp/src/plasma/client.h\n ##########\n @@ -95,6 +95,17 @@ class ARROW_EXPORT PlasmaClient {\n   Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n \n+  /// Create and seal an object in the object store. This is an optimization\n+  /// which allows small objects to be created quickly with fewer messages to\n+  /// the store.\n+  ///\n+  /// \\param object_id The ID of the object to create.\n+  /// \\param data The data for the object to create.\n+  /// \\param metadata The metadata for the object to create.\n+  /// \\return The return status.\n+  Status CreateAndSeal(const ObjectID& object_id, const std::string& data,\n \n Review comment:\n   Strings are fine for small objects I think (they might incur an additional copy in some cases, i.e. if the user needs to create a new string to pass the data in)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T01:08:18.295+0000",
                    "updated": "2018-10-19T01:08:18.295+0000",
                    "started": "2018-10-19T01:08:18.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156202",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz closed pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/plasma/client.cc b/cpp/src/plasma/client.cc\nindex d88e8b1a95..7e2ce0f001 100644\n--- a/cpp/src/plasma/client.cc\n+++ b/cpp/src/plasma/client.cc\n@@ -174,6 +174,9 @@ class PlasmaClient::Impl : public std::enable_shared_from_this<PlasmaClient::Imp\n   Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n \n+  Status CreateAndSeal(const ObjectID& object_id, const std::string& data,\n+                       const std::string& metadata);\n+\n   Status Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms,\n              std::vector<ObjectBuffer>* object_buffers);\n \n@@ -245,6 +248,10 @@ class PlasmaClient::Impl : public std::enable_shared_from_this<PlasmaClient::Imp\n \n   uint64_t ComputeObjectHash(const ObjectBuffer& obj_buffer);\n \n+  uint64_t ComputeObjectHash(const uint8_t* data, int64_t data_size,\n+                             const uint8_t* metadata, int64_t metadata_size,\n+                             int device_num);\n+\n   /// File descriptor of the Unix domain socket that connects to the store.\n   int store_conn_;\n   /// File descriptor of the Unix domain socket that connects to the manager.\n@@ -432,6 +439,29 @@ Status PlasmaClient::Impl::Create(const ObjectID& object_id, int64_t data_size,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Impl::CreateAndSeal(const ObjectID& object_id,\n+                                         const std::string& data,\n+                                         const std::string& metadata) {\n+  ARROW_LOG(DEBUG) << \"called CreateAndSeal on conn \" << store_conn_;\n+\n+  // Compute the object hash.\n+  static unsigned char digest[kDigestSize];\n+  // CreateAndSeal currently only supports device_num = 0, which corresponds to\n+  // the host.\n+  int device_num = 0;\n+  uint64_t hash = ComputeObjectHash(\n+      reinterpret_cast<const uint8_t*>(data.data()), data.size(),\n+      reinterpret_cast<const uint8_t*>(metadata.data()), metadata.size(), device_num);\n+  memcpy(&digest[0], &hash, sizeof(hash));\n+\n+  RETURN_NOT_OK(SendCreateAndSealRequest(store_conn_, object_id, data, metadata, digest));\n+  std::vector<uint8_t> buffer;\n+  RETURN_NOT_OK(\n+      PlasmaReceive(store_conn_, MessageType::PlasmaCreateAndSealReply, &buffer));\n+  RETURN_NOT_OK(ReadCreateAndSealReply(buffer.data(), buffer.size()));\n+  return Status::OK();\n+}\n+\n Status PlasmaClient::Impl::GetBuffers(\n     const ObjectID* object_ids, int64_t num_objects, int64_t timeout_ms,\n     const std::function<std::shared_ptr<Buffer>(\n@@ -756,26 +786,30 @@ bool PlasmaClient::Impl::ComputeObjectHashParallel(XXH64_state_t* hash_state,\n }\n \n uint64_t PlasmaClient::Impl::ComputeObjectHash(const ObjectBuffer& obj_buffer) {\n-  DCHECK(obj_buffer.metadata);\n-  DCHECK(obj_buffer.data);\n+  return ComputeObjectHash(obj_buffer.data->data(), obj_buffer.data->size(),\n+                           obj_buffer.metadata->data(), obj_buffer.metadata->size(),\n+                           obj_buffer.device_num);\n+}\n+\n+uint64_t PlasmaClient::Impl::ComputeObjectHash(const uint8_t* data, int64_t data_size,\n+                                               const uint8_t* metadata,\n+                                               int64_t metadata_size, int device_num) {\n+  DCHECK(metadata);\n+  DCHECK(data);\n   XXH64_state_t hash_state;\n-  if (obj_buffer.device_num != 0) {\n+  if (device_num != 0) {\n     // TODO(wap): Create cuda program to hash data on gpu.\n     return 0;\n   }\n   XXH64_reset(&hash_state, XXH64_DEFAULT_SEED);\n-  if (obj_buffer.data->size() >= kBytesInMB) {\n-    ComputeObjectHashParallel(\n-        &hash_state, reinterpret_cast<const unsigned char*>(obj_buffer.data->data()),\n-        obj_buffer.data->size());\n+  if (data_size >= kBytesInMB) {\n+    ComputeObjectHashParallel(&hash_state, reinterpret_cast<const unsigned char*>(data),\n+                              data_size);\n   } else {\n-    XXH64_update(&hash_state,\n-                 reinterpret_cast<const unsigned char*>(obj_buffer.data->data()),\n-                 obj_buffer.data->size());\n+    XXH64_update(&hash_state, reinterpret_cast<const unsigned char*>(data), data_size);\n   }\n-  XXH64_update(&hash_state,\n-               reinterpret_cast<const unsigned char*>(obj_buffer.metadata->data()),\n-               obj_buffer.metadata->size());\n+  XXH64_update(&hash_state, reinterpret_cast<const unsigned char*>(metadata),\n+               metadata_size);\n   return XXH64_digest(&hash_state);\n }\n \n@@ -1046,6 +1080,11 @@ Status PlasmaClient::Create(const ObjectID& object_id, int64_t data_size,\n   return impl_->Create(object_id, data_size, metadata, metadata_size, data, device_num);\n }\n \n+Status PlasmaClient::CreateAndSeal(const ObjectID& object_id, const std::string& data,\n+                                   const std::string& metadata) {\n+  return impl_->CreateAndSeal(object_id, data, metadata);\n+}\n+\n Status PlasmaClient::Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms,\n                          std::vector<ObjectBuffer>* object_buffers) {\n   return impl_->Get(object_ids, timeout_ms, object_buffers);\ndiff --git a/cpp/src/plasma/client.h b/cpp/src/plasma/client.h\nindex 9d4dbf5f9a..59b001caad 100644\n--- a/cpp/src/plasma/client.h\n+++ b/cpp/src/plasma/client.h\n@@ -95,6 +95,17 @@ class ARROW_EXPORT PlasmaClient {\n   Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n \n+  /// Create and seal an object in the object store. This is an optimization\n+  /// which allows small objects to be created quickly with fewer messages to\n+  /// the store.\n+  ///\n+  /// \\param object_id The ID of the object to create.\n+  /// \\param data The data for the object to create.\n+  /// \\param metadata The metadata for the object to create.\n+  /// \\return The return status.\n+  Status CreateAndSeal(const ObjectID& object_id, const std::string& data,\n+                       const std::string& metadata);\n+\n   /// Get some objects from the Plasma Store. This function will block until the\n   /// objects have all been created and sealed in the Plasma Store or the\n   /// timeout expires.\ndiff --git a/cpp/src/plasma/format/plasma.fbs b/cpp/src/plasma/format/plasma.fbs\nindex ded714a384..ef934fbd81 100644\n--- a/cpp/src/plasma/format/plasma.fbs\n+++ b/cpp/src/plasma/format/plasma.fbs\n@@ -26,6 +26,8 @@ enum MessageType:long {\n   // Create a new object.\n   PlasmaCreateRequest,\n   PlasmaCreateReply,\n+  PlasmaCreateAndSealRequest,\n+  PlasmaCreateAndSealReply,\n   PlasmaAbortRequest,\n   PlasmaAbortReply,\n   // Seal an object.\n@@ -141,6 +143,22 @@ table PlasmaCreateReply {\n   ipc_handle: CudaHandle;\n }\n \n+table PlasmaCreateAndSealRequest {\n+  // ID of the object to be created.\n+  object_id: string;\n+  // The object's data.\n+  data: string;\n+  // The object's metadata.\n+  metadata: string;\n+  // Hash of the object data.\n+  digest: string;\n+}\n+\n+table PlasmaCreateAndSealReply {\n+  // Error that occurred for this call.\n+  error: PlasmaError;\n+}\n+\n table PlasmaAbortRequest {\n   // ID of the object to be aborted.\n   object_id: string;\ndiff --git a/cpp/src/plasma/protocol.cc b/cpp/src/plasma/protocol.cc\nindex 5b93b65e10..a74db66fde 100644\n--- a/cpp/src/plasma/protocol.cc\n+++ b/cpp/src/plasma/protocol.cc\n@@ -180,6 +180,45 @@ Status ReadCreateReply(uint8_t* data, size_t size, ObjectID* object_id,\n   return PlasmaErrorStatus(message->error());\n }\n \n+Status SendCreateAndSealRequest(int sock, const ObjectID& object_id,\n+                                const std::string& data, const std::string& metadata,\n+                                unsigned char* digest) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  auto digest_string = fbb.CreateString(reinterpret_cast<char*>(digest), kDigestSize);\n+  auto message = fb::CreatePlasmaCreateAndSealRequest(\n+      fbb, fbb.CreateString(object_id.binary()), fbb.CreateString(data),\n+      fbb.CreateString(metadata), digest_string);\n+  return PlasmaSend(sock, MessageType::PlasmaCreateAndSealRequest, &fbb, message);\n+}\n+\n+Status ReadCreateAndSealRequest(uint8_t* data, size_t size, ObjectID* object_id,\n+                                std::string* object_data, std::string* metadata,\n+                                unsigned char* digest) {\n+  DCHECK(data);\n+  auto message = flatbuffers::GetRoot<fb::PlasmaCreateAndSealRequest>(data);\n+  DCHECK(VerifyFlatbuffer(message, data, size));\n+\n+  *object_id = ObjectID::from_binary(message->object_id()->str());\n+  *object_data = message->data()->str();\n+  *metadata = message->metadata()->str();\n+  ARROW_CHECK(message->digest()->size() == kDigestSize);\n+  memcpy(digest, message->digest()->data(), kDigestSize);\n+  return Status::OK();\n+}\n+\n+Status SendCreateAndSealReply(int sock, PlasmaError error) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  auto message = fb::CreatePlasmaCreateAndSealReply(fbb, static_cast<PlasmaError>(error));\n+  return PlasmaSend(sock, MessageType::PlasmaCreateAndSealReply, &fbb, message);\n+}\n+\n+Status ReadCreateAndSealReply(uint8_t* data, size_t size) {\n+  DCHECK(data);\n+  auto message = flatbuffers::GetRoot<fb::PlasmaCreateAndSealReply>(data);\n+  DCHECK(VerifyFlatbuffer(message, data, size));\n+  return PlasmaErrorStatus(message->error());\n+}\n+\n Status SendAbortRequest(int sock, ObjectID object_id) {\n   flatbuffers::FlatBufferBuilder fbb;\n   auto message = fb::CreatePlasmaAbortRequest(fbb, fbb.CreateString(object_id.binary()));\ndiff --git a/cpp/src/plasma/protocol.h b/cpp/src/plasma/protocol.h\nindex 057ba1cede..c8204584b8 100644\n--- a/cpp/src/plasma/protocol.h\n+++ b/cpp/src/plasma/protocol.h\n@@ -19,6 +19,7 @@\n #define PLASMA_PROTOCOL_H\n \n #include <memory>\n+#include <string>\n #include <unordered_map>\n #include <vector>\n \n@@ -57,6 +58,18 @@ Status SendCreateReply(int sock, ObjectID object_id, PlasmaObject* object,\n Status ReadCreateReply(uint8_t* data, size_t size, ObjectID* object_id,\n                        PlasmaObject* object, int* store_fd, int64_t* mmap_size);\n \n+Status SendCreateAndSealRequest(int sock, const ObjectID& object_id,\n+                                const std::string& data, const std::string& metadata,\n+                                unsigned char* digest);\n+\n+Status ReadCreateAndSealRequest(uint8_t* data, size_t size, ObjectID* object_id,\n+                                std::string* object_data, std::string* metadata,\n+                                unsigned char* digest);\n+\n+Status SendCreateAndSealReply(int sock, PlasmaError error);\n+\n+Status ReadCreateAndSealReply(uint8_t* data, size_t size);\n+\n Status SendAbortRequest(int sock, ObjectID object_id);\n \n Status ReadAbortRequest(uint8_t* data, size_t size, ObjectID* object_id);\ndiff --git a/cpp/src/plasma/store.cc b/cpp/src/plasma/store.cc\nindex a01c9a2f69..54792e9f01 100644\n--- a/cpp/src/plasma/store.cc\n+++ b/cpp/src/plasma/store.cc\n@@ -802,6 +802,35 @@ Status PlasmaStore::ProcessMessage(Client* client) {\n         WarnIfSigpipe(send_fd(client->fd, object.store_fd), client->fd);\n       }\n     } break;\n+    case fb::MessageType::PlasmaCreateAndSealRequest: {\n+      std::string data;\n+      std::string metadata;\n+      unsigned char digest[kDigestSize];\n+      RETURN_NOT_OK(ReadCreateAndSealRequest(input, input_size, &object_id, &data,\n+                                             &metadata, &digest[0]));\n+      // CreateAndSeal currently only supports device_num = 0, which corresponds\n+      // to the host.\n+      int device_num = 0;\n+      PlasmaError error_code = CreateObject(object_id, data.size(), metadata.size(),\n+                                            device_num, client, &object);\n+      // Reply to the client.\n+      HANDLE_SIGPIPE(SendCreateAndSealReply(client->fd, error_code), client->fd);\n+\n+      // If the object was successfully created, fill out the object data and seal it.\n+      if (error_code == PlasmaError::OK) {\n+        auto entry = GetObjectTableEntry(&store_info_, object_id);\n+        ARROW_CHECK(entry != nullptr);\n+        // Write the inlined data and metadata into the allocated object.\n+        std::memcpy(entry->pointer, data.data(), data.size());\n+        std::memcpy(entry->pointer + data.size(), metadata.data(), metadata.size());\n+        SealObject(object_id, &digest[0]);\n+        // Remove the client from the object's array of clients because the\n+        // object is not being used by any client. The client was added to the\n+        // object's array of clients in CreateObject. This is analogous to the\n+        // Release call that happens in the client's Seal method.\n+        ARROW_CHECK(RemoveFromClientObjectIds(object_id, entry, client) == 1);\n+      }\n+    } break;\n     case fb::MessageType::PlasmaAbortRequest: {\n       RETURN_NOT_OK(ReadAbortRequest(input, input_size, &object_id));\n       ARROW_CHECK(AbortObject(object_id, client) == 1) << \"To abort an object, the only \"\ndiff --git a/python/pyarrow/_plasma.pyx b/python/pyarrow/_plasma.pyx\nindex 2b9f93e698..e2cbc183f4 100644\n--- a/python/pyarrow/_plasma.pyx\n+++ b/python/pyarrow/_plasma.pyx\n@@ -110,6 +110,9 @@ cdef extern from \"plasma/client.h\" nogil:\n                        const uint8_t* metadata, int64_t metadata_size,\n                        const shared_ptr[CBuffer]* data)\n \n+        CStatus CreateAndSeal(const CUniqueID& object_id, const c_string& data,\n+                              const c_string& metadata)\n+\n         CStatus Get(const c_vector[CUniqueID] object_ids, int64_t timeout_ms,\n                     c_vector[CObjectBuffer]* object_buffers)\n \n@@ -344,6 +347,35 @@ cdef class PlasmaClient:\n                                                 data.get().mutable_data(),\n                                                 data_size)\n \n+    def create_and_seal(self, ObjectID object_id, c_string data,\n+                        c_string metadata=b\"\"):\n+        \"\"\"\n+        Store a new object in the PlasmaStore for a particular object ID.\n+\n+        Parameters\n+        ----------\n+        object_id : ObjectID\n+            The object ID used to identify an object.\n+        data : bytes\n+            The object to store.\n+        metadata : bytes\n+            An optional string of bytes encoding whatever metadata the user\n+            wishes to encode.\n+\n+        Raises\n+        ------\n+        PlasmaObjectExists\n+            This exception is raised if the object could not be created because\n+            there already is an object with the same ID in the plasma store.\n+\n+        PlasmaStoreFull: This exception is raised if the object could\n+                not be created because the plasma store is unable to evict\n+                enough objects to create room for it.\n+        \"\"\"\n+        with nogil:\n+            check_status(self.client.get().CreateAndSeal(object_id.data, data,\n+                                                         metadata))\n+\n     def get_buffers(self, object_ids, timeout_ms=-1):\n         \"\"\"\n         Returns data buffer from the PlasmaStore based on object ID.\ndiff --git a/python/pyarrow/tests/test_plasma.py b/python/pyarrow/tests/test_plasma.py\nindex efda2af83a..92294794e9 100644\n--- a/python/pyarrow/tests/test_plasma.py\n+++ b/python/pyarrow/tests/test_plasma.py\n@@ -210,6 +210,38 @@ def test_create_existing(self):\n             else:\n                 assert False\n \n+    def test_create_and_seal(self):\n+\n+        # Create a bunch of objects.\n+        object_ids = []\n+        for i in range(1000):\n+            object_id = random_object_id()\n+            object_ids.append(object_id)\n+            self.plasma_client.create_and_seal(object_id, i * b'a', i * b'b')\n+\n+        for i in range(1000):\n+            assert self.plasma_client.get_buffer(object_ids[i]) == i * b'a'\n+            assert (self.plasma_client.get_metadata(\n+                        [object_ids[i]])[0].to_pybytes()\n+                    == i * b'b')\n+\n+        # Make sure that creating the same object twice raises an exception.\n+        object_id = random_object_id()\n+        self.plasma_client.create_and_seal(object_id, b'a', b'b')\n+        with pytest.raises(pa.PlasmaObjectExists):\n+            self.plasma_client.create_and_seal(object_id, b'a', b'b')\n+\n+        # Make sure that these objects can be evicted.\n+        big_object = DEFAULT_PLASMA_STORE_MEMORY // 10 * b'a'\n+        object_ids = []\n+        for _ in range(20):\n+            object_id = random_object_id()\n+            object_ids.append(object_id)\n+            self.plasma_client.create_and_seal(random_object_id(), big_object,\n+                                               big_object)\n+        for i in range(10):\n+            assert not self.plasma_client.contains(object_ids[i])\n+\n     def test_get(self):\n         num_object_ids = 60\n         # Test timing out of get with various timeouts.\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T01:15:54.490+0000",
                    "updated": "2018-10-19T01:15:54.490+0000",
                    "started": "2018-10-19T01:15:54.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156204",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226629971\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -344,6 +347,35 @@ cdef class PlasmaClient:\n                                                 data.get().mutable_data(),\n                                                 data_size)\n \n+    def create_and_seal(self, ObjectID object_id, c_string data,\n \n Review comment:\n   Should `data` be a `std::string` or rather something that exports the buffer protocol (then memory allocation not needed here)? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T12:32:39.198+0000",
                    "updated": "2018-10-19T12:32:39.198+0000",
                    "started": "2018-10-19T12:32:39.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156316",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226628807\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -432,6 +439,29 @@ Status PlasmaClient::Impl::Create(const ObjectID& object_id, int64_t data_size,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Impl::CreateAndSeal(const ObjectID& object_id,\n+                                         const std::string& data,\n+                                         const std::string& metadata) {\n+  ARROW_LOG(DEBUG) << \"called CreateAndSeal on conn \" << store_conn_;\n+\n+  // Compute the object hash.\n+  static unsigned char digest[kDigestSize];\n \n Review comment:\n   Is it your intent to share this digest between threads?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T12:32:39.304+0000",
                    "updated": "2018-10-19T12:32:39.304+0000",
                    "started": "2018-10-19T12:32:39.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156317",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226722650\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -432,6 +439,29 @@ Status PlasmaClient::Impl::Create(const ObjectID& object_id, int64_t data_size,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Impl::CreateAndSeal(const ObjectID& object_id,\n+                                         const std::string& data,\n+                                         const std::string& metadata) {\n+  ARROW_LOG(DEBUG) << \"called CreateAndSeal on conn \" << store_conn_;\n+\n+  // Compute the object hash.\n+  static unsigned char digest[kDigestSize];\n \n Review comment:\n   Hm, I copied this from \r\n   \r\n   https://github.com/apache/arrow/blob/b26c5ae61867bac34ade1ffed7f940b6176b70bd/cpp/src/plasma/client.cc#L831-L832\r\n   \r\n   inside of https://github.com/apache/arrow/blob/b26c5ae61867bac34ade1ffed7f940b6176b70bd/cpp/src/plasma/client.cc#L816\r\n   \r\n   Internally `ComputeObjectHash` can use multiple threads, but in both cases the `static` part may be unnecessary. I'm not 100% sure about this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T17:23:45.379+0000",
                    "updated": "2018-10-19T17:23:45.379+0000",
                    "started": "2018-10-19T17:23:45.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156413",
                    "issueId": "13192408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/worklog/156416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on a change in pull request #2783: ARROW-3548: [Plasma] Add CreateAndSeal object store method for faster puts for small objects.\nURL: https://github.com/apache/arrow/pull/2783#discussion_r226722807\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -432,6 +439,29 @@ Status PlasmaClient::Impl::Create(const ObjectID& object_id, int64_t data_size,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Impl::CreateAndSeal(const ObjectID& object_id,\n+                                         const std::string& data,\n+                                         const std::string& metadata) {\n+  ARROW_LOG(DEBUG) << \"called CreateAndSeal on conn \" << store_conn_;\n+\n+  // Compute the object hash.\n+  static unsigned char digest[kDigestSize];\n \n Review comment:\n   @pcmoritz do you remember why the digest is static?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T17:24:17.282+0000",
                    "updated": "2018-10-19T17:24:17.282+0000",
                    "started": "2018-10-19T17:24:17.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156416",
                    "issueId": "13192408"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68c6b29c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73af6abe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68bc0cd6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@604e61e5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c26b240[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1edab90[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9bfddc7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1aedd45c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c0d1f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f9d5b30[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@183be2e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6c008a8e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 19 01:15:48 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-19T01:15:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3548/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-18T01:24:34.000+0000",
        "updated": "2018-10-19T17:24:17.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, to store an object in the plasma object store, there are a lot of IPCs. We first call \"Create\", which does an IPC round trip. Then we call \"Seal\", which is one IPC. Then we call \"Release\", which is another IPC.\r\n\r\nFor small objects, we can just inline the object and metadata directly into the message to the store, and wait for the response (the response tells us if the object was successfully created). This is just a single IPC round trip, which can be much faster.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Speed up storing small objects in the object store.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192408/comment/16656127",
                    "id": "16656127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 2783\n[https://github.com/apache/arrow/pull/2783]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-19T01:15:48.675+0000",
                    "updated": "2018-10-19T01:15:48.675+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zc6f:",
        "customfield_12314139": null
    }
}