{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326990",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990",
    "key": "ARROW-9973",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348647",
                "id": "12348647",
                "name": "1.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2020-08-21"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pwoody",
            "name": "pwoody",
            "key": "pwoody",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Patrick Woody",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pwoody",
            "name": "pwoody",
            "key": "pwoody",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Patrick Woody",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9973/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/481862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody opened a new pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167\n\n\n   Reported here: https://issues.apache.org/jira/browse/ARROW-9973\r\n   \r\n   Looks like a pretty straightforward fix. Let me know if you have any comments - thanks!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T02:59:32.271+0000",
                    "updated": "2020-09-11T02:59:32.271+0000",
                    "started": "2020-09-11T02:59:32.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481862",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/481867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#issuecomment-690845681\n\n\n   https://issues.apache.org/jira/browse/ARROW-9973\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T03:06:37.871+0000",
                    "updated": "2020-09-11T03:06:37.871+0000",
                    "started": "2020-09-11T03:06:37.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481867",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r486998232\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:01:44.134+0000",
                    "updated": "2020-09-11T12:01:44.134+0000",
                    "started": "2020-09-11T12:01:44.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482049",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487010013\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:26:21.247+0000",
                    "updated": "2020-09-11T12:26:21.247+0000",
                    "started": "2020-09-11T12:26:21.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482058",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487014199\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:34:46.184+0000",
                    "updated": "2020-09-11T12:34:46.184+0000",
                    "started": "2020-09-11T12:34:46.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482062",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487017749\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:41:40.767+0000",
                    "updated": "2020-09-11T12:41:40.767+0000",
                    "started": "2020-09-11T12:41:40.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482065",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487017749\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:42:55.706+0000",
                    "updated": "2020-09-11T12:42:55.706+0000",
                    "started": "2020-09-11T12:42:55.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482066",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487025525\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T12:55:34.634+0000",
                    "updated": "2020-09-11T12:55:34.634+0000",
                    "started": "2020-09-11T12:55:34.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482072",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487267011\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T20:11:15.793+0000",
                    "updated": "2020-09-11T20:11:15.793+0000",
                    "started": "2020-09-11T20:11:15.793+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482270",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487010013\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:06:20.365+0000",
                    "updated": "2020-09-12T20:06:20.365+0000",
                    "started": "2020-09-12T20:06:20.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482612",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#issuecomment-690845681\n\n\n   https://issues.apache.org/jira/browse/ARROW-9973\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:17:40.978+0000",
                    "updated": "2020-09-12T20:17:40.978+0000",
                    "started": "2020-09-12T20:17:40.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482754",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody opened a new pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:22:32.441+0000",
                    "updated": "2020-09-12T20:22:32.441+0000",
                    "started": "2020-09-12T20:22:32.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482796",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/482868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r486998232\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:28:23.993+0000",
                    "updated": "2020-09-12T20:28:23.993+0000",
                    "started": "2020-09-12T20:28:23.993+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482868",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/483072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487010013\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:52:30.822+0000",
                    "updated": "2020-09-12T20:52:30.822+0000",
                    "started": "2020-09-12T20:52:30.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483072",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/483163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#issuecomment-690845681\n\n\n   https://issues.apache.org/jira/browse/ARROW-9973\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:25:30.698+0000",
                    "updated": "2020-09-12T21:25:30.698+0000",
                    "started": "2020-09-12T21:25:30.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483163",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/483271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r486998232\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       IMO, the lower bound should not be Integer.MIN_VALUE. Instead, it should be the date corresponding to '-9999-12-31'?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       It seems different databases have different date ranges. 9999-12-31 is one frequently used (in MySQL & SQL Server). \r\n   \r\n   https://stackoverflow.com/questions/37138076/get-max-and-min-date-of-java-sql-date\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Sounds reasonable. However, Integer.MIN_VALUE seems overly conservative, as it forces us to use big int comparisons. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:40:02.059+0000",
                    "updated": "2020-09-12T21:40:02.059+0000",
                    "started": "2020-09-12T21:40:02.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483271",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/483434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487010013\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Is there context as to why the date range of -9999-12-31 to 9999-12-31? I hadn't seen it in the format spec.\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Interesting, I'm mostly inclined to just open the bounds to whatever epoch days fit within an integer range given that this is simply a reader and underlying systems have different ranges. Thoughts?\r\n   \r\n   e.g. postgres has a max year of 5874897\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,13 +85,13 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n+        long day = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        if (day < Integer.MIN_VALUE || day > MAX_DAY) {\n\nReview comment:\n       Yeah, but otherwise we can end up with particularly bad data. I've changed the condition to just be something similar to Math.toExactInt where we see if the casted value is the same.\r\n   \r\n   Without doing the big int comparison I think we run the risk of wrapping around into a totally valid positive range (e.g. 2*Integer.MAX_VALUE + x)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:55:24.380+0000",
                    "updated": "2020-09-12T21:55:24.380+0000",
                    "started": "2020-09-12T21:55:24.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483434",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/483738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r487617907\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,9 +71,10 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n-          throw new IllegalArgumentException(\"Day overflow: \" + day);\n+        long dayLong = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        int day = (int) dayLong;\n\nReview comment:\n       Maybe you can use LargeMemoryUtil#checkedCastToInt?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-14T02:18:49.843+0000",
                    "updated": "2020-09-14T02:18:49.843+0000",
                    "started": "2020-09-14T02:18:49.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483738",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/484197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pwoody commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r488195930\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,9 +71,10 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n-          throw new IllegalArgumentException(\"Day overflow: \" + day);\n+        long dayLong = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        int day = (int) dayLong;\n\nReview comment:\n       I've made it toIntExact to be more explicit about what we are going for @liyafan82 .\r\n   \r\n   LargeMemoryUtil#checkedCastToInt seems to be guarded by an unrelated property (ARROW_ENABLE_UNSAFE_MEMORY_ACCESS) and also just seems to be implemented incorrectly:\r\n   `length <= Integer.MAX_VALUE || length >= Integer.MIN_VALUE` is always true? Think we want that to be an && (or we simply delegate to the toIntExact like above).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-14T20:19:11.639+0000",
                    "updated": "2020-09-14T20:19:11.639+0000",
                    "started": "2020-09-14T20:19:11.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "484197",
                    "issueId": "13326990"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/worklog/484264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #8167:\nURL: https://github.com/apache/arrow/pull/8167#discussion_r488339829\n\n\n\n##########\nFile path: java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/consumer/DateConsumer.java\n##########\n@@ -85,9 +71,10 @@ public void consume(ResultSet resultSet) throws SQLException {\n       Date date = calendar == null ? resultSet.getDate(columnIndexInResultSet) :\n           resultSet.getDate(columnIndexInResultSet, calendar);\n       if (!resultSet.wasNull()) {\n-        int day = (int) TimeUnit.MILLISECONDS.toDays(date.getTime());\n-        if (day < 0 || day > MAX_DAY) {\n-          throw new IllegalArgumentException(\"Day overflow: \" + day);\n+        long dayLong = TimeUnit.MILLISECONDS.toDays(date.getTime());\n+        int day = (int) dayLong;\n\nReview comment:\n       Nice catch. Maybe you can open an issue for it if you are interested. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-15T02:11:04.993+0000",
                    "updated": "2020-09-15T02:11:04.993+0000",
                    "started": "2020-09-15T02:11:04.993+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "484264",
                    "issueId": "13326990"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@29dbcee3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ae8a0d4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@371b6780[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@68aa8fb7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6560678f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@25cdfb73[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4906bf2d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75ed468d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13571ba0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@590b6cda[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25084f01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a4eac03[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 15 07:04:11 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-15T07:04:11.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9973/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-11T02:55:48.000+0000",
        "updated": "2020-10-07T21:33:26.000+0000",
        "timeoriginalestimate": null,
        "description": "DateConsumer seems to do an overflow check when converting from a SQL Date and sees if the TimeUnit.MILLISECONDS.toDays(<sql time>) is negative. This is how any date less than 1970-01-01 will be represented, so unfortunately the adapter breaks for these values.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] JDBC DateConsumer does not allow dates before epoch",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326990/comment/17195918",
                    "id": "17195918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "Resolved in\u00a0https://github.com/apache/arrow/pull/8167",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-09-15T07:04:11.896+0000",
                    "updated": "2020-09-15T07:04:11.896+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ii5s:",
        "customfield_12314139": null
    }
}