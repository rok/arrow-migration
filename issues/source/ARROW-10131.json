{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329930",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930",
    "key": "ARROW-10131",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "dataset-dask-integration",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10131/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/503701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T12:20:38.100+0000",
                    "updated": "2020-10-22T12:20:38.100+0000",
                    "started": "2020-10-22T12:20:38.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503701",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/503707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#issuecomment-714464587\n\n\n   https://issues.apache.org/jira/browse/ARROW-10131\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T12:38:18.215+0000",
                    "updated": "2020-10-22T12:38:18.215+0000",
                    "started": "2020-10-22T12:38:18.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503707",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512072709\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -322,6 +254,13 @@ struct ParquetFactoryOptions {\n   // This is useful for partitioning which parses directory when ordering\n   // is important, e.g. DirectoryPartitioning.\n   std::string partition_base_dir;\n+\n+  // Assert that all ColumnChunk paths are consitent. The parquet spec allows for\n\nReview comment:\n       ```suggestion\r\n     // Assert that all ColumnChunk paths are consistent. The parquet spec allows for\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -162,8 +148,7 @@ static std::shared_ptr<StructScalar> ColumnChunkStatisticsAsStructScalar(\n \n   // Optimize for corner case where all values are nulls\n   if (statistics->num_values() == statistics->null_count()) {\n-    auto null = MakeNullScalar(field->type());\n-    return MakeMinMaxScalar(null, null);\n+    return equal(std::move(field_expr), scalar(MakeNullScalar(field->type())));\n\nReview comment:\n       I am not sure an \"equal\" expression is correct for nulls, since nulls are never equal\r\n   \r\n   So eg filtering on `filter=ds.field(\"col\") == pa.NULL` during a scan will not work to select the nulls, I suppose.\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -208,43 +146,34 @@ class ARROW_DS_EXPORT RowGroupInfo : public util::EqualityComparable<RowGroupInf\n /// number of scanned RowGroups, or to partition the scans across multiple\n /// threads.\n ///\n-/// It can also attach optional statistics with each RowGroups, providing\n-/// pushdown predicate benefits before invoking any heavy IO. This can induce\n+/// Metadata can be explicitly provided, enabling pushdown predicate benefits without\n+/// the potentially heavy IO of loading Metadata from the file system. This can induce\n /// significant performance boost when scanning high latency file systems.\n class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n  public:\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n-  /// \\brief Return the RowGroups selected by this fragment, or nullptr\n-  /// if all RowGroups in the parquet file are selected.\n-  const std::vector<RowGroupInfo>* row_groups();\n-\n-  /// \\brief Return the number of row groups selected by this fragment.\n-  Result<int> GetNumRowGroups();\n+  /// \\brief Return the RowGroups selected by this fragment.\n+  const std::vector<int>& row_groups() const { return row_groups_; }\n \n-  /// \\brief Indicate if the attached statistics are complete and the physical schema\n-  /// is cached.\n-  ///\n-  /// The statistics are complete if the provided RowGroups (see `row_groups()`)\n-  /// is not empty / and all RowGroup return true on `RowGroup::HasStatistics()`.\n-  bool HasCompleteMetadata() const { return has_complete_metadata_; }\n+  /// \\brief Return the FileMetaData associated with this fragment.\n+  const std::shared_ptr<parquet::FileMetaData>& metadata() const { return metadata_; }\n \n-  /// \\brief Ensure attached statistics are complete and the physical schema is cached.\n+  /// \\brief Ensure this fragment's FileMetaData is in memory.\n   Status EnsureCompleteMetadata(parquet::arrow::FileReader* reader = NULLPTR);\n \n   /// \\brief Return a filtered subset of the ParquetFileFragment.\n   Result<std::shared_ptr<Fragment>> Subset(const std::shared_ptr<Expression>& predicate);\n-  Result<std::shared_ptr<Fragment>> Subset(const std::vector<int> row_group_ids);\n+  Result<std::shared_ptr<Fragment>> Subset(std::vector<int> row_group_ids);\n \n  private:\n   ParquetFileFragment(FileSource source, std::shared_ptr<FileFormat> format,\n                       std::shared_ptr<Expression> partition_expression,\n                       std::shared_ptr<Schema> physical_schema,\n-                      std::vector<RowGroupInfo> row_groups);\n+                      std::vector<int> row_groups, bool select_all_row_groups = false);\n\nReview comment:\n       This `select_all_row_groups` is to distinguish between empty row groups selection as actual selection (of no row groups) vs no selection? \r\n   Can you add a comment about that somewhere? (maybe below where `select_all_row_groups_` is declared)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -907,66 +908,61 @@ cdef class FileFragment(Fragment):\n         return FileFormat.wrap(self.file_fragment.format())\n \n \n-cdef class RowGroupInfo(_Weakrefable):\n+class RowGroupInfo:\n     \"\"\"A wrapper class for RowGroup information\"\"\"\n \n-    cdef:\n-        CRowGroupInfo info\n-\n-    def __init__(self, int id):\n-        cdef CRowGroupInfo info = CRowGroupInfo(id)\n-        self.init(info)\n-\n-    cdef void init(self, CRowGroupInfo info):\n-        self.info = info\n-\n-    @staticmethod\n-    cdef wrap(CRowGroupInfo info):\n-        cdef RowGroupInfo self = RowGroupInfo.__new__(RowGroupInfo)\n-        self.init(info)\n-        return self\n-\n-    @property\n-    def id(self):\n-        return self.info.id()\n+    def __init__(self, id, metadata=None, schema=None):\n+        self.id = id\n+        self.metadata = metadata\n+        self.schema = schema\n \n     @property\n     def num_rows(self):\n-        return self.info.num_rows()\n+        if self.metadata is None:\n+            return None\n\nReview comment:\n       Can ``self.metadata`` ever be None? \r\n   It seems this loaded from the file on access if it was not cached (which is fine I think)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -1001,21 +997,26 @@ cdef class ParquetFileFragment(FileFragment):\n \n     @property\n     def row_groups(self):\n-        cdef:\n-            const vector[CRowGroupInfo]* c_row_groups\n-        c_row_groups = self.parquet_file_fragment.row_groups()\n-        if c_row_groups == nullptr:\n-            return None\n-        return [RowGroupInfo.wrap(c_row_groups.at(i))\n-                for i in range(c_row_groups.size())]\n+        metadata = self.metadata\n+        cdef vector[int] row_groups = self.parquet_file_fragment.row_groups()\n+        return [RowGroupInfo(i, metadata.row_group(i), self.physical_schema)\n+                for i in row_groups]\n+\n+    @property\n+    def metadata(self):\n+        self.ensure_complete_metadata()\n+        cdef FileMetaData metadata = FileMetaData.__new__(FileMetaData)\n\nReview comment:\n       ```suggestion\r\n           cdef FileMetaData metadata = FileMetaData()\r\n   ```\r\n   \r\n   \n\n##########\nFile path: cpp/src/arrow/dataset/filter.cc\n##########\n@@ -1337,7 +1351,11 @@ Result<std::shared_ptr<RecordBatch>> TreeEvaluator::Filter(\n   return batch->Slice(0, 0);\n }\n \n-std::shared_ptr<Expression> scalar(bool value) { return scalar(MakeScalar(value)); }\n+const std::shared_ptr<Expression>& scalar(bool value) {\n+  static auto true_ = scalar(MakeScalar(true));\n+  static auto false_ = scalar(MakeScalar(false));\n+  return value ? true_ : false_;\n+}\n\nReview comment:\n       Just out of curiosity to understand, what's the reason for the above change?\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -1935,14 +1934,21 @@ cdef class ParquetFactoryOptions(_Weakrefable):\n         have partition information.\n     partitioning : Partitioning, PartitioningFactory, optional\n         The partitioning scheme applied to fragments, see ``Partitioning``.\n+    validate_column_chunk_paths : bool, default False\n+        Assert that all ColumnChunk paths are consitent. The parquet spec\n\nReview comment:\n       ```suggestion\r\n           Assert that all ColumnChunk paths are consistent. The parquet spec\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -1102,23 +1092,14 @@ def test_fragments_parquet_subset_ids(tempdir):\n     # select with row group ids\n     subfrag = fragment.subset(row_group_ids=[0, 3])\n     assert subfrag.num_row_groups == 2\n-    # the row_groups list is initialized, but don't have statistics\n-    assert len(subfrag.row_groups) == 2\n-    assert subfrag.row_groups[0].statistics is None\n+    assert subfrag.row_groups == [fragment.row_groups[i] for i in [0, 3]]\n+\n     # check correct scan result of subset\n     result = subfrag.to_table()\n     assert result.to_pydict() == {\"f1\": [0, 3], \"f2\": [1, 1]}\n \n-    # if the original fragment has statistics -> preserve them\n-    fragment.ensure_complete_metadata()\n-    subfrag = fragment.subset(row_group_ids=[0, 3])\n-    assert subfrag.num_row_groups == 2\n\nReview comment:\n       Can we keep (part of) this test? But for example ensure there is no file IO after the `subset()` call to ensure the metadata are set again on the the subset\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -905,13 +896,12 @@ def test_fragments_parquet_ensure_metadata(tempdir, open_logging_fs):\n     assert row_group.num_rows == 2\n     assert row_group.statistics is not None\n \n-    # pickling preserves row group ids but not statistics\n+    # pickling preserves row group ids and statistics\n\nReview comment:\n       the test doesn't really test this aspect, though? (the fact that pickling preserved the statistics, as if they were not preserved, we would load them on access) Maybe putting an `with assert_opens([]):` around the asserts after loading the pickle?\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -1102,23 +1092,14 @@ def test_fragments_parquet_subset_ids(tempdir):\n     # select with row group ids\n     subfrag = fragment.subset(row_group_ids=[0, 3])\n     assert subfrag.num_row_groups == 2\n-    # the row_groups list is initialized, but don't have statistics\n-    assert len(subfrag.row_groups) == 2\n-    assert subfrag.row_groups[0].statistics is None\n+    assert subfrag.row_groups == [fragment.row_groups[i] for i in [0, 3]]\n+\n     # check correct scan result of subset\n     result = subfrag.to_table()\n     assert result.to_pydict() == {\"f1\": [0, 3], \"f2\": [1, 1]}\n \n-    # if the original fragment has statistics -> preserve them\n-    fragment.ensure_complete_metadata()\n-    subfrag = fragment.subset(row_group_ids=[0, 3])\n-    assert subfrag.num_row_groups == 2\n-    assert len(subfrag.row_groups) == 2\n-    assert subfrag.row_groups[0].statistics is not None\n-\n     # empty list of ids\n     subfrag = fragment.subset(row_group_ids=[])\n-    assert subfrag.num_row_groups == 0\n\nReview comment:\n       This is something we can keep? (it should still be true, and the `num_row_groups` is independent from `.row_groups` on the python side)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T13:48:36.191+0000",
                    "updated": "2020-10-27T13:48:36.191+0000",
                    "started": "2020-10-27T13:48:36.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505223",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512771071\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -162,8 +148,7 @@ static std::shared_ptr<StructScalar> ColumnChunkStatisticsAsStructScalar(\n \n   // Optimize for corner case where all values are nulls\n   if (statistics->num_values() == statistics->null_count()) {\n-    auto null = MakeNullScalar(field->type());\n-    return MakeMinMaxScalar(null, null);\n+    return equal(std::move(field_expr), scalar(MakeNullScalar(field->type())));\n\nReview comment:\n       Yes, I suppose it'd be more correct to produce `not is_valid(field_expr)` here. `filter=ds.field(\"col\") == pa.NULL` won't select nulls, so I'd like to defer the more correct stats expr to a follow up. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:05:05.564+0000",
                    "updated": "2020-10-27T15:05:05.564+0000",
                    "started": "2020-10-27T15:05:05.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505263",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512771339\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -208,43 +146,34 @@ class ARROW_DS_EXPORT RowGroupInfo : public util::EqualityComparable<RowGroupInf\n /// number of scanned RowGroups, or to partition the scans across multiple\n /// threads.\n ///\n-/// It can also attach optional statistics with each RowGroups, providing\n-/// pushdown predicate benefits before invoking any heavy IO. This can induce\n+/// Metadata can be explicitly provided, enabling pushdown predicate benefits without\n+/// the potentially heavy IO of loading Metadata from the file system. This can induce\n /// significant performance boost when scanning high latency file systems.\n class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n  public:\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n-  /// \\brief Return the RowGroups selected by this fragment, or nullptr\n-  /// if all RowGroups in the parquet file are selected.\n-  const std::vector<RowGroupInfo>* row_groups();\n-\n-  /// \\brief Return the number of row groups selected by this fragment.\n-  Result<int> GetNumRowGroups();\n+  /// \\brief Return the RowGroups selected by this fragment.\n+  const std::vector<int>& row_groups() const { return row_groups_; }\n \n-  /// \\brief Indicate if the attached statistics are complete and the physical schema\n-  /// is cached.\n-  ///\n-  /// The statistics are complete if the provided RowGroups (see `row_groups()`)\n-  /// is not empty / and all RowGroup return true on `RowGroup::HasStatistics()`.\n-  bool HasCompleteMetadata() const { return has_complete_metadata_; }\n+  /// \\brief Return the FileMetaData associated with this fragment.\n+  const std::shared_ptr<parquet::FileMetaData>& metadata() const { return metadata_; }\n \n-  /// \\brief Ensure attached statistics are complete and the physical schema is cached.\n+  /// \\brief Ensure this fragment's FileMetaData is in memory.\n   Status EnsureCompleteMetadata(parquet::arrow::FileReader* reader = NULLPTR);\n \n   /// \\brief Return a filtered subset of the ParquetFileFragment.\n   Result<std::shared_ptr<Fragment>> Subset(const std::shared_ptr<Expression>& predicate);\n-  Result<std::shared_ptr<Fragment>> Subset(const std::vector<int> row_group_ids);\n+  Result<std::shared_ptr<Fragment>> Subset(std::vector<int> row_group_ids);\n \n  private:\n   ParquetFileFragment(FileSource source, std::shared_ptr<FileFormat> format,\n                       std::shared_ptr<Expression> partition_expression,\n                       std::shared_ptr<Schema> physical_schema,\n-                      std::vector<RowGroupInfo> row_groups);\n+                      std::vector<int> row_groups, bool select_all_row_groups = false);\n\nReview comment:\n       Will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:05:21.448+0000",
                    "updated": "2020-10-27T15:05:21.448+0000",
                    "started": "2020-10-27T15:05:21.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505265",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512773517\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/filter.cc\n##########\n@@ -1337,7 +1351,11 @@ Result<std::shared_ptr<RecordBatch>> TreeEvaluator::Filter(\n   return batch->Slice(0, 0);\n }\n \n-std::shared_ptr<Expression> scalar(bool value) { return scalar(MakeScalar(value)); }\n+const std::shared_ptr<Expression>& scalar(bool value) {\n+  static auto true_ = scalar(MakeScalar(true));\n+  static auto false_ = scalar(MakeScalar(false));\n+  return value ? true_ : false_;\n+}\n\nReview comment:\n       Just results in slightly less allocator churn for the very common case of a boolean ScalarExpression, since we produce only two permanent instances rather than one per invocation of `scalar(bool)`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:08:03.897+0000",
                    "updated": "2020-10-27T15:08:03.897+0000",
                    "started": "2020-10-27T15:08:03.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505267",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512773844\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -907,66 +908,61 @@ cdef class FileFragment(Fragment):\n         return FileFormat.wrap(self.file_fragment.format())\n \n \n-cdef class RowGroupInfo(_Weakrefable):\n+class RowGroupInfo:\n     \"\"\"A wrapper class for RowGroup information\"\"\"\n \n-    cdef:\n-        CRowGroupInfo info\n-\n-    def __init__(self, int id):\n-        cdef CRowGroupInfo info = CRowGroupInfo(id)\n-        self.init(info)\n-\n-    cdef void init(self, CRowGroupInfo info):\n-        self.info = info\n-\n-    @staticmethod\n-    cdef wrap(CRowGroupInfo info):\n-        cdef RowGroupInfo self = RowGroupInfo.__new__(RowGroupInfo)\n-        self.init(info)\n-        return self\n-\n-    @property\n-    def id(self):\n-        return self.info.id()\n+    def __init__(self, id, metadata=None, schema=None):\n+        self.id = id\n+        self.metadata = metadata\n+        self.schema = schema\n \n     @property\n     def num_rows(self):\n-        return self.info.num_rows()\n+        if self.metadata is None:\n+            return None\n\nReview comment:\n       I'll delete this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:08:30.028+0000",
                    "updated": "2020-10-27T15:08:30.028+0000",
                    "started": "2020-10-27T15:08:30.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505269",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512801346\n\n\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -905,13 +896,12 @@ def test_fragments_parquet_ensure_metadata(tempdir, open_logging_fs):\n     assert row_group.num_rows == 2\n     assert row_group.statistics is not None\n \n-    # pickling preserves row group ids but not statistics\n+    # pickling preserves row group ids and statistics\n\nReview comment:\n       The fragment is always reopened currently since all properties of `ParquetFileFragment` ensure complete metadata. Ideally the metadata would be serialized while pickling and unpickling would produce a fully loaded parquet fragment, but this needs to wait for a follow up since there is non trivial mismatch between how parquet views schemas (depth first flat indexed) an how arrow views schemas which currently requires an open reader to mediate. Once we disentangle this we can avoid reopening files.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:40:04.795+0000",
                    "updated": "2020-10-27T15:40:04.795+0000",
                    "started": "2020-10-27T15:40:04.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505285",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#issuecomment-717338342\n\n\n   @jorisvandenbossche PTAL\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T15:50:45.861+0000",
                    "updated": "2020-10-27T15:50:45.861+0000",
                    "started": "2020-10-27T15:50:45.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505291",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#issuecomment-717353056\n\n\n   @github-actions crossbow submit test-conda-python-3.7-dask-latest test-conda-python-3.8-dask-master test-conda-python-3.7-kartothek-latest test-conda-python-3.7-kartothek-master\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:11:59.562+0000",
                    "updated": "2020-10-27T16:11:59.562+0000",
                    "started": "2020-10-27T16:11:59.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505297",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#issuecomment-717355297\n\n\n   Revision: 39db1694630010399d7213a595e83bd27f97ff04\n   \n   Submitted crossbow builds: [ursa-labs/crossbow @ actions-683](https://github.com/ursa-labs/crossbow/branches/all?query=actions-683)\n   \n   |Task|Status|\n   |----|------|\n   |test-conda-python-3.7-dask-latest|[![Github Actions](https://github.com/ursa-labs/crossbow/workflows/Crossbow/badge.svg?branch=actions-683-github-test-conda-python-3.7-dask-latest)](https://github.com/ursa-labs/crossbow/actions?query=branch:actions-683-github-test-conda-python-3.7-dask-latest)|\n   |test-conda-python-3.7-kartothek-latest|[![Github Actions](https://github.com/ursa-labs/crossbow/workflows/Crossbow/badge.svg?branch=actions-683-github-test-conda-python-3.7-kartothek-latest)](https://github.com/ursa-labs/crossbow/actions?query=branch:actions-683-github-test-conda-python-3.7-kartothek-latest)|\n   |test-conda-python-3.7-kartothek-master|[![Github Actions](https://github.com/ursa-labs/crossbow/workflows/Crossbow/badge.svg?branch=actions-683-github-test-conda-python-3.7-kartothek-master)](https://github.com/ursa-labs/crossbow/actions?query=branch:actions-683-github-test-conda-python-3.7-kartothek-master)|\n   |test-conda-python-3.8-dask-master|[![Github Actions](https://github.com/ursa-labs/crossbow/workflows/Crossbow/badge.svg?branch=actions-683-github-test-conda-python-3.8-dask-master)](https://github.com/ursa-labs/crossbow/actions?query=branch:actions-683-github-test-conda-python-3.8-dask-master)|\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:15:14.306+0000",
                    "updated": "2020-10-27T16:15:14.306+0000",
                    "started": "2020-10-27T16:15:14.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505298",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512836332\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -154,23 +154,27 @@ class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n   /// \\brief Return the RowGroups selected by this fragment.\n-  const std::vector<int>& row_groups() const { return row_groups_; }\n+  const std::vector<int>& row_groups() const {\n+    if (row_groups_) return *row_groups_;\n+    static std::vector<int> empty;\n+    return empty;\n\nReview comment:\n       Shouldn't this be a vector of <0, 1, 2, ..num_row_groups> ? Because if `row_groups_` is not set, it's meaning all row groups?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:21:12.927+0000",
                    "updated": "2020-10-27T16:21:12.927+0000",
                    "started": "2020-10-27T16:21:12.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505299",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512855171\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -154,23 +154,27 @@ class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n   /// \\brief Return the RowGroups selected by this fragment.\n-  const std::vector<int>& row_groups() const { return row_groups_; }\n+  const std::vector<int>& row_groups() const {\n+    if (row_groups_) return *row_groups_;\n+    static std::vector<int> empty;\n+    return empty;\n\nReview comment:\n       No; in c++ this property may be spuriously empty if you haven't called `EnsureCompleteMetadata()` yet.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:44:58.208+0000",
                    "updated": "2020-10-27T16:44:58.208+0000",
                    "started": "2020-10-27T16:44:58.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505308",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512861759\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -154,23 +154,27 @@ class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n   /// \\brief Return the RowGroups selected by this fragment.\n-  const std::vector<int>& row_groups() const { return row_groups_; }\n+  const std::vector<int>& row_groups() const {\n+    if (row_groups_) return *row_groups_;\n+    static std::vector<int> empty;\n+    return empty;\n\nReview comment:\n       Ah, OK, but so this is actually never used in practice (except in the C++ tests). In Python we use this method, but it's always preceded by a `ensure_complete_metadata`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:54:02.451+0000",
                    "updated": "2020-10-27T16:54:02.451+0000",
                    "started": "2020-10-27T16:54:02.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505312",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512865200\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.h\n##########\n@@ -154,23 +154,27 @@ class ARROW_DS_EXPORT ParquetFileFragment : public FileFragment {\n   Result<FragmentVector> SplitByRowGroup(const std::shared_ptr<Expression>& predicate);\n \n   /// \\brief Return the RowGroups selected by this fragment.\n-  const std::vector<int>& row_groups() const { return row_groups_; }\n+  const std::vector<int>& row_groups() const {\n+    if (row_groups_) return *row_groups_;\n+    static std::vector<int> empty;\n+    return empty;\n\nReview comment:\n       Exactly\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:58:34.064+0000",
                    "updated": "2020-10-27T16:58:34.064+0000",
                    "started": "2020-10-27T16:58:34.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505316",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/505317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507#discussion_r512771071\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -162,8 +148,7 @@ static std::shared_ptr<StructScalar> ColumnChunkStatisticsAsStructScalar(\n \n   // Optimize for corner case where all values are nulls\n   if (statistics->num_values() == statistics->null_count()) {\n-    auto null = MakeNullScalar(field->type());\n-    return MakeMinMaxScalar(null, null);\n+    return equal(std::move(field_expr), scalar(MakeNullScalar(field->type())));\n\nReview comment:\n       Yes, I suppose it'd be more correct to produce `not field_expr->IsValid()` here. `filter=ds.field(\"col\") == pa.NULL` won't select nulls, so I'd like to defer the more correct stats expr to a follow up.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T16:59:29.018+0000",
                    "updated": "2020-10-27T16:59:29.018+0000",
                    "started": "2020-10-27T16:59:29.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505317",
                    "issueId": "13329930"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/worklog/506405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche closed pull request #8507:\nURL: https://github.com/apache/arrow/pull/8507\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-29T20:51:34.257+0000",
                    "updated": "2020-10-29T20:51:34.257+0000",
                    "started": "2020-10-29T20:51:34.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506405",
                    "issueId": "13329930"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6d5eca23[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70f39e46[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@426f3268[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2e0285cd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c1c60ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7a44655d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4103f40f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7b953d0f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64133bd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3da4d483[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6359ecb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3176c895[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 29 20:51:25 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-29T20:51:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10131/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-29T12:32:47.000+0000",
        "updated": "2020-10-29T20:51:55.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to ARROW-9730, parsing of the statistics in parquet metadata is expensive, and therefore should be avoided when possible.\r\n\r\nFor example, the {{ParquetDatasetFactory}} ({{ds.parquet_dataset()}} in python) parses all statistics of all files and all columns. While when doing a filtered read, you might only need the statistics of certain files (eg if a filter on a partition field already excluded many files) and certain columns (eg only the columns on which you are actually filtering).\r\n\r\nThe current API is a bit all-or-nothing (both ParquetDatasetFactory, or a later EnsureCompleteMetadata parse all statistics, and don't allow parsing a subset, or only parsing the other (non-statistics) metadata, ...), so I think we should try to think of better abstractions.\r\n\r\ncc [~rjzamora] [~bkietz]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Lazily parse parquet metadata / statistics in ParquetDatasetFactory and ParquetFileFragment",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/comment/17203920",
                    "id": "17203920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "One idea could be to not yet parse statistics in {{ParquetDatasetFactory}}, and to provide a columns keyword in {{EnsureCompleteMetadata}} (which could then be specified eg when filtering row groups to only ensure the metadata of columns involved in the filter). However, to avoid reading the metadata / footers again when doing that, we would need to store the parquet FileMetadata / RowGroupMetadata object in the fragments. \r\n\r\nSo _if_ storing the FileMetadata / RowGroupMetadata object in the fragments, we could probably go for a fully \"lazy\" access as well: {{EnsureCompleteMetadata}} could only ensure that the underlying parquet metadata object is stored, but the actual statistics get only parsed when actually accessing the RowGroupInfo statistics. \r\nHowever, currently the statistics are stored on the {{RowGroupInfo}} as a {{StructScalar}}, so this would also need a refactor if we want to allow accessing/parsing only the statistics of a certain column.\r\n\r\nI also don't fully know how feasable it is to actually store the FileMetadData / RowGroupMetadata on the fragment, because when eg splitting it in a fragment per row group, we would either need to copy the FileMetaData object multiple times, or the different fragments would share the same metadata.\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-09-29T13:08:11.100+0000",
                    "updated": "2020-09-29T13:08:11.100+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329930/comment/17223198",
                    "id": "17223198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 8507\n[https://github.com/apache/arrow/pull/8507]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-10-29T20:51:25.877+0000",
                    "updated": "2020-10-29T20:51:25.877+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0j09s:",
        "customfield_12314139": null
    }
}