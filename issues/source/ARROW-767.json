{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13061285",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285",
    "key": "ARROW-767",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 81000,
            "total": 81000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 81000,
            "total": 81000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-767/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 136,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:14:58.826+0000",
                    "updated": "2019-04-29T16:14:58.826+0000",
                    "started": "2019-04-29T16:14:58.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234611",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#issuecomment-487644899\n \n \n   Submitted for discussion. There are some open questions here:\r\n   1. should paths use `std::string` or a dedicated abstraction?\r\n   2. should filesystems be anchored on a specific folder or just at the root of the corresponding resource?\r\n   \r\n   My answers:\r\n   1. `std::string` is more readily usable and a path abstraction is overkill for the kind of simple use cases for the filesystem API\r\n   2. filesystems should just start at the root directory of the resource\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:17:21.021+0000",
                    "updated": "2019-04-29T16:17:21.021+0000",
                    "started": "2019-04-29T16:17:21.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234614",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#issuecomment-487648057\n \n \n   @wesm @martindurant @fsaintjacques \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:26:11.444+0000",
                    "updated": "2019-04-29T16:26:11.444+0000",
                    "started": "2019-04-29T16:26:11.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234620",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279445547\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n \n Review comment:\n   nit: should we be consistent with Folder/Directory naming?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:45:36.744+0000",
                    "updated": "2019-04-29T16:45:36.744+0000",
                    "started": "2019-04-29T16:45:36.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234638",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279445833\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n+\n+  /// Move / rename a file or directory.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Move(const std::string& src, const std::string& dest) = 0;\n \n Review comment:\n   another small nit:  If we go with strings as an abstraction would it make more sense to use string_view as the api?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:46:36.112+0000",
                    "updated": "2019-04-29T16:46:36.112+0000",
                    "started": "2019-04-29T16:46:36.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234639",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279446106\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n+\n+  /// Move / rename a file or directory.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Move(const std::string& src, const std::string& dest) = 0;\n+\n+  /// Copy a file.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Copy(const std::string& src, const std::string& dest) = 0;\n+\n+  /// Open an input stream.\n+  virtual Status OpenInputStream(const std::string& path,\n+                                 std::shared_ptr<InputStream>* out);\n+\n+  virtual Status OpenInputStream(const std::string& path, OpenFlags flags,\n+                                 std::shared_ptr<InputStream>* out) = 0;\n \n Review comment:\n   nit: should this be unique_ptr?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:47:18.320+0000",
                    "updated": "2019-04-29T16:47:18.320+0000",
                    "started": "2019-04-29T16:47:18.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234640",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279446781\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n \n Review comment:\n   what are you throughts on the implementation for this, when the underlying store doesn't support folders explicitly (e.g. S3)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:49:05.926+0000",
                    "updated": "2019-04-29T16:49:05.926+0000",
                    "started": "2019-04-29T16:49:05.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234641",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279447211\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n \n Review comment:\n   Perhaps, let's see what others say.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:50:13.769+0000",
                    "updated": "2019-04-29T16:50:13.769+0000",
                    "started": "2019-04-29T16:50:13.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234643",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279447507\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n+\n+  /// Move / rename a file or directory.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Move(const std::string& src, const std::string& dest) = 0;\n \n Review comment:\n   Not in my opinion, `string_view` is useful for performance-critical APIs, which is not the case here. Implicit conversion between `string_view` and `std::string` does not seem to work on all compilers, which would make the API more cumbersome.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:51:11.021+0000",
                    "updated": "2019-04-29T16:51:11.021+0000",
                    "started": "2019-04-29T16:51:11.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234644",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279447617\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   Is there a concrete use-case for batch delete?  I would imagine most file systems don't support transactional type deletes, so it might pay to expose this at a higher level instead of the core filesystem\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:51:28.446+0000",
                    "updated": "2019-04-29T16:51:28.446+0000",
                    "started": "2019-04-29T16:51:28.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234645",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279447706\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n+\n+  /// Move / rename a file or directory.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Move(const std::string& src, const std::string& dest) = 0;\n+\n+  /// Copy a file.\n+  ///\n+  /// The destination will be replaced if it exists.\n+  virtual Status Copy(const std::string& src, const std::string& dest) = 0;\n+\n+  /// Open an input stream.\n+  virtual Status OpenInputStream(const std::string& path,\n+                                 std::shared_ptr<InputStream>* out);\n+\n+  virtual Status OpenInputStream(const std::string& path, OpenFlags flags,\n+                                 std::shared_ptr<InputStream>* out) = 0;\n \n Review comment:\n   I don't think so, `shared_ptr` is more flexible and we probably don't care about the performance benefit here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:51:40.876+0000",
                    "updated": "2019-04-29T16:51:40.876+0000",
                    "started": "2019-04-29T16:51:40.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234647",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279447922\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n \n Review comment:\n   I think we should perhaps emulate them using `/` as a standard delimiter (perhaps configurable when instantiating the S3 filesystem object).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:52:19.329+0000",
                    "updated": "2019-04-29T16:52:19.329+0000",
                    "started": "2019-04-29T16:52:19.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234648",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279448306\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   I suspect something like deleting a Parquet partition with a large number of files?\r\n   The intention is not to allow transactional deletes but rather to avoid a roundtrip per each individual delete (which may hurt a lot if accessing a remote filesystem with 100+ms latencies).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:53:24.094+0000",
                    "updated": "2019-04-29T16:53:24.094+0000",
                    "started": "2019-04-29T16:53:24.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234649",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279448306\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   I suspect something like deleting a Parquet dataset with a large number of files/partitions?\r\n   The intention is not to allow transactional deletes but rather to avoid a roundtrip per each individual delete (which may hurt a lot if accessing a remote filesystem with 100+ms latencies).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:53:51.808+0000",
                    "updated": "2019-04-29T16:53:51.808+0000",
                    "started": "2019-04-29T16:53:51.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234650",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "martindurant commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279450366\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   Yes, certainly, some file-systems will provide shortcuts for bulk operations or various types, and they will be *very important* in many use cases. In general, it would be exceptionally useful if file-systems provide glob and directory-tree-based operations.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T16:59:01.485+0000",
                    "updated": "2019-04-29T16:59:01.485+0000",
                    "started": "2019-04-29T16:59:01.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234652",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279450792\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   Do we need globbing at the filesystem level or can we give the client a complete list of directory contents and do the filtering on the client side?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T17:00:17.219+0000",
                    "updated": "2019-04-29T17:00:17.219+0000",
                    "started": "2019-04-29T17:00:17.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234653",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "martindurant commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279451397\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n \n Review comment:\n   This conversation has been had many times over!\r\n   \r\n   Specifically for S3, there are two ideas of what a folder might mean, in the absence of a real posix-like hierarchy: the simplest, that create-folder is a no-op, and you only ever infer folders if they contain things; and that a empty key which ends with '/' is to be considered an empty folder (but it could later morph to a file if data is written). The latter is the convention used by the S3 console.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T17:02:01.554+0000",
                    "updated": "2019-04-29T17:02:01.554+0000",
                    "started": "2019-04-29T17:02:01.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234655",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "martindurant commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279451928\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   I can't say what you \"need\", but listing all the contents of some S3 bucket seems like a really bad idea. Glob functionality is something that users will find very convenient, and would best be done in one place only (ref https://github.com/martindurant/filesystem_spec/blob/master/fsspec/spec.py#L375 ).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T17:03:37.014+0000",
                    "updated": "2019-04-29T17:03:37.014+0000",
                    "started": "2019-04-29T17:03:37.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234658",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279452545\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   >  but listing all the contents of some S3 bucket seems like a really bad idea\r\n   \r\n   Does the S3 API support generic globbing?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T17:05:29.374+0000",
                    "updated": "2019-04-29T17:05:29.374+0000",
                    "started": "2019-04-29T17:05:29.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234663",
                    "issueId": "13061285"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/worklog/234664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4225: [DRAFT] ARROW-767: [C++] Filesystem abstraction\nURL: https://github.com/apache/arrow/pull/4225#discussion_r279453035\n \n \n\n ##########\n File path: cpp/src/arrow/filesystem/filesystem.h\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+\n+namespace io {\n+\n+class InputStream;\n+class OutputStream;\n+\n+}  // namespace io\n+\n+namespace fs {\n+\n+// A system clock time point expressed as a 64-bit (or more) number of\n+// secondes since the epoch.\n+using TimePoint = std::chrono::sys_time<std::chrono::nanoseconds>;\n+\n+enum class FileType {\n+  // Target does not exist\n+  NonExistent,\n+  // Target exists but its type is unknown (could be a special file such\n+  // as a Unix socket or character device, or Windows NUL / CON / ...)\n+  Unknown,\n+  // Target is a regular file\n+  File,\n+  // Target is a directory\n+  Directory\n+};\n+\n+std::string ToString(FileType);\n+\n+struct FileStats {\n+  FileType type = FileType::Unknown;\n+  // The file path in the filesystem.\n+  std::string path;\n+  // The size in bytes, if available.  Only regular files are guaranteed\n+  // to have a size.\n+  int64_t size = -1;\n+  // The time of last modification, if available.\n+  TimePoint mtime = TimePoint(-1);\n+\n+  FileStats() = default;\n+\n+  // The file base name (component after the last '/').\n+  std::string base_name() const;\n+};\n+\n+struct OpenFlags {\n+  // Whether to transparently compress or decompress, based on file extension\n+  // or other heuristics.\n+  bool transparent_compression = true;\n+\n+  OpenFlags() = default;\n+};\n+\n+struct Selector {\n+  // The folder in which to select files.\n+  std::string base_folder;\n+  // Whether to recurse into subfolders.\n+  bool recursive = false;\n+\n+  MatchOptions() = default;\n+};\n+\n+\n+class FileSystem {\n+ public:\n+  virtual ~FileSystem();\n+\n+  /// Get statistics for the given target.\n+  ///\n+  /// Any symlink is automatically dereferenced, recursively\n+  virtual Status GetTargetStats(const std::string& path, FileStats* out);\n+  /// Same, for many targets at once.\n+  virtual Status GetTargetStats(const std::vector<std::string>& paths,\n+                                std::vector<FileStats>* out) = 0;\n+  virtual Status GetTargetStats(const Selector& select,\n+                                std::vector<FileStats>* out) = 0;\n+\n+  /// Create a folder and subfolders.\n+  virtual Status CreateFolder(const std::string& path, bool recursive = true) = 0;\n+\n+  /// Delete a folder and contents.\n+  virtual Status DeleteFolder(const std::string& path) = 0;\n+\n+  /// Delete a file.\n+  virtual Status DeleteFile(const std::string& path) = 0;\n+  /// Delete many files.\n+  virtual Status DeleteFiles(const std::vector<string>& path) = 0;\n \n Review comment:\n   > Glob functionality is something that users will find very convenient, and would best be done in one place only \r\n   \r\n   Right, but should it be implemented by each filesystem (which implies it can be done on the server side) or should it be an agnostic facility in the client? Your reference to the `fsspec` code seems to suggest the latter.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-29T17:06:49.676+0000",
                    "updated": "2019-04-29T17:06:49.676+0000",
                    "started": "2019-04-29T17:06:49.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "234664",
                    "issueId": "13061285"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 81000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@20a0b669[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@573e3c24[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23aa7460[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@553b32d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10de0b85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7269f503[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@210865a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a4297ee[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7aa02500[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@475c16ba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41f87a5d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4f8b686b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 81000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed May 08 13:30:58 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-05-08T13:30:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-767/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2017-04-03T22:58:10.000+0000",
        "updated": "2019-05-08T13:31:09.000+0000",
        "timeoriginalestimate": null,
        "description": "See, e.g. in TensorFlow: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/platform/file_system.h",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "22.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 81000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Adopt FileSystem abstraction",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/comment/16765275",
                    "id": "16765275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we should make a push on the \"Arrow Dataset\" project in 0.14. I will write a requirements document",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-11T18:55:49.355+0000",
                    "updated": "2019-02-11T18:55:49.355+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13061285/comment/16835602",
                    "id": "16835602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4225\n[https://github.com/apache/arrow/pull/4225]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-05-08T13:30:58.670+0000",
                    "updated": "2019-05-08T13:30:58.670+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3d5rj:",
        "customfield_12314139": null
    }
}