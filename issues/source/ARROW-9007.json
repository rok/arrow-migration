{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13308904",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904",
    "key": "ARROW-9007",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9007/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365\n\n\n   This enables appending `ArrayDataRef` to builders, which makes it easier to concatenate arrays\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T06:02:15.195+0000",
                    "updated": "2020-06-06T06:02:15.195+0000",
                    "started": "2020-06-06T06:02:15.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442196",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#issuecomment-639990231\n\n\n   @houqp I finally completed this. The lists and nested lists were quite tricky, but I managed in the end.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T06:03:18.887+0000",
                    "updated": "2020-06-06T06:03:18.887+0000",
                    "started": "2020-06-06T06:03:18.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442197",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#issuecomment-639990238\n\n\n   https://issues.apache.org/jira/browse/ARROW-9007\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T06:03:31.532+0000",
                    "updated": "2020-06-06T06:03:31.532+0000",
                    "started": "2020-06-06T06:03:31.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442198",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436250767\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +620,78 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if let DataType::List(_) = array.data_type() {\n+                if array.child_data().len() != 1 {\n+                    return Err(ArrowError::InvalidArgumentError(\n+                        \"When appending list arrays, data must contain 1 child_data element\"\n+                            .to_string(),\n+                    ));\n+                }\n+                let len = array.len();\n+                if len == 0 {\n+                    continue;\n+                }\n+                let offset = array.offset();\n+\n+                // `typed_data` is unsafe, however this call is safe as `ListArray` has i32 offsets\n+                unsafe {\n\nReview comment:\n       looks like scope of this unsafe block can be reduced?\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -450,6 +455,44 @@ impl<T: ArrowPrimitiveType> ArrayBuilder for PrimitiveBuilder<T> {\n         self.values_builder.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        let mul = T::get_bit_width() / 8;\n+        for array in data {\n+            if array.data_type() != &T::get_data_type() {\n\nReview comment:\n       if one of the array data has the wrong type, the append will be partially applied, is this intentional?\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -1018,6 +1271,50 @@ impl ArrayBuilder for StructBuilder {\n         self.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        for array in data {\n+            if let DataType::Struct(fields) = array.data_type() {\n+                if &self.fields != fields {\n+                    return Err(ArrowError::InvalidArgumentError(\n+                        \"Struct arrays are not the same\".to_string(),\n\nReview comment:\n       nitpick, perhaps `have different fields` would be a better wording here.\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -1018,6 +1271,50 @@ impl ArrayBuilder for StructBuilder {\n         self.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        for array in data {\n+            if let DataType::Struct(fields) = array.data_type() {\n+                if &self.fields != fields {\n+                    return Err(ArrowError::InvalidArgumentError(\n+                        \"Struct arrays are not the same\".to_string(),\n+                    ));\n+                }\n+                let len = array.len();\n+                if len == 0 {\n+                    continue;\n+                }\n+                let offset = array.offset();\n+                let results: Result<Vec<()>> = self\n+                    .field_builders\n+                    .iter_mut()\n+                    .zip(array.child_data())\n+                    .map(|(builder, child_data)| {\n+                        // slice child_data to account for offsets\n+                        let child_array = make_array(child_data.clone());\n+                        let sliced = child_array.slice(offset, len);\n+                        builder.append_data(&[sliced.data()])\n+                    })\n+                    .collect();\n+                results?;\n\nReview comment:\n       minor, if results is not used, then it's better to use a for loop over zipped iterators above to avoid creating a temporary  vector at the end.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T09:03:27.091+0000",
                    "updated": "2020-06-06T09:03:27.091+0000",
                    "started": "2020-06-06T09:03:27.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442211",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436254430\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -450,6 +455,44 @@ impl<T: ArrowPrimitiveType> ArrayBuilder for PrimitiveBuilder<T> {\n         self.values_builder.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        let mul = T::get_bit_width() / 8;\n+        for array in data {\n+            if array.data_type() != &T::get_data_type() {\n\nReview comment:\n       I considered this, I ideally wanted to leave the responsibility to the user, as we'd provide convenience methods like concat, but since this is public, I should check data types first, then return early if there's a mismatch. I'll update\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T09:35:32.821+0000",
                    "updated": "2020-06-06T09:35:32.821+0000",
                    "started": "2020-06-06T09:35:32.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442218",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436257140\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -1018,6 +1271,50 @@ impl ArrayBuilder for StructBuilder {\n         self.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        for array in data {\n+            if let DataType::Struct(fields) = array.data_type() {\n+                if &self.fields != fields {\n+                    return Err(ArrowError::InvalidArgumentError(\n+                        \"Struct arrays are not the same\".to_string(),\n+                    ));\n+                }\n+                let len = array.len();\n+                if len == 0 {\n+                    continue;\n+                }\n+                let offset = array.offset();\n+                let results: Result<Vec<()>> = self\n+                    .field_builders\n+                    .iter_mut()\n+                    .zip(array.child_data())\n+                    .map(|(builder, child_data)| {\n+                        // slice child_data to account for offsets\n+                        let child_array = make_array(child_data.clone());\n+                        let sliced = child_array.slice(offset, len);\n+                        builder.append_data(&[sliced.data()])\n+                    })\n+                    .collect();\n+                results?;\n\nReview comment:\n       Thanks, I've changed it\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T10:21:49.417+0000",
                    "updated": "2020-06-06T10:21:49.417+0000",
                    "started": "2020-06-06T10:21:49.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442227",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#issuecomment-640031722\n\n\n   @houqp I've pushed some changes\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T10:24:12.941+0000",
                    "updated": "2020-06-06T10:24:12.941+0000",
                    "started": "2020-06-06T10:24:12.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442228",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436301311\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +632,81 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if array.child_data().len() != 1 {\n\nReview comment:\n       If we are already doing validation before mutating data (which I think it's the right behavior), it's best to move all validation logic into the initial validation loop.\r\n   \r\n   Another thing we can move into the initial loop is stats gathering for optimization purpose. For example, we can calculate aggregated element count in the loop. Then before we enter the mutation loop, call reserve method on various builders to allocate memory in one go. This way, we don't have to trigger multiple memory reallocation in the mutation loop, especially for bitmap_builder.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T21:17:12.553+0000",
                    "updated": "2020-06-06T21:17:12.553+0000",
                    "started": "2020-06-06T21:17:12.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442310",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436301311\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +632,81 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if array.child_data().len() != 1 {\n\nReview comment:\n       If we are already doing validation before mutating data (which I think it's the right behavior), it's best to move all validation logic into the initial validation loop.\r\n   \r\n   Another thing we can move into the initial loop is stats gathering for optimization purpose. For example, we can calculate aggregated element count in the loop. Then before we enter the mutation loop, call reserve method on various builders to allocate memory in one go. This way, we don't have to trigger multiple memory reallocation in the mutation loop.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T21:29:36.585+0000",
                    "updated": "2020-06-06T21:29:36.585+0000",
                    "started": "2020-06-06T21:29:36.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442311",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436303006\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -841,12 +1048,91 @@ impl ArrayBuilder for StringBuilder {\n     }\n }\n \n+// Helper function for appending Binary and Utf8 data\n+fn append_binary_data(\n+    builder: &mut ListBuilder<UInt8Builder>,\n+    data_type: &DataType,\n+    data: &[ArrayDataRef],\n+) -> Result<()> {\n+    if !check_array_data_type(data_type, data) {\n+        return Err(ArrowError::InvalidArgumentError(\n+            \"Cannot append data to builder if data types are different\".to_string(),\n+        ));\n+    }\n+    for array in data {\n+        // convert string to List<u8> to reuse list's cast\n+        let int_data = &array.buffers()[1];\n+        let int_data = Arc::new(ArrayData::new(\n+            DataType::UInt8,\n+            int_data.len(),\n+            None,\n+            None,\n+            0,\n+            vec![int_data.clone()],\n+            vec![],\n+        )) as ArrayDataRef;\n+        let list_data = Arc::new(ArrayData::new(\n+            DataType::List(Box::new(DataType::UInt8)),\n+            array.len(),\n+            None,\n+            array.null_buffer().map(|buf| buf.clone()),\n+            array.offset(),\n+            vec![(&array.buffers()[0]).clone()],\n+            vec![int_data],\n+        ));\n+        builder.append_data(&[list_data])?;\n+    }\n+    Ok(())\n+}\n+\n impl ArrayBuilder for FixedSizeBinaryBuilder {\n     /// Returns the builder as a non-mutable `Any` reference.\n     fn as_any(&self) -> &Any {\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        for array in data {\n+            // convert string to FixedSizeList<u8> to reuse list's append\n+            let int_data = &array.buffers()[0];\n+            let int_data = Arc::new(ArrayData::new(\n+                DataType::UInt8,\n+                int_data.len(),\n+                None,\n+                None,\n+                0,\n+                vec![int_data.clone()],\n+                vec![],\n+            )) as ArrayDataRef;\n+            let list_data = Arc::new(ArrayData::new(\n+                DataType::FixedSizeList(Box::new(DataType::UInt8), self.builder.list_len),\n\nReview comment:\n       do we need to validate list_len for each ArrayData as well? Also I recommend calling value_length() method to get list_len value instead or remove value_length entirely and use list_len directly everywhere.\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -1018,6 +1304,48 @@ impl ArrayBuilder for StructBuilder {\n         self.len\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        for array in data {\n+            let len = array.len();\n+            if len == 0 {\n+                continue;\n+            }\n+            let offset = array.offset();\n+            for (builder, child_data) in self\n+                .field_builders\n+                .iter_mut()\n+                .zip(array.child_data().iter())\n+            {\n+                // slice child_data to account for offsets\n+                let child_array = make_array(child_data.clone());\n+                let sliced = child_array.slice(offset, len);\n+                builder.append_data(&[sliced.data()])?;\n+            }\n+            // append array length\n+            self.len += len;\n+            for i in 0..len {\n+                // account for offset as `ArrayData` does not\n+                self.bitmap_builder.append(array.is_valid(offset + i))?;\n\nReview comment:\n       looks like we missed the reserve call before the loop here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T21:47:34.196+0000",
                    "updated": "2020-06-06T21:47:34.196+0000",
                    "started": "2020-06-06T21:47:34.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442315",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436307832\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +632,81 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if array.child_data().len() != 1 {\n\nReview comment:\n       The validation is only for data type, so we'd have to make a call on whether passing array data that's invalid should be undefined behaviour. If we passed in ArrayRef, we'd be certain that data is valid, but otherwise nothing stops someone from manually constructing ArrayDataRef incorrectly and passing it in. The validation check here at least give the user feedback, otherwise it would be a generic bounds error.\r\n   \r\n   I could alternatively customise the validation for different types, with potential allocation for both value and bitmap builders for primitive arrays. It becomes a slippery slope for lists and structs because those can be deeply nested.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T23:13:39.453+0000",
                    "updated": "2020-06-06T23:13:39.453+0000",
                    "started": "2020-06-06T23:13:39.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442327",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436308395\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -841,12 +1048,91 @@ impl ArrayBuilder for StringBuilder {\n     }\n }\n \n+// Helper function for appending Binary and Utf8 data\n+fn append_binary_data(\n+    builder: &mut ListBuilder<UInt8Builder>,\n+    data_type: &DataType,\n+    data: &[ArrayDataRef],\n+) -> Result<()> {\n+    if !check_array_data_type(data_type, data) {\n+        return Err(ArrowError::InvalidArgumentError(\n+            \"Cannot append data to builder if data types are different\".to_string(),\n+        ));\n+    }\n+    for array in data {\n+        // convert string to List<u8> to reuse list's cast\n+        let int_data = &array.buffers()[1];\n+        let int_data = Arc::new(ArrayData::new(\n+            DataType::UInt8,\n+            int_data.len(),\n+            None,\n+            None,\n+            0,\n+            vec![int_data.clone()],\n+            vec![],\n+        )) as ArrayDataRef;\n+        let list_data = Arc::new(ArrayData::new(\n+            DataType::List(Box::new(DataType::UInt8)),\n+            array.len(),\n+            None,\n+            array.null_buffer().map(|buf| buf.clone()),\n+            array.offset(),\n+            vec![(&array.buffers()[0]).clone()],\n+            vec![int_data],\n+        ));\n+        builder.append_data(&[list_data])?;\n+    }\n+    Ok(())\n+}\n+\n impl ArrayBuilder for FixedSizeBinaryBuilder {\n     /// Returns the builder as a non-mutable `Any` reference.\n     fn as_any(&self) -> &Any {\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        for array in data {\n+            // convert string to FixedSizeList<u8> to reuse list's append\n+            let int_data = &array.buffers()[0];\n+            let int_data = Arc::new(ArrayData::new(\n+                DataType::UInt8,\n+                int_data.len(),\n+                None,\n+                None,\n+                0,\n+                vec![int_data.clone()],\n+                vec![],\n+            )) as ArrayDataRef;\n+            let list_data = Arc::new(ArrayData::new(\n+                DataType::FixedSizeList(Box::new(DataType::UInt8), self.builder.list_len),\n\nReview comment:\n       I don't understand you entirely here, mind clarifying?\r\n   Here I'm reconstructing the data as a FSList<u8, len> from FSBinary<len>, otherwise I'd get an error about data types not being the same.\r\n   \r\n   I used list_len directly because i32 is a Copy type. I can change to builder.value_length()\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-06T23:26:08.005+0000",
                    "updated": "2020-06-06T23:26:08.005+0000",
                    "started": "2020-06-06T23:26:08.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442328",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436335986\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -841,12 +1048,91 @@ impl ArrayBuilder for StringBuilder {\n     }\n }\n \n+// Helper function for appending Binary and Utf8 data\n+fn append_binary_data(\n+    builder: &mut ListBuilder<UInt8Builder>,\n+    data_type: &DataType,\n+    data: &[ArrayDataRef],\n+) -> Result<()> {\n+    if !check_array_data_type(data_type, data) {\n+        return Err(ArrowError::InvalidArgumentError(\n+            \"Cannot append data to builder if data types are different\".to_string(),\n+        ));\n+    }\n+    for array in data {\n+        // convert string to List<u8> to reuse list's cast\n+        let int_data = &array.buffers()[1];\n+        let int_data = Arc::new(ArrayData::new(\n+            DataType::UInt8,\n+            int_data.len(),\n+            None,\n+            None,\n+            0,\n+            vec![int_data.clone()],\n+            vec![],\n+        )) as ArrayDataRef;\n+        let list_data = Arc::new(ArrayData::new(\n+            DataType::List(Box::new(DataType::UInt8)),\n+            array.len(),\n+            None,\n+            array.null_buffer().map(|buf| buf.clone()),\n+            array.offset(),\n+            vec![(&array.buffers()[0]).clone()],\n+            vec![int_data],\n+        ));\n+        builder.append_data(&[list_data])?;\n+    }\n+    Ok(())\n+}\n+\n impl ArrayBuilder for FixedSizeBinaryBuilder {\n     /// Returns the builder as a non-mutable `Any` reference.\n     fn as_any(&self) -> &Any {\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        for array in data {\n+            // convert string to FixedSizeList<u8> to reuse list's append\n+            let int_data = &array.buffers()[0];\n+            let int_data = Arc::new(ArrayData::new(\n+                DataType::UInt8,\n+                int_data.len(),\n+                None,\n+                None,\n+                0,\n+                vec![int_data.clone()],\n+                vec![],\n+            )) as ArrayDataRef;\n+            let list_data = Arc::new(ArrayData::new(\n+                DataType::FixedSizeList(Box::new(DataType::UInt8), self.builder.list_len),\n\nReview comment:\n       Ha, good point, I forgot byte_width is part of the data type signature :+1: \r\n   \r\n   with regards to `value_length()` v.s. `list_len`, after thinking more about it, I think you are right to use list_len here since these are all internal module implementation.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-07T07:48:46.612+0000",
                    "updated": "2020-06-07T07:48:46.612+0000",
                    "started": "2020-06-07T07:48:46.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442387",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436336846\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +632,81 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if array.child_data().len() != 1 {\n\nReview comment:\n       I think we can leave the memory allocation performance optimization to future PRs given that number of arrays in `data: &[ArrayDataRef]` should not be too large.\r\n   \r\n   But I do think we should make sure error handling behavior is consistent, i.e. invalid input should not lead to partial append to the array. If we are to use ArrayDataRef as input type, then I feel like we do need to have custom validation logic for each array type as you mentioned.\r\n   \r\n   The idea of using `ArrayRef` as input type is interesting. It does look like a simpler interface for end users and could simplify the error handling logic. What's the downside of using `ArrayRef` here compared to `ArrayDataRef`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-07T08:00:45.921+0000",
                    "updated": "2020-06-07T08:00:45.921+0000",
                    "started": "2020-06-07T08:00:45.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442388",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365#discussion_r436354577\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -577,6 +632,81 @@ where\n         self\n     }\n \n+    /// Appends data from other arrays into the builder\n+    ///\n+    /// This is most useful when concatenating arrays of the same type into a builder.\n+    fn append_data(&mut self, data: &[ArrayDataRef]) -> Result<()> {\n+        if !check_array_data_type(&self.data_type(), data) {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Cannot append data to builder if data types are different\".to_string(),\n+            ));\n+        }\n+        // determine the latest offset on the builder\n+        let mut cum_offset = if self.offsets_builder.len() == 0 {\n+            0\n+        } else {\n+            // peek into buffer to get last appended offset\n+            let buffer = self.offsets_builder.buffer.data();\n+            let len = self.offsets_builder.len();\n+            let (start, end) = ((len - 1) * 4, len * 4);\n+            let slice = &buffer[start..end];\n+            i32::from_le_bytes(slice.try_into().unwrap())\n+        };\n+        for array in data {\n+            if array.child_data().len() != 1 {\n\nReview comment:\n       > But I do think we should make sure error handling behavior is consistent, i.e. invalid input should not lead to partial append to the array. If we are to use ArrayDataRef as input type, then I feel like we do need to have custom validation logic for each array type as you mentioned.\r\n   \r\n   Thanks, I agree. Changes made in my latest commit.\r\n   \r\n   > The idea of using ArrayRef as input type is interesting. It does look like a simpler interface for end users and could simplify the error handling logic. \r\n   \r\n   The preferred way to convert `&[ArrayRef]` to `ArrayRef` will be the `concat` kernel that you've added. concat might then forego its current validation, and potentially be like:\r\n   \r\n   ```rust\r\n   pub fn concat(array_list: &[ArrayRef]) -> Result<ArrayRef> {\r\n       // get data type from first element\r\n       // create builder for data type (this'll have to cater for structs and lists)\r\n       // pass `ArrayDataRef`to builder\r\n       // finish builder and return `ArrayRef`\r\n   }\r\n   ```\r\n   \r\n   > What's the downside of using ArrayRef here compared to ArrayDataRef?\r\n   \r\n   `ArrayDataRef` is more flexible. If someone is creating Arrow data from raw data, there currently isn't much flexibility for them, especially when working with nested data structures. It might be more convenient to then create `ArrayData` instead of going all the way to create an array only to append it to a builder.\r\n   Constructing an `ArrayRef` to append is an extra step and at worst requires going through `arrow::utils::make_array(data: ArrayRef)`.\r\n   \r\n   The upside of `ArrayRef` is skipping the validation checks, though I wonder what cost the checks result in. We can wait for other reviewers' opinions on their necessity.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-07T11:47:42.835+0000",
                    "updated": "2020-06-07T11:47:42.835+0000",
                    "started": "2020-06-07T11:47:42.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442415",
                    "issueId": "13308904"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/worklog/442763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #7365:\nURL: https://github.com/apache/arrow/pull/7365\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T15:55:52.909+0000",
                    "updated": "2020-06-09T15:55:52.909+0000",
                    "started": "2020-06-09T15:55:52.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442763",
                    "issueId": "13308904"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4483b2a8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d227e14[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f8c6a5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@21807965[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f0b1e1e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@15a46459[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9e62229[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2b8f2921[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c8329a0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6a3308c5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@527c98c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@68658f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 08 16:09:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-08T16:09:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9007/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-02T08:25:38.000+0000",
        "updated": "2020-06-09T15:55:53.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-9005 introduces a concat kernel which allows for concatenating multiple arrays of the same type into a single array. This is useful for sorting on multiple arrays, among other things.\r\n\r\nThe concat kernel is implemented for most array types, but not yet for nested arrays (lists, structs, etc).\r\n\r\nThis Jira is for creating a way of appending/merging all array types, so that concat (and functionality that depends on it) can support all array types.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Support appending arrays by merging array data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13308904/comment/17128413",
                    "id": "17128413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 7365\n[https://github.com/apache/arrow/pull/7365]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-06-08T16:09:24.916+0000",
                    "updated": "2020-06-08T16:09:24.916+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ff00:",
        "customfield_12314139": null
    }
}