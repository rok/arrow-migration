{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188750",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750",
    "key": "ARROW-3398",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3398/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran opened a new pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700\n \n \n   I also updated a lint issue in buffer.rs that was caught by nightly rustfmt.  It's the same issue that was addressed in #2658 so I don't know how it got reverted.\r\n   \r\n   There may be other lint issues that I will address as CI flags them (I hope not) as locally I am running into [this issue](https://github.com/rust-lang-nursery/rustfmt/issues/2916) after running `rustup update`\r\n   \r\n   cc @kszucs @sunchao @andygrove \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T03:15:52.802+0000",
                    "updated": "2018-10-04T03:15:52.802+0000",
                    "started": "2018-10-04T03:15:52.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151011",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-426873399\n \n \n   The nightly rustfmt fix I mentioned above seems to cause current stable rustfmt to fail CI so I reset the branch.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T03:27:23.070+0000",
                    "updated": "2018-10-04T03:27:23.070+0000",
                    "started": "2018-10-04T03:27:23.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151012",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran edited a comment on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-426873399\n \n \n   The nightly rustfmt fix I mentioned above seems to cause current stable rustfmt to fail CI so I reset the branch (nightly still flags it so I guess stable and nightly disagree on this formatting issue).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T03:37:40.236+0000",
                    "updated": "2018-10-04T03:37:40.236+0000",
                    "started": "2018-10-04T03:37:40.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151015",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-426875558\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=h1) Report\n   > Merging [#2700](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/18a61f6758767169a35745f8646991ed245d5a82?src=pr&el=desc) will **increase** coverage by `0.19%`.\n   > The diff coverage is `97.01%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2700/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2700      +/-   ##\n   ==========================================\n   + Coverage   87.49%   87.68%   +0.19%     \n   ==========================================\n     Files         402       12     -390     \n     Lines       61401     1454   -59947     \n   ==========================================\n   - Hits        53725     1275   -52450     \n   + Misses       7606      179    -7427     \n   + Partials       70        0      -70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/src/builder.rs](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVpbGRlci5ycw==) | `97.93% <97.01%> (+0.33%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/ipc/metadata-internal.h](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuaA==) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | [python/pyarrow/hdfs.py](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaGRmcy5weQ==) | | |\n   | [cpp/src/parquet/column\\_scanner.cc](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9zY2FubmVyLmNj) | | |\n   | ... and [381 more](https://codecov.io/gh/apache/arrow/pull/2700/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=footer). Last update [18a61f6...8dc5ed3](https://codecov.io/gh/apache/arrow/pull/2700?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T03:44:35.600+0000",
                    "updated": "2018-10-04T03:44:35.600+0000",
                    "started": "2018-10-04T03:44:35.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151017",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-427525079\n \n \n   Overall LGTM - just a few minor nits. More curious on how this is going to be used to build `ArrayData` and `Array`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-05T23:31:54.345+0000",
                    "updated": "2018-10-05T23:31:54.345+0000",
                    "started": "2018-10-05T23:31:54.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151922",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223159936\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n \n Review comment:\n   nit: add an empty line above.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-05T23:32:02.069+0000",
                    "updated": "2018-10-05T23:32:02.069+0000",
                    "started": "2018-10-05T23:32:02.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151923",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223160416\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n+    pub fn push_slice(&mut self, slice: &[T]) -> Result<()> {\n+        let array_slots = slice.len() as i64;\n+        self.reserve(array_slots)?;\n+        self.write_bytes(slice.to_byte_slice(), array_slots)\n     }\n \n     /// Reserve memory for n elements of type T\n-    pub fn reserve(&mut self, n: usize) {\n-        if self.len + n > self.capacity {\n-            let new_capacity = cmp::max(self.capacity * 2, n);\n-            self.grow(new_capacity);\n+    pub fn reserve(&mut self, n: i64) -> Result<()> {\n+        let new_capacity = self.len + n;\n+        if new_capacity > self.capacity() {\n+            return self.grow(new_capacity);\n         }\n+        Ok(())\n     }\n \n-    /// Grow the buffer to the new size n (number of elements of type T)\n-    fn grow(&mut self, new_capacity: usize) {\n-        let sz = mem::size_of::<T>();\n-        let old_buffer = self.data;\n-        let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n-        unsafe {\n-            libc::memcpy(\n-                new_buffer as *mut libc::c_void,\n-                old_buffer as *const libc::c_void,\n-                self.len * sz,\n-            );\n-        }\n-        self.capacity = new_capacity;\n-        self.data = new_buffer as *mut T;\n-        free_aligned(old_buffer as *const u8);\n+    /// Grow the buffer to the new capacity of size n (where n is the number of elements of type T)\n \n Review comment:\n   nit: add backtick to the parameters (i.e., `n` and `T`).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-05T23:32:02.145+0000",
                    "updated": "2018-10-05T23:32:02.145+0000",
                    "started": "2018-10-05T23:32:02.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151924",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao edited a comment on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-427525079\n \n \n   Thanks @paddyhoran ! Overall LGTM - just a few minor nits. More curious on how this is going to be used to build `ArrayData` and `Array`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-05T23:32:18.639+0000",
                    "updated": "2018-10-05T23:32:18.639+0000",
                    "started": "2018-10-05T23:32:18.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151925",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/151983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223184166\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n+    pub fn push_slice(&mut self, slice: &[T]) -> Result<()> {\n+        let array_slots = slice.len() as i64;\n+        self.reserve(array_slots)?;\n+        self.write_bytes(slice.to_byte_slice(), array_slots)\n     }\n \n     /// Reserve memory for n elements of type T\n-    pub fn reserve(&mut self, n: usize) {\n-        if self.len + n > self.capacity {\n-            let new_capacity = cmp::max(self.capacity * 2, n);\n-            self.grow(new_capacity);\n+    pub fn reserve(&mut self, n: i64) -> Result<()> {\n+        let new_capacity = self.len + n;\n+        if new_capacity > self.capacity() {\n+            return self.grow(new_capacity);\n         }\n+        Ok(())\n     }\n \n-    /// Grow the buffer to the new size n (number of elements of type T)\n-    fn grow(&mut self, new_capacity: usize) {\n-        let sz = mem::size_of::<T>();\n-        let old_buffer = self.data;\n-        let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n-        unsafe {\n-            libc::memcpy(\n-                new_buffer as *mut libc::c_void,\n-                old_buffer as *const libc::c_void,\n-                self.len * sz,\n-            );\n-        }\n-        self.capacity = new_capacity;\n-        self.data = new_buffer as *mut T;\n-        free_aligned(old_buffer as *const u8);\n+    /// Grow the buffer to the new capacity of size n (where n is the number of elements of type T)\n+    fn grow(&mut self, new_capacity: i64) -> Result<()> {\n+        let byte_capacity = mem::size_of::<T>() * new_capacity as usize;\n+        self.buffer.resize(byte_capacity)\n     }\n \n-    /// Build a Buffer from the existing memory\n-    pub fn finish(&mut self) -> Buffer {\n-        assert!(!self.data.is_null(), \"data has not been initialized\");\n-        let p = self.data;\n-        self.data = ptr::null_mut(); // ensure builder cannot be re-used\n-        Buffer::from_raw_parts(p as *mut u8, self.len)\n+    /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+    pub fn finish(self) -> Buffer {\n+        self.buffer.freeze()\n     }\n-}\n \n-impl<T> Drop for Builder<T>\n-where\n-    T: ArrowPrimitiveType,\n-{\n-    fn drop(&mut self) {\n-        if !self.data.is_null() {\n-            free_aligned(self.data as *const u8);\n+    /// Writes a byte slice to the underlying buffer and updates the `len`, i.e. the number array\n+    /// elements in the builder.  Also, converts the `io::Result` required by the `Write` trait\n+    /// to the Arrow `Result` type.\n+    fn write_bytes(&mut self, bytes: &[u8], len_added: i64) -> Result<()> {\n \n Review comment:\n   Are there tests for it?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T14:42:10.259+0000",
                    "updated": "2018-10-06T14:42:10.259+0000",
                    "started": "2018-10-06T14:42:10.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151983",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/152007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-427608059\n \n \n   @kszucs @sunchao thanks for the reviews, traveling at the moment. Will respond when I return.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T21:35:22.182+0000",
                    "updated": "2018-10-06T21:35:22.182+0000",
                    "started": "2018-10-06T21:35:22.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152007",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223917551\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T02:09:49.555+0000",
                    "updated": "2018-10-10T02:09:49.555+0000",
                    "started": "2018-10-10T02:09:49.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153012",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223917579\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n+    pub fn push_slice(&mut self, slice: &[T]) -> Result<()> {\n+        let array_slots = slice.len() as i64;\n+        self.reserve(array_slots)?;\n+        self.write_bytes(slice.to_byte_slice(), array_slots)\n     }\n \n     /// Reserve memory for n elements of type T\n-    pub fn reserve(&mut self, n: usize) {\n-        if self.len + n > self.capacity {\n-            let new_capacity = cmp::max(self.capacity * 2, n);\n-            self.grow(new_capacity);\n+    pub fn reserve(&mut self, n: i64) -> Result<()> {\n+        let new_capacity = self.len + n;\n+        if new_capacity > self.capacity() {\n+            return self.grow(new_capacity);\n         }\n+        Ok(())\n     }\n \n-    /// Grow the buffer to the new size n (number of elements of type T)\n-    fn grow(&mut self, new_capacity: usize) {\n-        let sz = mem::size_of::<T>();\n-        let old_buffer = self.data;\n-        let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n-        unsafe {\n-            libc::memcpy(\n-                new_buffer as *mut libc::c_void,\n-                old_buffer as *const libc::c_void,\n-                self.len * sz,\n-            );\n-        }\n-        self.capacity = new_capacity;\n-        self.data = new_buffer as *mut T;\n-        free_aligned(old_buffer as *const u8);\n+    /// Grow the buffer to the new capacity of size n (where n is the number of elements of type T)\n+    fn grow(&mut self, new_capacity: i64) -> Result<()> {\n+        let byte_capacity = mem::size_of::<T>() * new_capacity as usize;\n+        self.buffer.resize(byte_capacity)\n     }\n \n-    /// Build a Buffer from the existing memory\n-    pub fn finish(&mut self) -> Buffer {\n-        assert!(!self.data.is_null(), \"data has not been initialized\");\n-        let p = self.data;\n-        self.data = ptr::null_mut(); // ensure builder cannot be re-used\n-        Buffer::from_raw_parts(p as *mut u8, self.len)\n+    /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+    pub fn finish(self) -> Buffer {\n+        self.buffer.freeze()\n     }\n-}\n \n-impl<T> Drop for Builder<T>\n-where\n-    T: ArrowPrimitiveType,\n-{\n-    fn drop(&mut self) {\n-        if !self.data.is_null() {\n-            free_aligned(self.data as *const u8);\n+    /// Writes a byte slice to the underlying buffer and updates the `len`, i.e. the number array\n+    /// elements in the builder.  Also, converts the `io::Result` required by the `Write` trait\n+    /// to the Arrow `Result` type.\n+    fn write_bytes(&mut self, bytes: &[u8], len_added: i64) -> Result<()> {\n \n Review comment:\n   Added some.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T02:10:03.850+0000",
                    "updated": "2018-10-10T02:10:03.850+0000",
                    "started": "2018-10-10T02:10:03.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153013",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#discussion_r223917662\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -15,158 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use libc;\n-use std::cmp;\n+//! Defines a `BufferBuilder` capable of creating a `Buffer` which can be used as an internal\n+//! buffer in an `ArrayData` object.\n+\n+use std::io::Write;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::ptr;\n-use std::slice;\n \n use super::buffer::*;\n use super::datatypes::*;\n-use super::memory::*;\n+use error::{ArrowError, Result};\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T>\n+pub struct BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    data: *mut T,\n-    len: usize,\n-    capacity: usize,\n+    buffer: MutableBuffer,\n+    len: i64,\n+    _marker: PhantomData<T>,\n }\n \n-impl<T> Builder<T>\n+impl<T> BufferBuilder<T>\n where\n     T: ArrowPrimitiveType,\n {\n-    /// Creates a builder with a default capacity\n-    pub fn new() -> Self {\n-        Builder::with_capacity(64)\n-    }\n-\n-    /// Creates a builder with a fixed capacity\n-    pub fn with_capacity(capacity: usize) -> Self {\n-        let sz = mem::size_of::<T>();\n-        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n-        Builder {\n+    /// Creates a builder with a fixed initial capacity\n+    pub fn new(capacity: i64) -> Self {\n+        let buffer = MutableBuffer::new(capacity as usize * mem::size_of::<T>());\n+        Self {\n+            buffer,\n             len: 0,\n-            capacity,\n-            data: buffer as *mut T,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Get the number of elements in the builder\n-    pub fn len(&self) -> usize {\n+    /// Returns the number of array elements (slots) in the builder\n+    pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Get the capacity of the builder (number of elements)\n-    pub fn capacity(&self) -> usize {\n-        self.capacity\n+    /// Returns the current capacity of the builder (number of elements)\n+    pub fn capacity(&self) -> i64 {\n+        let byte_capacity = self.buffer.capacity();\n+        (byte_capacity / mem::size_of::<T>()) as i64\n     }\n-\n-    /// Get the internal byte-aligned memory buffer as a mutable slice\n-    pub fn slice_mut(&mut self, start: usize, end: usize) -> &mut [T] {\n-        assert!(\n-            end <= self.capacity as usize,\n-            \"the end of the slice must be within the capacity\"\n-        );\n-        assert!(\n-            start <= end,\n-            \"the start of the slice cannot exceed the end of the slice\"\n-        );\n-        unsafe {\n-            slice::from_raw_parts_mut(self.data.offset(start as isize), (end - start) as usize)\n-        }\n-    }\n-\n-    /// Override the length\n-    pub fn set_len(&mut self, len: usize) {\n-        self.len = len;\n-    }\n-\n     /// Push a value into the builder, growing the internal buffer as needed\n-    pub fn push(&mut self, v: T) {\n-        assert!(!self.data.is_null(), \"cannot push onto uninitialized data\");\n-        if self.len == self.capacity {\n-            // grow capacity by 64 bytes or double the current capacity, whichever is greater\n-            let new_capacity = cmp::max(64, self.capacity * 2);\n-            self.grow(new_capacity);\n-        }\n-        assert!(self.len < self.capacity, \"new length exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(self.len as isize) = v;\n-        }\n-        self.len += 1;\n-    }\n-\n-    /// Set a value at a slot in the allocated memory without adjusting the length\n-    pub fn set(&mut self, i: usize, v: T) {\n-        assert!(\n-            !self.data.is_null(),\n-            \"cannot set value if data is uninitialized\"\n-        );\n-        assert!(i < self.capacity, \"index exceeds capacity\");\n-        unsafe {\n-            *self.data.offset(i as isize) = v;\n-        }\n+    pub fn push(&mut self, v: T) -> Result<()> {\n+        self.reserve(1)?;\n+        self.write_bytes(v.to_byte_slice(), 1)\n     }\n \n-    /// push a slice of type T, growing the internal buffer as needed\n-    pub fn push_slice(&mut self, slice: &[T]) {\n-        self.reserve(slice.len());\n-        let sz = mem::size_of::<T>();\n-        unsafe {\n-            libc::memcpy(\n-                self.data.offset(self.len() as isize) as *mut libc::c_void,\n-                slice.as_ptr() as *const libc::c_void,\n-                slice.len() * sz,\n-            );\n-        }\n-        self.len += slice.len();\n+    /// Push a slice of type T, growing the internal buffer as needed\n+    pub fn push_slice(&mut self, slice: &[T]) -> Result<()> {\n+        let array_slots = slice.len() as i64;\n+        self.reserve(array_slots)?;\n+        self.write_bytes(slice.to_byte_slice(), array_slots)\n     }\n \n     /// Reserve memory for n elements of type T\n-    pub fn reserve(&mut self, n: usize) {\n-        if self.len + n > self.capacity {\n-            let new_capacity = cmp::max(self.capacity * 2, n);\n-            self.grow(new_capacity);\n+    pub fn reserve(&mut self, n: i64) -> Result<()> {\n+        let new_capacity = self.len + n;\n+        if new_capacity > self.capacity() {\n+            return self.grow(new_capacity);\n         }\n+        Ok(())\n     }\n \n-    /// Grow the buffer to the new size n (number of elements of type T)\n-    fn grow(&mut self, new_capacity: usize) {\n-        let sz = mem::size_of::<T>();\n-        let old_buffer = self.data;\n-        let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n-        unsafe {\n-            libc::memcpy(\n-                new_buffer as *mut libc::c_void,\n-                old_buffer as *const libc::c_void,\n-                self.len * sz,\n-            );\n-        }\n-        self.capacity = new_capacity;\n-        self.data = new_buffer as *mut T;\n-        free_aligned(old_buffer as *const u8);\n+    /// Grow the buffer to the new capacity of size n (where n is the number of elements of type T)\n \n Review comment:\n   Can you explain please @sunchao , I'm not quite understanding this one?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T02:10:47.095+0000",
                    "updated": "2018-10-10T02:10:47.095+0000",
                    "started": "2018-10-10T02:10:47.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153014",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428415086\n \n \n   @sunchao once this is merged I plan to take another look at [ARROW-3347](https://issues.apache.org/jira/browse/ARROW-3347?filter=-1) and use `BufferBuilder` internally for the values array and null bitmap.  \r\n   \r\n   Are you still working on [ARROW-3089](https://issues.apache.org/jira/browse/ARROW-3089?filter=12343557)?  I don't want to step on your toes.  That JIRA (3089) could probably be broken down into several for each of the different builder types as it is it's scope is very broad.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T02:18:54.662+0000",
                    "updated": "2018-10-10T02:18:54.662+0000",
                    "started": "2018-10-10T02:18:54.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153016",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428420270\n \n \n   > @sunchao once this is merged I plan to take another look at ARROW-3347 and use BufferBuilder internally for the values array and null bitmap.\r\n   \r\n   Sounds good. \r\n   \r\n   > Are you still working on ARROW-3089? I don't want to step on your toes. That JIRA (3089) could probably be broken down into several for each of the different builder types as it is it's scope is very broad.\r\n   \r\n   Yes it will be better to break it down into sub tasks - maybe you can also move the ARROW-3347 under ARROW-3089? I can also pick up some tasks myself - I have some partial code on ARROW-3089 but nothing near complete right now, so feel free to create tasks and assign to yourself.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T02:51:16.435+0000",
                    "updated": "2018-10-10T02:51:16.435+0000",
                    "started": "2018-10-10T02:51:16.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153022",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428421914\n \n \n   > Yes it will be better to break it down into sub tasks - maybe you can also move the ARROW-3347 under ARROW-3089? I can also pick up some tasks myself - I have some partial code on ARROW-3089 but nothing near complete right now, so feel free to create tasks and assign to yourself.\r\n   \r\n   How can I \"move it under\"?  I mentioned it was a sub-task in the description but I can seem to officially make it a sub-task...\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T03:01:55.757+0000",
                    "updated": "2018-10-10T03:01:55.757+0000",
                    "started": "2018-10-10T03:01:55.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153026",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428423121\n \n \n   In the JIRA page, you can click \"More\" and then \"Convert to sub-task\", in which you enter ARROW-3089.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T03:09:59.855+0000",
                    "updated": "2018-10-10T03:09:59.855+0000",
                    "started": "2018-10-10T03:09:59.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153028",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428423545\n \n \n   Ahh, thank you.  I was looking in \"edit\".  Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T03:13:02.958+0000",
                    "updated": "2018-10-10T03:13:02.958+0000",
                    "started": "2018-10-10T03:13:02.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153029",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428637841\n \n \n   @kszucs the CI error is unrelated, so I think this is ready.  Thanks\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T16:22:55.399+0000",
                    "updated": "2018-10-10T16:22:55.399+0000",
                    "started": "2018-10-10T16:22:55.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153192",
                    "issueId": "13188750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/worklog/153222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2700: ARROW-3398: [Rust] Update existing Builder to use MutableBuffer internally\nURL: https://github.com/apache/arrow/pull/2700#issuecomment-428659622\n \n \n   Great, merging! Thanks @paddyhoran !\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T17:27:58.578+0000",
                    "updated": "2018-10-10T17:27:58.578+0000",
                    "started": "2018-10-10T17:27:58.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153222",
                    "issueId": "13188750"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a964846[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65fd932e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41a80663[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@48c5999b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cafff5a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@609c0aa7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@618693c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@56bd723[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@467dbdfb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46b45ea1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13f98565[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48f08af6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 10 17:32:41 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-10T17:32:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3398/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-02T03:27:41.000+0000",
        "updated": "2018-10-10T17:32:44.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Update existing Builder to use MutableBuffer internally",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188750/comment/16645313",
                    "id": "16645313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 2700\n[https://github.com/apache/arrow/pull/2700]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-10-10T17:32:41.800+0000",
                    "updated": "2018-10-10T17:32:41.800+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yprb:",
        "customfield_12314139": null
    }
}