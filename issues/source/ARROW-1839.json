{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13119561",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561",
    "key": "ARROW-1839",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341666",
                "id": "12341666",
                "name": "0.7.1",
                "archived": false,
                "released": true,
                "releaseDate": "2017-10-01"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12521165",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12521165",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13096776",
                    "key": "ARROW-1398",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13096776",
                    "fields": {
                        "summary": "[Python] No support reading columns of type decimal(19,4)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1839/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/6",
            "id": "6",
            "description": "A new unit, integration or system test.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/issuetypes/requirement.png",
            "name": "Test",
            "subtask": false
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7c558a3e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73f135be[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@677c388f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1d5abd1b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68c56783[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d197315[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ba78879[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@535d5c73[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10e7d0e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46b08836[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@617334d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58745240[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 05 03:39:52 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-12-05T03:39:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1839/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-20T06:25:58.000+0000",
        "updated": "2017-12-05T03:39:52.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Add Decimal Parquet Read/Write Tests",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16267662",
                    "id": "16267662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: WIP: ARROW-1839: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-347342953\n \n \n   Rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-27T22:00:17.320+0000",
                    "updated": "2017-11-27T22:00:17.320+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16267708",
                    "id": "16267708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1335: WIP: ARROW-1839: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-347350484\n \n \n   This isn't quite ready to go I have a few more things to add. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-27T22:29:49.123+0000",
                    "updated": "2017-11-27T22:29:49.123+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276021",
                    "id": "16276021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-348802632\n \n \n   @wesm This is no longer a WIP and is ready for review.\r\n   \r\n   I have a test (`test_decimal_roundtrip_negative_scale`) that depends on https://issues.apache.org/jira/browse/PARQUET-1167. I can remove that here and add in a later PR if necessary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T18:15:49.508+0000",
                    "updated": "2017-12-03T18:15:49.508+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276023",
                    "id": "16276023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#discussion_r154532186\n \n \n\n ##########\n File path: python/pyarrow/tests/test_parquet.py\n ##########\n @@ -1564,3 +1568,42 @@ def test_backwards_compatible_index_multi_level_some_named():\n     t = _read_table(path)\n     result = t.to_pandas()\n     tm.assert_frame_equal(result, expected)\n+\n+\n+@pytest.mark.parametrize(\n+    ('precision', 'scale'),\n+    [\n+        (precision, scale)\n+        for precision in range(1, 39)\n+        for scale in range(0, precision + 1)\n \n Review comment:\n   This is generating a ton of tests, I will move the `scale` inside the function.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T18:18:36.961+0000",
                    "updated": "2017-12-03T18:18:36.961+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276095",
                    "id": "16276095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-348815025\n \n \n   I force-pushed this after PARQUET-1167 was merged so we can get a passing build\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T21:12:56.043+0000",
                    "updated": "2017-12-03T21:12:56.043+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276099",
                    "id": "16276099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#discussion_r154536942\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -390,28 +390,26 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n     }\n     return Status::OK();\n   }\n-\n-  virtual Status AppendItem(const OwnedRef& item) = 0;\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n \n Review comment:\n   I'm not sure why these were ever virtual. Making them non-virtual because we're already using CRTP here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T21:23:59.801+0000",
                    "updated": "2017-12-03T21:23:59.801+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276100",
                    "id": "16276100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#discussion_r154537092\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.h\n ##########\n @@ -146,6 +146,9 @@ ARROW_EXPORT Decimal128 operator*(const Decimal128& left, const Decimal128& righ\n ARROW_EXPORT Decimal128 operator/(const Decimal128& left, const Decimal128& right);\n ARROW_EXPORT Decimal128 operator%(const Decimal128& left, const Decimal128& right);\n \n+Status Rescale(const Decimal128& value, int32_t original_scale, int32_t new_scale,\n \n Review comment:\n   I'm renaming this to `RescaleDecimal` since it might be ambiguous in the `arrow` namespace otherwise\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-03T21:23:59.804+0000",
                    "updated": "2017-12-03T21:23:59.804+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276763",
                    "id": "16276763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#discussion_r154645414\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -390,28 +390,26 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n     }\n     return Status::OK();\n   }\n-\n-  virtual Status AppendItem(const OwnedRef& item) = 0;\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n \n Review comment:\n   Thanks, sounds good to me\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T13:21:29.395+0000",
                    "updated": "2017-12-04T13:21:29.395+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276875",
                    "id": "16276875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-348982291\n \n \n   There's an odd Python 2.7 failure here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T14:44:44.738+0000",
                    "updated": "2017-12-04T14:44:44.738+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16276967",
                    "id": "16276967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-349001159\n \n \n   Yep I know what it is. Putting up a fix in a bit. Pylong_check is for actual long typed values. Py3 only has int checking\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T15:43:54.713+0000",
                    "updated": "2017-12-04T15:43:54.713+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277554",
                    "id": "16277554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-349113839\n \n \n   @cpcloud `RescaleDecimal` wasn't exported, so instead I made it an instance method of `Decimal128` if that's cool with you\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T21:36:14.897+0000",
                    "updated": "2017-12-04T21:36:14.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277642",
                    "id": "16277642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-349126125\n \n \n   @wesm Yep that's fine with me. We will need this for decimal kernels pretty soon.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T22:21:22.877+0000",
                    "updated": "2017-12-04T22:21:22.877+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277706",
                    "id": "16277706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-349134506\n \n \n   Unrelated Travis CI failure. I'll merge as soon as we have a green Appveyor build\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T22:55:02.438+0000",
                    "updated": "2017-12-04T22:55:02.438+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277967",
                    "id": "16277967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335#issuecomment-349185569\n \n \n   Appveyor finally passing: https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/build/1.0.4623. Merging! thanks @cpcloud for your herculean efforts on this!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T03:38:59.054+0000",
                    "updated": "2017-12-05T03:38:59.054+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277968",
                    "id": "16277968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1335\n[https://github.com/apache/arrow/pull/1335]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-12-05T03:39:50.897+0000",
                    "updated": "2017-12-05T03:39:50.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119561/comment/16277969",
                    "id": "16277969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1335: ARROW-1839/ARROW-1871: [C++/Python] Add Decimal Parquet Read/Write Tests\nURL: https://github.com/apache/arrow/pull/1335\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 096bbd55c..b1825cbe6 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -620,13 +620,6 @@ static Status ConvertTimes(PandasOptions options, const ChunkedArray& data,\n   return Status::OK();\n }\n \n-static Status RawDecimalToString(const uint8_t* bytes, int scale, std::string* result) {\n-  DCHECK_NE(result, nullptr);\n-  Decimal128 decimal(bytes);\n-  *result = decimal.ToString(scale);\n-  return Status::OK();\n-}\n-\n static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n                               PyObject** out_values) {\n   PyAcquireGIL lock;\n@@ -637,19 +630,14 @@ static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n   PyObject* Decimal = Decimal_ref.obj();\n \n   for (int c = 0; c < data.num_chunks(); c++) {\n-    auto* arr(static_cast<arrow::Decimal128Array*>(data.chunk(c).get()));\n-    auto type(std::dynamic_pointer_cast<arrow::Decimal128Type>(arr->type()));\n-    const int scale = type->scale();\n+    const auto& arr(static_cast<const arrow::Decimal128Array&>(*data.chunk(c).get()));\n \n-    for (int64_t i = 0; i < arr->length(); ++i) {\n-      if (arr->IsNull(i)) {\n+    for (int64_t i = 0; i < arr.length(); ++i) {\n+      if (arr.IsNull(i)) {\n         Py_INCREF(Py_None);\n         *out_values++ = Py_None;\n       } else {\n-        const uint8_t* raw_value = arr->GetValue(i);\n-        std::string decimal_string;\n-        RETURN_NOT_OK(RawDecimalToString(raw_value, scale, &decimal_string));\n-        *out_values++ = internal::DecimalFromString(Decimal, decimal_string);\n+        *out_values++ = internal::DecimalFromString(Decimal, arr.FormatValue(i));\n         RETURN_IF_PYERROR();\n       }\n     }\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex c716c47d2..08cbae7ab 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -37,14 +37,6 @@\n namespace arrow {\n namespace py {\n \n-static inline bool IsPyInteger(PyObject* obj) {\n-#if PYARROW_IS_PY2\n-  return PyLong_Check(obj) || PyInt_Check(obj);\n-#else\n-  return PyLong_Check(obj);\n-#endif\n-}\n-\n Status InvalidConversion(PyObject* obj, const std::string& expected_types,\n                          std::ostream* out) {\n   OwnedRef type(PyObject_Type(obj));\n@@ -91,7 +83,7 @@ class ScalarVisitor {\n       ++bool_count_;\n     } else if (PyFloat_Check(obj)) {\n       ++float_count_;\n-    } else if (IsPyInteger(obj)) {\n+    } else if (internal::IsPyInteger(obj)) {\n       ++int_count_;\n     } else if (PyDate_CheckExact(obj)) {\n       ++date_count_;\n@@ -390,28 +382,26 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n     }\n     return Status::OK();\n   }\n-\n-  virtual Status AppendItem(const OwnedRef& item) = 0;\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     return Status::Invalid(\"NullConverter: passed non-None value\");\n   }\n };\n \n class BoolConverter : public TypedConverterVisitor<BooleanBuilder, BoolConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     return typed_builder_->Append(item.obj() == Py_True);\n   }\n };\n \n class Int8Converter : public TypedConverterVisitor<Int8Builder, Int8Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    int64_t val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int8_t>::max() ||\n                             val < std::numeric_limits<int8_t>::min())) {\n@@ -426,8 +416,8 @@ class Int8Converter : public TypedConverterVisitor<Int8Builder, Int8Converter> {\n \n class Int16Converter : public TypedConverterVisitor<Int16Builder, Int16Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    int64_t val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int16_t>::max() ||\n                             val < std::numeric_limits<int16_t>::min())) {\n@@ -442,8 +432,8 @@ class Int16Converter : public TypedConverterVisitor<Int16Builder, Int16Converter\n \n class Int32Converter : public TypedConverterVisitor<Int32Builder, Int32Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    int64_t val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int32_t>::max() ||\n                             val < std::numeric_limits<int32_t>::min())) {\n@@ -458,8 +448,8 @@ class Int32Converter : public TypedConverterVisitor<Int32Builder, Int32Converter\n \n class Int64Converter : public TypedConverterVisitor<Int64Builder, Int64Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    int64_t val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -467,8 +457,8 @@ class Int64Converter : public TypedConverterVisitor<Int64Builder, Int64Converter\n \n class UInt8Converter : public TypedConverterVisitor<UInt8Builder, UInt8Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    uint64_t val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint8_t>::max())) {\n       return Status::Invalid(\n@@ -482,8 +472,8 @@ class UInt8Converter : public TypedConverterVisitor<UInt8Builder, UInt8Converter\n \n class UInt16Converter : public TypedConverterVisitor<UInt16Builder, UInt16Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    uint64_t val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint16_t>::max())) {\n       return Status::Invalid(\n@@ -497,8 +487,8 @@ class UInt16Converter : public TypedConverterVisitor<UInt16Builder, UInt16Conver\n \n class UInt32Converter : public TypedConverterVisitor<UInt32Builder, UInt32Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    uint64_t val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint32_t>::max())) {\n       return Status::Invalid(\n@@ -512,8 +502,8 @@ class UInt32Converter : public TypedConverterVisitor<UInt32Builder, UInt32Conver\n \n class UInt64Converter : public TypedConverterVisitor<UInt64Builder, UInt64Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n-    int64_t val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  Status AppendItem(const OwnedRef& item) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -521,13 +511,13 @@ class UInt64Converter : public TypedConverterVisitor<UInt64Builder, UInt64Conver\n \n class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     int32_t t;\n     if (PyDate_Check(item.obj())) {\n       auto pydate = reinterpret_cast<PyDateTime_Date*>(item.obj());\n       t = static_cast<int32_t>(PyDate_to_s(pydate));\n     } else {\n-      int64_t casted_val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+      const auto casted_val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n       RETURN_IF_PYERROR();\n       if (casted_val > std::numeric_limits<int32_t>::max()) {\n         return Status::Invalid(\"Integer as date32 larger than INT32_MAX\");\n@@ -540,7 +530,7 @@ class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Conver\n \n class Date64Converter : public TypedConverterVisitor<Date64Builder, Date64Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     int64_t t;\n     if (PyDate_Check(item.obj())) {\n       auto pydate = reinterpret_cast<PyDateTime_Date*>(item.obj());\n@@ -558,7 +548,7 @@ class TimestampConverter\n  public:\n   explicit TimestampConverter(TimeUnit::type unit) : unit_(unit) {}\n \n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     int64_t t;\n     if (PyDateTime_Check(item.obj())) {\n       auto pydatetime = reinterpret_cast<PyDateTime_DateTime*>(item.obj());\n@@ -590,7 +580,7 @@ class TimestampConverter\n \n class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     double val = PyFloat_AsDouble(item.obj());\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n@@ -599,7 +589,7 @@ class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConver\n \n class BytesConverter : public TypedConverterVisitor<BinaryBuilder, BytesConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     PyObject* bytes_obj;\n     const char* bytes;\n     Py_ssize_t length;\n@@ -627,7 +617,7 @@ class BytesConverter : public TypedConverterVisitor<BinaryBuilder, BytesConverte\n class FixedWidthBytesConverter\n     : public TypedConverterVisitor<FixedSizeBinaryBuilder, FixedWidthBytesConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     PyObject* bytes_obj;\n     OwnedRef tmp;\n     Py_ssize_t expected_length =\n@@ -654,7 +644,7 @@ class FixedWidthBytesConverter\n \n class UTF8Converter : public TypedConverterVisitor<StringBuilder, UTF8Converter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     PyObject* bytes_obj;\n     OwnedRef tmp;\n     const char* bytes;\n@@ -689,10 +679,10 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  inline Status AppendItem(const OwnedRef& item) override {\n+  Status AppendItem(const OwnedRef& item) {\n     RETURN_NOT_OK(typed_builder_->Append());\n     PyObject* item_obj = item.obj();\n-    int64_t list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n     return value_converter_->AppendData(item_obj, list_size);\n   }\n \n@@ -703,13 +693,11 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n class DecimalConverter\n     : public TypedConverterVisitor<arrow::Decimal128Builder, DecimalConverter> {\n  public:\n-  inline Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(const OwnedRef& item) {\n     /// TODO(phillipc): Check for nan?\n-    std::string string;\n-    RETURN_NOT_OK(internal::PythonDecimalToString(item.obj(), &string));\n-\n     Decimal128 value;\n-    RETURN_NOT_OK(Decimal128::FromString(string, &value));\n+    const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n+    RETURN_NOT_OK(internal::DecimalFromPythonDecimal(item.obj(), type, &value));\n     return typed_builder_->Append(value);\n   }\n };\ndiff --git a/cpp/src/arrow/python/helpers.cc b/cpp/src/arrow/python/helpers.cc\nindex 708d9916f..494f92900 100644\n--- a/cpp/src/arrow/python/helpers.cc\n+++ b/cpp/src/arrow/python/helpers.cc\n@@ -15,8 +15,10 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"arrow/python/helpers.h\"\n+#include <sstream>\n+\n #include \"arrow/python/common.h\"\n+#include \"arrow/python/helpers.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n@@ -91,20 +93,33 @@ Status PythonDecimalToString(PyObject* python_decimal, std::string* out) {\n   return Status::OK();\n }\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int* precision,\n-                                     int* scale) {\n-  // Call Python's str(decimal_object)\n-  OwnedRef str_obj(PyObject_Str(python_decimal));\n+Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precision,\n+                                     int32_t* scale) {\n+  DCHECK_NE(python_decimal, NULLPTR);\n+  DCHECK_NE(precision, NULLPTR);\n+  DCHECK_NE(scale, NULLPTR);\n+\n+  OwnedRef as_tuple(PyObject_CallMethod(python_decimal, \"as_tuple\", \"()\"));\n   RETURN_IF_PYERROR();\n-  PyObjectStringify str(str_obj.obj());\n+  DCHECK(PyTuple_Check(as_tuple.obj()));\n \n-  const char* bytes = str.bytes;\n-  DCHECK_NE(bytes, nullptr);\n+  OwnedRef digits(PyObject_GetAttrString(as_tuple.obj(), \"digits\"));\n+  RETURN_IF_PYERROR();\n+  DCHECK(PyTuple_Check(digits.obj()));\n \n-  auto size = str.size;\n+  const auto num_digits = static_cast<int32_t>(PyTuple_Size(digits.obj()));\n+  RETURN_IF_PYERROR();\n \n-  std::string c_string(bytes, size);\n-  return Decimal128::FromString(c_string, nullptr, precision, scale);\n+  OwnedRef py_exponent(PyObject_GetAttrString(as_tuple.obj(), \"exponent\"));\n+  RETURN_IF_PYERROR();\n+  DCHECK(IsPyInteger(py_exponent.obj()));\n+\n+  const auto exponent = static_cast<int32_t>(PyLong_AsLong(py_exponent.obj()));\n+  RETURN_IF_PYERROR();\n+\n+  *precision = num_digits;\n+  *scale = -exponent;\n+  return Status::OK();\n }\n \n PyObject* DecimalFromString(PyObject* decimal_constructor,\n@@ -121,6 +136,46 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n                                string_size);\n }\n \n+Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n+                                Decimal128* out) {\n+  DCHECK_NE(python_decimal, NULLPTR);\n+  DCHECK_NE(out, NULLPTR);\n+\n+  std::string string;\n+  RETURN_NOT_OK(PythonDecimalToString(python_decimal, &string));\n+\n+  int32_t inferred_precision;\n+  int32_t inferred_scale;\n+\n+  RETURN_NOT_OK(\n+      Decimal128::FromString(string, out, &inferred_precision, &inferred_scale));\n+\n+  const int32_t precision = arrow_type.precision();\n+  const int32_t scale = arrow_type.scale();\n+\n+  if (ARROW_PREDICT_FALSE(inferred_precision > precision)) {\n+    std::stringstream buf;\n+    buf << \"Decimal type with precision \" << inferred_precision\n+        << \" does not fit into precision inferred from first array element: \"\n+        << precision;\n+    return Status::Invalid(buf.str());\n+  }\n+\n+  if (scale != inferred_scale) {\n+    DCHECK_NE(out, NULLPTR);\n+    RETURN_NOT_OK(out->Rescale(inferred_scale, scale, out));\n+  }\n+  return Status::OK();\n+}\n+\n+bool IsPyInteger(PyObject* obj) {\n+#if PYARROW_IS_PY2\n+  return PyLong_Check(obj) || PyInt_Check(obj);\n+#else\n+  return PyLong_Check(obj);\n+#endif\n+}\n+\n }  // namespace internal\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex 719ed796e..c82bdabc4 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -29,6 +29,9 @@\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+class Decimal128;\n+\n namespace py {\n \n class OwnedRef;\n@@ -44,11 +47,15 @@ Status ImportFromModule(const OwnedRef& module, const std::string& module_name,\n \n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int* precision = NULLPTR,\n-                                     int* scale = NULLPTR);\n+Status InferDecimalPrecisionAndScale(PyObject* python_decimal,\n+                                     int32_t* precision = NULLPTR,\n+                                     int32_t* scale = NULLPTR);\n \n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n+Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n+                                Decimal128* out);\n+bool IsPyInteger(PyObject* obj);\n \n }  // namespace internal\n }  // namespace py\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex db34d24d9..6c9c871a1 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -56,8 +56,8 @@ class Ndarray1DIndexer {\n \n   bool is_strided() const { return stride_ == 1; }\n \n-  T& operator[](size_type index) { return *(data_ + index * stride_); }\n-  T& operator[](size_type index) const { return *(data_ + index * stride_); }\n+  T& operator[](size_type index) { return data_[index * stride_]; }\n+  T& operator[](size_type index) const { return data_[index * stride_]; }\n \n  private:\n   PyArrayObject* arr_;\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 0b1124d30..2316a796a 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -682,24 +682,41 @@ Status NumPyConverter::ConvertDecimals() {\n   Ndarray1DIndexer<PyObject*> objects(arr_);\n   PyObject* object = objects[0];\n \n-  int precision;\n-  int scale;\n+  if (type_ == NULLPTR) {\n+    int32_t precision;\n+    int32_t desired_scale;\n \n-  RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(object, &precision, &scale));\n+    int32_t tmp_precision;\n+    int32_t tmp_scale;\n \n-  type_ = std::make_shared<Decimal128Type>(precision, scale);\n+    RETURN_NOT_OK(\n+        internal::InferDecimalPrecisionAndScale(objects[0], &precision, &desired_scale));\n+\n+    for (int64_t i = 1; i < length_; ++i) {\n+      RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n+                                                            &tmp_scale));\n+      precision = std::max(precision, tmp_precision);\n+\n+      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n+        desired_scale = tmp_scale;\n+      }\n+    }\n+\n+    type_ = ::arrow::decimal(precision, desired_scale);\n+  }\n \n   Decimal128Builder builder(type_, pool_);\n   RETURN_NOT_OK(builder.Resize(length_));\n \n+  const auto& decimal_type = static_cast<const DecimalType&>(*type_);\n+  PyObject* Decimal_type_object = Decimal.obj();\n+\n   for (int64_t i = 0; i < length_; ++i) {\n     object = objects[i];\n-    if (PyObject_IsInstance(object, Decimal.obj())) {\n-      std::string string;\n-      RETURN_NOT_OK(internal::PythonDecimalToString(object, &string));\n \n+    if (PyObject_IsInstance(object, Decimal_type_object)) {\n       Decimal128 value;\n-      RETURN_NOT_OK(Decimal128::FromString(string, &value));\n+      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n       RETURN_NOT_OK(builder.Append(value));\n     } else if (PandasObjectIsNull(object)) {\n       RETURN_NOT_OK(builder.AppendNull());\n@@ -724,7 +741,7 @@ Status NumPyConverter::ConvertTimes() {\n   Time64Builder builder(::arrow::time64(TimeUnit::MICRO), pool_);\n   RETURN_NOT_OK(builder.Resize(length_));\n \n-  PyObject* obj;\n+  PyObject* obj = NULLPTR;\n   for (int64_t i = 0; i < length_; ++i) {\n     obj = objects[i];\n     if (PyTime_Check(obj)) {\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex 3b7d7d884..d9919ee49 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -35,34 +35,73 @@ namespace py {\n \n TEST(PyBuffer, InvalidInputObject) { PyBuffer buffer(Py_None); }\n \n-TEST(DecimalTest, TestPythonDecimalToString) {\n-  PyAcquireGIL lock;\n+class DecimalTest : public ::testing::Test {\n+ public:\n+  DecimalTest() : lock_(), decimal_module_(), decimal_constructor_() {\n+    auto s = internal::ImportModule(\"decimal\", &decimal_module_);\n+    DCHECK(s.ok()) << s.message();\n+    DCHECK_NE(decimal_module_.obj(), NULLPTR);\n \n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  ASSERT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  ASSERT_NE(decimal.obj(), nullptr);\n+    s = internal::ImportFromModule(decimal_module_, \"Decimal\", &decimal_constructor_);\n+    DCHECK(s.ok()) << s.message();\n \n-  ASSERT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-  ASSERT_NE(Decimal.obj(), nullptr);\n+    DCHECK_NE(decimal_constructor_.obj(), NULLPTR);\n+  }\n \n-  std::string decimal_string(\"-39402950693754869342983\");\n-  const char* format = \"s#\";\n-  auto c_string = decimal_string.c_str();\n-  ASSERT_NE(c_string, nullptr);\n+  OwnedRef CreatePythonDecimal(const std::string& string_value) {\n+    OwnedRef ref(internal::DecimalFromString(decimal_constructor_.obj(), string_value));\n+    return ref;\n+  }\n \n-  auto c_string_size = decimal_string.size();\n-  ASSERT_GT(c_string_size, 0);\n-  OwnedRef pydecimal(PyObject_CallFunction(Decimal.obj(), const_cast<char*>(format),\n-                                           c_string, c_string_size));\n-  ASSERT_NE(pydecimal.obj(), nullptr);\n-  ASSERT_EQ(PyErr_Occurred(), nullptr);\n+ private:\n+  PyAcquireGIL lock_;\n+  OwnedRef decimal_module_;\n+  OwnedRef decimal_constructor_;\n+};\n \n-  PyObject* python_object = pydecimal.obj();\n-  ASSERT_NE(python_object, nullptr);\n+TEST_F(DecimalTest, TestPythonDecimalToString) {\n+  std::string decimal_string(\"-39402950693754869342983\");\n+\n+  OwnedRef python_object = this->CreatePythonDecimal(decimal_string);\n+  ASSERT_NE(python_object.obj(), nullptr);\n \n   std::string string_result;\n-  ASSERT_OK(internal::PythonDecimalToString(python_object, &string_result));\n+  ASSERT_OK(internal::PythonDecimalToString(python_object.obj(), &string_result));\n+}\n+\n+TEST_F(DecimalTest, TestInferPrecisionAndScale) {\n+  std::string decimal_string(\"-394029506937548693.42983\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  int32_t precision;\n+  int32_t scale;\n+\n+  ASSERT_OK(\n+      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+\n+  const auto expected_precision =\n+      static_cast<int32_t>(decimal_string.size() - 2);  // 1 for -, 1 for .\n+  const int32_t expected_scale = 5;\n+\n+  ASSERT_EQ(expected_precision, precision);\n+  ASSERT_EQ(expected_scale, scale);\n+}\n+\n+TEST_F(DecimalTest, TestInferPrecisionAndNegativeScale) {\n+  std::string decimal_string(\"-3.94042983E+10\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  int32_t precision;\n+  int32_t scale;\n+\n+  ASSERT_OK(\n+      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+\n+  const auto expected_precision = 9;\n+  const int32_t expected_scale = -2;\n+\n+  ASSERT_EQ(expected_precision, precision);\n+  ASSERT_EQ(expected_scale, scale);\n }\n \n TEST(PandasConversionTest, TestObjectBlockWriteFails) {\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex 0d0c08cc4..e4406747d 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -366,4 +366,13 @@ TEST(Decimal128ParseTest, WithExponentAndNullptrScale) {\n   ASSERT_EQ(expected_value, value);\n }\n \n+TEST(Decimal128Test, TestSmallNumberFormat) {\n+  Decimal128 value(\"0.2\");\n+  std::string expected(\"0.2\");\n+\n+  const int32_t scale = 1;\n+  std::string result = value.ToString(scale);\n+  ASSERT_EQ(expected, result);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex 447cae5c5..e999854b1 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -813,4 +813,68 @@ Decimal128 operator%(const Decimal128& left, const Decimal128& right) {\n   return remainder;\n }\n \n+static const Decimal128 ScaleMultipliers[] = {\n+    Decimal128(1),\n+    Decimal128(10),\n+    Decimal128(100),\n+    Decimal128(1000),\n+    Decimal128(10000),\n+    Decimal128(100000),\n+    Decimal128(1000000),\n+    Decimal128(10000000),\n+    Decimal128(100000000),\n+    Decimal128(1000000000),\n+    Decimal128(10000000000),\n+    Decimal128(100000000000),\n+    Decimal128(1000000000000),\n+    Decimal128(10000000000000),\n+    Decimal128(100000000000000),\n+    Decimal128(1000000000000000),\n+    Decimal128(10000000000000000),\n+    Decimal128(100000000000000000),\n+    Decimal128(1000000000000000000),\n+    Decimal128(\"10000000000000000000\"),\n+    Decimal128(\"100000000000000000000\"),\n+    Decimal128(\"1000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000\"),\n+    Decimal128(\"1000000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000000\"),\n+    Decimal128(\"1000000000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000000000\"),\n+    Decimal128(\"1000000000000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000000000000\"),\n+    Decimal128(\"1000000000000000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000000000000000\"),\n+    Decimal128(\"1000000000000000000000000000000000000\"),\n+    Decimal128(\"10000000000000000000000000000000000000\"),\n+    Decimal128(\"100000000000000000000000000000000000000\")};\n+\n+Status Decimal128::Rescale(int32_t original_scale, int32_t new_scale,\n+                           Decimal128* out) const {\n+  DCHECK_NE(out, NULLPTR);\n+  DCHECK_NE(original_scale, new_scale);\n+  const int32_t delta_scale = original_scale - new_scale;\n+  const int32_t abs_delta_scale = std::abs(delta_scale);\n+  DCHECK_GE(abs_delta_scale, 1);\n+  DCHECK_LE(abs_delta_scale, 38);\n+\n+  const Decimal128 scale_multiplier = ScaleMultipliers[abs_delta_scale];\n+  const Decimal128 result = *this * scale_multiplier;\n+\n+  if (ARROW_PREDICT_FALSE(result < *this)) {\n+    std::stringstream buf;\n+    buf << \"Rescaling decimal value from original scale \" << original_scale\n+        << \" to new scale \" << new_scale << \" would cause overflow\";\n+    return Status::Invalid(buf.str());\n+  }\n+\n+  *out = result;\n+  return Status::OK();\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex a0423e9fc..1594090a0 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -126,6 +126,9 @@ class ARROW_EXPORT Decimal128 {\n   static Status FromString(const std::string& s, Decimal128* out,\n                            int* precision = NULLPTR, int* scale = NULLPTR);\n \n+  /// \\brief Convert Decimal128 from one scale to another\n+  Status Rescale(int32_t original_scale, int32_t new_scale, Decimal128* out) const;\n+\n  private:\n   int64_t high_bits_;\n   uint64_t low_bits_;\ndiff --git a/python/pyarrow/tests/test_parquet.py b/python/pyarrow/tests/test_parquet.py\nindex 9004fc01a..d17d89e24 100644\n--- a/python/pyarrow/tests/test_parquet.py\n+++ b/python/pyarrow/tests/test_parquet.py\n@@ -16,13 +16,17 @@\n # under the License.\n \n from os.path import join as pjoin\n+\n import datetime\n+import decimal\n import io\n-import os\n import json\n+import os\n+\n import pytest\n \n from pyarrow.compat import guid, u, BytesIO, unichar, frombytes\n+from pyarrow.tests import util\n from pyarrow.filesystem import LocalFileSystem\n import pyarrow as pa\n from .pandas_examples import dataframe_with_arrays, dataframe_with_lists\n@@ -1564,3 +1568,41 @@ def test_backwards_compatible_index_multi_level_some_named():\n     t = _read_table(path)\n     result = t.to_pandas()\n     tm.assert_frame_equal(result, expected)\n+\n+\n+@pytest.mark.parametrize('precision', range(1, 39))\n+def test_decimal_roundtrip(tmpdir, precision):\n+    num_values = 10\n+\n+    columns = {}\n+\n+    for scale in range(0, precision + 1):\n+        with util.random_seed(0):\n+            random_decimal_values = [\n+                util.randdecimal(precision, scale) for _ in range(num_values)\n+            ]\n+        column_name = 'dec_precision_{:d}_scale_{:d}'.format(precision, scale)\n+        columns[column_name] = random_decimal_values\n+\n+    expected = pd.DataFrame(columns)\n+    filename = tmpdir.join('decimals.parquet')\n+    string_filename = str(filename)\n+    t = pa.Table.from_pandas(expected)\n+    _write_table(t, string_filename)\n+    result_table = _read_table(string_filename)\n+    result = result_table.to_pandas()\n+    tm.assert_frame_equal(result, expected)\n+\n+\n+@pytest.mark.xfail(\n+    raises=pa.ArrowException, reason='Parquet does not support negative scale'\n+)\n+def test_decimal_roundtrip_negative_scale(tmpdir):\n+    expected = pd.DataFrame({'decimal_num': [decimal.Decimal('1.23E4')]})\n+    filename = tmpdir.join('decimals.parquet')\n+    string_filename = str(filename)\n+    t = pa.Table.from_pandas(expected)\n+    _write_table(t, string_filename)\n+    result_table = _read_table(string_filename)\n+    result = result_table.to_pandas()\n+    tm.assert_frame_equal(result, expected)\ndiff --git a/python/pyarrow/tests/util.py b/python/pyarrow/tests/util.py\nnew file mode 100644\nindex 000000000..a3ba9000c\n--- /dev/null\n+++ b/python/pyarrow/tests/util.py\n@@ -0,0 +1,93 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Utility functions for testing\n+\"\"\"\n+\n+import decimal\n+import random\n+import contextlib\n+\n+\n+def randsign():\n+    \"\"\"Randomly choose either 1 or -1.\n+\n+    Returns\n+    -------\n+    sign : int\n+    \"\"\"\n+    return random.choice((-1, 1))\n+\n+\n+@contextlib.contextmanager\n+def random_seed(seed):\n+    \"\"\"Set the random seed inside of a context manager.\n+\n+    Parameters\n+    ----------\n+    seed : int\n+        The seed to set\n+\n+    Notes\n+    -----\n+    This function is useful when you want to set a random seed but not affect\n+    the random state of other functions using the random module.\n+    \"\"\"\n+    original_state = random.getstate()\n+    random.seed(seed)\n+    try:\n+        yield\n+    finally:\n+        random.setstate(original_state)\n+\n+\n+def randdecimal(precision, scale):\n+    \"\"\"Generate a random decimal value with specified precision and scale.\n+\n+    Parameters\n+    ----------\n+    precision : int\n+        The maximum number of digits to generate. Must be an integer between 1\n+        and 38 inclusive.\n+    scale : int\n+        The maximum number of digits following the decimal point.  Must be an\n+        integer greater than or equal to 0.\n+\n+    Returns\n+    -------\n+    decimal_value : decimal.Decimal\n+        A random decimal.Decimal object with the specifed precision and scale.\n+    \"\"\"\n+    assert 1 <= precision <= 38, 'precision must be between 1 and 38 inclusive'\n+    if scale < 0:\n+        raise ValueError(\n+            'randdecimal does not yet support generating decimals with '\n+            'negative scale'\n+        )\n+    max_whole_value = 10 ** (precision - scale) - 1\n+    whole = random.randint(-max_whole_value, max_whole_value)\n+\n+    if not scale:\n+        return decimal.Decimal(whole)\n+\n+    max_fractional_value = 10 ** scale - 1\n+    fractional = random.randint(0, max_fractional_value)\n+\n+    return decimal.Decimal(\n+        '{}.{}'.format(whole, str(fractional).rjust(scale, '0'))\n+    )\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T03:39:52.591+0000",
                    "updated": "2017-12-05T03:39:52.591+0000"
                }
            ],
            "maxResults": 16,
            "total": 16,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mzgv:",
        "customfield_12314139": null
    }
}