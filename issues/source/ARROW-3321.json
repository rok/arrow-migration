{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13187027",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027",
    "key": "ARROW-3321",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3321/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619\n \n \n   Before:\r\n   ```\r\n   ---------------------------------------------------------------------\r\n   Benchmark                              Time           CPU Iterations\r\n   ---------------------------------------------------------------------\r\n   BM_IntegerParsing<Int8Type>         1388 ns       1387 ns     502861   5.49911M items/s\r\n   BM_IntegerParsing<Int16Type>        1475 ns       1475 ns     468724   5.17179M items/s\r\n   BM_IntegerParsing<Int32Type>        1730 ns       1729 ns     405693   4.41194M items/s\r\n   BM_IntegerParsing<Int64Type>        2131 ns       2131 ns     328192   3.58034M items/s\r\n   BM_IntegerParsing<UInt8Type>        1238 ns       1238 ns     572573   6.16483M items/s\r\n   BM_IntegerParsing<UInt16Type>       1302 ns       1301 ns     537960   5.86206M items/s\r\n   BM_IntegerParsing<UInt32Type>       1391 ns       1391 ns     502859    5.4857M items/s\r\n   BM_IntegerParsing<UInt64Type>       1637 ns       1637 ns     427832     4.661M items/s\r\n   BM_FloatParsing<FloatType>          4437 ns       4436 ns     156887   1.71973M items/s\r\n   BM_FloatParsing<DoubleType>         4593 ns       4592 ns     152459   1.66129M items/s\r\n   ```\r\n   \r\n   After:\r\n   ```\r\n   ---------------------------------------------------------------------\r\n   Benchmark                              Time           CPU Iterations\r\n   ---------------------------------------------------------------------\r\n   BM_IntegerParsing<Int8Type>           23 ns         23 ns   29800687   324.788M items/s\r\n   BM_IntegerParsing<Int16Type>          27 ns         27 ns   26593165   287.438M items/s\r\n   BM_IntegerParsing<Int32Type>          34 ns         34 ns   20689813   226.211M items/s\r\n   BM_IntegerParsing<Int64Type>          49 ns         49 ns   14256379   155.424M items/s\r\n   BM_IntegerParsing<UInt8Type>          17 ns         17 ns   42295211   454.911M items/s\r\n   BM_IntegerParsing<UInt16Type>         16 ns         16 ns   42663172   464.397M items/s\r\n   BM_IntegerParsing<UInt32Type>         21 ns         21 ns   33372432   363.209M items/s\r\n   BM_IntegerParsing<UInt64Type>         33 ns         33 ns   21502295   234.255M items/s\r\n   BM_FloatParsing<FloatType>          4554 ns       4553 ns     153207   1.67565M items/s\r\n   BM_FloatParsing<DoubleType>         4579 ns       4578 ns     152304   1.66651M items/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T13:24:19.844+0000",
                    "updated": "2018-09-24T13:24:19.844+0000",
                    "started": "2018-09-24T13:24:19.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147113",
                    "issueId": "13187027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619#issuecomment-424004975\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=h1) Report\n   > Merging [#2619](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/433a89851dda7da83636f525efb73829cd146fca?src=pr&el=desc) will **increase** coverage by `1.06%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2619/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2619      +/-   ##\n   ==========================================\n   + Coverage   87.15%   88.22%   +1.06%     \n   ==========================================\n     Files         380      318      -62     \n     Lines       59037    55408    -3629     \n   ==========================================\n   - Hits        51456    48883    -2573     \n   + Misses       7507     6525     -982     \n   + Partials       74        0      -74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/parsing-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmctdXRpbC10ZXN0LmNj) | `99.33% <100%> (+0.11%)` | :arrow_up: |\n   | [cpp/src/arrow/util/parsing.h](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmcuaA==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [rust/src/util/bit\\_util.rs](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-cnVzdC9zcmMvdXRpbC9iaXRfdXRpbC5ycw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | ... and [55 more](https://codecov.io/gh/apache/arrow/pull/2619/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=footer). Last update [433a898...9834b28](https://codecov.io/gh/apache/arrow/pull/2619?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T14:57:40.168+0000",
                    "updated": "2018-09-24T14:57:40.168+0000",
                    "started": "2018-09-24T14:57:40.167+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147148",
                    "issueId": "13187027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619#issuecomment-424061191\n \n \n   That's an impressive speedup!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-24T17:39:49.038+0000",
                    "updated": "2018-09-24T17:39:49.038+0000",
                    "started": "2018-09-24T17:39:49.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147217",
                    "issueId": "13187027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619#discussion_r220156928\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -108,81 +109,213 @@ class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleTyp\n \n // NOTE: HalfFloatType would require a half<->float conversion library\n \n+namespace detail {\n+\n+#define PARSE_UNSIGNED_ITERATION(C_TYPE)              \\\n+  if (length > 0) {                                   \\\n+    uint8_t digit = static_cast<uint8_t>(*s++ - '0'); \\\n+    result = static_cast<C_TYPE>(result * 10U);       \\\n+    length--;                                         \\\n+    if (ARROW_PREDICT_FALSE(digit > 9U)) {            \\\n+      /* Non-digit */                                 \\\n+      return false;                                   \\\n+    }                                                 \\\n+    result = static_cast<C_TYPE>(result + digit);     \\\n+  }\n+\n+#define PARSE_UNSIGNED_ITERATION_LAST(C_TYPE)                                     \\\n+  if (length > 0) {                                                               \\\n+    if (ARROW_PREDICT_FALSE(result > std::numeric_limits<C_TYPE>::max() / 10U)) { \\\n+      /* Overflow */                                                              \\\n \n Review comment:\n   At some point do you think we might want to return a \"reason\" as an out argument when the parser returns false? Could be follow up work\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T11:42:13.905+0000",
                    "updated": "2018-09-25T11:42:13.905+0000",
                    "started": "2018-09-25T11:42:13.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147528",
                    "issueId": "13187027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/parsing-util-test.cc b/cpp/src/arrow/util/parsing-util-test.cc\nindex b126b8211b..9fa5ffb7a9 100644\n--- a/cpp/src/arrow/util/parsing-util-test.cc\n+++ b/cpp/src/arrow/util/parsing-util-test.cc\n@@ -119,13 +119,16 @@ TEST(StringConversion, ToInt8) {\n \n   AssertConversion(converter, \"0\", 0);\n   AssertConversion(converter, \"127\", 127);\n+  AssertConversion(converter, \"0127\", 127);\n   AssertConversion(converter, \"-128\", -128);\n+  AssertConversion(converter, \"-00128\", -128);\n \n   // Non-representable values\n   AssertConversionFails(converter, \"128\");\n   AssertConversionFails(converter, \"-129\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -134,13 +137,18 @@ TEST(StringConversion, ToUInt8) {\n   StringConverter<UInt8Type> converter;\n \n   AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"26\", 26);\n   AssertConversion(converter, \"255\", 255);\n+  AssertConversion(converter, \"0255\", 255);\n \n   // Non-representable values\n-  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"-1\");\n   AssertConversionFails(converter, \"256\");\n+  AssertConversionFails(converter, \"260\");\n+  AssertConversionFails(converter, \"1234\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -150,13 +158,16 @@ TEST(StringConversion, ToInt16) {\n \n   AssertConversion(converter, \"0\", 0);\n   AssertConversion(converter, \"32767\", 32767);\n+  AssertConversion(converter, \"032767\", 32767);\n   AssertConversion(converter, \"-32768\", -32768);\n+  AssertConversion(converter, \"-0032768\", -32768);\n \n   // Non-representable values\n   AssertConversionFails(converter, \"32768\");\n   AssertConversionFails(converter, \"-32769\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -165,13 +176,17 @@ TEST(StringConversion, ToUInt16) {\n   StringConverter<UInt16Type> converter;\n \n   AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"6660\", 6660);\n   AssertConversion(converter, \"65535\", 65535);\n+  AssertConversion(converter, \"065535\", 65535);\n \n   // Non-representable values\n-  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"-1\");\n   AssertConversionFails(converter, \"65536\");\n+  AssertConversionFails(converter, \"123456\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -181,13 +196,16 @@ TEST(StringConversion, ToInt32) {\n \n   AssertConversion(converter, \"0\", 0);\n   AssertConversion(converter, \"2147483647\", 2147483647);\n+  AssertConversion(converter, \"02147483647\", 2147483647);\n   AssertConversion(converter, \"-2147483648\", -2147483648LL);\n+  AssertConversion(converter, \"-002147483648\", -2147483648LL);\n \n   // Non-representable values\n   AssertConversionFails(converter, \"2147483648\");\n   AssertConversionFails(converter, \"-2147483649\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -196,13 +214,17 @@ TEST(StringConversion, ToUInt32) {\n   StringConverter<UInt32Type> converter;\n \n   AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"432198765\", 432198765UL);\n   AssertConversion(converter, \"4294967295\", 4294967295UL);\n+  AssertConversion(converter, \"04294967295\", 4294967295UL);\n \n   // Non-representable values\n-  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"-1\");\n   AssertConversionFails(converter, \"4294967296\");\n+  AssertConversionFails(converter, \"12345678901\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -212,13 +234,16 @@ TEST(StringConversion, ToInt64) {\n \n   AssertConversion(converter, \"0\", 0);\n   AssertConversion(converter, \"9223372036854775807\", 9223372036854775807LL);\n+  AssertConversion(converter, \"09223372036854775807\", 9223372036854775807LL);\n   AssertConversion(converter, \"-9223372036854775808\", -9223372036854775807LL - 1);\n+  AssertConversion(converter, \"-009223372036854775808\", -9223372036854775807LL - 1);\n \n   // Non-representable values\n   AssertConversionFails(converter, \"9223372036854775808\");\n   AssertConversionFails(converter, \"-9223372036854775809\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\n@@ -230,10 +255,11 @@ TEST(StringConversion, ToUInt64) {\n   AssertConversion(converter, \"18446744073709551615\", 18446744073709551615ULL);\n \n   // Non-representable values\n-  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"-1\");\n   AssertConversionFails(converter, \"18446744073709551616\");\n \n   AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"-\");\n   AssertConversionFails(converter, \"0.0\");\n   AssertConversionFails(converter, \"e\");\n }\ndiff --git a/cpp/src/arrow/util/parsing.h b/cpp/src/arrow/util/parsing.h\nindex 8efc6143c8..4f2dc7894a 100644\n--- a/cpp/src/arrow/util/parsing.h\n+++ b/cpp/src/arrow/util/parsing.h\n@@ -22,6 +22,7 @@\n #include <locale>\n #include <sstream>\n #include <string>\n+#include <type_traits>\n \n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n@@ -108,81 +109,213 @@ class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleTyp\n \n // NOTE: HalfFloatType would require a half<->float conversion library\n \n+namespace detail {\n+\n+#define PARSE_UNSIGNED_ITERATION(C_TYPE)              \\\n+  if (length > 0) {                                   \\\n+    uint8_t digit = static_cast<uint8_t>(*s++ - '0'); \\\n+    result = static_cast<C_TYPE>(result * 10U);       \\\n+    length--;                                         \\\n+    if (ARROW_PREDICT_FALSE(digit > 9U)) {            \\\n+      /* Non-digit */                                 \\\n+      return false;                                   \\\n+    }                                                 \\\n+    result = static_cast<C_TYPE>(result + digit);     \\\n+  }\n+\n+#define PARSE_UNSIGNED_ITERATION_LAST(C_TYPE)                                     \\\n+  if (length > 0) {                                                               \\\n+    if (ARROW_PREDICT_FALSE(result > std::numeric_limits<C_TYPE>::max() / 10U)) { \\\n+      /* Overflow */                                                              \\\n+      return false;                                                               \\\n+    }                                                                             \\\n+    uint8_t digit = static_cast<uint8_t>(*s++ - '0');                             \\\n+    result = static_cast<C_TYPE>(result * 10U);                                   \\\n+    C_TYPE new_result = static_cast<C_TYPE>(result + digit);                      \\\n+    if (ARROW_PREDICT_FALSE(--length > 0)) {                                      \\\n+      /* Too many digits */                                                       \\\n+      return false;                                                               \\\n+    }                                                                             \\\n+    if (ARROW_PREDICT_FALSE(digit > 9U)) {                                        \\\n+      /* Non-digit */                                                             \\\n+      return false;                                                               \\\n+    }                                                                             \\\n+    if (ARROW_PREDICT_FALSE(new_result < result)) {                               \\\n+      /* Overflow */                                                              \\\n+      return false;                                                               \\\n+    }                                                                             \\\n+    result = new_result;                                                          \\\n+  }\n+\n+inline bool ParseUnsigned(const char* s, size_t length, uint8_t* out) {\n+  uint8_t result = 0;\n+\n+  PARSE_UNSIGNED_ITERATION(uint8_t);\n+  PARSE_UNSIGNED_ITERATION(uint8_t);\n+  PARSE_UNSIGNED_ITERATION_LAST(uint8_t);\n+  *out = result;\n+  return true;\n+}\n+\n+inline bool ParseUnsigned(const char* s, size_t length, uint16_t* out) {\n+  uint16_t result = 0;\n+\n+  PARSE_UNSIGNED_ITERATION(uint16_t);\n+  PARSE_UNSIGNED_ITERATION(uint16_t);\n+  PARSE_UNSIGNED_ITERATION(uint16_t);\n+  PARSE_UNSIGNED_ITERATION(uint16_t);\n+  PARSE_UNSIGNED_ITERATION_LAST(uint16_t);\n+  *out = result;\n+  return true;\n+}\n+\n+inline bool ParseUnsigned(const char* s, size_t length, uint32_t* out) {\n+  uint32_t result = 0;\n+\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+  PARSE_UNSIGNED_ITERATION(uint32_t);\n+\n+  PARSE_UNSIGNED_ITERATION_LAST(uint32_t);\n+  *out = result;\n+  return true;\n+}\n+\n+inline bool ParseUnsigned(const char* s, size_t length, uint64_t* out) {\n+  uint64_t result = 0;\n+\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+  PARSE_UNSIGNED_ITERATION(uint64_t);\n+\n+  PARSE_UNSIGNED_ITERATION_LAST(uint64_t);\n+  *out = result;\n+  return true;\n+}\n+\n+#undef PARSE_UNSIGNED_ITERATION\n+#undef PARSE_UNSIGNED_ITERATION_LAST\n+\n+}  // namespace detail\n+\n template <class ARROW_TYPE>\n-class StringConverter<ARROW_TYPE, enable_if_signed_integer<ARROW_TYPE>> {\n+class StringToUnsignedIntConverterMixin {\n  public:\n   using value_type = typename ARROW_TYPE::c_type;\n \n-  StringConverter() { ibuf.imbue(std::locale::classic()); }\n-\n   bool operator()(const char* s, size_t length, value_type* out) {\n-    static constexpr bool need_long_long = sizeof(value_type) > sizeof(long);  // NOLINT\n-    static constexpr value_type min_value = std::numeric_limits<value_type>::min();\n-    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n-\n-    ibuf.clear();\n-    ibuf.str(std::string(s, length));\n-    if (need_long_long) {\n-      long long res;  // NOLINT\n-      ibuf >> res;\n-      *out = static_cast<value_type>(res);  // may downcast\n-      if (res < min_value || res > max_value) {\n-        return false;\n-      }\n-    } else {\n-      long res;  // NOLINT\n-      ibuf >> res;\n-      *out = static_cast<value_type>(res);  // may downcast\n-      if (res < min_value || res > max_value) {\n-        return false;\n-      }\n+    if (ARROW_PREDICT_FALSE(length == 0)) {\n+      return false;\n     }\n-    // XXX Should we reset errno on failure?\n-    return !ibuf.fail() && ibuf.eof();\n+    // Skip leading zeros\n+    while (length > 0 && *s == '0') {\n+      length--;\n+      s++;\n+    }\n+    return detail::ParseUnsigned(s, length, out);\n   }\n+};\n \n- protected:\n-  std::istringstream ibuf;\n+template <>\n+class StringConverter<UInt8Type> : public StringToUnsignedIntConverterMixin<UInt8Type> {};\n+\n+template <>\n+class StringConverter<UInt16Type> : public StringToUnsignedIntConverterMixin<UInt16Type> {\n+};\n+\n+template <>\n+class StringConverter<UInt32Type> : public StringToUnsignedIntConverterMixin<UInt32Type> {\n+};\n+\n+template <>\n+class StringConverter<UInt64Type> : public StringToUnsignedIntConverterMixin<UInt64Type> {\n };\n \n template <class ARROW_TYPE>\n-class StringConverter<ARROW_TYPE, enable_if_unsigned_integer<ARROW_TYPE>> {\n+class StringToSignedIntConverterMixin {\n  public:\n   using value_type = typename ARROW_TYPE::c_type;\n-\n-  StringConverter() { ibuf.imbue(std::locale::classic()); }\n+  using unsigned_type = typename std::make_unsigned<value_type>::type;\n \n   bool operator()(const char* s, size_t length, value_type* out) {\n-    static constexpr bool need_long_long =\n-        sizeof(value_type) > sizeof(unsigned long);  // NOLINT\n-    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n+    static constexpr unsigned_type max_positive =\n+        static_cast<unsigned_type>(std::numeric_limits<value_type>::max());\n+    // Assuming two's complement\n+    static constexpr unsigned_type max_negative = max_positive + 1;\n+    bool negative = false;\n+    unsigned_type unsigned_value = 0;\n \n-    ibuf.clear();\n-    ibuf.str(std::string(s, length));\n-    // XXX The following unfortunately allows negative input values\n-    if (need_long_long) {\n-      unsigned long long res;  // NOLINT\n-      ibuf >> res;\n-      *out = static_cast<value_type>(res);  // may downcast\n-      if (res > max_value) {\n+    if (ARROW_PREDICT_FALSE(length == 0)) {\n+      return false;\n+    }\n+    if (*s == '-') {\n+      negative = true;\n+      s++;\n+      if (--length == 0) {\n         return false;\n       }\n+    }\n+    // Skip leading zeros\n+    while (length > 0 && *s == '0') {\n+      length--;\n+      s++;\n+    }\n+    if (!ARROW_PREDICT_TRUE(detail::ParseUnsigned(s, length, &unsigned_value))) {\n+      return false;\n+    }\n+    if (negative) {\n+      if (ARROW_PREDICT_FALSE(unsigned_value > max_negative)) {\n+        return false;\n+      }\n+      *out = static_cast<value_type>(-static_cast<value_type>(unsigned_value));\n     } else {\n-      unsigned long res;  // NOLINT\n-      ibuf >> res;\n-      *out = static_cast<value_type>(res);  // may downcast\n-      if (res > max_value) {\n+      if (ARROW_PREDICT_FALSE(unsigned_value > max_positive)) {\n         return false;\n       }\n+      *out = static_cast<value_type>(unsigned_value);\n     }\n-    // XXX Should we reset errno on failure?\n-    return !ibuf.fail() && ibuf.eof();\n+    return true;\n   }\n-\n- protected:\n-  std::istringstream ibuf;\n };\n \n+template <>\n+class StringConverter<Int8Type> : public StringToSignedIntConverterMixin<Int8Type> {};\n+\n+template <>\n+class StringConverter<Int16Type> : public StringToSignedIntConverterMixin<Int16Type> {};\n+\n+template <>\n+class StringConverter<Int32Type> : public StringToSignedIntConverterMixin<Int32Type> {};\n+\n+template <>\n+class StringConverter<Int64Type> : public StringToSignedIntConverterMixin<Int64Type> {};\n+\n }  // namespace internal\n }  // namespace arrow\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T11:43:15.159+0000",
                    "updated": "2018-09-25T11:43:15.159+0000",
                    "started": "2018-09-25T11:43:15.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147529",
                    "issueId": "13187027"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/worklog/147531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2619: ARROW-3321: [C++] Improve integer parsing performance\nURL: https://github.com/apache/arrow/pull/2619#discussion_r220160191\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -108,81 +109,213 @@ class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleTyp\n \n // NOTE: HalfFloatType would require a half<->float conversion library\n \n+namespace detail {\n+\n+#define PARSE_UNSIGNED_ITERATION(C_TYPE)              \\\n+  if (length > 0) {                                   \\\n+    uint8_t digit = static_cast<uint8_t>(*s++ - '0'); \\\n+    result = static_cast<C_TYPE>(result * 10U);       \\\n+    length--;                                         \\\n+    if (ARROW_PREDICT_FALSE(digit > 9U)) {            \\\n+      /* Non-digit */                                 \\\n+      return false;                                   \\\n+    }                                                 \\\n+    result = static_cast<C_TYPE>(result + digit);     \\\n+  }\n+\n+#define PARSE_UNSIGNED_ITERATION_LAST(C_TYPE)                                     \\\n+  if (length > 0) {                                                               \\\n+    if (ARROW_PREDICT_FALSE(result > std::numeric_limits<C_TYPE>::max() / 10U)) { \\\n+      /* Overflow */                                                              \\\n \n Review comment:\n   Not sure, because if we're calling out to an external parser (as we'll keep doing for floating-point parsing), it may not give us a reason.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T11:51:57.432+0000",
                    "updated": "2018-09-25T11:51:57.432+0000",
                    "started": "2018-09-25T11:51:57.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147531",
                    "issueId": "13187027"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@22451e19[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9dfdc92[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e2bb50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@73aecc12[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@168449c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@611fba9c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7036b5d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75fd299c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3672cf1b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2a254813[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f78c096[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7355a52c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 25 11:43:08 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-25T11:43:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3321/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-24T12:41:54.000+0000",
        "updated": "2018-09-25T11:51:57.000+0000",
        "timeoriginalestimate": null,
        "description": "According to the {{number-parsing-benchmark}}, parsing integers from strings currently runs at around ~5M items/sec. (on Ubuntu 18.04). We should be able to do better. This will be important for CSV parsing performance.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve integer parsing performance",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187027/comment/16627201",
                    "id": "16627201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2619\n[https://github.com/apache/arrow/pull/2619]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-25T11:43:08.158+0000",
                    "updated": "2018-09-25T11:43:08.158+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yf6f:",
        "customfield_12314139": null
    }
}