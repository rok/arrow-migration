{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13444679",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679",
    "key": "ARROW-16556",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16556/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/769813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#issuecomment-1125313570\n\n   https://issues.apache.org/jira/browse/ARROW-16556\n\n\n",
                    "created": "2022-05-12T18:45:31.472+0000",
                    "updated": "2022-05-12T18:45:31.472+0000",
                    "started": "2022-05-12T18:45:31.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769813",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/775737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r884320545\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n\nReview Comment:\n   IsKnownFixedWidth might be a btter name for ths method?\n\n\n\n",
                    "created": "2022-05-29T20:28:28.036+0000",
                    "updated": "2022-05-29T20:28:28.036+0000",
                    "started": "2022-05-29T20:28:28.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775737",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/775738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r884320617\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n+// primitive type.\n+func IsPrimitive(t Type) bool {\n+\tswitch t {\n+\tcase BOOL, UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64,\n+\t\tFLOAT16, FLOAT32, FLOAT64, DATE32, DATE64, TIME32, TIME64, TIMESTAMP,\n+\t\tDURATION, INTERVAL_MONTHS, INTERVAL_DAY_TIME, INTERVAL_MONTH_DAY_NANO:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsBaseBinary returns true for Binary/String and their LARGE variants\n+func IsBaseBinary(t Type) bool {\n+\tswitch t {\n+\tcase BINARY, STRING, LARGE_BINARY, LARGE_STRING:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsFixedSizeBinary returns true for Decimal128/256 and FixedSizeBinary\n+func IsFixedSizeBinary(t Type) bool {\n+\tswitch t {\n+\tcase DECIMAL128, DECIMAL256, FIXED_SIZE_BINARY:\n\nReview Comment:\n   is there a reason to not put DECIMAL above in IsPrimitive? \n\n\n\n",
                    "created": "2022-05-29T20:29:07.926+0000",
                    "updated": "2022-05-29T20:29:07.926+0000",
                    "started": "2022-05-29T20:29:07.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775738",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/775739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#issuecomment-1140519733\n\n   Not clear exactly how this is going to be used, so a few nitpicks but looks OK\n\n\n",
                    "created": "2022-05-29T20:29:38.969+0000",
                    "updated": "2022-05-29T20:29:38.969+0000",
                    "started": "2022-05-29T20:29:38.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775739",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/776366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r885716884\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n+// primitive type.\n+func IsPrimitive(t Type) bool {\n+\tswitch t {\n+\tcase BOOL, UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64,\n+\t\tFLOAT16, FLOAT32, FLOAT64, DATE32, DATE64, TIME32, TIME64, TIMESTAMP,\n+\t\tDURATION, INTERVAL_MONTHS, INTERVAL_DAY_TIME, INTERVAL_MONTH_DAY_NANO:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsBaseBinary returns true for Binary/String and their LARGE variants\n+func IsBaseBinary(t Type) bool {\n+\tswitch t {\n+\tcase BINARY, STRING, LARGE_BINARY, LARGE_STRING:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsFixedSizeBinary returns true for Decimal128/256 and FixedSizeBinary\n+func IsFixedSizeBinary(t Type) bool {\n+\tswitch t {\n+\tcase DECIMAL128, DECIMAL256, FIXED_SIZE_BINARY:\n\nReview Comment:\n   Honestly, I was following the categorizations that the C++ had. But thinking about it, technically the reason for `IsPrimitive` vs `IsFixedSizeBinary` is the fact that the \"primitive\" values are each an interpretable value in and of themselves as a primitive that exists in most programming languages (an integer of a specific bit-width or a float/double) as opposed to the DECIMAL values which are all represented as a compound value of more than one primitive (for example DECIMAL128 is two 64-bit integers). That's likely the original thinking that led to the categorization in the C++ that I was following here. \r\n   \r\n   It's also probably why it's `IsPrimitive` rather than `IsKnownFixedWidth`.\n\n\n\n",
                    "created": "2022-05-31T14:31:41.061+0000",
                    "updated": "2022-05-31T14:31:41.061+0000",
                    "started": "2022-05-31T14:31:41.060+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776366",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/776367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#issuecomment-1142217741\n\n   @emkornfield This allows someone to grab the expected physical layout from a datatype such as how many buffers a type *should* have and so on. I use this in my implementation of the compute stuff for Go (I have an implementation of a basic framework + working Cast kernel) for determining how many buffers to pre-allocate based on the expected output type.\n\n\n",
                    "created": "2022-05-31T14:33:58.730+0000",
                    "updated": "2022-05-31T14:33:58.730+0000",
                    "started": "2022-05-31T14:33:58.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776367",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/776928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r886913269\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n\nReview Comment:\n   I mentioned this in my response [here](https://github.com/apache/arrow/pull/13136/#discussion_r885716884) but essentially the reason why this is `IsPrimitive` is because it returns true if the type is a value with a bit-width that is interpretable as a single \"primitive\" value in most languages (ie: an integer with a specific bit-width or a float/double) as opposed to values like DECIMAL128 and the interval values which are compound structures consisting of multiple primitive values despite being a known fixed width (for example two 64-bit integers for DECIMAL)\n\n\n\n",
                    "created": "2022-06-01T14:59:33.367+0000",
                    "updated": "2022-06-01T14:59:33.367+0000",
                    "started": "2022-06-01T14:59:33.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776928",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/776929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r886913269\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n\nReview Comment:\n   I mentioned this in my response [here](https://github.com/apache/arrow/pull/13136/#discussion_r885716884) but essentially the reason why this is `IsPrimitive` is because it returns true if the type is a value with a bit-width that is interpretable as a single \"primitive\" value in most languages (ie: an integer with a specific bit-width or a float/double) as opposed to values like DECIMAL128 and the interval values which are compound structures consisting of multiple primitive values despite being a known fixed width (for example two 64-bit integers for DECIMAL). That's why i don't think `IsKnownFixedWidth` works for this\n\n\n\n",
                    "created": "2022-06-01T15:00:33.475+0000",
                    "updated": "2022-06-01T15:00:33.475+0000",
                    "started": "2022-06-01T15:00:33.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776929",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/776973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on code in PR #13136:\nURL: https://github.com/apache/arrow/pull/13136#discussion_r886970068\n\n\n##########\ngo/arrow/datatype.go:\n##########\n@@ -209,3 +210,77 @@ func timeUnitFingerprint(unit TimeUnit) rune {\n \t\treturn rune(0)\n \t}\n }\n+\n+// BufferKind describes the type of buffer expected when defining a layout specification\n+type BufferKind int8\n+\n+// The expected types of buffers\n+const (\n+\tKindFixedWidth BufferKind = iota\n+\tKindVarWidth\n+\tKindBitmap\n+\tKindAlwaysNull\n+)\n+\n+// BufferSpec provides a specification for the buffers of a particular datatype\n+type BufferSpec struct {\n+\tKind      BufferKind\n+\tByteWidth int // for KindFixedWidth\n+}\n+\n+func (b BufferSpec) Equals(other BufferSpec) bool {\n+\treturn b.Kind == other.Kind && (b.Kind != KindFixedWidth || b.ByteWidth == other.ByteWidth)\n+}\n+\n+// DataTypeLayout represents the physical layout of a datatype's buffers including\n+// the number of and types of those binary buffers. This will correspond\n+// with the buffers in the ArrayData for an array of that type.\n+type DataTypeLayout struct {\n+\tBuffers []BufferSpec\n+\tHasDict bool\n+}\n+\n+func SpecFixedWidth(w int) BufferSpec { return BufferSpec{KindFixedWidth, w} }\n+func SpecVariableWidth() BufferSpec   { return BufferSpec{KindVarWidth, -1} }\n+func SpecBitmap() BufferSpec          { return BufferSpec{KindBitmap, -1} }\n+func SpecAlwaysNull() BufferSpec      { return BufferSpec{KindAlwaysNull, -1} }\n+\n+// IsInteger is a helper to return true if the type ID provided is one of the\n+// integral types of uint or int with the varying sizes.\n+func IsInteger(t Type) bool {\n+\tswitch t {\n+\tcase UINT8, INT8, UINT16, INT16, UINT32, INT32, UINT64, INT64:\n+\t\treturn true\n+\t}\n+\treturn false\n+}\n+\n+// IsPrimitive returns true if the provided type ID represents a fixed width\n\nReview Comment:\n   maybe add a comment with respect to go-lang?\n\n\n\n",
                    "created": "2022-06-01T15:52:28.887+0000",
                    "updated": "2022-06-01T15:52:28.887+0000",
                    "started": "2022-06-01T15:52:28.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776973",
                    "issueId": "13444679"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/worklog/777236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou merged PR #13136:\nURL: https://github.com/apache/arrow/pull/13136\n\n\n",
                    "created": "2022-06-02T01:40:33.459+0000",
                    "updated": "2022-06-02T01:40:33.459+0000",
                    "started": "2022-06-02T01:40:33.459+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777236",
                    "issueId": "13444679"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@335e82de[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4075f925[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58f7711f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@372407f5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f80d8b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@12e7c332[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71fb27f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@66778d9d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ffbac8d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3a91413[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b453779[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@71844ce9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 02 01:40:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-02T01:40:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16556/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-05-12T18:35:20.000+0000",
        "updated": "2022-06-02T01:40:36.000+0000",
        "timeoriginalestimate": null,
        "description": "Add Layout method to DataType interface to make it easy to confirm the physical layout of a datatype such as the expected number of buffers, types etc. Similar to the C++ layout methods.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] Add Layout method to DataTypes",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13444679/comment/17545228",
                    "id": "17545228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 13136\n[https://github.com/apache/arrow/pull/13136]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-06-02T01:40:36.806+0000",
                    "updated": "2022-06-02T01:40:36.806+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z12bds:",
        "customfield_12314139": null
    }
}