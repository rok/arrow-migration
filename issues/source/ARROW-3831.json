{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13199121",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121",
    "key": "ARROW-3831",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3831/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-24T13:37:35.774+0000",
                    "updated": "2018-11-24T13:37:35.774+0000",
                    "started": "2018-11-24T13:37:35.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169112",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#issuecomment-441380692\n \n \n   ```\r\n   [ RUN      ] TestGZip/CodecTest.CodecRoundtrip/0\r\n   ..\\src\\arrow\\util\\compression-test.cc(88): error:       Expected: data.size()\r\n         Which is: 0\r\n   To be equal to: actual_decompressed_size\r\n         Which is: -3689348814741910324\r\n   ..\\src\\arrow\\util\\compression-test.cc(88): error:       Expected: data.size()\r\n         Which is: 0\r\n   To be equal to: actual_decompressed_size\r\n         Which is: -3689348814741910324\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-24T16:52:41.877+0000",
                    "updated": "2018-11-24T16:52:41.877+0000",
                    "started": "2018-11-24T16:52:41.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169130",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#issuecomment-441402446\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=h1) Report\n   > Merging [#3024](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/3e0958a70ee1980e3cda5288412c8f69c9518156?src=pr&el=desc) will **increase** coverage by `1.08%`.\n   > The diff coverage is `90.74%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3024/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3024      +/-   ##\n   ==========================================\n   + Coverage   86.94%   88.03%   +1.08%     \n   ==========================================\n     Files         494      425      -69     \n     Lines       70180    64841    -5339     \n   ==========================================\n   - Hits        61018    57081    -3937     \n   + Misses       9066     7760    -1306     \n   + Partials       96        0      -96\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/compression\\_bz2.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX2J6Mi5o) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_brotli.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX2Jyb3RsaS5o) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_snappy.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX3NuYXBweS5o) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_lz4.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX2x6NC5o) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_zstd.h](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX3pzdGQuaA==) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_bz2.cc](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX2J6Mi5jYw==) | `57.02% <0%> (-0.96%)` | :arrow_down: |\n   | [cpp/src/arrow/util/compression\\_lz4.cc](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX2x6NC5jYw==) | `74.78% <100%> (+0.87%)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression-test.cc](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uLXRlc3QuY2M=) | `99.12% <100%> (+0.02%)` | :arrow_up: |\n   | [cpp/src/arrow/util/compression\\_zstd.cc](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uX3pzdGQuY2M=) | `92.07% <100%> (+0.32%)` | :arrow_up: |\n   | ... and [88 more](https://codecov.io/gh/apache/arrow/pull/3024/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=footer). Last update [3e0958a...9b16e58](https://codecov.io/gh/apache/arrow/pull/3024?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-24T23:06:09.711+0000",
                    "updated": "2018-11-24T23:06:09.711+0000",
                    "started": "2018-11-24T23:06:09.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169166",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#issuecomment-441402996\n \n \n   I've fixed it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-24T23:18:58.115+0000",
                    "updated": "2018-11-24T23:18:58.115+0000",
                    "started": "2018-11-24T23:18:58.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169167",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 899238b915..f3e1106ef8 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -79,6 +79,14 @@ void CheckCodecRoundtrip(Compression::type ctype, const vector<uint8_t>& data) {\n \n   ASSERT_EQ(data, decompressed);\n \n+  // decompress with size with c2\n+  int64_t actual_decompressed_size;\n+  ASSERT_OK(c2->Decompress(compressed.size(), compressed.data(), decompressed.size(),\n+                           decompressed.data(), &actual_decompressed_size));\n+\n+  ASSERT_EQ(data, decompressed);\n+  ASSERT_EQ(data.size(), actual_decompressed_size);\n+\n   // compress with c2\n   int64_t actual_size2;\n   ASSERT_OK(c2->Compress(data.size(), data.data(), max_compressed_len, compressed.data(),\n@@ -90,6 +98,14 @@ void CheckCodecRoundtrip(Compression::type ctype, const vector<uint8_t>& data) {\n                            decompressed.data()));\n \n   ASSERT_EQ(data, decompressed);\n+\n+  // decompress with size with c1\n+  int64_t actual_decompressed_size2;\n+  ASSERT_OK(c1->Decompress(compressed.size(), compressed.data(), decompressed.size(),\n+                           decompressed.data(), &actual_decompressed_size2));\n+\n+  ASSERT_EQ(data, decompressed);\n+  ASSERT_EQ(data.size(), actual_decompressed_size2);\n }\n \n // Check the streaming compressor against one-shot decompression\ndiff --git a/cpp/src/arrow/util/compression.h b/cpp/src/arrow/util/compression.h\nindex f9359055bb..43174f4dba 100644\n--- a/cpp/src/arrow/util/compression.h\n+++ b/cpp/src/arrow/util/compression.h\n@@ -98,13 +98,30 @@ class ARROW_EXPORT Codec {\n \n   /// \\brief One-shot decompression function\n   ///\n-  /// output_len must be correct and therefore be obtained in advance.\n+  /// output_buffer_len must be correct and therefore be obtained in advance.\n   ///\n   /// \\note One-shot decompression is not always compatible with streaming\n   /// compression.  Depending on the codec (e.g. LZ4), different formats may\n   /// be used.\n-  virtual Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n-                            uint8_t* output_buffer) = 0;\n+  virtual Status Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer) = 0;\n+\n+  /// \\brief One-shot decompression function that also returns the\n+  /// actual decompressed size.\n+  ///\n+  /// \\param[in] input_len the number of bytes of compressed data.\n+  /// \\param[in] input the compressed data.\n+  /// \\param[in] output_buffer_len the number of bytes of buffer for\n+  /// decompressed data.\n+  /// \\param[in] output_buffer the buffer for decompressed data.\n+  /// \\param[out] output_len the actual decompressed size.\n+  ///\n+  /// \\note One-shot decompression is not always compatible with streaming\n+  /// compression.  Depending on the codec (e.g. LZ4), different formats may\n+  /// be used.\n+  virtual Status Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer,\n+                            int64_t* output_len) = 0;\n \n   /// \\brief One-shot compression function\n   ///\n@@ -115,7 +132,7 @@ class ARROW_EXPORT Codec {\n   /// be used.\n   virtual Status Compress(int64_t input_len, const uint8_t* input,\n                           int64_t output_buffer_len, uint8_t* output_buffer,\n-                          int64_t* output_length) = 0;\n+                          int64_t* output_len) = 0;\n \n   virtual int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) = 0;\n \ndiff --git a/cpp/src/arrow/util/compression_brotli.cc b/cpp/src/arrow/util/compression_brotli.cc\nindex 1b8ab85fff..89d099d6a6 100644\n--- a/cpp/src/arrow/util/compression_brotli.cc\n+++ b/cpp/src/arrow/util/compression_brotli.cc\n@@ -199,12 +199,21 @@ Status BrotliCodec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n }\n \n Status BrotliCodec::Decompress(int64_t input_len, const uint8_t* input,\n-                               int64_t output_len, uint8_t* output_buffer) {\n-  std::size_t output_size = output_len;\n+                               int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Decompress(input_len, input, output_buffer_len, output_buffer, nullptr);\n+}\n+\n+Status BrotliCodec::Decompress(int64_t input_len, const uint8_t* input,\n+                               int64_t output_buffer_len, uint8_t* output_buffer,\n+                               int64_t* output_len) {\n+  std::size_t output_size = output_buffer_len;\n   if (BrotliDecoderDecompress(input_len, input, &output_size, output_buffer) !=\n       BROTLI_DECODER_RESULT_SUCCESS) {\n     return Status::IOError(\"Corrupt brotli compressed data.\");\n   }\n+  if (output_len) {\n+    *output_len = output_size;\n+  }\n   return Status::OK();\n }\n \n@@ -215,14 +224,14 @@ int64_t BrotliCodec::MaxCompressedLen(int64_t input_len,\n \n Status BrotliCodec::Compress(int64_t input_len, const uint8_t* input,\n                              int64_t output_buffer_len, uint8_t* output_buffer,\n-                             int64_t* output_length) {\n-  std::size_t output_len = output_buffer_len;\n+                             int64_t* output_len) {\n+  std::size_t output_size = output_buffer_len;\n   if (BrotliEncoderCompress(kBrotliDefaultCompressionLevel, BROTLI_DEFAULT_WINDOW,\n-                            BROTLI_DEFAULT_MODE, input_len, input, &output_len,\n+                            BROTLI_DEFAULT_MODE, input_len, input, &output_size,\n                             output_buffer) == BROTLI_FALSE) {\n     return Status::IOError(\"Brotli compression failure.\");\n   }\n-  *output_length = output_len;\n+  *output_len = output_size;\n   return Status::OK();\n }\n \ndiff --git a/cpp/src/arrow/util/compression_brotli.h b/cpp/src/arrow/util/compression_brotli.h\nindex 0b403eebfd..59f97cda6b 100644\n--- a/cpp/src/arrow/util/compression_brotli.h\n+++ b/cpp/src/arrow/util/compression_brotli.h\n@@ -31,11 +31,14 @@ namespace util {\n // Brotli codec.\n class ARROW_EXPORT BrotliCodec : public Codec {\n  public:\n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \ndiff --git a/cpp/src/arrow/util/compression_bz2.cc b/cpp/src/arrow/util/compression_bz2.cc\nindex ae78f98ffc..407fb8255f 100644\n--- a/cpp/src/arrow/util/compression_bz2.cc\n+++ b/cpp/src/arrow/util/compression_bz2.cc\n@@ -238,8 +238,14 @@ Status BZ2Codec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n   return Status::OK();\n }\n \n-Status BZ2Codec::Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n-                            uint8_t* output_buffer) {\n+Status BZ2Codec::Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Status::NotImplemented(\"One-shot bz2 decompression not supported\");\n+}\n+\n+Status BZ2Codec::Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer,\n+                            int64_t* output_len) {\n   return Status::NotImplemented(\"One-shot bz2 decompression not supported\");\n }\n \n@@ -251,7 +257,7 @@ int64_t BZ2Codec::MaxCompressedLen(int64_t input_len,\n \n Status BZ2Codec::Compress(int64_t input_len, const uint8_t* input,\n                           int64_t output_buffer_len, uint8_t* output_buffer,\n-                          int64_t* output_length) {\n+                          int64_t* output_len) {\n   return Status::NotImplemented(\"One-shot bz2 compression not supported\");\n }\n \ndiff --git a/cpp/src/arrow/util/compression_bz2.h b/cpp/src/arrow/util/compression_bz2.h\nindex 304f4c0836..2146158825 100644\n--- a/cpp/src/arrow/util/compression_bz2.h\n+++ b/cpp/src/arrow/util/compression_bz2.h\n@@ -31,11 +31,14 @@ namespace util {\n // BZ2 codec.\n class ARROW_EXPORT BZ2Codec : public Codec {\n  public:\n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \ndiff --git a/cpp/src/arrow/util/compression_lz4.cc b/cpp/src/arrow/util/compression_lz4.cc\nindex 7ba1f12a7d..0acd54d057 100644\n--- a/cpp/src/arrow/util/compression_lz4.cc\n+++ b/cpp/src/arrow/util/compression_lz4.cc\n@@ -250,14 +250,23 @@ Status Lz4Codec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n   return Status::OK();\n }\n \n-Status Lz4Codec::Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n-                            uint8_t* output_buffer) {\n+Status Lz4Codec::Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Decompress(input_len, input, output_buffer_len, output_buffer, nullptr);\n+}\n+\n+Status Lz4Codec::Decompress(int64_t input_len, const uint8_t* input,\n+                            int64_t output_buffer_len, uint8_t* output_buffer,\n+                            int64_t* output_len) {\n   int64_t decompressed_size = LZ4_decompress_safe(\n       reinterpret_cast<const char*>(input), reinterpret_cast<char*>(output_buffer),\n-      static_cast<int>(input_len), static_cast<int>(output_len));\n+      static_cast<int>(input_len), static_cast<int>(output_buffer_len));\n   if (decompressed_size < 0) {\n     return Status::IOError(\"Corrupt Lz4 compressed data.\");\n   }\n+  if (output_len) {\n+    *output_len = decompressed_size;\n+  }\n   return Status::OK();\n }\n \n@@ -268,11 +277,11 @@ int64_t Lz4Codec::MaxCompressedLen(int64_t input_len,\n \n Status Lz4Codec::Compress(int64_t input_len, const uint8_t* input,\n                           int64_t output_buffer_len, uint8_t* output_buffer,\n-                          int64_t* output_length) {\n-  *output_length = LZ4_compress_default(\n+                          int64_t* output_len) {\n+  *output_len = LZ4_compress_default(\n       reinterpret_cast<const char*>(input), reinterpret_cast<char*>(output_buffer),\n       static_cast<int>(input_len), static_cast<int>(output_buffer_len));\n-  if (*output_length == 0) {\n+  if (*output_len == 0) {\n     return Status::IOError(\"Lz4 compression failure.\");\n   }\n   return Status::OK();\ndiff --git a/cpp/src/arrow/util/compression_lz4.h b/cpp/src/arrow/util/compression_lz4.h\nindex 8c4bcf5fc0..4d06f03c2c 100644\n--- a/cpp/src/arrow/util/compression_lz4.h\n+++ b/cpp/src/arrow/util/compression_lz4.h\n@@ -31,11 +31,14 @@ namespace util {\n // Lz4 codec.\n class ARROW_EXPORT Lz4Codec : public Codec {\n  public:\n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \ndiff --git a/cpp/src/arrow/util/compression_snappy.cc b/cpp/src/arrow/util/compression_snappy.cc\nindex cc5540899b..ab93c3ce32 100644\n--- a/cpp/src/arrow/util/compression_snappy.cc\n+++ b/cpp/src/arrow/util/compression_snappy.cc\n@@ -42,8 +42,22 @@ Status SnappyCodec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n }\n \n Status SnappyCodec::Decompress(int64_t input_len, const uint8_t* input,\n-                               int64_t ARROW_ARG_UNUSED(output_len),\n-                               uint8_t* output_buffer) {\n+                               int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Decompress(input_len, input, output_buffer_len, output_buffer, nullptr);\n+}\n+\n+Status SnappyCodec::Decompress(int64_t input_len, const uint8_t* input,\n+                               int64_t ARROW_ARG_UNUSED(output_buffer_len),\n+                               uint8_t* output_buffer, int64_t* output_len) {\n+  if (output_len) {\n+    size_t decompressed_size;\n+    if (!snappy::GetUncompressedLength(reinterpret_cast<const char*>(input),\n+                                       static_cast<size_t>(input_len),\n+                                       &decompressed_size)) {\n+      return Status::IOError(\"Corrupt snappy compressed data.\");\n+    }\n+    *output_len = static_cast<int64_t>(decompressed_size);\n+  }\n   if (!snappy::RawUncompress(reinterpret_cast<const char*>(input),\n                              static_cast<size_t>(input_len),\n                              reinterpret_cast<char*>(output_buffer))) {\n@@ -59,12 +73,12 @@ int64_t SnappyCodec::MaxCompressedLen(int64_t input_len,\n \n Status SnappyCodec::Compress(int64_t input_len, const uint8_t* input,\n                              int64_t ARROW_ARG_UNUSED(output_buffer_len),\n-                             uint8_t* output_buffer, int64_t* output_length) {\n-  size_t output_len;\n+                             uint8_t* output_buffer, int64_t* output_len) {\n+  size_t output_size;\n   snappy::RawCompress(reinterpret_cast<const char*>(input),\n                       static_cast<size_t>(input_len),\n-                      reinterpret_cast<char*>(output_buffer), &output_len);\n-  *output_length = static_cast<int64_t>(output_len);\n+                      reinterpret_cast<char*>(output_buffer), &output_size);\n+  *output_len = static_cast<int64_t>(output_size);\n   return Status::OK();\n }\n \ndiff --git a/cpp/src/arrow/util/compression_snappy.h b/cpp/src/arrow/util/compression_snappy.h\nindex 722f3556f4..7029400ab2 100644\n--- a/cpp/src/arrow/util/compression_snappy.h\n+++ b/cpp/src/arrow/util/compression_snappy.h\n@@ -30,11 +30,14 @@ namespace util {\n \n class ARROW_EXPORT SnappyCodec : public Codec {\n  public:\n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \ndiff --git a/cpp/src/arrow/util/compression_zlib.cc b/cpp/src/arrow/util/compression_zlib.cc\nindex 9fe163e781..686dffa640 100644\n--- a/cpp/src/arrow/util/compression_zlib.cc\n+++ b/cpp/src/arrow/util/compression_zlib.cc\n@@ -382,16 +382,20 @@ class GZipCodec::GZipCodecImpl {\n     decompressor_initialized_ = false;\n   }\n \n-  Status Decompress(int64_t input_length, const uint8_t* input, int64_t output_length,\n-                    uint8_t* output) {\n+  Status Decompress(int64_t input_length, const uint8_t* input,\n+                    int64_t output_buffer_length, uint8_t* output,\n+                    int64_t* output_length) {\n     if (!decompressor_initialized_) {\n       RETURN_NOT_OK(InitDecompressor());\n     }\n-    if (output_length == 0) {\n-      // The zlib library does not allow *output to be NULL, even when output_length\n-      // is 0 (inflate() will return Z_STREAM_ERROR). We don't consider this an\n-      // error, so bail early if no output is expected. Note that we don't signal\n-      // an error if the input actually contains compressed data.\n+    if (output_buffer_length == 0) {\n+      // The zlib library does not allow *output to be NULL, even when\n+      // output_buffer_length is 0 (inflate() will return Z_STREAM_ERROR). We don't\n+      // consider this an error, so bail early if no output is expected. Note that we\n+      // don't signal an error if the input actually contains compressed data.\n+      if (output_length) {\n+        *output_length = 0;\n+      }\n       return Status::OK();\n     }\n \n@@ -413,7 +417,7 @@ class GZipCodec::GZipCodecImpl {\n       stream_.next_in = const_cast<Bytef*>(reinterpret_cast<const Bytef*>(input));\n       stream_.avail_in = static_cast<uInt>(input_length);\n       stream_.next_out = reinterpret_cast<Bytef*>(output);\n-      stream_.avail_out = static_cast<uInt>(output_length);\n+      stream_.avail_out = static_cast<uInt>(output_buffer_length);\n \n       // We know the output size.  In this case, we can use Z_FINISH\n       // which is more efficient.\n@@ -423,7 +427,7 @@ class GZipCodec::GZipCodecImpl {\n       // Failure, buffer was too small\n       std::stringstream ss;\n       ss << \"Too small a buffer passed to GZipCodec. InputLength=\" << input_length\n-         << \" OutputLength=\" << output_length;\n+         << \" OutputLength=\" << output_buffer_length;\n       return Status::IOError(ss.str());\n     }\n \n@@ -434,6 +438,11 @@ class GZipCodec::GZipCodecImpl {\n       if (stream_.msg != NULL) ss << stream_.msg;\n       return Status::IOError(ss.str());\n     }\n+\n+    if (output_length) {\n+      *output_length = stream_.total_out;\n+    }\n+\n     return Status::OK();\n   }\n \n@@ -450,7 +459,7 @@ class GZipCodec::GZipCodecImpl {\n   }\n \n   Status Compress(int64_t input_length, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output, int64_t* output_length) {\n+                  uint8_t* output, int64_t* output_len) {\n     if (!compressor_initialized_) {\n       RETURN_NOT_OK(InitCompressor());\n     }\n@@ -478,7 +487,7 @@ class GZipCodec::GZipCodecImpl {\n     }\n \n     // Actual output length\n-    *output_length = output_buffer_len - stream_.avail_out;\n+    *output_len = output_buffer_len - stream_.avail_out;\n     return Status::OK();\n   }\n \n@@ -508,7 +517,13 @@ GZipCodec::~GZipCodec() {}\n \n Status GZipCodec::Decompress(int64_t input_length, const uint8_t* input,\n                              int64_t output_buffer_len, uint8_t* output) {\n-  return impl_->Decompress(input_length, input, output_buffer_len, output);\n+  return impl_->Decompress(input_length, input, output_buffer_len, output, nullptr);\n+}\n+\n+Status GZipCodec::Decompress(int64_t input_length, const uint8_t* input,\n+                             int64_t output_buffer_len, uint8_t* output,\n+                             int64_t* output_len) {\n+  return impl_->Decompress(input_length, input, output_buffer_len, output, output_len);\n }\n \n int64_t GZipCodec::MaxCompressedLen(int64_t input_length, const uint8_t* input) {\n@@ -517,8 +532,8 @@ int64_t GZipCodec::MaxCompressedLen(int64_t input_length, const uint8_t* input)\n \n Status GZipCodec::Compress(int64_t input_length, const uint8_t* input,\n                            int64_t output_buffer_len, uint8_t* output,\n-                           int64_t* output_length) {\n-  return impl_->Compress(input_length, input, output_buffer_len, output, output_length);\n+                           int64_t* output_len) {\n+  return impl_->Compress(input_length, input, output_buffer_len, output, output_len);\n }\n \n Status GZipCodec::MakeCompressor(std::shared_ptr<Compressor>* out) {\ndiff --git a/cpp/src/arrow/util/compression_zlib.h b/cpp/src/arrow/util/compression_zlib.h\nindex f934198ac1..9a5feaa290 100644\n--- a/cpp/src/arrow/util/compression_zlib.h\n+++ b/cpp/src/arrow/util/compression_zlib.h\n@@ -41,11 +41,14 @@ class ARROW_EXPORT GZipCodec : public Codec {\n   explicit GZipCodec(Format format = GZIP);\n   ~GZipCodec() override;\n \n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \ndiff --git a/cpp/src/arrow/util/compression_zstd.cc b/cpp/src/arrow/util/compression_zstd.cc\nindex 8bf02be3f2..083cae99b9 100644\n--- a/cpp/src/arrow/util/compression_zstd.cc\n+++ b/cpp/src/arrow/util/compression_zstd.cc\n@@ -199,24 +199,33 @@ Status ZSTDCodec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n   return Status::OK();\n }\n \n-Status ZSTDCodec::Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n-                             uint8_t* output_buffer) {\n+Status ZSTDCodec::Decompress(int64_t input_len, const uint8_t* input,\n+                             int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Decompress(input_len, input, output_buffer_len, output_buffer, nullptr);\n+}\n+\n+Status ZSTDCodec::Decompress(int64_t input_len, const uint8_t* input,\n+                             int64_t output_buffer_len, uint8_t* output_buffer,\n+                             int64_t* output_len) {\n   if (output_buffer == nullptr) {\n     // We may pass a NULL 0-byte output buffer but some zstd versions demand\n     // a valid pointer: https://github.com/facebook/zstd/issues/1385\n     static uint8_t empty_buffer[1];\n-    DCHECK_EQ(output_len, 0);\n+    DCHECK_EQ(output_buffer_len, 0);\n     output_buffer = empty_buffer;\n   }\n \n-  size_t ret = ZSTD_decompress(output_buffer, static_cast<size_t>(output_len), input,\n-                               static_cast<size_t>(input_len));\n+  size_t ret = ZSTD_decompress(output_buffer, static_cast<size_t>(output_buffer_len),\n+                               input, static_cast<size_t>(input_len));\n   if (ZSTD_isError(ret)) {\n     return ZSTDError(ret, \"ZSTD decompression failed: \");\n   }\n-  if (static_cast<int64_t>(ret) != output_len) {\n+  if (static_cast<int64_t>(ret) != output_buffer_len) {\n     return Status::IOError(\"Corrupt ZSTD compressed data.\");\n   }\n+  if (output_len) {\n+    *output_len = static_cast<int64_t>(ret);\n+  }\n   return Status::OK();\n }\n \n@@ -227,14 +236,14 @@ int64_t ZSTDCodec::MaxCompressedLen(int64_t input_len,\n \n Status ZSTDCodec::Compress(int64_t input_len, const uint8_t* input,\n                            int64_t output_buffer_len, uint8_t* output_buffer,\n-                           int64_t* output_length) {\n+                           int64_t* output_len) {\n   size_t ret =\n       ZSTD_compress(output_buffer, static_cast<size_t>(output_buffer_len), input,\n                     static_cast<size_t>(input_len), kZSTDDefaultCompressionLevel);\n   if (ZSTD_isError(ret)) {\n     return ZSTDError(ret, \"ZSTD compression failed: \");\n   }\n-  *output_length = static_cast<int64_t>(ret);\n+  *output_len = static_cast<int64_t>(ret);\n   return Status::OK();\n }\n \ndiff --git a/cpp/src/arrow/util/compression_zstd.h b/cpp/src/arrow/util/compression_zstd.h\nindex 06da15202a..8b05d8c80a 100644\n--- a/cpp/src/arrow/util/compression_zstd.h\n+++ b/cpp/src/arrow/util/compression_zstd.h\n@@ -31,11 +31,14 @@ namespace util {\n // ZSTD codec.\n class ARROW_EXPORT ZSTDCodec : public Codec {\n  public:\n-  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_len,\n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n                     uint8_t* output_buffer) override;\n \n+  Status Decompress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n+                    uint8_t* output_buffer, int64_t* output_len) override;\n+\n   Status Compress(int64_t input_len, const uint8_t* input, int64_t output_buffer_len,\n-                  uint8_t* output_buffer, int64_t* output_length) override;\n+                  uint8_t* output_buffer, int64_t* output_len) override;\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-25T21:56:09.560+0000",
                    "updated": "2018-11-25T21:56:09.560+0000",
                    "started": "2018-11-25T21:56:09.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169238",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#discussion_r236197704\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression-test.cc\n ##########\n @@ -79,6 +79,14 @@ void CheckCodecRoundtrip(Compression::type ctype, const vector<uint8_t>& data) {\n \n   ASSERT_EQ(data, decompressed);\n \n+  // decompress with size with c2\n \n Review comment:\n   It would be useful to test what happens if the size is wrong...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-26T10:31:56.020+0000",
                    "updated": "2018-11-26T10:31:56.020+0000",
                    "started": "2018-11-26T10:31:56.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169313",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#discussion_r236196535\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression_snappy.cc\n ##########\n @@ -42,8 +42,22 @@ Status SnappyCodec::MakeDecompressor(std::shared_ptr<Decompressor>* out) {\n }\n \n Status SnappyCodec::Decompress(int64_t input_len, const uint8_t* input,\n-                               int64_t ARROW_ARG_UNUSED(output_len),\n-                               uint8_t* output_buffer) {\n+                               int64_t output_buffer_len, uint8_t* output_buffer) {\n+  return Decompress(input_len, input, output_buffer_len, output_buffer, nullptr);\n+}\n+\n+Status SnappyCodec::Decompress(int64_t input_len, const uint8_t* input,\n+                               int64_t ARROW_ARG_UNUSED(output_buffer_len),\n+                               uint8_t* output_buffer, int64_t* output_len) {\n+  if (output_len) {\n+    size_t decompressed_size;\n+    if (!snappy::GetUncompressedLength(reinterpret_cast<const char*>(input),\n+                                       static_cast<size_t>(input_len),\n+                                       &decompressed_size)) {\n+      return Status::IOError(\"Corrupt snappy compressed data.\");\n+    }\n+    *output_len = static_cast<int64_t>(decompressed_size);\n \n Review comment:\n   You don't check that `output_buffer_len` is large enough here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-26T10:31:56.134+0000",
                    "updated": "2018-11-26T10:31:56.134+0000",
                    "started": "2018-11-26T10:31:56.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169314",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/169354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#issuecomment-441669162\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-3886 about adding another test\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-26T15:01:31.732+0000",
                    "updated": "2018-11-26T15:01:31.732+0000",
                    "started": "2018-11-26T15:01:31.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169354",
                    "issueId": "13199121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/worklog/170989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #3024: ARROW-3831: [C++] Add support for returning decompressed size\nURL: https://github.com/apache/arrow/pull/3024#issuecomment-443099978\n \n \n   I've created a pull request for it: #3057\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T05:56:53.142+0000",
                    "updated": "2018-11-30T05:56:53.142+0000",
                    "started": "2018-11-30T05:56:53.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "170989",
                    "issueId": "13199121"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d01aa23[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2545ea38[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6516d6c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6f88e471[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48a9a62e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c6c54ab[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f1f2b39[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@771cf7c7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7281b7dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1c267c2b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a46da75[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2a74b035[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Nov 25 21:56:00 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-25T21:56:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3831/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-11-17T22:47:38.000+0000",
        "updated": "2018-11-30T05:56:53.000+0000",
        "timeoriginalestimate": null,
        "description": "We can't know decompressed data size when we only have compressed data. The current {{arrow::util::Codec::Decompress()}} doesn't return decompressed data size. So we can't know which data in {{output_buffer}} can be used.\r\n\r\nFYI: {{arrow::util::Codec::Compress()}} returns compressed data size.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] arrow::util::Codec::Decompress() doesn't return decompressed data size",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16690849",
                    "id": "16690849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The current use case is that you already know the decompressed size, because the information was recorded somewhere (in e.g. a Parquet file).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-18T09:54:26.733+0000",
                    "updated": "2018-11-18T09:54:26.733+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16690956",
                    "id": "16690956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Do compression libraries provide the decompressed size consistently? Knowing the decompressed size a priori is useful to be able to pre-allocate memory",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-18T16:38:43.951+0000",
                    "updated": "2018-11-18T16:38:43.951+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16691138",
                    "id": "16691138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "I think that the actual decompressed size even when we know the expected decompressed size.\r\nFor example, we can validate the decompression result. If the actual decompressed size and the expected one is different, the compressed data will be broken (or decompress logic is broken).\r\n\r\nAs far as I know, zlib, LZ4 and Zstandard return the actual decompressed size.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-11-19T00:21:14.582+0000",
                    "updated": "2018-11-19T00:21:14.582+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16692089",
                    "id": "16692089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "What do you think about adding a second {{Decompress}} virtual method that will return the output length?\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/util/compression.h#L106\r\n\r\nThe default implementation could be NotImplemented for codecs that do not support this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-19T18:30:16.160+0000",
                    "updated": "2018-11-19T18:30:16.160+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16692103",
                    "id": "16692103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That sounds ok to me.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-19T18:43:16.354+0000",
                    "updated": "2018-11-19T18:43:16.354+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199121/comment/16698334",
                    "id": "16698334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3024\n[https://github.com/apache/arrow/pull/3024]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-25T21:56:00.155+0000",
                    "updated": "2018-11-25T21:56:00.155+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|s00m8g:",
        "customfield_12314139": null
    }
}