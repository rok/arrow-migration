{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13438157",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157",
    "key": "ARROW-16134",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": "N/A",
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16134/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090171857\n\n   @github-actions crossbow submit java-jars\n\n\n",
                    "created": "2022-04-06T11:42:35.455+0000",
                    "updated": "2022-04-06T11:42:35.455+0000",
                    "started": "2022-04-06T11:42:35.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753320",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090195323\n\n   https://issues.apache.org/jira/browse/ARROW-16134\n\n\n",
                    "created": "2022-04-06T12:10:25.941+0000",
                    "updated": "2022-04-06T12:10:25.941+0000",
                    "started": "2022-04-06T12:10:25.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753327",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090195343\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-06T12:10:27.787+0000",
                    "updated": "2022-04-06T12:10:27.787+0000",
                    "started": "2022-04-06T12:10:27.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753328",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090197646\n\n   Revision: b02f744733f2ea0082b1c79cd81ff475de6de8e6\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-1819](https://github.com/ursacomputing/crossbow/branches/all?query=actions-1819)\n   \n   |Task|Status|\n   |----|------|\n   |java-jars|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-1819-github-java-jars)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-1819-github-java-jars)|\n\n\n",
                    "created": "2022-04-06T12:13:16.686+0000",
                    "updated": "2022-04-06T12:13:16.686+0000",
                    "started": "2022-04-06T12:13:16.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753331",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r844181958\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n\nReview Comment:\n   Is this the expected behaviour when we are unable to allocate memory?\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, &last, word1, word1_len, word1_validity);\n\nReview Comment:\n   The current helper functions are taking too many arguments and are confusing to read\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, &last, word1, word1_len, word1_validity);\n\nReview Comment:\n   Will something like the below not simplify the code:\r\n   concat_word(char *out_buf, int *out_idx, char *in_buf, int in_len, bool in_validity, char *separator) {\r\n     if (!in_validity) { return; }\r\n   \r\n     // input is valid\r\n     if (*out_idx != 0) {\r\n       // copy the separator and update *out_idx\r\n     }\r\n     // copy the input and update *out_idx\r\n   }\r\n   \r\n   if you have this function, you can call this for each and every argument. Isn't this correct?\n\n\n\n",
                    "created": "2022-04-06T17:21:43.545+0000",
                    "updated": "2022-04-06T17:21:43.545+0000",
                    "started": "2022-04-06T17:21:43.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753537",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r844223641\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n\nReview Comment:\n   Oh right, this is a mistake, this need return true\r\n   I going change\n\n\n\n",
                    "created": "2022-04-06T17:47:35.435+0000",
                    "updated": "2022-04-06T17:47:35.435+0000",
                    "started": "2022-04-06T17:47:35.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753542",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r844238604\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, &last, word1, word1_len, word1_validity);\n\nReview Comment:\n   This is a beautiful abstraction, yes it works!\r\n   Changed.\n\n\n\n",
                    "created": "2022-04-06T18:04:07.825+0000",
                    "updated": "2022-04-06T18:04:07.825+0000",
                    "started": "2022-04-06T18:04:07.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753562",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090604211\n\n   @github-actions crossbow submit java-jars\n\n\n",
                    "created": "2022-04-06T18:39:51.474+0000",
                    "updated": "2022-04-06T18:39:51.474+0000",
                    "started": "2022-04-06T18:39:51.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753587",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1090605123\n\n   Revision: 4c0dbbec0c993c24223887fa505c7dcd97ade398\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-1820](https://github.com/ursacomputing/crossbow/branches/all?query=actions-1820)\n   \n   |Task|Status|\n   |----|------|\n   |java-jars|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-1820-github-java-jars)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-1820-github-java-jars)|\n\n\n",
                    "created": "2022-04-06T18:41:04.190+0000",
                    "updated": "2022-04-06T18:41:04.190+0000",
                    "started": "2022-04-06T18:41:04.190+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753589",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r844658304\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n\nReview Comment:\n   Can you check the implementation of other Gandiva functions? I dont think an error in memory allocation should return a valid result... I believe an error should be thrown with the memory allocation error.. \r\n   \r\n   Can you check with Projjal on this?\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n\nReview Comment:\n   Please remove unused local variables.. we dont need last and next any more\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, word1, word1_len, word1_validity, separator, separator_len);\n+  concat_word(tmp, &out_tmp, word2, word2_len, word2_validity, separator, separator_len);\n \n+  *out_valid = true;\n+  *out_len = out_tmp;\n   return out;\n }\n \n FORCE_INLINE\n-const char* concat_ws_utf8_utf8_utf8(int64_t context, const char* separator,\n-                                     int32_t separator_len, const char* word1,\n-                                     int32_t word1_len, const char* word2,\n-                                     int32_t word2_len, const char* word3,\n-                                     int32_t word3_len, int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || word3_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+const char* concat_ws_utf8_utf8_utf8(\n+    int64_t context, const char* separator, int32_t separator_len,\n+    bool separator_validity, const char* word1, int32_t word1_len, bool word1_validity,\n+    const char* word2, int32_t word2_len, bool word2_validity, const char* word3,\n+    int32_t word3_len, bool word3_validity, bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len * 2;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n+  if (word3_validity) {\n+    *out_len += word3_len;\n+  }\n \n-  *out_len = word1_len + word2_len + word3_len + (2 * separator_len);\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n-  tmp += word2_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word3, word3_len);\n+  int out_tmp = 0;\n\nReview Comment:\n   Rename this to out_idx\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, word1, word1_len, word1_validity, separator, separator_len);\n+  concat_word(tmp, &out_tmp, word2, word2_len, word2_validity, separator, separator_len);\n \n+  *out_valid = true;\n+  *out_len = out_tmp;\n   return out;\n }\n \n FORCE_INLINE\n-const char* concat_ws_utf8_utf8_utf8(int64_t context, const char* separator,\n-                                     int32_t separator_len, const char* word1,\n-                                     int32_t word1_len, const char* word2,\n-                                     int32_t word2_len, const char* word3,\n-                                     int32_t word3_len, int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || word3_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+const char* concat_ws_utf8_utf8_utf8(\n+    int64_t context, const char* separator, int32_t separator_len,\n+    bool separator_validity, const char* word1, int32_t word1_len, bool word1_validity,\n+    const char* word2, int32_t word2_len, bool word2_validity, const char* word3,\n+    int32_t word3_len, bool word3_validity, bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len * 2;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n+  if (word3_validity) {\n+    *out_len += word3_len;\n+  }\n \n-  *out_len = word1_len + word2_len + word3_len + (2 * separator_len);\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n\nReview Comment:\n   Please remove unused variables.. Same comment applies to all variants of this function\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, word1, word1_len, word1_validity, separator, separator_len);\n+  concat_word(tmp, &out_tmp, word2, word2_len, word2_validity, separator, separator_len);\n \n+  *out_valid = true;\n+  *out_len = out_tmp;\n   return out;\n }\n \n FORCE_INLINE\n-const char* concat_ws_utf8_utf8_utf8(int64_t context, const char* separator,\n-                                     int32_t separator_len, const char* word1,\n-                                     int32_t word1_len, const char* word2,\n-                                     int32_t word2_len, const char* word3,\n-                                     int32_t word3_len, int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || word3_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+const char* concat_ws_utf8_utf8_utf8(\n+    int64_t context, const char* separator, int32_t separator_len,\n+    bool separator_validity, const char* word1, int32_t word1_len, bool word1_validity,\n+    const char* word2, int32_t word2_len, bool word2_validity, const char* word3,\n+    int32_t word3_len, bool word3_validity, bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len * 2;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n+  if (word3_validity) {\n+    *out_len += word3_len;\n+  }\n \n-  *out_len = word1_len + word2_len + word3_len + (2 * separator_len);\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n\nReview Comment:\n   See the comment in the previous function... I believe this should return an error\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n\nReview Comment:\n   rename this to out_idx. This is the offset in the out array that is being written to\n\n\n\n",
                    "created": "2022-04-07T04:48:45.634+0000",
                    "updated": "2022-04-07T04:48:45.634+0000",
                    "started": "2022-04-07T04:48:45.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753841",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/753963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r844982735\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,213 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n+  *out_idx += in_len;\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n     return \"\";\n   }\n \n+  bool last = false;\n+  bool next = false;\n+\n   char* tmp = out;\n-  memcpy(tmp, word1, word1_len);\n-  tmp += word1_len;\n-  memcpy(tmp, separator, separator_len);\n-  tmp += separator_len;\n-  memcpy(tmp, word2, word2_len);\n+  int out_tmp = 0;\n+\n+  concat_word(tmp, &out_tmp, word1, word1_len, word1_validity, separator, separator_len);\n+  concat_word(tmp, &out_tmp, word2, word2_len, word2_validity, separator, separator_len);\n \n+  *out_valid = true;\n+  *out_len = out_tmp;\n   return out;\n }\n \n FORCE_INLINE\n-const char* concat_ws_utf8_utf8_utf8(int64_t context, const char* separator,\n-                                     int32_t separator_len, const char* word1,\n-                                     int32_t word1_len, const char* word2,\n-                                     int32_t word2_len, const char* word3,\n-                                     int32_t word3_len, int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || word3_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+const char* concat_ws_utf8_utf8_utf8(\n+    int64_t context, const char* separator, int32_t separator_len,\n+    bool separator_validity, const char* word1, int32_t word1_len, bool word1_validity,\n+    const char* word2, int32_t word2_len, bool word2_validity, const char* word3,\n+    int32_t word3_len, bool word3_validity, bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len * 2;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n+  if (word3_validity) {\n+    *out_len += word3_len;\n+  }\n \n-  *out_len = word1_len + word2_len + word3_len + (2 * separator_len);\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = true;\n\nReview Comment:\n   I'm waiting the reply from Projjal, but I changed again to false, following other function resolution for this\n\n\n\n",
                    "created": "2022-04-07T10:37:19.075+0000",
                    "updated": "2022-04-07T10:37:19.075+0000",
                    "started": "2022-04-07T10:37:19.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753963",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r847537337\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,201 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n\nReview Comment:\n   Can you add a test where the first string is an empty string?\r\n   \r\n   ws_concat of \"\", \"hello\" with a separator of '-'. This implementation return \"hello\", should it \"-hello\" instead. Can you check?\n\n\n\n",
                    "created": "2022-04-11T16:47:25.004+0000",
                    "updated": "2022-04-11T16:47:25.004+0000",
                    "started": "2022-04-11T16:47:25.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755311",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r848551732\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,201 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n+                 bool in_validity, const char* separator, int separator_len) {\n+  if (!in_validity) {\n+    return;\n+  }\n+\n+  // input is valid\n+  if (*out_idx != 0) {\n+    // copy the separator and update *out_idx\n+    memcpy(out_buf + *out_idx, separator, separator_len);\n+    *out_idx += separator_len;\n+  }\n+  // copy the input and update *out_idx\n+  memcpy(out_buf + *out_idx, in_buf, in_len);\n\nReview Comment:\n   Yeah!\r\n   Look the last change, I worked on this\n\n\n\n",
                    "created": "2022-04-12T15:08:36.692+0000",
                    "updated": "2022-04-12T15:08:36.692+0000",
                    "started": "2022-04-12T15:08:36.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755819",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r848571206\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2395,19 +2395,22 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n \n FORCE_INLINE\n void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n-                 bool in_validity, const char* separator, int separator_len) {\n+                 bool in_validity, const char* separator, int separator_len,\n+                 bool* seenAnyValidInput) {\n   if (!in_validity) {\n+    *seenAnyValidInput = false;\n\nReview Comment:\n   This is wrong. ws_concat(\"\", null, \"world\", \"-\") should return \"-world\"\r\n   \r\n   This would return \"world\" because seenAnyValidInput is getting reset to false due to the 2nd arg that is null.\r\n   \r\n   The logic should be simple:\r\n   if (!in_validity) {\r\n     return;\r\n   }\r\n   \r\n   if (seenAnyValidInput) {\r\n     // copy the separator and update out_idx\r\n   }\r\n   \r\n   // copy the input\r\n   \r\n   The caller will do the following:\r\n   seenAnyValidInput = false;\r\n   concat_word(..., in_validity, ...);\r\n   seenAnyValidInput = seenAnyValidInput || in_validity;\n\n\n\n",
                    "created": "2022-04-12T15:26:29.375+0000",
                    "updated": "2022-04-12T15:26:29.375+0000",
                    "started": "2022-04-12T15:26:29.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755832",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r848592940\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2395,19 +2395,22 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n \n FORCE_INLINE\n void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n-                 bool in_validity, const char* separator, int separator_len) {\n+                 bool in_validity, const char* separator, int separator_len,\n+                 bool* seenAnyValidInput) {\n   if (!in_validity) {\n+    *seenAnyValidInput = false;\n\nReview Comment:\n   Oh right, now I can see my mistake\r\n   thank you!\r\n   \n\n\n\n",
                    "created": "2022-04-12T15:46:30.853+0000",
                    "updated": "2022-04-12T15:46:30.853+0000",
                    "started": "2022-04-12T15:46:30.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755849",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r848595488\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2395,19 +2395,22 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n \n FORCE_INLINE\n void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n-                 bool in_validity, const char* separator, int separator_len) {\n+                 bool in_validity, const char* separator, int separator_len,\n+                 bool* seenAnyValidInput) {\n   if (!in_validity) {\n+    *seenAnyValidInput = false;\n\nReview Comment:\n   I made a new push\n\n\n\n",
                    "created": "2022-04-12T15:48:59.010+0000",
                    "updated": "2022-04-12T15:48:59.010+0000",
                    "started": "2022-04-12T15:48:59.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755850",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/755888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r848666945\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2398,19 +2398,18 @@ void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n                  bool in_validity, const char* separator, int separator_len,\n                  bool* seenAnyValidInput) {\n   if (!in_validity) {\n-    *seenAnyValidInput = false;\n     return;\n   }\n \n   // input is valid\n-  if (*seenAnyValidInput || *out_idx > 0) {\n+  if (*seenAnyValidInput) {\n     // copy the separator and update *out_idx\n     memcpy(out_buf + *out_idx, separator, separator_len);\n     *out_idx += separator_len;\n   }\n   // copy the input and update *out_idx\n   memcpy(out_buf + *out_idx, in_buf, in_len);\n-  *seenAnyValidInput = true;\n+  *seenAnyValidInput = *seenAnyValidInput || in_validity;\n\nReview Comment:\n   You know that in_validity is true. You can just set\r\n   *seenAnyValidInput = true;\n\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2393,152 +2393,239 @@ const char* byte_substr_binary_int32_int32(gdv_int64 context, const char* text,\n   return ret;\n }\n \n+FORCE_INLINE\n+void concat_word(char* tmp, int* out_tmp, bool* last, const char* word, int word_len,\n+                 bool word_validity) {\n+  if (word_validity) {\n+    memcpy(tmp + *out_tmp, word, word_len);\n+    *out_tmp += word_len;\n+    *last = true;\n+  }\n+}\n+\n+FORCE_INLINE\n+void concat_separator(char* tmp, int* out_tmp, const char* separator, int separator_len,\n+                      bool last, bool next) {\n+  if (last && next) {\n+    memcpy(tmp + *out_tmp, separator, separator_len);\n+    *out_tmp += separator_len;\n+  }\n+}\n+\n FORCE_INLINE\n const char* concat_ws_utf8_utf8(int64_t context, const char* separator,\n-                                int32_t separator_len, const char* word1,\n-                                int32_t word1_len, const char* word2, int32_t word2_len,\n-                                int32_t* out_len) {\n-  if (word1_len < 0 || word2_len < 0 || separator_len < 0) {\n-    gdv_fn_context_set_error_msg(context, \"All words can not be null.\");\n+                                int32_t separator_len, bool separator_validity,\n+                                const char* word1, int32_t word1_len, bool word1_validity,\n+                                const char* word2, int32_t word2_len, bool word2_validity,\n+                                bool* out_valid, int32_t* out_len) {\n+  *out_len = 0;\n+  // If separator is null, always return null\n+  if (!separator_validity) {\n     *out_len = 0;\n+    *out_valid = false;\n     return \"\";\n   }\n+  *out_len += separator_len;\n+  if (word1_validity) {\n+    *out_len += word1_len;\n+  }\n+  if (word2_validity) {\n+    *out_len += word2_len;\n+  }\n \n-  *out_len = word1_len + separator_len + word2_len;\n   char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n   if (out == nullptr) {\n-    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n     *out_len = 0;\n+    *out_valid = false;\n\nReview Comment:\n   This is not resolved yet. I believe you need to return an error message when you run into a memory allocation. Please check with Projjal regarding this\n\n\n\n",
                    "created": "2022-04-12T17:05:45.331+0000",
                    "updated": "2022-04-12T17:05:45.331+0000",
                    "started": "2022-04-12T17:05:45.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755888",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/756303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#discussion_r849326821\n\n\n##########\ncpp/src/gandiva/precompiled/string_ops.cc:\n##########\n@@ -2398,19 +2398,18 @@ void concat_word(char* out_buf, int* out_idx, const char* in_buf, int in_len,\n                  bool in_validity, const char* separator, int separator_len,\n                  bool* seenAnyValidInput) {\n   if (!in_validity) {\n-    *seenAnyValidInput = false;\n     return;\n   }\n \n   // input is valid\n-  if (*seenAnyValidInput || *out_idx > 0) {\n+  if (*seenAnyValidInput) {\n     // copy the separator and update *out_idx\n     memcpy(out_buf + *out_idx, separator, separator_len);\n     *out_idx += separator_len;\n   }\n   // copy the input and update *out_idx\n   memcpy(out_buf + *out_idx, in_buf, in_len);\n-  *seenAnyValidInput = true;\n+  *seenAnyValidInput = *seenAnyValidInput || in_validity;\n\nReview Comment:\n   Done\n\n\n\n",
                    "created": "2022-04-13T10:25:51.727+0000",
                    "updated": "2022-04-13T10:25:51.727+0000",
                    "started": "2022-04-13T10:25:51.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756303",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/757068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on PR #12803:\nURL: https://github.com/apache/arrow/pull/12803#issuecomment-1099381630\n\n   @vvellanki I added the error messages\n\n\n",
                    "created": "2022-04-14T16:32:44.862+0000",
                    "updated": "2022-04-14T16:32:44.862+0000",
                    "started": "2022-04-14T16:32:44.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757068",
                    "issueId": "13438157"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/worklog/758238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra closed pull request #12803: ARROW-16134: [C++][GANDIVA] Fix Concat_WS errors return\nURL: https://github.com/apache/arrow/pull/12803\n\n\n",
                    "created": "2022-04-19T03:26:24.636+0000",
                    "updated": "2022-04-19T03:26:24.636+0000",
                    "started": "2022-04-19T03:26:24.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758238",
                    "issueId": "13438157"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@263731d6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c5180cc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36e1b94a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@36b608ba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3217bbe4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2764e7bf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c7431f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a01091c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15c65923[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@151f1d3b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28d945d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a82f037[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 19 03:26:30 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-19T03:26:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16134/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-04-06T11:29:40.000+0000",
        "updated": "2022-04-19T21:01:26.000+0000",
        "timeoriginalestimate": null,
        "description": "This changes is to solve one fail in regression test for this function",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][GANDIVA] Fix Concat_WS errors return",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13438157/comment/17524028",
                    "id": "17524028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 12803\n[https://github.com/apache/arrow/pull/12803]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2022-04-19T03:26:30.230+0000",
                    "updated": "2022-04-19T03:26:30.230+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z117qw:",
        "customfield_12314139": null
    }
}