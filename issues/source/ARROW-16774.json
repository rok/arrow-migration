{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13448796",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796",
    "key": "ARROW-16774",
    "fields": {
        "parent": {
            "id": "13448791",
            "key": "ARROW-16771",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13448791",
            "fields": {
                "summary": "[Format][C++][Go] Adding Run-Length encoding to Arrow",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                    "id": "3",
                    "description": "A task that needs to be done.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                    "name": "Task",
                    "subtask": false,
                    "avatarId": 21148
                }
            }
        },
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zagto",
            "name": "zagto",
            "key": "JIRAUSER286565",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tobias Zagorni",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zagto",
            "name": "zagto",
            "key": "JIRAUSER286565",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tobias Zagorni",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16774/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796/worklog/793181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13657:\nURL: https://github.com/apache/arrow/pull/13657#issuecomment-1190167731\n\n   https://issues.apache.org/jira/browse/ARROW-16774\n\n\n",
                    "created": "2022-07-20T11:39:35.272+0000",
                    "updated": "2022-07-20T11:39:35.272+0000",
                    "started": "2022-07-20T11:39:35.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793181",
                    "issueId": "13448796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796/worklog/800142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13657:\nURL: https://github.com/apache/arrow/pull/13657#issuecomment-1212607034\n\n   @save-buffer There might be a bit of background reading here but do you want to take a look at the filter kernel itself?\n\n\n",
                    "created": "2022-08-12T00:08:33.311+0000",
                    "updated": "2022-08-12T00:08:33.311+0000",
                    "started": "2022-08-12T00:08:33.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800142",
                    "issueId": "13448796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796/worklog/800389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on code in PR #13657:\nURL: https://github.com/apache/arrow/pull/13657#discussion_r944919307\n\n\n##########\ncpp/src/arrow/util/rle_util.cc:\n##########\n@@ -0,0 +1,24 @@\n+#include \"arrow/util/rle_util.h\"\n+#include <algorithm>\n+#include \"arrow/builder.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+int64_t FindPhysicalOffset(const int64_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset) {\n+  auto it = std::upper_bound(accumulated_run_lengths,\n+                             accumulated_run_lengths + physical_length, logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n+}\n+\n+void AddArtificialOffsetInChildArray(ArrayData* array, int64_t offset) {\n\nReview Comment:\n   You could make this return `Status` and do `RETURN_NOT_OK`. I know this is a testing function but I'd say it's probably better that the test wraps this function in `ARROW_CHECK_OK`\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_selection.cc:\n##########\n@@ -841,6 +907,222 @@ Status PrimitiveFilter(KernelContext* ctx, const ExecSpan& batch, ExecResult* ou\n   return Status::OK();\n }\n \n+/// \\brief The Filter implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather the physical C type. This way we only\n+/// generate one take function for each byte width. We use the same\n+/// implementation here for boolean and fixed-byte-size inputs with some\n+/// template specialization.\n+template <typename ArrowType>\n+class RLEPrimitiveFilterImpl {\n+ public:\n+  using T = typename std::conditional<std::is_same<ArrowType, BooleanType>::value,\n+                                      uint8_t, typename ArrowType::c_type>::type;\n+\n+  RLEPrimitiveFilterImpl(const ArraySpan& values, const ArraySpan& filter,\n+                         FilterOptions::NullSelectionBehavior null_selection,\n+                         ArrayData* out_arr)\n+      : values_{values},\n+        values_is_valid_(values.child_data[0].buffers[0].data),\n+        values_data_(reinterpret_cast<const T*>(values.child_data[0].buffers[1].data)),\n+        filter_{filter},\n+        filter_is_valid_(filter.child_data[0].buffers[0].data),\n+        filter_data_(filter.child_data[0].buffers[1].data),\n+        null_selection_(null_selection),\n+        out_logical_length_(out_arr->length) {\n+    if (out_arr->child_data[0]->buffers[0] != nullptr) {\n+      // May not be allocated if neither filter nor values contains nulls\n+      out_is_valid_ = out_arr->child_data[0]->buffers[0]->mutable_data();\n+    }\n+    assert(out_arr->offset == 0);\n+    out_position_ = 0;\n+    out_run_length_ = out_arr->GetMutableValues<int64_t>(0, 0);\n+    out_data_ = reinterpret_cast<T*>(out_arr->child_data[0]->buffers[1]->mutable_data());\n+  }\n+\n+  void Exec() {\n\nReview Comment:\n   So I'd have thought that you could just run the existing Filter function on the run lengths array and the values array and be done. I think the reason you had to rewrite it is because an RLE array's `length` field is the logical length and not the number of runs, is that correct? \n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_selection.cc:\n##########\n@@ -841,6 +907,222 @@ Status PrimitiveFilter(KernelContext* ctx, const ExecSpan& batch, ExecResult* ou\n   return Status::OK();\n }\n \n+/// \\brief The Filter implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather the physical C type. This way we only\n+/// generate one take function for each byte width. We use the same\n+/// implementation here for boolean and fixed-byte-size inputs with some\n+/// template specialization.\n+template <typename ArrowType>\n+class RLEPrimitiveFilterImpl {\n+ public:\n+  using T = typename std::conditional<std::is_same<ArrowType, BooleanType>::value,\n+                                      uint8_t, typename ArrowType::c_type>::type;\n+\n+  RLEPrimitiveFilterImpl(const ArraySpan& values, const ArraySpan& filter,\n+                         FilterOptions::NullSelectionBehavior null_selection,\n+                         ArrayData* out_arr)\n+      : values_{values},\n+        values_is_valid_(values.child_data[0].buffers[0].data),\n+        values_data_(reinterpret_cast<const T*>(values.child_data[0].buffers[1].data)),\n+        filter_{filter},\n+        filter_is_valid_(filter.child_data[0].buffers[0].data),\n+        filter_data_(filter.child_data[0].buffers[1].data),\n+        null_selection_(null_selection),\n+        out_logical_length_(out_arr->length) {\n+    if (out_arr->child_data[0]->buffers[0] != nullptr) {\n+      // May not be allocated if neither filter nor values contains nulls\n+      out_is_valid_ = out_arr->child_data[0]->buffers[0]->mutable_data();\n+    }\n+    assert(out_arr->offset == 0);\n+    out_position_ = 0;\n+    out_run_length_ = out_arr->GetMutableValues<int64_t>(0, 0);\n+    out_data_ = reinterpret_cast<T*>(out_arr->child_data[0]->buffers[1]->mutable_data());\n+  }\n+\n+  void Exec() {\n+    auto WriteNotNull = [&](int64_t in_position, int64_t run_length) {\n+      bit_util::SetBit(out_is_valid_, out_position_);\n+      out_run_length_[out_position_] = run_length;\n+      // Increments out_position_\n+      WriteValue(in_position, run_length);\n+    };\n+\n+    auto WriteMaybeNull = [&](int64_t in_position, int64_t run_length) {\n+      bit_util::SetBitTo(out_is_valid_, out_position_,\n+                         bit_util::GetBit(values_is_valid_, in_position));\n+      out_run_length_[out_position_] = run_length;\n+      // Increments out_position_\n+      WriteValue(in_position, run_length);\n+    };\n+\n+    int64_t accumulated_run_length = 0;\n+    if (values_is_valid_ == NULLPTR) {\n+      if (filter_is_valid_ == NULLPTR) {\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              if (bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteValue(value_index, accumulated_run_length);\n+              }\n+            });\n+      } else if (null_selection_ == FilterOptions::DROP) {\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              if (bit_util::GetBit(filter_is_valid_, filter_index) &&\n+                  bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteValue(value_index, accumulated_run_length);\n+              }\n+            });\n+      } else {  // null_selection == FilterOptions::EMIT_NULL\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              const bool is_valid = bit_util::GetBit(filter_is_valid_, filter_index);\n+              if (is_valid && bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteNotNull(value_index, accumulated_run_length);\n+              }\n+              if (!is_valid) {\n+                accumulated_run_length += run_length;\n+                bit_util::ClearBit(out_is_valid_, out_position_);\n+                WriteNull(accumulated_run_length);\n+              }\n+            });\n+      }\n+    } else {  // values_is_valid_ exists. Input may have nulls\n+      if (filter_is_valid_ == NULLPTR) {\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              if (bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteMaybeNull(value_index, accumulated_run_length);\n+              }\n+            });\n+      } else if (null_selection_ == FilterOptions::DROP) {\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              if (bit_util::GetBit(filter_is_valid_, filter_index) &&\n+                  bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteMaybeNull(value_index, accumulated_run_length);\n+              }\n+            });\n+      } else {  // null_selection == FilterOptions::EMIT_NULL\n+        rle_util::VisitMergedRuns(\n+            values_, filter_,\n+            [&](int64_t run_length, int64_t value_index, int64_t filter_index) {\n+              const bool is_valid = bit_util::GetBit(filter_is_valid_, filter_index);\n+              if (is_valid && bit_util::GetBit(filter_data_, filter_index)) {\n+                accumulated_run_length += run_length;\n+                WriteMaybeNull(value_index, accumulated_run_length);\n+              }\n+              if (!is_valid) {\n+                accumulated_run_length += run_length;\n+                bit_util::ClearBit(out_is_valid_, out_position_);\n+                WriteNull(accumulated_run_length);\n+              }\n+            });\n+      }\n+    }\n+    out_logical_length_ = accumulated_run_length;\n+  }\n+\n+  // Write the next out_position given the selected in_position for the input\n+  // data and advance out_position\n+  void WriteValue(int64_t in_position, int64_t run_length) {\n+    out_run_length_[out_position_] = run_length;\n+    out_data_[out_position_++] = values_data_[in_position];\n+  }\n+\n+  void WriteNull(int64_t run_length) {\n+    // Zero the memory\n+    out_run_length_[out_position_] = run_length;\n+    out_data_[out_position_++] = T{};\n+  }\n+\n+ private:\n+  const ArraySpan& values_;\n+  const uint8_t* values_is_valid_;\n+  const T* values_data_;\n+  const ArraySpan& filter_;\n+  const uint8_t* filter_is_valid_;\n+  const uint8_t* filter_data_;\n+  FilterOptions::NullSelectionBehavior null_selection_;\n+  uint8_t* out_is_valid_;\n+  int64_t* out_run_length_;\n+  T* out_data_;\n+  int64_t& out_logical_length_;\n\nReview Comment:\n   I personally don't have a strong opinion about this but I think according to the style guide this should be a pointer (since it's an output). \n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_selection.cc:\n##########\n@@ -841,6 +907,222 @@ Status PrimitiveFilter(KernelContext* ctx, const ExecSpan& batch, ExecResult* ou\n   return Status::OK();\n }\n \n+/// \\brief The Filter implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather the physical C type. This way we only\n+/// generate one take function for each byte width. We use the same\n+/// implementation here for boolean and fixed-byte-size inputs with some\n+/// template specialization.\n+template <typename ArrowType>\n+class RLEPrimitiveFilterImpl {\n+ public:\n+  using T = typename std::conditional<std::is_same<ArrowType, BooleanType>::value,\n+                                      uint8_t, typename ArrowType::c_type>::type;\n+\n+  RLEPrimitiveFilterImpl(const ArraySpan& values, const ArraySpan& filter,\n+                         FilterOptions::NullSelectionBehavior null_selection,\n+                         ArrayData* out_arr)\n+      : values_{values},\n+        values_is_valid_(values.child_data[0].buffers[0].data),\n+        values_data_(reinterpret_cast<const T*>(values.child_data[0].buffers[1].data)),\n+        filter_{filter},\n+        filter_is_valid_(filter.child_data[0].buffers[0].data),\n+        filter_data_(filter.child_data[0].buffers[1].data),\n+        null_selection_(null_selection),\n+        out_logical_length_(out_arr->length) {\n+    if (out_arr->child_data[0]->buffers[0] != nullptr) {\n+      // May not be allocated if neither filter nor values contains nulls\n+      out_is_valid_ = out_arr->child_data[0]->buffers[0]->mutable_data();\n+    }\n+    assert(out_arr->offset == 0);\n+    out_position_ = 0;\n+    out_run_length_ = out_arr->GetMutableValues<int64_t>(0, 0);\n+    out_data_ = reinterpret_cast<T*>(out_arr->child_data[0]->buffers[1]->mutable_data());\n+  }\n+\n+  void Exec() {\n+    auto WriteNotNull = [&](int64_t in_position, int64_t run_length) {\n+      bit_util::SetBit(out_is_valid_, out_position_);\n+      out_run_length_[out_position_] = run_length;\n+      // Increments out_position_\n+      WriteValue(in_position, run_length);\n+    };\n+\n+    auto WriteMaybeNull = [&](int64_t in_position, int64_t run_length) {\n+      bit_util::SetBitTo(out_is_valid_, out_position_,\n+                         bit_util::GetBit(values_is_valid_, in_position));\n+      out_run_length_[out_position_] = run_length;\n+      // Increments out_position_\n+      WriteValue(in_position, run_length);\n+    };\n+\n+    int64_t accumulated_run_length = 0;\n+    if (values_is_valid_ == NULLPTR) {\n\nReview Comment:\n   Could you break up this `if` into two functions? I'm having trouble following the control flow with the nested ifs. Maybe something like `Exec_ValuesNotNull`, `Exec_ValuesMaybeNull`\n\n\n\n",
                    "created": "2022-08-12T22:59:39.205+0000",
                    "updated": "2022-08-12T22:59:39.205+0000",
                    "started": "2022-08-12T22:59:39.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800389",
                    "issueId": "13448796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796/worklog/800391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13657:\nURL: https://github.com/apache/arrow/pull/13657#discussion_r944951683\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_selection.cc:\n##########\n@@ -841,6 +907,222 @@ Status PrimitiveFilter(KernelContext* ctx, const ExecSpan& batch, ExecResult* ou\n   return Status::OK();\n }\n \n+/// \\brief The Filter implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather the physical C type. This way we only\n+/// generate one take function for each byte width. We use the same\n+/// implementation here for boolean and fixed-byte-size inputs with some\n+/// template specialization.\n+template <typename ArrowType>\n+class RLEPrimitiveFilterImpl {\n+ public:\n+  using T = typename std::conditional<std::is_same<ArrowType, BooleanType>::value,\n+                                      uint8_t, typename ArrowType::c_type>::type;\n+\n+  RLEPrimitiveFilterImpl(const ArraySpan& values, const ArraySpan& filter,\n+                         FilterOptions::NullSelectionBehavior null_selection,\n+                         ArrayData* out_arr)\n+      : values_{values},\n+        values_is_valid_(values.child_data[0].buffers[0].data),\n+        values_data_(reinterpret_cast<const T*>(values.child_data[0].buffers[1].data)),\n+        filter_{filter},\n+        filter_is_valid_(filter.child_data[0].buffers[0].data),\n+        filter_data_(filter.child_data[0].buffers[1].data),\n+        null_selection_(null_selection),\n+        out_logical_length_(out_arr->length) {\n+    if (out_arr->child_data[0]->buffers[0] != nullptr) {\n+      // May not be allocated if neither filter nor values contains nulls\n+      out_is_valid_ = out_arr->child_data[0]->buffers[0]->mutable_data();\n+    }\n+    assert(out_arr->offset == 0);\n+    out_position_ = 0;\n+    out_run_length_ = out_arr->GetMutableValues<int64_t>(0, 0);\n+    out_data_ = reinterpret_cast<T*>(out_arr->child_data[0]->buffers[1]->mutable_data());\n+  }\n+\n+  void Exec() {\n\nReview Comment:\n   The primary reason is that runs of filter array does not necessarily have the the same run lengths as the RLE array we are filtering. For example if the data is filtered based on the value of a different column.\n\n\n\n",
                    "created": "2022-08-12T23:57:46.429+0000",
                    "updated": "2022-08-12T23:57:46.429+0000",
                    "started": "2022-08-12T23:57:46.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800391",
                    "issueId": "13448796"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6946d54a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4de0bb66[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2506009f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6d75a4d2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74e37337[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2537ae6b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30a040aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@70b32158[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fa69eb2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7fa2fdb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@356d9a9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5c3dc48a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 11 17:51:39 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16774/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-07T13:13:16.000+0000",
        "updated": "2022-11-11T17:51:40.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Create Filter Kernel on RLE data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448796/comment/17632488",
                    "id": "17632488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-11-11T17:51:39.890+0000",
                    "updated": "2022-11-11T17:51:39.890+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z130oo:",
        "customfield_12314139": null
    }
}