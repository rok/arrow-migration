{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13392928",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392928",
    "key": "ARROW-13517",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620312",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620312",
                "type": {
                    "id": "12310360",
                    "name": "Dependent",
                    "inward": "Dependent",
                    "outward": "Dependent",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310360"
                },
                "inwardIssue": {
                    "id": "13392935",
                    "key": "ARROW-13518",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392935",
                    "fields": {
                        "summary": "Identify selected row when using filters",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
            "name": "Yair.lenga",
            "key": "yair.lenga",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Yair Lenga",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
            "name": "Yair.lenga",
            "key": "yair.lenga",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Yair Lenga",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13517/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3b4ea51d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@678255d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c03a4e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3b1634f7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e5346bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50592c9d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@311c8eed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3b27a5b5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f6562cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@641987e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@537f15bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5573186a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 05 10:22:29 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13517/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-08-01T10:40:05.000+0000",
        "updated": "2021-08-05T10:22:29.000+0000",
        "timeoriginalestimate": null,
        "description": "The current interface for selective reading is to use\u00a0*filters*\u00a0[https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetDataset.html]\r\n\r\nThe approach works well when the filters are simple (field in (v1, v2, v3, \u2026), and when the number of columns in small. It does not work well for the folllowing conditions, which currently requires reading the complete set into (python) memory.\r\n * when condition is complex (e.g. condition between attributes: field1 + field2 > filed3)\r\n * When file as many columns (making it costly to create python structures).\r\n\r\nI have a repository of large number of parquet files (thousands of files, 500 MB each, 200 \u00a0column), where specific records had to be selected quickly based on logical condition that does not fit the filter condition. Very small numbers of rows (<500) have to be returned.\r\n\r\nProposed feature is to aextend read_row_group to support passing an array of rows to read (list of integer in ascending order).\u00a0\r\n{code:java}\r\npq =  pyarrow.parquet.ParquetFile(\u2026)\r\ndd = PY.read_row_group(\u2026, rows=[ 5, 35, \u2026. ]{code}\r\nUsing this method will enable complex filtering in two stages, eliminitating the need to read all rows into memory.\r\n # First pass - read attributes for filtering, collect row numbers that match (complex) condition.\r\n # second pass - create a python table with matching rows using the proposed rows= parameter to read row group.\r\n\r\nI believe possible to achieve something similar using the c++ stream_reader ([https://github.com/apache/arrow/blob/master/cpp/src/parquet/stream_reader.cc]), which is not exposed to python.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Selective reading of rows for parquet file",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392928/comment/17391771",
                    "id": "17391771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> when condition is complex (e.g. condition between attributes: field1 + field2 > filed3)\r\n\r\nThis is currently possible using the new datasets API and expressions:\r\n\r\n{code:python}\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport pyarrow.dataset as pads\r\n\r\ntable = pa.Table.from_pydict({'x': [1, 2, 3, 4, 5, 6], 'y': [-2, -2, -2, -2, -2, -2], 'z': [-10, 0, 0, -10, 0, 0]})\r\npq.write_table(table, '/tmp/foo.parquet')\r\n\r\nds = pads.dataset('/tmp/foo.parquet')\r\ntable2 = ds.to_table(filter=(pads.field('x') + pads.field('y')) > pads.field('z'))\r\nprint(table2.to_pydict())\r\n{code}\r\n\r\n> When file as many columns (making it costly to create python structures).\r\n\r\nIt's not clear to me what is expensive here.  You mention there are 200 columns.  Both the old and new approaches should be pretty workable manipulating metadata of 200 columns in python.\r\n\r\n> I believe possible to achieve something similar using the c++ stream_reader\r\n\r\nYou might be able to achieve some benefits in some situations by skipping data.  In general this is a difficult problem with Parquet.  For example, compressed pages typically need to be fully read into memory and can't support any kind of skipping.  Furthermore, many pages are going to use run length encoding, which makes it impossible to skip to a particular value.  As a general rule of thumb you cannot do a partial read of a parquet page.  So if a page has 100k rows in it and you only want 10 rows out of it then, even if you have the indices, you typically need to read the page into memory first.\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-02T19:06:33.678+0000",
                    "updated": "2021-08-02T19:06:33.678+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392928/comment/17393579",
                    "id": "17393579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
                        "name": "Yair.lenga",
                        "key": "yair.lenga",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Yair Lenga",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for pointing to the new data set API. For my situation (reading small number of rows from a large data set) - I believe it be beneficial if the above will be implemented. In particular two benefits:\r\n * Queries result (e.g., list of rows matching a condition) - can be cached, and reused to re-load data without having to perform linear scans over complete data set.\r\n * The C++ Stream API seems to support both skipping over row groups, and skipping over column chunks. This can potentially reduce reading by significant factor when recalling data for queries that have been processed in the past.\r\n\r\nHow hard it will be to build this logic into Python to realize above saving ? While it might not be trivial to implement - for certain cases it will be extremely valuable.\r\n\r\nI believe that the AWS S3 select ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-select.html)]\u00a0\u00a0has similar capabilities - as it can deliver results (for similar situation like I've describe) - I get much faster performance than the performance I see on my desktop Python - leading me to believe that they figure out a way to selectivly skip of parquest\u00a0 data quickly.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
                        "name": "Yair.lenga",
                        "key": "yair.lenga",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Yair Lenga",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-05T03:20:06.890+0000",
                    "updated": "2021-08-05T03:25:30.110+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392928/comment/17393593",
                    "id": "17393593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> Queries result (e.g., list of rows matching a condition) - can be cached, and reused to re-load data without having to perform linear scans over complete data set.\r\n\r\nI don't think you'd be able to reduce the amount of I/O actually required since you'd need to load whole row-groups / column-chunks either way.  I do agree that you'd reduce the computational load somewhat as handling indices should be simpler than applying a query.  However, if you're doing actual I/O this is likely to be a fraction of the total cost and if you're working on in-memory data you'd be better off memory mapping an IPC file.\r\n\r\n> The C++ Stream API seems to support both skipping over row groups, and skipping over column chunks. This can potentially reduce reading by significant factor when recalling data for queries that have been processed in the past.\r\n\r\nThe datasets API supports both of these types of skips.\r\n\r\n> I believe that the AWS S3 select has similar capabilities\r\n\r\nFrom (https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html) I see \"For Parquet objects, all of the row groups that start within the scan range requested are processed.\" so I believe it is doing the same column-chunk and row-group skipping that the dataset API currently supports.  There will be an advantage with S3 select as the parquet metadata is read and processed in the data center although I am not sure how much of a difference that will make.\r\n\r\n> I get much faster performance than the performance I see on my desktop Python\r\n\r\nCan you describe what you are trying on your desktop python and what s3 select you are performing to get the similar results?\r\n\r\n> How hard it will be to build this logic into Python to realize above saving ? While it might not be trivial to implement - for certain cases it will be extremely valuable.\r\n\r\nGiven that you are going to have to load the entire column chunk into memory either way you could probably do this in pure python using the compute module with something like...\r\n\r\n{code:python}\r\nimport pyarrow as pa\r\nimport pyarrow.compute as pc\r\nimport pyarrow.parquet as pq\r\n\r\ntable = pa.Table.from_pydict({'x': [1, 2, 3], 'y': ['x', 'y', 'z']})\r\npq.write_table(table, '/tmp/foo.parquet')\r\n\r\npfile = pq.ParquetFile('/tmp/foo.parquet')\r\nrow_group = pfile.read_row_group(0)\r\n# Assuming you want indices 0,2.  This is just an example\r\nrow_group.take([0, 2])\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-05T04:01:53.491+0000",
                    "updated": "2021-08-05T04:03:23.577+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392928/comment/17393784",
                    "id": "17393784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
                        "name": "Yair.lenga",
                        "key": "yair.lenga",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Yair Lenga",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for taking the time to provide good feedback.\n\nYou are correct that there is something \"wrong\" with my local box. I suspect that I am running out of actual memory (low End free AWS instance), resulting in actual IO/swap, whereas the S3 select is not short on resources.\n\nRunning on a \"fresh\" instance solve make the processing noticeably better.\n\nThanks again for your patience. Yair",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yair.lenga",
                        "name": "Yair.lenga",
                        "key": "yair.lenga",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Yair Lenga",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-05T10:22:29.210+0000",
                    "updated": "2021-08-05T10:22:29.210+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0tid4:",
        "customfield_12314139": null
    }
}