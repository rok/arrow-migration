{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13352985",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985",
    "key": "ARROW-11298",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/6",
            "id": "6",
            "description": "The problem isn't valid and it can't be fixed.",
            "name": "Invalid"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13358940",
                "key": "ARROW-11651",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358940",
                "fields": {
                    "summary": "[Rust][DataFusion] Implement Postgres Length Functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13358941",
                "key": "ARROW-11652",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358941",
                "fields": {
                    "summary": "Signature::OneOf",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13358942",
                "key": "ARROW-11653",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358942",
                "fields": {
                    "summary": "Ascii/unicode functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13358943",
                "key": "ARROW-11654",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358943",
                "fields": {
                    "summary": "Regex functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13358944",
                "key": "ARROW-11655",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358944",
                "fields": {
                    "summary": "Pad/trim functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13358945",
                "key": "ARROW-11656",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13358945",
                "fields": {
                    "summary": "Left over functions/fixes",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13360198",
                "key": "ARROW-11738",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13360198",
                "fields": {
                    "summary": "[Rust][DataFusion] Concat Functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 96000,
            "total": 96000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 41400,
            "total": 41400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11298/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 69,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/537244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 opened a new pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243\n\n\n   I am throwing up a draft PR just to give people a heads up that I am working through these.\r\n   \r\n   **Changes**\r\n   I have had to make some changes to the existing implementations:\r\n   - `concat` had the incorrect behavior for how to handle NULLs where any null would result in a NULL where the Postgres implementation documents: `NULL arguments are ignored.`.\r\n   - `ltrim` and `rtrim` were implemented to support only the default space character whereas Postgres supports an optional second parameter: `ltrim('zzzytest', 'xyz')` so that has been updated.\r\n   \r\n   **Questions**\r\n   - @jorgecarleitao I think we need this `Signature::Uniform` vs `Signature::UniformEqual`. This came up with a `left` function that takes a `(utf8, int64)` signature and it is not correct to try to cast both to `utf8`. You can see my implementation here but perhaps you have a better method.\r\n   - @jorgecarleitao Do you have a nice way of throwing errors in the map itself? See commented out Chr that I would appreciate your assistance: https://github.com/apache/arrow/compare/master...seddonm1:postgres-string-functions?expand=1#diff-abe8768fe7124198cca7a84ad7b2c678b3cc8e5de3d1bc867d498536a2fdddc7R287\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T06:55:33.110+0000",
                    "updated": "2021-01-18T06:55:33.110+0000",
                    "started": "2021-01-18T06:55:33.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537244",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/537245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#issuecomment-762028087\n\n\n   https://issues.apache.org/jira/browse/ARROW-11298\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T06:55:57.369+0000",
                    "updated": "2021-01-18T06:55:57.369+0000",
                    "started": "2021-01-18T06:55:57.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537245",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/538910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r561653478\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +34,446 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least one.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most two.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n\nReview comment:\n       I'm not sure if we should be panicing if these characters appear\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-21T07:30:14.628+0000",
                    "updated": "2021-01-21T07:30:14.628+0000",
                    "started": "2021-01-21T07:30:14.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538910",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/538914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#issuecomment-764451929\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=h1) Report\n   > Merging [#9243](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=desc) (64abbc5) into [master](https://codecov.io/gh/apache/arrow/commit/1393188e1aa1b3d59993ce7d4ade7f7ac8570959?el=desc) (1393188) will **increase** coverage by `0.18%`.\n   > The diff coverage is `93.35%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9243/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9243      +/-   ##\n   ==========================================\n   + Coverage   81.61%   81.79%   +0.18%     \n   ==========================================\n     Files         215      215              \n     Lines       51867    53138    +1271     \n   ==========================================\n   + Hits        42329    43466    +1137     \n   - Misses       9538     9672     +134     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `78.94% <\u00f8> (+1.81%)` | :arrow_up: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `85.56% <85.39%> (-1.39%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/type\\_coercion.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3R5cGVfY29lcmNpb24ucnM=) | `94.44% <92.42%> (-4.10%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `84.27% <94.47%> (+11.97%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/aggregates.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2FnZ3JlZ2F0ZXMucnM=) | `91.13% <100.00%> (\u00f8)` | |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.84% <100.00%> (+<0.01%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.67% <100.00%> (+0.17%)` | :arrow_up: |\n   | [rust/arrow/src/array/array\\_list.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfbGlzdC5ycw==) | `83.21% <0.00%> (-9.89%)` | :arrow_down: |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `79.75% <0.00%> (-6.52%)` | :arrow_down: |\n   | [rust/benchmarks/src/bin/tpch.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9iZW5jaG1hcmtzL3NyYy9iaW4vdHBjaC5ycw==) | `6.97% <0.00%> (-5.22%)` | :arrow_down: |\n   | ... and [94 more](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=footer). Last update [1401359...64abbc5](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-21T07:54:14.067+0000",
                    "updated": "2021-01-21T07:54:14.067+0000",
                    "started": "2021-01-21T07:54:14.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538914",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562383540\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       This signature generalizes `UniformEqual`, so, wouldn't it be possible generalize the other instead of creating a new one (replace the existing one by the more general form)?\r\n   \r\n   `Signature` should be such that its variants form a complete set of options without overlaps.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Concatenates the text representations of all the arguments. NULL arguments are ignored.\n+pub fn concat(args: &[ArrayRef]) -> Result<StringArray> {\n     // downcast all arguments to strings\n     let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n     // do not accept 0 arguments.\n     if args.is_empty() {\n         return Err(DataFusionError::Internal(\n-            \"Concatenate was called with 0 arguments. It requires at least one.\"\n-                .to_string(),\n+            \"concat was called with 0 arguments. It requires at least 2.\".to_string(),\n         ));\n     }\n \n     let mut builder = StringBuilder::new(args.len());\n     // for each entry in the array\n     for index in 0..args[0].len() {\n         let mut owned_string: String = \"\".to_owned();\n-\n-        // if any is null, the result is null\n-        let mut is_null = false;\n         for arg in &args {\n-            if arg.is_null(index) {\n-                is_null = true;\n-                break; // short-circuit as we already know the result\n-            } else {\n+            if arg.is_valid(index) {\n                 owned_string.push_str(&arg.value(index));\n             }\n         }\n-        if is_null {\n+        builder.append_value(&owned_string)?;\n+    }\n+    Ok(builder.finish())\n+}\n+\n+/// Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.\n+pub fn concat_ws(args: &[ArrayRef]) -> Result<StringArray> {\n+    // downcast all arguments to strings\n+    let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n+    // do not accept 0 or 1 arguments.\n+    if args.len() < 2 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"concat_ws was called with {} arguments. It requires at least 2.\",\n+            args.len()\n+        )));\n+    }\n+\n+    let mut builder = StringBuilder::new(args.len());\n+    // for each entry in the array\n+    for index in 0..args[0].len() {\n+        let mut owned_string: String = \"\".to_owned();\n+        if args[0].is_null(index) {\n             builder.append_null()?;\n         } else {\n+            let sep = args[0].value(index);\n+            for arg_index in 1..args.len() {\n+                let arg = &args[arg_index];\n+                if !arg.is_null(index) {\n\nReview comment:\n       [optional: This can be simplified, generalized and become more performant by using `collect`.]\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -499,20 +692,42 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n     // for now, the list is small, as we do not have many built-in functions.\n\nReview comment:\n       this can go now xD\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       Wont this coerce any type to the first variant, even if the latter variant is accepted?\r\n   \r\n   I.e. if we use\r\n   \r\n   ```\r\n   Uniform(vec![\r\n       vec![vec![A]],\r\n       vec![vec![B]],\r\n   ])\r\n   ```\r\n   \r\n   and pass arg types `vec![B]`, I would expect that no coercion would happen, but I suspect that this will coerce `B` to `A`, because the first entry with the same number of arguments is `vec![vec![A]]`.\r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,38 +34,340 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n\nReview comment:\n       I think that this could be `Result<GenericStringArray<T>>` so that it supports both String and LargeString.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Concatenates the text representations of all the arguments. NULL arguments are ignored.\n+pub fn concat(args: &[ArrayRef]) -> Result<StringArray> {\n     // downcast all arguments to strings\n     let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n     // do not accept 0 arguments.\n     if args.is_empty() {\n         return Err(DataFusionError::Internal(\n-            \"Concatenate was called with 0 arguments. It requires at least one.\"\n-                .to_string(),\n+            \"concat was called with 0 arguments. It requires at least 2.\".to_string(),\n         ));\n     }\n \n     let mut builder = StringBuilder::new(args.len());\n     // for each entry in the array\n     for index in 0..args[0].len() {\n         let mut owned_string: String = \"\".to_owned();\n-\n-        // if any is null, the result is null\n-        let mut is_null = false;\n         for arg in &args {\n-            if arg.is_null(index) {\n-                is_null = true;\n-                break; // short-circuit as we already know the result\n-            } else {\n+            if arg.is_valid(index) {\n                 owned_string.push_str(&arg.value(index));\n             }\n         }\n-        if is_null {\n+        builder.append_value(&owned_string)?;\n+    }\n+    Ok(builder.finish())\n+}\n+\n+/// Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.\n+pub fn concat_ws(args: &[ArrayRef]) -> Result<StringArray> {\n+    // downcast all arguments to strings\n+    let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n+    // do not accept 0 or 1 arguments.\n+    if args.len() < 2 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"concat_ws was called with {} arguments. It requires at least 2.\",\n+            args.len()\n+        )));\n+    }\n+\n+    let mut builder = StringBuilder::new(args.len());\n+    // for each entry in the array\n+    for index in 0..args[0].len() {\n+        let mut owned_string: String = \"\".to_owned();\n+        if args[0].is_null(index) {\n             builder.append_null()?;\n         } else {\n+            let sep = args[0].value(index);\n+            for arg_index in 1..args.len() {\n+                let arg = &args[arg_index];\n+                if !arg.is_null(index) {\n+                    owned_string.push_str(&arg.value(index));\n+                    // if not last push separator\n+                    if arg_index != args.len() - 1 {\n+                        owned_string.push_str(&sep);\n+                    }\n+                }\n+            }\n             builder.append_value(&owned_string)?;\n-        }\n+        };\n     }\n     Ok(builder.finish())\n }\n \n+/// Converts the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.\n+pub fn initcap<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n\nReview comment:\n       Same here: `Result<GeneticStringArray<T>>` generalizes this :)\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +34,446 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least one.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most two.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n\nReview comment:\n       Why not error? If we remove that unwrap, the code should compile.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:00:47.266+0000",
                    "updated": "2021-01-22T05:00:47.266+0000",
                    "started": "2021-01-22T05:00:47.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539466",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562389680\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       I suggest that we PR this separately with a single function that requires this type of signature, as we need to get this requires much more care than the other parts of this PR as it affects all future functions that use it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:02:51.504+0000",
                    "updated": "2021-01-22T05:02:51.504+0000",
                    "started": "2021-01-22T05:02:51.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539467",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562390994\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n\nReview comment:\n       *and remove this `Ok` from here, so that `collect` is implicitly treated as `collect<Result<_>>` instead of `collect<_>`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:08:05.094+0000",
                    "updated": "2021-01-22T05:08:05.094+0000",
                    "started": "2021-01-22T05:08:05.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539468",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562391162\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       Thanks @jorgecarleitao . Yes I will split this out. \r\n   \r\n   A good example is lpad which is either:\r\n   [string, int] or [string, int, string]. I am away a couple of days but will split this out so we can work throught methodically.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:08:38.438+0000",
                    "updated": "2021-01-22T05:08:38.438+0000",
                    "started": "2021-01-22T05:08:38.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539469",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562391477\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n\nReview comment:\n       Ah of course \ud83e\udd26 \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:09:46.707+0000",
                    "updated": "2021-01-22T05:09:46.707+0000",
                    "started": "2021-01-22T05:09:46.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539470",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562391973\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       Yes. Agree. The existing code clearly took some thought so wanted to leave it until we can agree correct course of action.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:11:46.691+0000",
                    "updated": "2021-01-22T05:11:46.691+0000",
                    "started": "2021-01-22T05:11:46.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539471",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r561653478\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +34,446 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least one.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most two.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n\nReview comment:\n       I'm not sure if we should be panicing if these characters appear\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       Thanks @jorgecarleitao . Yes I will split this out. \r\n   \r\n   A good example is lpad which is either:\r\n   [string, int] or [string, int, string]. I am away a couple of days but will split this out so we can work throught methodically.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n\nReview comment:\n       Ah of course \ud83e\udd26 \n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       Yes. Agree. The existing code clearly took some thought so wanted to leave it until we can agree correct course of action.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:35:47.834+0000",
                    "updated": "2021-01-22T05:35:47.834+0000",
                    "started": "2021-01-22T05:35:47.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539512",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r562383540\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       This signature generalizes `UniformEqual`, so, wouldn't it be possible generalize the other instead of creating a new one (replace the existing one by the more general form)?\r\n   \r\n   `Signature` should be such that its variants form a complete set of options without overlaps.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Concatenates the text representations of all the arguments. NULL arguments are ignored.\n+pub fn concat(args: &[ArrayRef]) -> Result<StringArray> {\n     // downcast all arguments to strings\n     let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n     // do not accept 0 arguments.\n     if args.is_empty() {\n         return Err(DataFusionError::Internal(\n-            \"Concatenate was called with 0 arguments. It requires at least one.\"\n-                .to_string(),\n+            \"concat was called with 0 arguments. It requires at least 2.\".to_string(),\n         ));\n     }\n \n     let mut builder = StringBuilder::new(args.len());\n     // for each entry in the array\n     for index in 0..args[0].len() {\n         let mut owned_string: String = \"\".to_owned();\n-\n-        // if any is null, the result is null\n-        let mut is_null = false;\n         for arg in &args {\n-            if arg.is_null(index) {\n-                is_null = true;\n-                break; // short-circuit as we already know the result\n-            } else {\n+            if arg.is_valid(index) {\n                 owned_string.push_str(&arg.value(index));\n             }\n         }\n-        if is_null {\n+        builder.append_value(&owned_string)?;\n+    }\n+    Ok(builder.finish())\n+}\n+\n+/// Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.\n+pub fn concat_ws(args: &[ArrayRef]) -> Result<StringArray> {\n+    // downcast all arguments to strings\n+    let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n+    // do not accept 0 or 1 arguments.\n+    if args.len() < 2 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"concat_ws was called with {} arguments. It requires at least 2.\",\n+            args.len()\n+        )));\n+    }\n+\n+    let mut builder = StringBuilder::new(args.len());\n+    // for each entry in the array\n+    for index in 0..args[0].len() {\n+        let mut owned_string: String = \"\".to_owned();\n+        if args[0].is_null(index) {\n             builder.append_null()?;\n         } else {\n+            let sep = args[0].value(index);\n+            for arg_index in 1..args.len() {\n+                let arg = &args[arg_index];\n+                if !arg.is_null(index) {\n\nReview comment:\n       [optional: This can be simplified, generalized and become more performant by using `collect`.]\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -499,20 +692,42 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n     // for now, the list is small, as we do not have many built-in functions.\n\nReview comment:\n       this can go now xD\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       Wont this coerce any type to the first variant, even if the latter variant is accepted?\r\n   \r\n   I.e. if we use\r\n   \r\n   ```\r\n   Uniform(vec![\r\n       vec![vec![A]],\r\n       vec![vec![B]],\r\n   ])\r\n   ```\r\n   \r\n   and pass arg types `vec![B]`, I would expect that no coercion would happen, but I suspect that this will coerce `B` to `A`, because the first entry with the same number of arguments is `vec![vec![A]]`.\r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,38 +34,340 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n\nReview comment:\n       I think that this could be `Result<GenericStringArray<T>>` so that it supports both String and LargeString.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Concatenates the text representations of all the arguments. NULL arguments are ignored.\n+pub fn concat(args: &[ArrayRef]) -> Result<StringArray> {\n     // downcast all arguments to strings\n     let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n     // do not accept 0 arguments.\n     if args.is_empty() {\n         return Err(DataFusionError::Internal(\n-            \"Concatenate was called with 0 arguments. It requires at least one.\"\n-                .to_string(),\n+            \"concat was called with 0 arguments. It requires at least 2.\".to_string(),\n         ));\n     }\n \n     let mut builder = StringBuilder::new(args.len());\n     // for each entry in the array\n     for index in 0..args[0].len() {\n         let mut owned_string: String = \"\".to_owned();\n-\n-        // if any is null, the result is null\n-        let mut is_null = false;\n         for arg in &args {\n-            if arg.is_null(index) {\n-                is_null = true;\n-                break; // short-circuit as we already know the result\n-            } else {\n+            if arg.is_valid(index) {\n                 owned_string.push_str(&arg.value(index));\n             }\n         }\n-        if is_null {\n+        builder.append_value(&owned_string)?;\n+    }\n+    Ok(builder.finish())\n+}\n+\n+/// Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.\n+pub fn concat_ws(args: &[ArrayRef]) -> Result<StringArray> {\n+    // downcast all arguments to strings\n+    let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n+    // do not accept 0 or 1 arguments.\n+    if args.len() < 2 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"concat_ws was called with {} arguments. It requires at least 2.\",\n+            args.len()\n+        )));\n+    }\n+\n+    let mut builder = StringBuilder::new(args.len());\n+    // for each entry in the array\n+    for index in 0..args[0].len() {\n+        let mut owned_string: String = \"\".to_owned();\n+        if args[0].is_null(index) {\n             builder.append_null()?;\n         } else {\n+            let sep = args[0].value(index);\n+            for arg_index in 1..args.len() {\n+                let arg = &args[arg_index];\n+                if !arg.is_null(index) {\n+                    owned_string.push_str(&arg.value(index));\n+                    // if not last push separator\n+                    if arg_index != args.len() - 1 {\n+                        owned_string.push_str(&sep);\n+                    }\n+                }\n+            }\n             builder.append_value(&owned_string)?;\n-        }\n+        };\n     }\n     Ok(builder.finish())\n }\n \n+/// Converts the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.\n+pub fn initcap<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n\nReview comment:\n       Same here: `Result<GeneticStringArray<T>>` generalizes this :)\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +34,446 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least one.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most two.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n\nReview comment:\n       Why not error? If we remove that unwrap, the code should compile.\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       I suggest that we PR this separately with a single function that requires this type of signature, as we need to get this requires much more care than the other parts of this PR as it affects all future functions that use it.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n\nReview comment:\n       *and remove this `Ok` from here, so that `collect` is implicitly treated as `collect<Result<_>>` instead of `collect<_>`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:48:48.720+0000",
                    "updated": "2021-01-22T05:48:48.720+0000",
                    "started": "2021-01-22T05:48:48.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539610",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/539656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#issuecomment-764451929\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=h1) Report\n   > Merging [#9243](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=desc) (64abbc5) into [master](https://codecov.io/gh/apache/arrow/commit/1393188e1aa1b3d59993ce7d4ade7f7ac8570959?el=desc) (1393188) will **increase** coverage by `0.18%`.\n   > The diff coverage is `93.35%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9243/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9243      +/-   ##\n   ==========================================\n   + Coverage   81.61%   81.79%   +0.18%     \n   ==========================================\n     Files         215      215              \n     Lines       51867    53138    +1271     \n   ==========================================\n   + Hits        42329    43466    +1137     \n   - Misses       9538     9672     +134     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `78.94% <\u00f8> (+1.81%)` | :arrow_up: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `85.56% <85.39%> (-1.39%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/type\\_coercion.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3R5cGVfY29lcmNpb24ucnM=) | `94.44% <92.42%> (-4.10%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `84.27% <94.47%> (+11.97%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/aggregates.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2FnZ3JlZ2F0ZXMucnM=) | `91.13% <100.00%> (\u00f8)` | |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.84% <100.00%> (+<0.01%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `91.67% <100.00%> (+0.17%)` | :arrow_up: |\n   | [rust/arrow/src/array/array\\_list.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfbGlzdC5ycw==) | `83.21% <0.00%> (-9.89%)` | :arrow_down: |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `79.75% <0.00%> (-6.52%)` | :arrow_down: |\n   | [rust/benchmarks/src/bin/tpch.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9iZW5jaG1hcmtzL3NyYy9iaW4vdHBjaC5ycw==) | `6.97% <0.00%> (-5.22%)` | :arrow_down: |\n   | ... and [94 more](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=footer). Last update [1401359...64abbc5](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T05:56:07.094+0000",
                    "updated": "2021-01-22T05:56:07.094+0000",
                    "started": "2021-01-22T05:56:07.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "539656",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/543200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#issuecomment-764451929\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=h1) Report\n   > Merging [#9243](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=desc) (5a90cf8) into [master](https://codecov.io/gh/apache/arrow/commit/ab5fc979c69ccc5dde07e1bc1467b02951b4b7e9?el=desc) (ab5fc97) will **increase** coverage by `0.16%`.\n   > The diff coverage is `92.41%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9243/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9243      +/-   ##\n   ==========================================\n   + Coverage   81.89%   82.05%   +0.16%     \n   ==========================================\n     Files         215      215              \n     Lines       52988    53787     +799     \n   ==========================================\n   + Hits        43392    44136     +744     \n   - Misses       9596     9651      +55     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.57% <\u00f8> (+0.81%)` | :arrow_up: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `86.89% <86.85%> (-0.61%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/type\\_coercion.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3R5cGVfY29lcmNpb24ucnM=) | `94.44% <92.42%> (-4.10%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `84.84% <92.61%> (+12.54%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/aggregates.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2FnZ3JlZ2F0ZXMucnM=) | `91.13% <100.00%> (\u00f8)` | |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.84% <100.00%> (+0.01%)` | :arrow_up: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/expressions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2V4cHJlc3Npb25zLnJz) | `81.19% <0.00%> (+0.11%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/cast.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2Nhc3QucnM=) | `97.11% <0.00%> (+0.12%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=footer). Last update [ab5fc97...5a90cf8](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T23:53:35.367+0000",
                    "updated": "2021-01-27T23:53:35.367+0000",
                    "started": "2021-01-27T23:53:35.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543200",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r567146994\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       I have split this code out (renamed to `OneOf` with the `lpad` function to demonstrate its purpose) here: https://github.com/seddonm1/arrow/tree/oneof-function-signature\r\n   \r\n   I would appreciate some of your brain time to help resolve this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T23:23:12.523+0000",
                    "updated": "2021-01-29T23:23:12.523+0000",
                    "started": "2021-01-29T23:23:12.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544561",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r567146994\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -60,10 +59,15 @@ pub enum Signature {\n     // A function such as `array` is `VariadicEqual`\n     // The first argument decides the type used for coercion\n     VariadicEqual,\n+    /// fixed number of arguments of vector of vectors of valid types\n+    // A function of one argument of f64 is `Uniform(vc![vec![vec![DataType::Float64]]])`\n+    // A function of one argument of f64 or f32 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64]]])`\n+    // A function of two arguments with first argument of f64 or f32 and second argument of utf8 is `Uniform(vec![vec![vec![DataType::Float32, DataType::Float64], vec![DataType::Utf8]]])`\n+    Uniform(Vec<Vec<Vec<DataType>>>),\n\nReview comment:\n       @jorgecarleitao \r\n   I have split this code out (renamed to `OneOf` with the `lpad` function to demonstrate its purpose) here: https://github.com/seddonm1/arrow/tree/oneof-function-signature\r\n   \r\n   I would appreciate some of your brain time to help resolve this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T23:23:27.491+0000",
                    "updated": "2021-01-29T23:23:27.491+0000",
                    "started": "2021-01-29T23:23:27.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544563",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r567147472\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x: Option<i64>| {\n+            x.map(|x| {\n+                if x == 0 {\n+                    Err(DataFusionError::Internal(\n+                        \"null character not permitted.\".to_string(),\n+                    ))\n+                } else {\n+                    match core::char::from_u32(x as u32) {\n+                        Some(x) => Ok(x.to_string()),\n+                        None => Err(DataFusionError::Internal(\n+                            \"requested character too large for encoding.\".to_string(),\n+                        )),\n+                    }\n+                }\n+                .unwrap()\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Concatenates the text representations of all the arguments. NULL arguments are ignored.\n+pub fn concat(args: &[ArrayRef]) -> Result<StringArray> {\n     // downcast all arguments to strings\n     let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n     // do not accept 0 arguments.\n     if args.is_empty() {\n         return Err(DataFusionError::Internal(\n-            \"Concatenate was called with 0 arguments. It requires at least one.\"\n-                .to_string(),\n+            \"concat was called with 0 arguments. It requires at least 2.\".to_string(),\n         ));\n     }\n \n     let mut builder = StringBuilder::new(args.len());\n     // for each entry in the array\n     for index in 0..args[0].len() {\n         let mut owned_string: String = \"\".to_owned();\n-\n-        // if any is null, the result is null\n-        let mut is_null = false;\n         for arg in &args {\n-            if arg.is_null(index) {\n-                is_null = true;\n-                break; // short-circuit as we already know the result\n-            } else {\n+            if arg.is_valid(index) {\n                 owned_string.push_str(&arg.value(index));\n             }\n         }\n-        if is_null {\n+        builder.append_value(&owned_string)?;\n+    }\n+    Ok(builder.finish())\n+}\n+\n+/// Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.\n+pub fn concat_ws(args: &[ArrayRef]) -> Result<StringArray> {\n+    // downcast all arguments to strings\n+    let args = downcast_vec!(args, StringArray).collect::<Result<Vec<&StringArray>>>()?;\n+    // do not accept 0 or 1 arguments.\n+    if args.len() < 2 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"concat_ws was called with {} arguments. It requires at least 2.\",\n+            args.len()\n+        )));\n+    }\n+\n+    let mut builder = StringBuilder::new(args.len());\n+    // for each entry in the array\n+    for index in 0..args[0].len() {\n+        let mut owned_string: String = \"\".to_owned();\n+        if args[0].is_null(index) {\n             builder.append_null()?;\n         } else {\n+            let sep = args[0].value(index);\n+            for arg_index in 1..args.len() {\n+                let arg = &args[arg_index];\n+                if !arg.is_null(index) {\n\nReview comment:\n       thanks i will have a look at this today\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T23:24:57.364+0000",
                    "updated": "2021-01-29T23:24:57.364+0000",
                    "started": "2021-01-29T23:24:57.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544567",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r567147558\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_coercion.rs\n##########\n@@ -69,13 +69,42 @@ pub fn data_types(\n     signature: &Signature,\n ) -> Result<Vec<DataType>> {\n     let valid_types = match signature {\n-        Signature::Variadic(valid_types) => valid_types\n+        Signature::Any(number) => {\n+            if current_types.len() != *number {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    number,\n+                    current_types.len()\n+                )));\n+            }\n+            vec![(0..*number).map(|i| current_types[i].clone()).collect()]\n+        }\n+        Signature::Exact(valid_types) => vec![valid_types.clone()],\n+        Signature::Uniform(valid_types) => {\n+            let valid_signature = valid_types\n+                .iter()\n+                .filter(|x| x.len() == current_types.len())\n+                .collect::<Vec<_>>();\n+            if valid_signature.len() != 1 {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"The function expected {} arguments but received {}\",\n+                    valid_types\n+                        .iter()\n+                        .map(|x| x.len().to_string())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \"),\n+                    current_types.len()\n+                )));\n+            }\n+            cartesian_product(valid_signature.first().unwrap())\n\nReview comment:\n       @jorgecarleitao as above: https://github.com/seddonm1/arrow/tree/oneof-function-signature\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T23:25:10.251+0000",
                    "updated": "2021-01-29T23:25:10.251+0000",
                    "started": "2021-01-29T23:25:10.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544568",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#discussion_r567148220\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -34,42 +35,553 @@ macro_rules! downcast_vec {\n     }};\n }\n \n-/// concatenate string columns together.\n-pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n+/// Returns the numeric code of the first character of the argument.\n+pub fn ascii<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| {\n+            x.map(|x: &str| {\n+                let mut chars = x.chars();\n+                chars.next().map_or(0, |v| v as i32)\n+            })\n+        })\n+        .collect())\n+}\n+\n+/// Removes the longest string containing only characters in characters (a space by default) from the start and end of string.\n+pub fn btrim<T: StringOffsetSizeTrait>(args: &[ArrayRef]) -> Result<StringArray> {\n+    match args.len() {\n+        0 => Err(DataFusionError::Internal(\n+            \"btrim was called with 0 arguments. It requires at least 1.\".to_string(),\n+        )),\n+        1 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .map(|x| x.map(|x: &str| x.trim()))\n+                .collect())\n+        }\n+        2 => {\n+            let string_array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let characters_array = args[1]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            Ok(string_array\n+                .iter()\n+                .enumerate()\n+                .map(|(i, x)| {\n+                    if characters_array.is_null(i) {\n+                        None\n+                    } else {\n+                        x.map(|x: &str| {\n+                            let chars: Vec<char> =\n+                                characters_array.value(i).chars().collect();\n+                            x.trim_start_matches(&chars[..])\n+                                .trim_end_matches(&chars[..])\n+                        })\n+                    }\n+                })\n+                .collect())\n+        }\n+        other => Err(DataFusionError::Internal(format!(\n+            \"btrim was called with {} arguments. It requires at most 2.\",\n+            other\n+        ))),\n+    }\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i32(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i32>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i32))\n+        .collect())\n+}\n+\n+/// Returns number of characters in the string.\n+pub fn character_length_i64(args: &[ArrayRef]) -> Result<Int64Array> {\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<i64>>()\n+        .unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n+        .iter()\n+        .map(|x| x.map(|x: &str| x.graphemes(true).count() as i64))\n+        .collect())\n+}\n+\n+/// Returns the character with the given code.\n+pub fn chr(args: &[ArrayRef]) -> Result<StringArray> {\n+    let array = args[0].as_any().downcast_ref::<Int64Array>().unwrap();\n+    // first map is the iterator, second is for the `Option<_>`\n+    Ok(array\n\nReview comment:\n       @jorgecarleitao \r\n   The `FromIterator<Option<Ptr>>` for `GenericStringArray` does not work with `<Option<Result<Ptr>>>` so it is not as simple as I had hoped.\r\n   \r\n   Perhaps we need to implement `FromIterator<Option<Result<Ptr>>>` as well so that we can support this use case?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T23:27:37.785+0000",
                    "updated": "2021-01-29T23:27:37.785+0000",
                    "started": "2021-01-29T23:27:37.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544571",
                    "issueId": "13352985"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/worklog/544610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9243:\nURL: https://github.com/apache/arrow/pull/9243#issuecomment-764451929\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=h1) Report\n   > Merging [#9243](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=desc) (ff5a8df) into [master](https://codecov.io/gh/apache/arrow/commit/ab5fc979c69ccc5dde07e1bc1467b02951b4b7e9?el=desc) (ab5fc97) will **increase** coverage by `0.22%`.\n   > The diff coverage is `92.60%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9243/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9243      +/-   ##\n   ==========================================\n   + Coverage   81.89%   82.11%   +0.22%     \n   ==========================================\n     Files         215      216       +1     \n     Lines       52988    54162    +1174     \n   ==========================================\n   + Hits        43392    44477    +1085     \n   - Misses       9596     9685      +89     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `80.76% <\u00f8> (+1.00%)` | :arrow_up: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `87.78% <88.26%> (+0.28%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/type\\_coercion.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3R5cGVfY29lcmNpb24ucnM=) | `94.38% <91.52%> (-4.16%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `84.96% <92.24%> (+12.66%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/octet\\_length.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL29jdGV0X2xlbmd0aC5ycw==) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.85% <100.00%> (+0.02%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/csv.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL2Nzdi5ycw==) | `60.46% <0.00%> (-4.54%)` | :arrow_down: |\n   | [rust/arrow/src/array/equal/boolean.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvZXF1YWwvYm9vbGVhbi5ycw==) | `97.56% <0.00%> (-2.44%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/csv.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Nzdi5ycw==) | `73.04% <0.00%> (-1.22%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/projection.rs](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3Byb2plY3Rpb24ucnM=) | `84.93% <0.00%> (-0.99%)` | :arrow_down: |\n   | ... and [67 more](https://codecov.io/gh/apache/arrow/pull/9243/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=footer). Last update [ab5fc97...ff5a8df](https://codecov.io/gh/apache/arrow/pull/9243?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-30T00:55:55.175+0000",
                    "updated": "2021-01-30T00:55:55.175+0000",
                    "started": "2021-01-30T00:55:55.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544610",
                    "issueId": "13352985"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 41400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@44f56c9c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60c1360d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f0824c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6ee8ade1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59c10dcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@45c17052[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46a06844[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6d0c42d4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cf285dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@727f21f1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37d895b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@38cd7b7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 96000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 26 13:27:03 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-26T13:27:07.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11298/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-01-18T06:47:35.000+0000",
        "updated": "2021-04-26T13:27:07.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a general task to add the Postgres String Functions to DataFusion.\r\n\r\nhttps://www.postgresql.org/docs/13/functions-string.html",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 41400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Implement Postgres String Functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352985/comment/17332347",
                    "id": "17332347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Migrated to github: https://github.com/apache/arrow-datafusion/issues/152",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-26T13:27:03.012+0000",
                    "updated": "2021-04-26T13:27:03.012+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0mpn4:",
        "customfield_12314139": null
    }
}