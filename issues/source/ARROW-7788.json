{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13283845",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845",
    "key": "ARROW-7788",
    "fields": {
        "parent": {
            "id": "13107102",
            "key": "ARROW-1644",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13107102",
            "fields": {
                "summary": "[C++][Parquet] Read and write nested Parquet data with a mix of struct and list nesting levels",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7788/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/383423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379\n \n \n   \r\n   *  Moves common methods for ListTypes to BaseList type and make FixedListType extend\r\n      the same base class so they can mapped\r\n   *  Enable Large* types and FixedListType by adding them to the appropriate enum cases\r\n   *  Add implementation to Maps\r\n   *  Expose constructor/static factory to MapType that can take a field as a value\r\n   *  For list type expose a configuration parameter to make the parquet schema\r\n      conform to the required naming.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-07T07:55:27.155+0000",
                    "updated": "2020-02-07T07:55:27.155+0000",
                    "started": "2020-02-07T07:55:27.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383423",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/383424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#issuecomment-583277612\n \n \n   https://issues.apache.org/jira/browse/ARROW-7788\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-07T08:01:59.458+0000",
                    "updated": "2020-02-07T08:01:59.458+0000",
                    "started": "2020-02-07T08:01:59.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383424",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/383648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r376443331\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -719,7 +719,7 @@ class ARROW_EXPORT MapType : public ListType {\n };\n \n /// \\brief Concrete type class for fixed size list data\n-class ARROW_EXPORT FixedSizeListType : public NestedType {\n+class ARROW_EXPORT FixedSizeListType : public BaseListType {\n \n Review comment:\n   I would check everywhere `enable_if_base_list`, `enable_if_fixed_size_list`, and `enable_if_list_like` are used. This might also create confusion between type traits name with `enable_if_base_binary` which `FixedSizedBinaryType` does not take part and why you have to use `enable_if_binary_like` (and `enable_if_list_like`).\r\n   \r\n   So either removes this change, or remove `enable_if_list_like` and replace with usage of `enable_if_base_list`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-07T15:14:32.829+0000",
                    "updated": "2020-02-07T15:14:32.829+0000",
                    "started": "2020-02-07T15:14:32.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383648",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/383692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r376471858\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -719,7 +719,7 @@ class ARROW_EXPORT MapType : public ListType {\n };\n \n /// \\brief Concrete type class for fixed size list data\n-class ARROW_EXPORT FixedSizeListType : public NestedType {\n+class ARROW_EXPORT FixedSizeListType : public BaseListType {\n \n Review comment:\n   Would introducing a listlike base class make sense?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-07T16:04:55.702+0000",
                    "updated": "2020-02-07T16:04:55.702+0000",
                    "started": "2020-02-07T16:04:55.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383692",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/384040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r376753391\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -719,7 +719,7 @@ class ARROW_EXPORT MapType : public ListType {\n };\n \n /// \\brief Concrete type class for fixed size list data\n-class ARROW_EXPORT FixedSizeListType : public NestedType {\n+class ARROW_EXPORT FixedSizeListType : public BaseListType {\n \n Review comment:\n   @fsaintjacques thinking about this some more I think the problem is that base_list BaseListArray is ambiguous.  I created a new type_tate is_var_length_list... to replace the template to be clearer. If this change sounds reasonable, I'll open up a JIRA and make a similar change for binary types.\r\n   \r\n   The other options, per my previous comment, is to make a ListLikeBase and make BaseListType and  FixedSizeListType  inherit from it \r\n    without changing type traits.  I like this change less, since it introduces another layer in the class hierarchy which at the moment doesn't seem to serve a purpose (if we need functionality specified to variable width list types we should can introduce a new class BaseVariableWidthListType later for the same purpose).\r\n   \r\n   A third option which I like even less is special casing logic for FixedListType in the parquet code because the classes don't share d a common ancestor (this just makes less conceptual sense to me).\r\n   \r\n   Thoughts?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T04:13:00.246+0000",
                    "updated": "2020-02-09T04:13:00.246+0000",
                    "started": "2020-02-09T04:13:00.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384040",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378136333\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -719,7 +719,7 @@ class ARROW_EXPORT MapType : public ListType {\n };\n \n /// \\brief Concrete type class for fixed size list data\n-class ARROW_EXPORT FixedSizeListType : public NestedType {\n+class ARROW_EXPORT FixedSizeListType : public BaseListType {\n \n Review comment:\n   @fsaintjacques ping?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T09:40:28.303+0000",
                    "updated": "2020-02-12T09:40:28.303+0000",
                    "started": "2020-02-12T09:40:28.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385766",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378261272\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -719,7 +719,7 @@ class ARROW_EXPORT MapType : public ListType {\n };\n \n /// \\brief Concrete type class for fixed size list data\n-class ARROW_EXPORT FixedSizeListType : public NestedType {\n+class ARROW_EXPORT FixedSizeListType : public BaseListType {\n \n Review comment:\n   Sorry for the late answer. I agree with your general sentiment. I like your solution of `is_var_length_list` more than the other options. Those traits are used at callsites where we need to differentiate when the value size (length) can be found on a per-value basis or in the type instance.\r\n   \r\n   The existing hierarchy and naming of type_traits is due to accumulate baggage, e.g. some code was using pattern matching with is_base_of and some newer code use the type_traits.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T13:50:41.007+0000",
                    "updated": "2020-02-12T13:50:41.007+0000",
                    "started": "2020-02-12T13:50:41.007+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385903",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378273516\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -219,11 +219,13 @@ std::string LargeListType::ToString() const {\n \n MapType::MapType(const std::shared_ptr<DataType>& key_type,\n                  const std::shared_ptr<DataType>& item_type, bool keys_sorted)\n+    : MapType(key_type, std::make_shared<Field>(\"value\", item_type), keys_sorted) {}\n \n Review comment:\n   Instead of `std::make_shared<Field>`, we can use `field(\"value\", item_type)` directly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T14:11:29.702+0000",
                    "updated": "2020-02-12T14:11:29.702+0000",
                    "started": "2020-02-12T14:11:29.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385930",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378274905\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -508,10 +508,20 @@ template <typename T, typename R = void>\n using enable_if_nested = enable_if_t<is_nested_type<T>::value, R>;\n \n template <typename T>\n-using is_base_list_type = std::is_base_of<BaseListType, T>;\n+using is_var_length_list_type =\n+    std::integral_constant<bool, std::is_base_of<LargeListType, T>::value ||\n+                                     std::is_base_of<ListType, T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_base_list = enable_if_t<is_base_list_type<T>::value, R>;\n+using enable_if_var_length_list = enable_if_t<is_var_length_list_type<T>::value, R>;\n+\n+// DEPRECATED use is_var_length_list_type.\n \n Review comment:\n   I'd be surprised if anyone use this, it was added in ... December?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T14:13:42.054+0000",
                    "updated": "2020-02-12T14:13:42.054+0000",
                    "started": "2020-02-12T14:13:42.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385933",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378301930\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.cc\n ##########\n @@ -56,19 +56,47 @@ namespace arrow {\n // ----------------------------------------------------------------------\n // Parquet to Arrow schema conversion\n \n-Status ListToNode(const std::shared_ptr<::arrow::ListType>& type, const std::string& name,\n-                  bool nullable, const WriterProperties& properties,\n+namespace {\n+Status FieldToNode(const std::string& name, const std::shared_ptr<Field>& field,\n+                   const WriterProperties& properties,\n+                   const ArrowWriterProperties& arrow_properties, NodePtr* out);\n+\n+Status ListToNode(const std::shared_ptr<::arrow::BaseListType>& type,\n+                  const std::string& name, bool nullable,\n+                  const WriterProperties& properties,\n                   const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n   Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n   NodePtr element;\n-  RETURN_NOT_OK(FieldToNode(type->value_field(), properties, arrow_properties, &element));\n+  std::string value_name =\n+      arrow_properties.compliant_nested_types() ? \"element\" : type->value_field()->name();\n+  RETURN_NOT_OK(FieldToNode(value_name, type->value_field(), properties, arrow_properties,\n+                            &element));\n \n   NodePtr list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n   *out = GroupNode::Make(name, repetition, {list}, LogicalType::List());\n   return Status::OK();\n }\n \n+Status MapToNode(const std::shared_ptr<::arrow::MapType>& type, const std::string& name,\n+                 bool nullable, const WriterProperties& properties,\n+                 const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n+  // TODO: Should we offer non-compliant moe that forwards the type names?\n+  NodePtr key_node;\n+  RETURN_NOT_OK(\n+      FieldToNode(\"key\", type->key_field(), properties, arrow_properties, &key_node));\n+\n+  NodePtr value_node;\n+  RETURN_NOT_OK(FieldToNode(\"value\", type->item_field(), properties, arrow_properties,\n+                            &value_node));\n+\n+  NodePtr key_value =\n+      GroupNode::Make(\"key_value\", Repetition::REPEATED, {key_node, value_node});\n+  Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n Review comment:\n   Might be worth having a tiny helper for this since it's repeated everywhere.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T14:55:39.174+0000",
                    "updated": "2020-02-12T14:55:39.174+0000",
                    "started": "2020-02-12T14:55:39.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385963",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378301930\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.cc\n ##########\n @@ -56,19 +56,47 @@ namespace arrow {\n // ----------------------------------------------------------------------\n // Parquet to Arrow schema conversion\n \n-Status ListToNode(const std::shared_ptr<::arrow::ListType>& type, const std::string& name,\n-                  bool nullable, const WriterProperties& properties,\n+namespace {\n+Status FieldToNode(const std::string& name, const std::shared_ptr<Field>& field,\n+                   const WriterProperties& properties,\n+                   const ArrowWriterProperties& arrow_properties, NodePtr* out);\n+\n+Status ListToNode(const std::shared_ptr<::arrow::BaseListType>& type,\n+                  const std::string& name, bool nullable,\n+                  const WriterProperties& properties,\n                   const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n   Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n   NodePtr element;\n-  RETURN_NOT_OK(FieldToNode(type->value_field(), properties, arrow_properties, &element));\n+  std::string value_name =\n+      arrow_properties.compliant_nested_types() ? \"element\" : type->value_field()->name();\n+  RETURN_NOT_OK(FieldToNode(value_name, type->value_field(), properties, arrow_properties,\n+                            &element));\n \n   NodePtr list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n   *out = GroupNode::Make(name, repetition, {list}, LogicalType::List());\n   return Status::OK();\n }\n \n+Status MapToNode(const std::shared_ptr<::arrow::MapType>& type, const std::string& name,\n+                 bool nullable, const WriterProperties& properties,\n+                 const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n+  // TODO: Should we offer non-compliant moe that forwards the type names?\n+  NodePtr key_node;\n+  RETURN_NOT_OK(\n+      FieldToNode(\"key\", type->key_field(), properties, arrow_properties, &key_node));\n+\n+  NodePtr value_node;\n+  RETURN_NOT_OK(FieldToNode(\"value\", type->item_field(), properties, arrow_properties,\n+                            &value_node));\n+\n+  NodePtr key_value =\n+      GroupNode::Make(\"key_value\", Repetition::REPEATED, {key_node, value_node});\n+  Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n Review comment:\n   Might be worth having a tiny helper `RepetitionFromNullable(bool)` for this since it's repeated everywhere.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T14:56:18.770+0000",
                    "updated": "2020-02-12T14:56:18.770+0000",
                    "started": "2020-02-12T14:56:18.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385964",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378303022\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.cc\n ##########\n @@ -56,19 +56,47 @@ namespace arrow {\n // ----------------------------------------------------------------------\n // Parquet to Arrow schema conversion\n \n-Status ListToNode(const std::shared_ptr<::arrow::ListType>& type, const std::string& name,\n-                  bool nullable, const WriterProperties& properties,\n+namespace {\n+Status FieldToNode(const std::string& name, const std::shared_ptr<Field>& field,\n+                   const WriterProperties& properties,\n+                   const ArrowWriterProperties& arrow_properties, NodePtr* out);\n+\n+Status ListToNode(const std::shared_ptr<::arrow::BaseListType>& type,\n+                  const std::string& name, bool nullable,\n+                  const WriterProperties& properties,\n                   const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n   Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n   NodePtr element;\n-  RETURN_NOT_OK(FieldToNode(type->value_field(), properties, arrow_properties, &element));\n+  std::string value_name =\n+      arrow_properties.compliant_nested_types() ? \"element\" : type->value_field()->name();\n+  RETURN_NOT_OK(FieldToNode(value_name, type->value_field(), properties, arrow_properties,\n+                            &element));\n \n   NodePtr list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n   *out = GroupNode::Make(name, repetition, {list}, LogicalType::List());\n   return Status::OK();\n }\n \n+Status MapToNode(const std::shared_ptr<::arrow::MapType>& type, const std::string& name,\n+                 bool nullable, const WriterProperties& properties,\n+                 const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n+  // TODO: Should we offer non-compliant moe that forwards the type names?\n \n Review comment:\n   Moe is a bartender, did you mean `node`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T14:57:08.951+0000",
                    "updated": "2020-02-12T14:57:08.951+0000",
                    "started": "2020-02-12T14:57:08.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385965",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/385969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r378305359\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/arrow_schema_test.cc\n ##########\n @@ -933,6 +941,128 @@ TEST_F(TestConvertArrowSchema, ParquetLists) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n }\n \n+TEST_F(TestConvertArrowSchema, ParquetMaps) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  //  optional group my_map (MAP) {\n+  //      repeated group key_value {\n+  //          required binary key (UTF8);\n+  //          optional binary value (UTF8);\n+  //\t}\n+  //  }\n+  {\n+    auto key = PrimitiveNode::Make(\"key\", Repetition::REQUIRED, ParquetType::BYTE_ARRAY,\n+                                   ConvertedType::UTF8);\n+    auto value = PrimitiveNode::Make(\"value\", Repetition::OPTIONAL,\n+                                     ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+\n+    auto list = GroupNode::Make(\"key_value\", Repetition::REPEATED, {key, value});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_map\", Repetition::OPTIONAL, {list}, ConvertedType::MAP));\n+    auto arrow_key = ::arrow::field(\"string\", UTF8, /*nullable=*/false);\n+    auto arrow_value = ::arrow::field(\"other_string\", UTF8, /*nullable=*/true);\n+    auto arrow_map = ::arrow::map(arrow_key->type(), arrow_value, /*nullable=*/false);\n+    arrow_fields.push_back(::arrow::field(\"my_map\", arrow_map, /*nullable=*/true));\n+  }\n+\n+  //  required group my_map (MAP) {\n+  //      repeated group key_value {\n+  //          required binary key (UTF8);\n+  //          required binary value (UTF8);\n+  //\t}\n+  //  }\n+  {\n+    auto key = PrimitiveNode::Make(\"key\", Repetition::REQUIRED, ParquetType::BYTE_ARRAY,\n+                                   ConvertedType::UTF8);\n+    auto value = PrimitiveNode::Make(\"value\", Repetition::REQUIRED,\n+                                     ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+\n+    auto list = GroupNode::Make(\"key_value\", Repetition::REPEATED, {key, value});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_map\", Repetition::REQUIRED, {list}, ConvertedType::MAP));\n+    auto arrow_key = ::arrow::field(\"string\", UTF8, /*nullable=*/false);\n+    auto arrow_value = ::arrow::field(\"other_string\", UTF8, /*nullable=*/false);\n+    auto arrow_map = ::arrow::map(arrow_key->type(), arrow_value);\n+    arrow_fields.push_back(::arrow::field(\"my_map\", arrow_map, /*nullable=*/false));\n+    ARROW_LOG(INFO) << arrow_fields.back()->ToString();\n+  }\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n+TEST_F(TestConvertArrowSchema, ParquetOtherLists) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  // parquet_arrow will always generate 3-level LIST encodings\n+\n+  // // List<String> (list non-null, elements nullable)\n+  // required group my_list (LIST) {\n+  //   repeated group list {\n+  //     optional binary element (UTF8);\n+  //   }\n+  // }\n+  {\n+    auto element = PrimitiveNode::Make(\"string\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::large_list(arrow_element);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+  {\n+    auto element = PrimitiveNode::Make(\"string\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::fixed_size_list(arrow_element, 10);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n+TEST_F(TestConvertArrowSchema, ParquetNestedComplianceEnabled) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  // parquet_arrow will always generate 3-level LIST encodings\n+\n+  // // List<String> (list non-null, elements nullable)\n+  // required group my_list (LIST) {\n+  //   repeated group list {\n+  //     optional binary element (UTF8);\n+  //   }\n+  // }\n+  {\n+    auto element = PrimitiveNode::Make(\"element\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::large_list(arrow_element);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+\n+  ArrowWriterProperties::Builder builder;\n+  builder.enable_compliant_nested_types();\n+  auto arrow_properties = builder.build();\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields, arrow_properties));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n \n Review comment:\n   I'd add also check when the values are not nullable.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-12T15:00:27.065+0000",
                    "updated": "2020-02-12T15:00:27.065+0000",
                    "started": "2020-02-12T15:00:27.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "385969",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380212168\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -1334,7 +1334,7 @@ class NullArrayFactory {\n     }\n \n     template <typename T>\n-    enable_if_base_list<T, Status> Visit(const T&) {\n+    enable_if_var_length_list<T, Status> Visit(const T&) {\n \n Review comment:\n   Nit: \"var size\" rather than \"var length\".\r\n   (we have FixedSizeList, which has a variable-sized length ;-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-17T14:28:00.917+0000",
                    "updated": "2020-02-17T14:28:00.917+0000",
                    "started": "2020-02-17T14:28:00.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388442",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380453726\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -1334,7 +1334,7 @@ class NullArrayFactory {\n     }\n \n     template <typename T>\n-    enable_if_base_list<T, Status> Visit(const T&) {\n+    enable_if_var_length_list<T, Status> Visit(const T&) {\n \n Review comment:\n   done.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T04:49:00.340+0000",
                    "updated": "2020-02-18T04:49:00.340+0000",
                    "started": "2020-02-18T04:49:00.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388659",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380454150\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -508,10 +508,20 @@ template <typename T, typename R = void>\n using enable_if_nested = enable_if_t<is_nested_type<T>::value, R>;\n \n template <typename T>\n-using is_base_list_type = std::is_base_of<BaseListType, T>;\n+using is_var_length_list_type =\n+    std::integral_constant<bool, std::is_base_of<LargeListType, T>::value ||\n+                                     std::is_base_of<ListType, T>::value>;\n \n template <typename T, typename R = void>\n-using enable_if_base_list = enable_if_t<is_base_list_type<T>::value, R>;\n+using enable_if_var_length_list = enable_if_t<is_var_length_list_type<T>::value, R>;\n+\n+// DEPRECATED use is_var_length_list_type.\n \n Review comment:\n   It was in a release, I also doubt it, but I think we should try to maintain compatibility especially if it was cheap like his.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T05:27:01.822+0000",
                    "updated": "2020-02-18T05:27:01.822+0000",
                    "started": "2020-02-18T05:27:01.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388662",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380453971\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -219,11 +219,13 @@ std::string LargeListType::ToString() const {\n \n MapType::MapType(const std::shared_ptr<DataType>& key_type,\n                  const std::shared_ptr<DataType>& item_type, bool keys_sorted)\n+    : MapType(key_type, std::make_shared<Field>(\"value\", item_type), keys_sorted) {}\n \n Review comment:\n   done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T05:27:01.825+0000",
                    "updated": "2020-02-18T05:27:01.825+0000",
                    "started": "2020-02-18T05:27:01.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388663",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380454930\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.cc\n ##########\n @@ -56,19 +56,47 @@ namespace arrow {\n // ----------------------------------------------------------------------\n // Parquet to Arrow schema conversion\n \n-Status ListToNode(const std::shared_ptr<::arrow::ListType>& type, const std::string& name,\n-                  bool nullable, const WriterProperties& properties,\n+namespace {\n+Status FieldToNode(const std::string& name, const std::shared_ptr<Field>& field,\n+                   const WriterProperties& properties,\n+                   const ArrowWriterProperties& arrow_properties, NodePtr* out);\n+\n+Status ListToNode(const std::shared_ptr<::arrow::BaseListType>& type,\n+                  const std::string& name, bool nullable,\n+                  const WriterProperties& properties,\n                   const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n   Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n   NodePtr element;\n-  RETURN_NOT_OK(FieldToNode(type->value_field(), properties, arrow_properties, &element));\n+  std::string value_name =\n+      arrow_properties.compliant_nested_types() ? \"element\" : type->value_field()->name();\n+  RETURN_NOT_OK(FieldToNode(value_name, type->value_field(), properties, arrow_properties,\n+                            &element));\n \n   NodePtr list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n   *out = GroupNode::Make(name, repetition, {list}, LogicalType::List());\n   return Status::OK();\n }\n \n+Status MapToNode(const std::shared_ptr<::arrow::MapType>& type, const std::string& name,\n+                 bool nullable, const WriterProperties& properties,\n+                 const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n+  // TODO: Should we offer non-compliant moe that forwards the type names?\n \n Review comment:\n   meant mode. updated.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T05:27:02.023+0000",
                    "updated": "2020-02-18T05:27:02.023+0000",
                    "started": "2020-02-18T05:27:02.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388664",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380454847\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/arrow_schema_test.cc\n ##########\n @@ -933,6 +941,128 @@ TEST_F(TestConvertArrowSchema, ParquetLists) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n }\n \n+TEST_F(TestConvertArrowSchema, ParquetMaps) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  //  optional group my_map (MAP) {\n+  //      repeated group key_value {\n+  //          required binary key (UTF8);\n+  //          optional binary value (UTF8);\n+  //\t}\n+  //  }\n+  {\n+    auto key = PrimitiveNode::Make(\"key\", Repetition::REQUIRED, ParquetType::BYTE_ARRAY,\n+                                   ConvertedType::UTF8);\n+    auto value = PrimitiveNode::Make(\"value\", Repetition::OPTIONAL,\n+                                     ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+\n+    auto list = GroupNode::Make(\"key_value\", Repetition::REPEATED, {key, value});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_map\", Repetition::OPTIONAL, {list}, ConvertedType::MAP));\n+    auto arrow_key = ::arrow::field(\"string\", UTF8, /*nullable=*/false);\n+    auto arrow_value = ::arrow::field(\"other_string\", UTF8, /*nullable=*/true);\n+    auto arrow_map = ::arrow::map(arrow_key->type(), arrow_value, /*nullable=*/false);\n+    arrow_fields.push_back(::arrow::field(\"my_map\", arrow_map, /*nullable=*/true));\n+  }\n+\n+  //  required group my_map (MAP) {\n+  //      repeated group key_value {\n+  //          required binary key (UTF8);\n+  //          required binary value (UTF8);\n+  //\t}\n+  //  }\n+  {\n+    auto key = PrimitiveNode::Make(\"key\", Repetition::REQUIRED, ParquetType::BYTE_ARRAY,\n+                                   ConvertedType::UTF8);\n+    auto value = PrimitiveNode::Make(\"value\", Repetition::REQUIRED,\n+                                     ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+\n+    auto list = GroupNode::Make(\"key_value\", Repetition::REPEATED, {key, value});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_map\", Repetition::REQUIRED, {list}, ConvertedType::MAP));\n+    auto arrow_key = ::arrow::field(\"string\", UTF8, /*nullable=*/false);\n+    auto arrow_value = ::arrow::field(\"other_string\", UTF8, /*nullable=*/false);\n+    auto arrow_map = ::arrow::map(arrow_key->type(), arrow_value);\n+    arrow_fields.push_back(::arrow::field(\"my_map\", arrow_map, /*nullable=*/false));\n+    ARROW_LOG(INFO) << arrow_fields.back()->ToString();\n+  }\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n+TEST_F(TestConvertArrowSchema, ParquetOtherLists) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  // parquet_arrow will always generate 3-level LIST encodings\n+\n+  // // List<String> (list non-null, elements nullable)\n+  // required group my_list (LIST) {\n+  //   repeated group list {\n+  //     optional binary element (UTF8);\n+  //   }\n+  // }\n+  {\n+    auto element = PrimitiveNode::Make(\"string\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::large_list(arrow_element);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+  {\n+    auto element = PrimitiveNode::Make(\"string\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::fixed_size_list(arrow_element, 10);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n+TEST_F(TestConvertArrowSchema, ParquetNestedComplianceEnabled) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+\n+  // parquet_arrow will always generate 3-level LIST encodings\n+\n+  // // List<String> (list non-null, elements nullable)\n+  // required group my_list (LIST) {\n+  //   repeated group list {\n+  //     optional binary element (UTF8);\n+  //   }\n+  // }\n+  {\n+    auto element = PrimitiveNode::Make(\"element\", Repetition::OPTIONAL,\n+                                       ParquetType::BYTE_ARRAY, ConvertedType::UTF8);\n+    auto list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n+    parquet_fields.push_back(\n+        GroupNode::Make(\"my_list\", Repetition::REQUIRED, {list}, ConvertedType::LIST));\n+    auto arrow_element = ::arrow::field(\"string\", UTF8, true);\n+    auto arrow_list = ::arrow::large_list(arrow_element);\n+    arrow_fields.push_back(::arrow::field(\"my_list\", arrow_list, false));\n+  }\n+\n+  ArrowWriterProperties::Builder builder;\n+  builder.enable_compliant_nested_types();\n+  auto arrow_properties = builder.build();\n+\n+  ASSERT_OK(ConvertSchema(arrow_fields, arrow_properties));\n+\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(parquet_fields));\n+}\n+\n \n Review comment:\n   done in a separate test.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T05:27:02.165+0000",
                    "updated": "2020-02-18T05:27:02.165+0000",
                    "started": "2020-02-18T05:27:02.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388665",
                    "issueId": "13283845"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/worklog/388666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6379: ARROW-7788: [C++][Parquet] Enable Arrow Schema to Parquet Schema for missing types\nURL: https://github.com/apache/arrow/pull/6379#discussion_r380455828\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.cc\n ##########\n @@ -56,19 +56,47 @@ namespace arrow {\n // ----------------------------------------------------------------------\n // Parquet to Arrow schema conversion\n \n-Status ListToNode(const std::shared_ptr<::arrow::ListType>& type, const std::string& name,\n-                  bool nullable, const WriterProperties& properties,\n+namespace {\n+Status FieldToNode(const std::string& name, const std::shared_ptr<Field>& field,\n+                   const WriterProperties& properties,\n+                   const ArrowWriterProperties& arrow_properties, NodePtr* out);\n+\n+Status ListToNode(const std::shared_ptr<::arrow::BaseListType>& type,\n+                  const std::string& name, bool nullable,\n+                  const WriterProperties& properties,\n                   const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n   Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n   NodePtr element;\n-  RETURN_NOT_OK(FieldToNode(type->value_field(), properties, arrow_properties, &element));\n+  std::string value_name =\n+      arrow_properties.compliant_nested_types() ? \"element\" : type->value_field()->name();\n+  RETURN_NOT_OK(FieldToNode(value_name, type->value_field(), properties, arrow_properties,\n+                            &element));\n \n   NodePtr list = GroupNode::Make(\"list\", Repetition::REPEATED, {element});\n   *out = GroupNode::Make(name, repetition, {list}, LogicalType::List());\n   return Status::OK();\n }\n \n+Status MapToNode(const std::shared_ptr<::arrow::MapType>& type, const std::string& name,\n+                 bool nullable, const WriterProperties& properties,\n+                 const ArrowWriterProperties& arrow_properties, NodePtr* out) {\n+  // TODO: Should we offer non-compliant moe that forwards the type names?\n+  NodePtr key_node;\n+  RETURN_NOT_OK(\n+      FieldToNode(\"key\", type->key_field(), properties, arrow_properties, &key_node));\n+\n+  NodePtr value_node;\n+  RETURN_NOT_OK(FieldToNode(\"value\", type->item_field(), properties, arrow_properties,\n+                            &value_node));\n+\n+  NodePtr key_value =\n+      GroupNode::Make(\"key_value\", Repetition::REPEATED, {key_node, value_node});\n+  Repetition::type repetition = nullable ? Repetition::OPTIONAL : Repetition::REQUIRED;\n \n Review comment:\n   done.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T05:27:02.387+0000",
                    "updated": "2020-02-18T05:27:02.387+0000",
                    "started": "2020-02-18T05:27:02.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388666",
                    "issueId": "13283845"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@744bcfb4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1515a829[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47703ce8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7f1c90cf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@703c4c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@9a564bf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f749e1f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@54f5f5d6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d49460d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f6b5387[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@484ac13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7fa4a210[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 18 16:53:32 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-18T16:53:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7788/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-02-07T06:46:27.000+0000",
        "updated": "2020-02-18T16:53:52.000+0000",
        "timeoriginalestimate": null,
        "description": "there is also some other cleanup that is probably worth doing:\r\n\r\n1.\u00a0 Adding \"large types\"\r\n\r\n2. Adding a flag to support parquet spec required naming for list types.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add schema conversion support for map type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283845/comment/17039234",
                    "id": "17039234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6379\n[https://github.com/apache/arrow/pull/6379]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-02-18T16:53:32.593+0000",
                    "updated": "2020-02-18T16:53:32.593+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0b8vc:",
        "customfield_12314139": null
    }
}