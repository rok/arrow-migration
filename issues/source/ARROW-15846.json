{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13432025",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025",
    "key": "ARROW-15846",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15846/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599\n\n\n   The original wording could lead to misunderstandings about the presence of a validity bitmap in struct arrays.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T12:30:55.361+0000",
                    "updated": "2022-03-10T12:30:55.361+0000",
                    "started": "2022-03-10T12:30:55.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739424",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#issuecomment-1064005191\n\n\n   https://issues.apache.org/jira/browse/ARROW-15846\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T12:31:07.975+0000",
                    "updated": "2022-03-10T12:31:07.975+0000",
                    "started": "2022-03-10T12:31:07.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739425",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824094653\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       it could be worth mentioning that the value in a null slot should be still initialized, i.e. deferencing a pointer pointing to it should not result in undefined behavior.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T19:45:38.071+0000",
                    "updated": "2022-03-10T19:45:38.071+0000",
                    "started": "2022-03-10T19:45:38.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739693",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824114223\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       can you clarify what you mean by UB here? Dereferencing a pointer should always be defined given other constraints but tools like ASAN might complain if you try to take actions on the memory location. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T20:09:38.588+0000",
                    "updated": "2022-03-10T20:09:38.588+0000",
                    "started": "2022-03-10T20:09:38.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739701",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824114517\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -522,19 +521,24 @@ The layout for ``[{'joe', 1}, {null, 2}, null, {'mark', 4}]`` would be: ::\n           |------------|-------------|-------------|-------------|-------------|\n           | 1          | 2           | unspecified | 4           | unspecified |\n \n-While a struct does not have physical storage for each of its semantic\n-slots (i.e. each scalar C-like struct), an entire struct slot can be\n-set to null via the validity bitmap. Any of the child field arrays can\n-have null values according to their respective independent validity\n-bitmaps. This implies that for a particular struct slot the validity\n-bitmap for the struct array might indicate a null slot when one or\n-more of its child arrays has a non-null value in their corresponding\n-slot.  When reading the struct array the parent validity bitmap takes\n-priority.  This is illustrated in the example above, the child arrays\n-have valid entries for the null struct but are 'hidden' from the\n-consumer by the parent array's validity bitmap.  However, when treated\n-independently corresponding values of the children array will be\n-non-null.\n+Struct Validity\n+~~~~~~~~~~~~~~~\n+\n+A struct array has its own validity bitmap in addition to each of its\n\nReview comment:\n       ```suggestion\r\n   A struct array has its own validity bitmap that is independent of\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T20:10:01.066+0000",
                    "updated": "2022-03-10T20:10:01.066+0000",
                    "started": "2022-03-10T20:10:01.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739702",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824114517\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -522,19 +521,24 @@ The layout for ``[{'joe', 1}, {null, 2}, null, {'mark', 4}]`` would be: ::\n           |------------|-------------|-------------|-------------|-------------|\n           | 1          | 2           | unspecified | 4           | unspecified |\n \n-While a struct does not have physical storage for each of its semantic\n-slots (i.e. each scalar C-like struct), an entire struct slot can be\n-set to null via the validity bitmap. Any of the child field arrays can\n-have null values according to their respective independent validity\n-bitmaps. This implies that for a particular struct slot the validity\n-bitmap for the struct array might indicate a null slot when one or\n-more of its child arrays has a non-null value in their corresponding\n-slot.  When reading the struct array the parent validity bitmap takes\n-priority.  This is illustrated in the example above, the child arrays\n-have valid entries for the null struct but are 'hidden' from the\n-consumer by the parent array's validity bitmap.  However, when treated\n-independently corresponding values of the children array will be\n-non-null.\n+Struct Validity\n+~~~~~~~~~~~~~~~\n+\n+A struct array has its own validity bitmap in addition to each of its\n\nReview comment:\n       ```suggestion\r\n   A struct array has its own validity bitmap that is independent of its\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T20:10:16.262+0000",
                    "updated": "2022-03-10T20:10:16.262+0000",
                    "started": "2022-03-10T20:10:16.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739704",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824114834\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -522,19 +521,24 @@ The layout for ``[{'joe', 1}, {null, 2}, null, {'mark', 4}]`` would be: ::\n           |------------|-------------|-------------|-------------|-------------|\n           | 1          | 2           | unspecified | 4           | unspecified |\n \n-While a struct does not have physical storage for each of its semantic\n-slots (i.e. each scalar C-like struct), an entire struct slot can be\n-set to null via the validity bitmap. Any of the child field arrays can\n-have null values according to their respective independent validity\n-bitmaps. This implies that for a particular struct slot the validity\n-bitmap for the struct array might indicate a null slot when one or\n-more of its child arrays has a non-null value in their corresponding\n-slot.  When reading the struct array the parent validity bitmap takes\n-priority.  This is illustrated in the example above, the child arrays\n-have valid entries for the null struct but are 'hidden' from the\n-consumer by the parent array's validity bitmap.  However, when treated\n-independently corresponding values of the children array will be\n-non-null.\n+Struct Validity\n+~~~~~~~~~~~~~~~\n+\n+A struct array has its own validity bitmap in addition to each of its\n+child arrays' own validity bitmap. This implies that, for a particular struct\n\nReview comment:\n       ```suggestion\r\n   child arrays' validity bitmaps. This implies that, for a particular struct\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T20:10:28.956+0000",
                    "updated": "2022-03-10T20:10:28.956+0000",
                    "started": "2022-03-10T20:10:28.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739705",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824218929\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       sorry, I meant to use the defered pointer for anything. I was thinking in terms of leveraging SIMD over null and non-null slots.\r\n   \r\n   An example (in Rust):\r\n   \r\n   ```rust\r\n   // cargo miri run --example example.rs\r\n   \r\n   // example.rs\r\n   fn main() {\r\n       let mut a = Vec::<u8>::with_capacity(4); // similar to aligned_alloc\r\n   \r\n       let mut dst = a.as_mut_ptr(); // `*mut u8`\r\n   \r\n       // create a [10, ?, 10, ?]\r\n       for i in 0..4 {\r\n           if i % 2 == 0 {\r\n               unsafe { dst.write(10) }\r\n           } else {\r\n               // let's skip this branch to \"save\" a `.write`\r\n           }\r\n           dst = unsafe { dst.add(1) };\r\n       }\r\n       unsafe { a.set_len(4) }    // this is unsound in Rust: we can't \"expose\" uninitialized memory\r\n   \r\n       let data = a.as_slice();\r\n   \r\n       // this is UB, we use un-initialized memory; however, we would benefit from being able to perform this op, if e.g.\r\n       // we wanted to perform the +1 over all values in lanes\r\n       data[1] + 1;\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T22:13:44.559+0000",
                    "updated": "2022-03-10T22:13:44.559+0000",
                    "started": "2022-03-10T22:13:44.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739745",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824218929\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       sorry, I meant to use the defered pointer for anything. I was thinking in terms of leveraging SIMD over null and non-null slots.\r\n   \r\n   An example (in Rust):\r\n   \r\n   ```rust\r\n   // cargo miri run --example example.rs\r\n   \r\n   // example.rs\r\n   fn main() {\r\n       let mut a = Vec::<u8>::with_capacity(4); // similar to aligned_alloc\r\n   \r\n       let mut dst = a.as_mut_ptr(); // `*mut u8`\r\n   \r\n       // create a [10, ?, 10, ?]\r\n       for i in 0..4 {\r\n           if i % 2 == 0 {\r\n               unsafe { dst.write(10) }\r\n           } else {\r\n               // let's skip this branch to \"save\" a `.write`\r\n           }\r\n           dst = unsafe { dst.add(1) };\r\n       }\r\n       unsafe { a.set_len(4) }    // this is unsound in Rust: we can't \"expose\" uninitialized memory\r\n   \r\n       let data = a.as_slice();\r\n   \r\n       // this is UB, we use un-initialized memory; however, we would benefit from being able to perform \r\n       /// this op, if e.g. we wanted to perform the +1 over all values in lanes\r\n       data[1] + 1;\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T22:14:20.346+0000",
                    "updated": "2022-03-10T22:14:20.346+0000",
                    "started": "2022-03-10T22:14:20.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739746",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824371738\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       This would be a change in specification but a minor one.   I'd point out that i think unless you specify zero initialized you still need to worry about UB because some could choose MAX_INT.    Where adding 1 for the signed values would cause an overflow and UB.    C++ amortized null values by finding chunks of non null sequences 256 values at a time and dispatching to SIMD for these cases\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T04:10:43.651+0000",
                    "updated": "2022-03-11T04:10:43.651+0000",
                    "started": "2022-03-11T04:10:43.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739848",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824398902\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       In Rust overflowing panics (doesn't UB)\r\n   \r\n   ```rust\r\n   #![allow(arithmetic_overflow)]\r\n   \r\n   fn main() {\r\n       let a = i32::MAX + 1; // this panics\r\n   }\r\n   ```\r\n   \r\n   but we usually use either saturating or wrapping as we do not want the query engine to panic if the user performs an operation that would panic in a non-null slot.\r\n   \r\n   fwiw `numpy` uses wrapping: `import numpy; a = numpy.array([2147483647], dtype=numpy.int32); print(a + 1) // [-2147483648]`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T05:30:54.226+0000",
                    "updated": "2022-03-11T05:30:54.226+0000",
                    "started": "2022-03-11T05:30:54.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739868",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824398902\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       In Rust overflowing panics (doesn't UB)\r\n   \r\n   ```rust\r\n   #![allow(arithmetic_overflow)] // the linter does not even compile the below without this ^^\r\n   \r\n   fn main() {\r\n       let a = i32::MAX + 1; // this panics\r\n   }\r\n   ```\r\n   \r\n   but we usually use either saturating or wrapping as we do not want the query engine to panic if the user performs an operation that would panic in a non-null slot.\r\n   \r\n   fwiw `numpy` uses wrapping: `import numpy; a = numpy.array([2147483647], dtype=numpy.int32); print(a + 1) // [-2147483648]`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T05:31:26.734+0000",
                    "updated": "2022-03-11T05:31:26.734+0000",
                    "started": "2022-03-11T05:31:26.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739869",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824398902\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       In Rust overflowing panics in debug and wraps in release (doesn't UB)\r\n   \r\n   ```rust\r\n   #![allow(arithmetic_overflow)] // the linter does not even compile the below without this ^^\r\n   \r\n   fn main() {\r\n       let a = i32::MAX + 1; // panics debug, wraps in release\r\n   }\r\n   ```\r\n   \r\n   but we usually use either saturating or wrapping as we do not want the query engine to panic if the user performs an operation that would panic in a non-null slot.\r\n   \r\n   fwiw `numpy` uses wrapping: `import numpy; a = numpy.array([2147483647], dtype=numpy.int32); print(a + 1) // [-2147483648]`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T05:38:51.348+0000",
                    "updated": "2022-03-11T05:38:51.348+0000",
                    "started": "2022-03-11T05:38:51.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739872",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/739886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824416986\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       > In Rust overflowing panics in debug and wraps in release (doesn't UB)\r\n   \r\n   OK, there are differences in C++ and Rust's definition of UB so I guess we should be careful with terminology.  I still think this is technically a specification change, and I feel like it has been discussed on the past in the mailing list (but maybe that was zero initialization) and there didn't seem like strong enough consensus to make the change.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T06:16:59.231+0000",
                    "updated": "2022-03-11T06:16:59.231+0000",
                    "started": "2022-03-11T06:16:59.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739886",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/740199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824961421\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       @jorgecarleitao Sorry, I'm still not entirely sure what initialized means.  Can you give an example of what it would mean for memory to be \"initialized\" but not \"zero initialized\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T18:17:17.722+0000",
                    "updated": "2022-03-11T18:17:17.722+0000",
                    "started": "2022-03-11T18:17:17.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740199",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/740207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r824966527\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -522,19 +521,24 @@ The layout for ``[{'joe', 1}, {null, 2}, null, {'mark', 4}]`` would be: ::\n           |------------|-------------|-------------|-------------|-------------|\n           | 1          | 2           | unspecified | 4           | unspecified |\n \n-While a struct does not have physical storage for each of its semantic\n-slots (i.e. each scalar C-like struct), an entire struct slot can be\n-set to null via the validity bitmap. Any of the child field arrays can\n-have null values according to their respective independent validity\n-bitmaps. This implies that for a particular struct slot the validity\n-bitmap for the struct array might indicate a null slot when one or\n-more of its child arrays has a non-null value in their corresponding\n-slot.  When reading the struct array the parent validity bitmap takes\n-priority.  This is illustrated in the example above, the child arrays\n-have valid entries for the null struct but are 'hidden' from the\n-consumer by the parent array's validity bitmap.  However, when treated\n-independently corresponding values of the children array will be\n-non-null.\n+Struct Validity\n+~~~~~~~~~~~~~~~\n+\n+A struct array has its own validity bitmap in addition to each of its\n+child arrays' own validity bitmap. This implies that, for a particular struct\n+array slot, the validity bitmap for the struct array might indicate a null\n+when one or more of its child arrays has a non-null value in their corresponding\n+slot; or conversely, a child array might have a null in its validity bitmap\n+while the struct array's validity bitmap shows a non-null value.\n+\n+Therefore, to know whether a particular child entry is null, one must\n\nReview comment:\n       ```suggestion\r\n   Therefore, to know whether a particular child entry is valid, one must\r\n   ```\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -522,19 +521,24 @@ The layout for ``[{'joe', 1}, {null, 2}, null, {'mark', 4}]`` would be: ::\n           |------------|-------------|-------------|-------------|-------------|\n           | 1          | 2           | unspecified | 4           | unspecified |\n \n-While a struct does not have physical storage for each of its semantic\n-slots (i.e. each scalar C-like struct), an entire struct slot can be\n-set to null via the validity bitmap. Any of the child field arrays can\n-have null values according to their respective independent validity\n-bitmaps. This implies that for a particular struct slot the validity\n-bitmap for the struct array might indicate a null slot when one or\n-more of its child arrays has a non-null value in their corresponding\n-slot.  When reading the struct array the parent validity bitmap takes\n-priority.  This is illustrated in the example above, the child arrays\n-have valid entries for the null struct but are 'hidden' from the\n-consumer by the parent array's validity bitmap.  However, when treated\n-independently corresponding values of the children array will be\n-non-null.\n+Struct Validity\n+~~~~~~~~~~~~~~~\n+\n+A struct array has its own validity bitmap in addition to each of its\n+child arrays' own validity bitmap. This implies that, for a particular struct\n+array slot, the validity bitmap for the struct array might indicate a null\n+when one or more of its child arrays has a non-null value in their corresponding\n+slot; or conversely, a child array might have a null in its validity bitmap\n+while the struct array's validity bitmap shows a non-null value.\n\nReview comment:\n       ```suggestion\r\n   A struct array has its own validity bitmap in addition to each of its\r\n   child arrays' own validity bitmap. The validity bitmap for the struct\r\n   array might indicate a null when one or more of its child arrays has\r\n   a non-null value in their corresponding slot; or conversely, a child\r\n   array might have a null in its validity bitmap while the struct array's\r\n   validity bitmap shows a non-null value.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T18:27:03.051+0000",
                    "updated": "2022-03-11T18:27:03.051+0000",
                    "started": "2022-03-11T18:27:03.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740207",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/740448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#discussion_r825314240\n\n\n\n##########\nFile path: docs/source/format/Columnar.rst\n##########\n@@ -208,17 +208,19 @@ right-to-left: ::\n               0  0  1  0  1  0  1  1\n \n Arrays having a 0 null count may choose to not allocate the validity\n-bitmap. Implementations may choose to always allocate one anyway as a\n-matter of convenience, but this should be noted when memory is being\n-shared.\n+bitmap; how this is represented depends on the implementation (for\n+example, a C++ implementation may represent such an \"absent\" validity\n+bitmap using a NULL pointer). Implementations may choose to always allocate\n+a validity bitmap anyway as a matter of convenience. Consumers of Arrow\n+arrays should be ready to handle those two possibilities.\n \n-Nested type arrays except for union types have their own validity bitmap and\n-null count regardless of the null count and valid bits of their child arrays.\n+Nested type arrays (except for union types as noted above) have their own\n+top-level validity bitmap and null count, regardless of the null count and\n+valid bits of their child arrays.\n \n-Array slots which are null are not required to have a particular\n-value; any \"masked\" memory can have any value and need not be zeroed,\n-though implementations frequently choose to zero memory for null\n-values.\n+Array slots which are null are not required to have a particular value;\n+any \"masked\" memory can have any value and need not be zeroed, though\n\nReview comment:\n       The rational of this comment is related to general observations about C, C++ and Rust, nicely described e.g. here: https://www.ralfj.de/blog/2019/07/14/uninit.html\r\n   \r\n   all zero-initialized memory is initialized, but not all initialized memory is zero-initialized. My comment/suggestion to require regions to be initialized so that users can access and operate over null slots without triggering undefined behavior.\r\n   \r\n   However, I do agree with Micah that this is beyond this PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-12T15:21:01.917+0000",
                    "updated": "2022-03-12T15:21:01.917+0000",
                    "started": "2022-03-12T15:21:01.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740448",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/740977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T16:02:00.101+0000",
                    "updated": "2022-03-14T16:02:00.101+0000",
                    "started": "2022-03-14T16:02:00.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740977",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/740991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#issuecomment-1067011157\n\n\n   Benchmark runs are scheduled for baseline = 5cb5afc40547b4f75739e31ff8632c71a10d3084 and contender = 56b06bbe90e279dd4000736bd1e7d14d7b0558ca. 56b06bbe90e279dd4000736bd1e7d14d7b0558ca is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/506f0446281942c0958b68df2ef20e55...4a532973ae45491186c7ff050f531e4e/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/71f9fee4c7d14bb589bacb2e4a95f605...40b0b7b632a541b892f934048c0c05ec/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2cffd91b5ca14a20b5df0d0bf5ee7ae9...20fd46e8541d4b83b48f4e73dea2728f/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/64116ccec5c34c50b0443a90f06214ec...56544810c45b42be9ce03228db4d66ab/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T16:11:46.103+0000",
                    "updated": "2022-03-14T16:11:46.103+0000",
                    "started": "2022-03-14T16:11:46.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "740991",
                    "issueId": "13432025"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/worklog/741007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12599:\nURL: https://github.com/apache/arrow/pull/12599#issuecomment-1067011157\n\n\n   Benchmark runs are scheduled for baseline = 5cb5afc40547b4f75739e31ff8632c71a10d3084 and contender = 56b06bbe90e279dd4000736bd1e7d14d7b0558ca. 56b06bbe90e279dd4000736bd1e7d14d7b0558ca is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/506f0446281942c0958b68df2ef20e55...4a532973ae45491186c7ff050f531e4e/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/71f9fee4c7d14bb589bacb2e4a95f605...40b0b7b632a541b892f934048c0c05ec/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2cffd91b5ca14a20b5df0d0bf5ee7ae9...20fd46e8541d4b83b48f4e73dea2728f/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/64116ccec5c34c50b0443a90f06214ec...56544810c45b42be9ce03228db4d66ab/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T16:31:58.937+0000",
                    "updated": "2022-03-14T16:31:58.937+0000",
                    "started": "2022-03-14T16:31:58.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741007",
                    "issueId": "13432025"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1ce02977[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@192b9938[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35b2f67a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@70954bad[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3593778d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3bd5008a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@197630ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@43e4d80c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6de5e0e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e276c84[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@567cc0bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@333d46c7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 14 16:01:49 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-14T16:01:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15846/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-03-04T14:08:06.000+0000",
        "updated": "2022-03-14T19:31:59.000+0000",
        "timeoriginalestimate": null,
        "description": "The following wording in the format spec is a bit ambiguous:\r\n\r\nbq.  A struct array must still have an allocated validity bitmap, if it has one or more null values.\r\n\r\nhttps://arrow.apache.org/docs/format/Columnar.html#struct-layout\r\n\r\nThis can be misinterpreted as meaning that a struct array with no nulls does not have any buffer at all. In reality, it has an \"absent\" validity buffer (e.g. with 0 length).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Format] Clarify presence of Struct array validity bitmap",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432025/comment/17506310",
                    "id": "17506310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12599\n[https://github.com/apache/arrow/pull/12599]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-03-14T16:01:49.389+0000",
                    "updated": "2022-03-14T16:01:49.389+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z106jk:",
        "customfield_12314139": null
    }
}