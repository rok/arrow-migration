{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13431786",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786",
    "key": "ARROW-15841",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15841/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/736337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558\n\n\n   This is a very WIP draft that currently just sketches a few things related to calling into R from other threads. Some code to get started:\r\n   \r\n   ``` r\r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() \"string one\",\r\n       function() \"string two\"\r\n     )\r\n   )\r\n   #> [1] \"string one\" \"string two\"\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() stop(\"This is an error!\")\r\n     )\r\n   )\r\n   #> Error in (function () : This is an error!\r\n   ```\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T21:05:50.714+0000",
                    "updated": "2022-03-03T21:05:50.714+0000",
                    "started": "2022-03-03T21:05:50.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736337",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/736338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1058495172\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T21:06:13.381+0000",
                    "updated": "2022-03-03T21:06:13.381+0000",
                    "started": "2022-03-03T21:06:13.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736338",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/736441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1058755946\n\n\n   (See also https://github.com/westonpace/arrow/pull/10)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T02:10:22.833+0000",
                    "updated": "2022-03-04T02:10:22.833+0000",
                    "started": "2022-03-04T02:10:22.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736441",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/747873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1079223791\n\n\n   Redoing this with an eye towards where I would actually like to use it! I think that it does need a synchronous `Status<cpp_type> SafeCallIntoR<cpp_type>([]() { return r_api_call(); })`, even if all the synchronous version does is error when it's not safe to execute R code. A `SafeCallIntoRAsync()` would also be useful but I'm not sure of the details of how to implement it.\r\n   \r\n   The places where I would prefer to use this in some other PRs:\r\n   \r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R103-R108\r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R144-R146\r\n   - https://github.com/apache/arrow/pull/12323/files#diff-e518a9483c6cdc0c05e79d7ebe59539a3107cd47bb6312d431a83d9d8555a3a9R248-R313\r\n   \r\n   \r\n   \r\n   Some sketch examples:\r\n   \r\n   ``` r\r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() \"string one\",\r\n       function() \"string two\"\r\n     ),\r\n     async = FALSE\r\n   )\r\n   #> [1] \"string one\" \"string two\"\r\n   \r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() stop(\"This is an error!\")\r\n     ),\r\n     async = FALSE\r\n   )\r\n   #> Error in (function () : This is an error!\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() \"string one\",\r\n       function() \"string two\"\r\n     ),\r\n     async = TRUE\r\n   )\r\n   #> Error: NotImplemented: Call to R from a non-R thread\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     list(\r\n       function() stop(\"This is an error!\")\r\n     ),\r\n     async = TRUE\r\n   )\r\n   #> Error: NotImplemented: Call to R from a non-R thread\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T17:03:51.984+0000",
                    "updated": "2022-03-25T17:03:51.984+0000",
                    "started": "2022-03-25T17:03:51.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747873",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/747935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1079223791\n\n\n   Redoing this with an eye towards where I would actually like to use it! I think that it does need a synchronous `Status<cpp_type> SafeCallIntoR<cpp_type>([]() { return r_api_call(); })`, even if all the synchronous version does is error when it's not safe to execute R code. A `SafeCallIntoRAsync()` would also be useful but I'm not sure of the details of how to implement it.\r\n   \r\n   The places where I would prefer to use this in some other PRs:\r\n   \r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R103-R108\r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R144-R146\r\n   - https://github.com/apache/arrow/pull/12323/files#diff-e518a9483c6cdc0c05e79d7ebe59539a3107cd47bb6312d431a83d9d8555a3a9R248-R313\r\n   \r\n   \r\n   \r\n   Some sketch examples:\r\n   \r\n   ``` r\r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"on_main_thread\"\r\n   )\r\n   #> [1] \"string one!\"\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() stop(\"This is an error\"),\r\n     opt = \"on_main_thread\"\r\n   )\r\n   #> Error in (function () : This is an error\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"async_with_executor\"\r\n   )\r\n   #> [1] \"string one!\"\r\n   \r\n   # This runs with the expected error, but causes subsequent segfaults, probably related\r\n   # to the error_token_ (maybe having to do with the copy-constructor?)\r\n   \r\n   # arrow:::TestSafeCallIntoR(\r\n   #   function() stop(\"This is an error\"),\r\n   #   opt = \"async_with_executor\"\r\n   # )\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"async_without_executor\"\r\n   )\r\n   #> Error: NotImplemented: Call to R from a non-R thread without an event loop\r\n   ```\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T19:26:04.309+0000",
                    "updated": "2022-03-25T19:26:04.309+0000",
                    "started": "2022-03-25T19:26:04.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747935",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/747948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1079223791\n\n\n   Redoing this with an eye towards where I would actually like to use it! I think that it does need a synchronous `Status<cpp_type> SafeCallIntoR<cpp_type>([]() { return r_api_call(); })`, even if all the synchronous version does is error when it's not safe to execute R code. I think I have this working from other threads too but I'm too new to this to know exactly what I should be testing.\r\n   \r\n   The places where I would prefer to use this in some other PRs:\r\n   \r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R103-R108\r\n   - https://github.com/apache/arrow/pull/12467/files#diff-b3e736a08e6e6823de704595b9204a1a9907f75c639d32c50cf7b4a79f3e3153R144-R146\r\n   - https://github.com/apache/arrow/pull/12323/files#diff-e518a9483c6cdc0c05e79d7ebe59539a3107cd47bb6312d431a83d9d8555a3a9R248-R313\r\n   \r\n   \r\n   \r\n   Some sketch examples:\r\n   \r\n   ``` r\r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"on_main_thread\"\r\n   )\r\n   #> [1] \"string one!\"\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() stop(\"This is an error\"),\r\n     opt = \"on_main_thread\"\r\n   )\r\n   #> Error in (function () : This is an error\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"async_with_executor\"\r\n   )\r\n   #> [1] \"string one!\"\r\n   \r\n   # This runs with the expected error, but causes subsequent segfaults, probably related\r\n   # to the error_token_ (maybe having to do with the copy-constructor?)\r\n   \r\n   # arrow:::TestSafeCallIntoR(\r\n   #   function() stop(\"This is an error\"),\r\n   #   opt = \"async_with_executor\"\r\n   # )\r\n   \r\n   arrow:::TestSafeCallIntoR(\r\n     function() \"string one!\",\r\n     opt = \"async_without_executor\"\r\n   )\r\n   #> Error: NotImplemented: Call to R from a non-R thread without an event loop\r\n   ```\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T19:47:35.313+0000",
                    "updated": "2022-03-25T19:47:35.313+0000",
                    "started": "2022-03-25T19:47:35.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747948",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/748013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r835591009\n\n\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n\nReview comment:\n       Nit: stylistically, for read-only singletons, you can do:\r\n   \r\n   ```\r\n   MainRThread* GetMainRThread() {\r\n     static MainRThread main_r_thread;\r\n     return &main_r_thread;\r\n   }\r\n   ```\r\n   \r\n   ...or even...\r\n   \r\n   ```\r\n   const MainRThread& GetMainRThread() {\r\n     static MainRThread main_r_thread;\r\n     return main_r_thread;\r\n   }\r\n   ```\r\n   \r\n   This moves initialization from program load time to the first time `GetMainRThread` is called which, admittedly, doesn't matter 80% of the time :)\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // Class whose run() method will be called from the main R thread\n+  // but whose results may be accessed (as class fields) from\n+  // potentially another thread.\n+  class Task {\n+   public:\n+    virtual ~Task() {}\n+    virtual arrow::Status run() = 0;\n+  };\n+\n+  // Run `task` if it is safe to do so or return an error otherwise.\n+  arrow::Status RunTask(Task* task);\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      SetError(R_NilValue);\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread* GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_sexp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  class TypedTask : public MainRThread::Task {\n+   public:\n+    explicit TypedTask(std::function<T(void)> fun) : fun_(fun) {}\n+\n+    arrow::Status run() {\n+      result = fun_();\n+      return arrow::Status::OK();\n+    }\n+\n+    T result;\n+\n+   private:\n+    std::function<T(void)> fun_;\n+  };\n+\n+  TypedTask task(fun);\n+  ARROW_RETURN_NOT_OK(GetMainRThread()->RunTask(&task));\n+  return task.result;\n+}\n+\n+template <typename T>\n+arrow::Result<T> RunWithCapturedR(std::function<arrow::Future<T>()> task) {\n\nReview comment:\n       It is just slightly confusing that this variable is named `task` but it isn't of type `Task`.  Maybe call it `arrow_task` or `make_arrow_call`.\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n\nReview comment:\n       Hmm, it seems to say below that `some_expression_returning_sexp` can't return a `sexp`?\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n+    } catch (cpp11::unwind_exception& e) {\n+      SetError(e.token);\n+      return arrow::Status::UnknownError(\"R code execution error\");\n+    }\n+  } else if (executor_ != nullptr) {\n+    // If we are not on the main thread and have an Executor\n+    // use it to run the task on the main R thread.\n+    auto fut = executor_->Submit([task]() { return task->run(); });\n+    ARROW_RETURN_NOT_OK(fut);\n+    ARROW_RETURN_NOT_OK(fut.ValueUnsafe().result());\n+    return arrow::Status::OK();\n+  } else {\n+    return arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without an event loop\");\n\nReview comment:\n       Nit: Maybe be more explicit and say `without calling RunWithCapturedR`.  You and I know what \"event loop\" means but future developers might not.\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // Class whose run() method will be called from the main R thread\n+  // but whose results may be accessed (as class fields) from\n+  // potentially another thread.\n+  class Task {\n+   public:\n+    virtual ~Task() {}\n+    virtual arrow::Status run() = 0;\n+  };\n+\n+  // Run `task` if it is safe to do so or return an error otherwise.\n+  arrow::Status RunTask(Task* task);\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      SetError(R_NilValue);\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread* GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_sexp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  class TypedTask : public MainRThread::Task {\n+   public:\n+    explicit TypedTask(std::function<T(void)> fun) : fun_(fun) {}\n+\n+    arrow::Status run() {\n+      result = fun_();\n+      return arrow::Status::OK();\n+    }\n+\n+    T result;\n+\n+   private:\n+    std::function<T(void)> fun_;\n+  };\n+\n+  TypedTask task(fun);\n\nReview comment:\n       ```suggestion\r\n     TypedTask task(std::move(fun));\r\n   ```\r\n   Just a nit, but some `std::function` objects can actually carry quite a bit of captured state.\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // Class whose run() method will be called from the main R thread\n+  // but whose results may be accessed (as class fields) from\n+  // potentially another thread.\n+  class Task {\n+   public:\n+    virtual ~Task() {}\n+    virtual arrow::Status run() = 0;\n+  };\n+\n+  // Run `task` if it is safe to do so or return an error otherwise.\n+  arrow::Status RunTask(Task* task);\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      SetError(R_NilValue);\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread* GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_sexp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n\nReview comment:\n       I'm a little torn on whether this (and correspondingly `RunTask`) should return `arrow::Result<T>` or `arrow::Future<T>`.\r\n   \r\n   On the one hand, as it is, we have better parity with python.  However, in python, when we call \"safe call into python\" we know that the work is going to be done by the calling thread.  There is no need or ability to return a future.\r\n   \r\n   With R on the other hand we know the work is, in many cases, not going to happen on the calling thread.  So then we end up blocking the calling thread while we wait for the R work to complete.  Generally, for the \"let's use the connections library for I/O\" domain this isn't a problem, because the calling thread, if not already the R main thread, will be an I/O thread and we can safely let it block.\r\n   \r\n   That being said, I think it is slightly more flexible if this returns `Future<T>` and helps future-proof us as we add more callbacks like this.\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n+    } catch (cpp11::unwind_exception& e) {\n+      SetError(e.token);\n+      return arrow::Status::UnknownError(\"R code execution error\");\n+    }\n+  } else if (executor_ != nullptr) {\n+    // If we are not on the main thread and have an Executor\n+    // use it to run the task on the main R thread.\n+    auto fut = executor_->Submit([task]() { return task->run(); });\n+    ARROW_RETURN_NOT_OK(fut);\n+    ARROW_RETURN_NOT_OK(fut.ValueUnsafe().result());\n+    return arrow::Status::OK();\n+  } else {\n+    return arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without an event loop\");\n+  }\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { main_r_thread.Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            if (result.ok()) {\n+              fut.MarkFinished(result.ValueUnsafe());\n+            } else {\n+              fut.MarkFinished(result.status());\n+            }\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n+\n+    // Stop for any R execution errors that may have occurred\n+    GetMainRThread()->ClearError();\n\nReview comment:\n       It seems the burden of calling `ClearError` shouldn't be on the user here.  Can we move this call into `RunTask`?\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n\nReview comment:\n       ```suggestion\r\n         return task->run();\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-safe-call-into-r.R\n##########\n@@ -0,0 +1,55 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+test_that(\"SafeCallIntoR works from the main R thread\", {\n+  expect_identical(\n+    TestSafeCallIntoR(function() \"string one!\", opt = \"on_main_thread\"),\n+    \"string one!\"\n+  )\n+\n+  expect_error(\n+    TestSafeCallIntoR(function() stop(\"an error!\"), opt = \"on_main_thread\"),\n+    \"an error!\"\n+  )\n+})\n+\n+test_that(\"SafeCallIntoR works within RunWithCapturedR\", {\n+  expect_identical(\n+    TestSafeCallIntoR(function() \"string one!\", opt = \"async_with_executor\"),\n+    \"string one!\"\n+  )\n+\n+  # This runs with the expected error, but causes subsequent segfaults, probably related\n+  # to the error_token_ (maybe having to do with the copy-constructor?)\n+  # expect_error(\n+  #   TestSafeCallIntoR(function() stop(\"an error!\"), opt = \"async_with_executor\"),\n+  #   \"an error!\"\n+  # )\n\nReview comment:\n       Does this still need investigation?\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n+    } catch (cpp11::unwind_exception& e) {\n+      SetError(e.token);\n+      return arrow::Status::UnknownError(\"R code execution error\");\n+    }\n+  } else if (executor_ != nullptr) {\n+    // If we are not on the main thread and have an Executor\n+    // use it to run the task on the main R thread.\n+    auto fut = executor_->Submit([task]() { return task->run(); });\n+    ARROW_RETURN_NOT_OK(fut);\n+    ARROW_RETURN_NOT_OK(fut.ValueUnsafe().result());\n+    return arrow::Status::OK();\n\nReview comment:\n       ```suggestion\r\n       auto fut = DeferNotOk(executor_->Submit([task]() { return task->run(); }));\r\n       return fut.status();\r\n   ```\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n+    } catch (cpp11::unwind_exception& e) {\n+      SetError(e.token);\n+      return arrow::Status::UnknownError(\"R code execution error\");\n+    }\n+  } else if (executor_ != nullptr) {\n+    // If we are not on the main thread and have an Executor\n+    // use it to run the task on the main R thread.\n+    auto fut = executor_->Submit([task]() { return task->run(); });\n+    ARROW_RETURN_NOT_OK(fut);\n+    ARROW_RETURN_NOT_OK(fut.ValueUnsafe().result());\n+    return arrow::Status::OK();\n+  } else {\n+    return arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without an event loop\");\n+  }\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { main_r_thread.Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            if (result.ok()) {\n+              fut.MarkFinished(result.ValueUnsafe());\n+            } else {\n+              fut.MarkFinished(result.status());\n+            }\n\nReview comment:\n       ```suggestion\r\n   fut.MarkFinished(result);\r\n   ```\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // Class whose run() method will be called from the main R thread\n+  // but whose results may be accessed (as class fields) from\n+  // potentially another thread.\n+  class Task {\n+   public:\n+    virtual ~Task() {}\n+    virtual arrow::Status run() = 0;\n+  };\n+\n+  // Run `task` if it is safe to do so or return an error otherwise.\n+  arrow::Status RunTask(Task* task);\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      SetError(R_NilValue);\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread* GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_sexp<T> to convert it to a C++ type inside\n\nReview comment:\n       I don't really know how C++ <-> sexp works but `as_sexp` intuitively seems like you would be converting from C++ to sexp and the comment says this is to convert from sexp to C++.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T21:17:04.158+0000",
                    "updated": "2022-03-25T21:17:04.158+0000",
                    "started": "2022-03-25T21:17:04.157+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748013",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/749566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r837832796\n\n\n\n##########\nFile path: r/tests/testthat/test-safe-call-into-r.R\n##########\n@@ -0,0 +1,55 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+test_that(\"SafeCallIntoR works from the main R thread\", {\n+  expect_identical(\n+    TestSafeCallIntoR(function() \"string one!\", opt = \"on_main_thread\"),\n+    \"string one!\"\n+  )\n+\n+  expect_error(\n+    TestSafeCallIntoR(function() stop(\"an error!\"), opt = \"on_main_thread\"),\n+    \"an error!\"\n+  )\n+})\n+\n+test_that(\"SafeCallIntoR works within RunWithCapturedR\", {\n+  expect_identical(\n+    TestSafeCallIntoR(function() \"string one!\", opt = \"async_with_executor\"),\n+    \"string one!\"\n+  )\n+\n+  # This runs with the expected error, but causes subsequent segfaults, probably related\n+  # to the error_token_ (maybe having to do with the copy-constructor?)\n+  # expect_error(\n+  #   TestSafeCallIntoR(function() stop(\"an error!\"), opt = \"async_with_executor\"),\n+  #   \"an error!\"\n+  # )\n\nReview comment:\n       It totally did! The gist of it was that we need to catch any `cpp11::unwind_exception` that is thrown when executing something on the event loop (the latest version has this, although it could use some more experienced eyes to make sure that my function wrapper is written properly).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T19:23:43.696+0000",
                    "updated": "2022-03-29T19:23:43.696+0000",
                    "started": "2022-03-29T19:23:43.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749566",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/749567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r837833137\n\n\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+static MainRThread main_r_thread;\n+\n+MainRThread* GetMainRThread() { return &main_r_thread; }\n+\n+arrow::Status MainRThread::RunTask(Task* task) {\n+  if (IsMainThread()) {\n+    // If we're on the main thread, run the task immediately\n+    try {\n+      ARROW_RETURN_NOT_OK(task->run());\n+      return arrow::Status::OK();\n+    } catch (cpp11::unwind_exception& e) {\n+      SetError(e.token);\n+      return arrow::Status::UnknownError(\"R code execution error\");\n+    }\n+  } else if (executor_ != nullptr) {\n+    // If we are not on the main thread and have an Executor\n+    // use it to run the task on the main R thread.\n+    auto fut = executor_->Submit([task]() { return task->run(); });\n+    ARROW_RETURN_NOT_OK(fut);\n+    ARROW_RETURN_NOT_OK(fut.ValueUnsafe().result());\n+    return arrow::Status::OK();\n+  } else {\n+    return arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without an event loop\");\n+  }\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { main_r_thread.Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            if (result.ok()) {\n+              fut.MarkFinished(result.ValueUnsafe());\n+            } else {\n+              fut.MarkFinished(result.status());\n+            }\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n+\n+    // Stop for any R execution errors that may have occurred\n+    GetMainRThread()->ClearError();\n\nReview comment:\n       Good point...I moved it to `RunWithCapturedR()`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T19:24:16.369+0000",
                    "updated": "2022-03-29T19:24:16.369+0000",
                    "started": "2022-03-29T19:24:16.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749567",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/749575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r837837837\n\n\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n+  } else if (main_r_thread.Executor() != nullptr) {\n+    // If we are not on the main thread and have an Executor,\n+    // use it to run the task on the main R thread. We can't throw\n+    // a cpp11::unwind_exception here, so we need to propagate it back\n+    // to RunWithCapturedR through the MainRThread singleton.\n+    return DeferNotOk(main_r_thread.Executor()->Submit([fun]() {\n+      if (GetMainRThread().HasError()) {\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+\n+      try {\n+        return arrow::Result<T>(fun());\n+      } catch (cpp11::unwind_exception& e) {\n+        GetMainRThread().SetError(e.token);\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+    }));\n\nReview comment:\n       Am I wrapping `fun` properly? The gist of this is that I need to (1) not execute any calls to the R API if an error was thrown from some other job, and (2) catch the `cpp11::unwind_exception` and make sure the error is propagated to `RunWithCapturedR` (so that it can be recreated and thrown after everything has been cleaned up).\n\n##########\nFile path: r/src/safe-call-into-r-impl.cpp\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n\nReview comment:\n       We don't have a precedent for this in the Arrow R package (a place to test C++ code from C++ that is hard to test from R). We probably don't want something like this running on CRAN, but I'm not sure what the best way is to fence this off / keep it from compiling anywhere except CI?\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n+  } else if (main_r_thread.Executor() != nullptr) {\n+    // If we are not on the main thread and have an Executor,\n+    // use it to run the task on the main R thread. We can't throw\n+    // a cpp11::unwind_exception here, so we need to propagate it back\n+    // to RunWithCapturedR through the MainRThread singleton.\n+    return DeferNotOk(main_r_thread.Executor()->Submit([fun]() {\n+      if (GetMainRThread().HasError()) {\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+\n+      try {\n+        return arrow::Result<T>(fun());\n+      } catch (cpp11::unwind_exception& e) {\n+        GetMainRThread().SetError(e.token);\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+    }));\n+  } else {\n+    return arrow::Future<T>::MakeFinished(arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without calling RunWithCapturedR\"));\n+  }\n+}\n+\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  arrow::Future<T> result = SafeCallIntoRAsync<T>(std::move(fun));\n+  return result.result();\n+}\n+\n+template <typename T>\n+arrow::Result<T> RunWithCapturedR(std::function<arrow::Future<T>()> make_arrow_call) {\n+  if (GetMainRThread().Executor() != nullptr) {\n+    return arrow::Status::AlreadyExists(\"Attempt to use more than one R Executor()\");\n+  }\n+\n+  GetMainRThread().ResetError();\n+\n+  arrow::Result<T> result = arrow::internal::SerialExecutor::RunInSerialExecutor<T>(\n+      [make_arrow_call](arrow::internal::Executor* executor) {\n+        GetMainRThread().Executor() = executor;\n+        arrow::Future<T> result = make_arrow_call();\n+        return result;\n+      });\n+\n+  GetMainRThread().Executor() = nullptr;\n\nReview comment:\n       Does the executor need to be cleaned up here at all? Or am I correct in my reading of this that it's just storing a pointer to an executor whose lifecycle is handled by `RunInSerialExecutor`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T19:31:27.303+0000",
                    "updated": "2022-03-29T19:31:27.303+0000",
                    "started": "2022-03-29T19:31:27.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749575",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/750040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r838448711\n\n\n\n##########\nFile path: r/src/safe-call-into-r.h\n##########\n@@ -0,0 +1,138 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { some_expression_returning_sexp; }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // Class whose run() method will be called from the main R thread\n+  // but whose results may be accessed (as class fields) from\n+  // potentially another thread.\n+  class Task {\n+   public:\n+    virtual ~Task() {}\n+    virtual arrow::Status run() = 0;\n+  };\n+\n+  // Run `task` if it is safe to do so or return an error otherwise.\n+  arrow::Status RunTask(Task* task);\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      SetError(R_NilValue);\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread* GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_sexp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n\nReview comment:\n       New version has `SafeCallIntoRAsync()` that returns a future (and now `SafeCallIntoR()` just calls the async version and waits for the future to complete. It forced a few things that made it all much cleaner!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-30T11:49:17.305+0000",
                    "updated": "2022-03-30T11:49:17.305+0000",
                    "started": "2022-03-30T11:49:17.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750040",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/752568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r842218873\n\n\n##########\nr/R/arrow-package.R:\n##########\n@@ -31,6 +31,11 @@\n \n #' @importFrom vctrs s3_register vec_size vec_cast vec_unique\n .onLoad <- function(...) {\n+  if (arrow_available()) {\n+    # Make sure C++ knows on which thread it is safe to call the R API\n+    InitializeMainRThread()\n\nReview Comment:\n   Do we know for a fact that the R thread never changes?  For example, in JS, there is always \"one thread\" but the actual thread id can change from iteration to iteration of the event loop.\n\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            fut.MarkFinished(result);\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n\nReview Comment:\n   So this is probably fine but you could wrap `thread_ptr` in a `unique_ptr`.  For example:\r\n   \r\n   `thread_ptr = std::unique_ptr<std::thread>(new std::thread(...));`\r\n   \r\n   It gets rid of the delete call and guards you against very unlikely things like `->join()` throwing an exception and the memory never getting cleaned up (not that such a thing would really matter in test code).\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n+  } else if (main_r_thread.Executor() != nullptr) {\n+    // If we are not on the main thread and have an Executor,\n+    // use it to run the task on the main R thread. We can't throw\n+    // a cpp11::unwind_exception here, so we need to propagate it back\n+    // to RunWithCapturedR through the MainRThread singleton.\n+    return DeferNotOk(main_r_thread.Executor()->Submit([fun]() {\n+      if (GetMainRThread().HasError()) {\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+\n+      try {\n+        return arrow::Result<T>(fun());\n+      } catch (cpp11::unwind_exception& e) {\n+        GetMainRThread().SetError(e.token);\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+    }));\n+  } else {\n+    return arrow::Future<T>::MakeFinished(arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without calling RunWithCapturedR\"));\n+  }\n+}\n+\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  arrow::Future<T> result = SafeCallIntoRAsync<T>(std::move(fun));\n+  return result.result();\n+}\n+\n+template <typename T>\n+arrow::Result<T> RunWithCapturedR(std::function<arrow::Future<T>()> make_arrow_call) {\n+  if (GetMainRThread().Executor() != nullptr) {\n+    return arrow::Status::AlreadyExists(\"Attempt to use more than one R Executor()\");\n+  }\n+\n+  GetMainRThread().ResetError();\n+\n+  arrow::Result<T> result = arrow::internal::SerialExecutor::RunInSerialExecutor<T>(\n+      [make_arrow_call](arrow::internal::Executor* executor) {\n+        GetMainRThread().Executor() = executor;\n+        arrow::Future<T> result = make_arrow_call();\n+        return result;\n\nReview Comment:\n   ```suggestion\r\n           return make_arrow_call();\r\n   ```\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n+  } else if (main_r_thread.Executor() != nullptr) {\n+    // If we are not on the main thread and have an Executor,\n+    // use it to run the task on the main R thread. We can't throw\n+    // a cpp11::unwind_exception here, so we need to propagate it back\n+    // to RunWithCapturedR through the MainRThread singleton.\n+    return DeferNotOk(main_r_thread.Executor()->Submit([fun]() {\n+      if (GetMainRThread().HasError()) {\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+\n+      try {\n+        return arrow::Result<T>(fun());\n+      } catch (cpp11::unwind_exception& e) {\n+        GetMainRThread().SetError(e.token);\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+    }));\n+  } else {\n+    return arrow::Future<T>::MakeFinished(arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without calling RunWithCapturedR\"));\n+  }\n+}\n+\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  arrow::Future<T> result = SafeCallIntoRAsync<T>(std::move(fun));\n+  return result.result();\n+}\n+\n+template <typename T>\n+arrow::Result<T> RunWithCapturedR(std::function<arrow::Future<T>()> make_arrow_call) {\n+  if (GetMainRThread().Executor() != nullptr) {\n+    return arrow::Status::AlreadyExists(\"Attempt to use more than one R Executor()\");\n+  }\n+\n+  GetMainRThread().ResetError();\n+\n+  arrow::Result<T> result = arrow::internal::SerialExecutor::RunInSerialExecutor<T>(\n+      [make_arrow_call](arrow::internal::Executor* executor) {\n+        GetMainRThread().Executor() = executor;\n+        arrow::Future<T> result = make_arrow_call();\n+        return result;\n+      });\n+\n+  GetMainRThread().Executor() = nullptr;\n\nReview Comment:\n   Your reading is correct.  By the time `RunInSerialExecutor` returns that pointer is no longer valid.\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n\nReview Comment:\n   This is purely pedantic but I'm pretty sure you can just do...\r\n   \r\n   ```\r\n   return fun();\r\n   return arrow::Status::NotImplemented(...);\r\n   ```\r\n   \r\n   ...and it will automatically promote to a finished `arrow::Future` using implicit conversion.  However, I'm totally fine with this more explicit style as well.  It helps maintain a sense of equality between the three cases.\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -0,0 +1,153 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef SAFE_CALL_INTO_R_INCLUDED\n+#define SAFE_CALL_INTO_R_INCLUDED\n+\n+#include \"./arrow_types.h\"\n+\n+#include <arrow/util/future.h>\n+#include <arrow/util/thread_pool.h>\n+\n+#include <functional>\n+#include <thread>\n+\n+// The MainRThread class keeps track of the thread on which it is safe\n+// to call the R API to facilitate its safe use (or erroring\n+// if it is not safe). The MainRThread singleton can be accessed from\n+// any thread using GetMainRThread(); the preferred way to call\n+// the R API where it may not be safe to do so is to use\n+// SafeCallIntoR<cpp_type>([&]() { ... }).\n+class MainRThread {\n+ public:\n+  MainRThread() : initialized_(false), executor_(nullptr) {}\n+\n+  // Call this method from the R thread (e.g., on package load)\n+  // to save an internal copy of the thread id.\n+  void Initialize() {\n+    thread_id_ = std::this_thread::get_id();\n+    initialized_ = true;\n+    SetError(R_NilValue);\n+  }\n+\n+  bool IsInitialized() { return initialized_; }\n+\n+  // Check if the current thread is the main R thread\n+  bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n+\n+  // The Executor that is running on the main R thread, if it exists\n+  arrow::internal::Executor*& Executor() { return executor_; }\n+\n+  // Save an error token generated from a cpp11::unwind_exception\n+  // so that it can be properly handled after some cleanup code\n+  // has run (e.g., cancelling some futures or waiting for them\n+  // to finish).\n+  void SetError(cpp11::sexp token) { error_token_ = token; }\n+\n+  void ResetError() { error_token_ = R_NilValue; }\n+\n+  // Check if there is a saved error\n+  bool HasError() { return error_token_ != R_NilValue; }\n+\n+  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  void ClearError() {\n+    if (HasError()) {\n+      cpp11::unwind_exception e(error_token_);\n+      ResetError();\n+      throw e;\n+    }\n+  }\n+\n+ private:\n+  bool initialized_;\n+  std::thread::id thread_id_;\n+  cpp11::sexp error_token_;\n+  arrow::internal::Executor* executor_;\n+};\n+\n+// Retrieve the MainRThread singleton\n+MainRThread& GetMainRThread();\n+\n+// Call into R and return a C++ object. Note that you can't return\n+// a SEXP (use cpp11::as_cpp<T> to convert it to a C++ type inside\n+// `fun`).\n+template <typename T>\n+arrow::Future<T> SafeCallIntoRAsync(std::function<T(void)> fun) {\n+  MainRThread& main_r_thread = GetMainRThread();\n+  if (main_r_thread.IsMainThread()) {\n+    // If we're on the main thread, run the task immediately and let\n+    // the cpp11::unwind_exception be thrown since it will be caught\n+    // at the top level.\n+    return arrow::Future<T>::MakeFinished(fun());\n+    // try {\n+\n+    // } catch (cpp11::unwind_exception& e) {\n+    //   auto error_status = arrow::Status::ExecutionError(\"R code execution error\");\n+    //   auto error_detail = std::make_shared<MainRThread::UnwindStatusDetail>(e.token);\n+    //   return arrow::Future<T>::MakeFinished(error_status.WithDetail(error_detail));\n+    // }\n+  } else if (main_r_thread.Executor() != nullptr) {\n+    // If we are not on the main thread and have an Executor,\n+    // use it to run the task on the main R thread. We can't throw\n+    // a cpp11::unwind_exception here, so we need to propagate it back\n+    // to RunWithCapturedR through the MainRThread singleton.\n+    return DeferNotOk(main_r_thread.Executor()->Submit([fun]() {\n+      if (GetMainRThread().HasError()) {\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+\n+      try {\n+        return arrow::Result<T>(fun());\n+      } catch (cpp11::unwind_exception& e) {\n+        GetMainRThread().SetError(e.token);\n+        return arrow::Result<T>(arrow::Status::UnknownError(\"R code execution error\"));\n+      }\n+    }));\n+  } else {\n+    return arrow::Future<T>::MakeFinished(arrow::Status::NotImplemented(\n+        \"Call to R from a non-R thread without calling RunWithCapturedR\"));\n+  }\n+}\n+\n+template <typename T>\n+arrow::Result<T> SafeCallIntoR(std::function<T(void)> fun) {\n+  arrow::Future<T> result = SafeCallIntoRAsync<T>(std::move(fun));\n+  return result.result();\n\nReview Comment:\n   ```suggestion\r\n     arrow::Future<T> future = SafeCallIntoRAsync<T>(std::move(fun));\r\n     return future.result();\r\n   ```\n\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            fut.MarkFinished(result);\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n+\n+    return arrow::ValueOrStop(result);\n+  } else if (opt == \"async_without_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto fut = arrow::Future<std::string>::Make();\n+    thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+      auto result = SafeCallIntoR<std::string>(\n+          [&] { return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string()); });\n+\n+      if (result.ok()) {\n+        fut.MarkFinished(result.ValueUnsafe());\n+      } else {\n+        fut.MarkFinished(result.status());\n+      }\n+    });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n+\n+    // We should be able to get this far, but fut will contain an error\n+    // because it tried to evaluate R code from another thread\n+    return arrow::ValueOrStop(fut.result());\n+\n+  } else if (opt == \"on_main_thread\") {\n+    auto result = SafeCallIntoR<std::string>(\n+        [&]() { return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string()); });\n+    arrow::StopIfNotOk(result.status());\n+    return result.ValueUnsafe();\n+  } else {\n+    return \"\";\n\nReview Comment:\n   Don't you want to assert or stop or something if you get into this unreachable spot?\n\n\n\n",
                    "created": "2022-04-04T23:55:12.139+0000",
                    "updated": "2022-04-04T23:55:12.139+0000",
                    "started": "2022-04-04T23:55:12.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752568",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/753342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r843889620\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            fut.MarkFinished(result);\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n\nReview Comment:\n   I can't get this to work without a crash!\n\n\n\n",
                    "created": "2022-04-06T12:31:56.090+0000",
                    "updated": "2022-04-06T12:31:56.090+0000",
                    "started": "2022-04-06T12:31:56.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753342",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/753361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r843910759\n\n\n##########\nr/R/arrow-package.R:\n##########\n@@ -31,6 +31,11 @@\n \n #' @importFrom vctrs s3_register vec_size vec_cast vec_unique\n .onLoad <- function(...) {\n+  if (arrow_available()) {\n+    # Make sure C++ knows on which thread it is safe to call the R API\n+    InitializeMainRThread()\n\nReview Comment:\n   I asked in the r-lib slack channel and nobody seems to feel that this will be a problem. They did advise to check `parallel::mclapply()` since this creates a fork of the process, but a check seems to indicate that the value of `std::this_thread::get_id()` seems to be stable if somebody does happen to do that:\r\n   \r\n   ``` r\r\n   cpp11::cpp_source(code = '\r\n   #include \"cpp11.hpp\"\r\n   #include <thread>\r\n   #include <sstream>\r\n   \r\n   [[cpp11::register]]\r\n   std::string thread_id() {\r\n     std::thread::id id = std::this_thread::get_id();\r\n     std::stringstream ss;\r\n     ss << id;\r\n     return ss.str();\r\n   }\r\n   ')\r\n   \r\n   thread_id()\r\n   #> [1] \"0x100e33d40\"\r\n   unique(lapply(1:1e3, function(x) thread_id()))\r\n   #> [[1]]\r\n   #> [1] \"0x100e33d40\"\r\n   unique(parallel::mclapply(1:1e3, function(x) thread_id(), mc.cores = 8))\r\n   #> [[1]]\r\n   #> [1] \"0x100e33d40\"\r\n   ```\n\n\n\n",
                    "created": "2022-04-06T12:50:17.941+0000",
                    "updated": "2022-04-06T12:50:17.941+0000",
                    "started": "2022-04-06T12:50:17.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753361",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r845100426\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n\nReview Comment:\n   I haven't dug in too much too the code yet, but is this resolved with new commits, or do we still need to find a way to gate this?\n\n\n\n",
                    "created": "2022-04-07T12:55:07.003+0000",
                    "updated": "2022-04-07T12:55:07.003+0000",
                    "started": "2022-04-07T12:55:07.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754040",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r845107623\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n\nReview Comment:\n   Neal took a quick look and said it it's fine as long as there's a note as to where TestSafeCallIntoR is defined (there's some Altrep tests that do this, too)\n\n\n\n",
                    "created": "2022-04-07T13:02:04.093+0000",
                    "updated": "2022-04-07T13:02:04.093+0000",
                    "started": "2022-04-07T13:02:04.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754050",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r845151355\n\n\n##########\nr/tests/testthat/test-safe-call-into-r.R:\n##########\n@@ -0,0 +1,54 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# Note that TestSafeCallIntoR is defined in safe-call-into-r-impl.cpp\n+\n\nReview Comment:\n   ```suggestion\r\n   skip_on_cran()\r\n   ```\r\n   \r\n   Is this sufficient to make sure we don't test this on cran?\n\n\n\n",
                    "created": "2022-04-07T13:42:21.487+0000",
                    "updated": "2022-04-07T13:42:21.487+0000",
                    "started": "2022-04-07T13:42:21.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754080",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r845177225\n\n\n##########\nr/tests/testthat/test-safe-call-into-r.R:\n##########\n@@ -0,0 +1,54 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# Note that TestSafeCallIntoR is defined in safe-call-into-r-impl.cpp\n+\n\nReview Comment:\n   (I added them inside the `test_that()` blocks as mostly a stylistic choice!)\n\n\n\n",
                    "created": "2022-04-07T14:04:13.329+0000",
                    "updated": "2022-04-07T14:04:13.329+0000",
                    "started": "2022-04-07T14:04:13.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754100",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#discussion_r845267364\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -0,0 +1,89 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <functional>\n+#include <thread>\n+#include \"./safe-call-into-r.h\"\n+\n+MainRThread& GetMainRThread() {\n+  static MainRThread main_r_thread;\n+  return main_r_thread;\n+}\n+\n+// [[arrow::export]]\n+void InitializeMainRThread() { GetMainRThread().Initialize(); }\n+\n+// [[arrow::export]]\n+std::string TestSafeCallIntoR(cpp11::function r_fun_that_returns_a_string,\n+                              std::string opt) {\n+  if (opt == \"async_with_executor\") {\n+    std::thread* thread_ptr;\n+\n+    auto result =\n+        RunWithCapturedR<std::string>([&thread_ptr, r_fun_that_returns_a_string]() {\n+          auto fut = arrow::Future<std::string>::Make();\n+          thread_ptr = new std::thread([fut, r_fun_that_returns_a_string]() mutable {\n+            auto result = SafeCallIntoR<std::string>([&] {\n+              return cpp11::as_cpp<std::string>(r_fun_that_returns_a_string());\n+            });\n+\n+            fut.MarkFinished(result);\n+          });\n+\n+          return fut;\n+        });\n+\n+    thread_ptr->join();\n+    delete thread_ptr;\n\nReview Comment:\n   Odd.  If you want to create a commit (doesn't have to be part of any PR) then I'd be happy to take a look and see what was going on.  Otherwise, like I said, it isn't very important, so let's not worry too much about it.\n\n\n\n",
                    "created": "2022-04-07T15:24:06.707+0000",
                    "updated": "2022-04-07T15:24:06.707+0000",
                    "started": "2022-04-07T15:24:06.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754179",
                    "issueId": "13431786"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/worklog/754536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #12558:\nURL: https://github.com/apache/arrow/pull/12558#issuecomment-1092765866\n\n   Benchmark runs are scheduled for baseline = 76d064c729f5e2287bf2a2d5e02d1fb192ae5738 and contender = e110eac71aae63041a595fc1c8cc51960ba97f06. e110eac71aae63041a595fc1c8cc51960ba97f06 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/54897d6d08054e16acbc2a349bd95d7b...57d0005eaf9d4318841f684c2a1d2f83/)\n   [Finished :arrow_down:0.13% :arrow_up:0.04%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/edc4fd5e97284a83ae55abdebe664162...85eb792884354dbe9b9fa9fa3e7684d4/)\n   [Failed :arrow_down:0.71% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/eab9b4847e0e423596e79c3e545e98b4...4c368520d4a04f1382dfaa6f54f4891a/)\n   [Finished :arrow_down:0.09% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/0aa7fafb32124d8ca0781b7e7f9796df...93da4dbfde7341028ec52ac9905e7abe/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/468| `e110eac7` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/453| `e110eac7` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/454| `e110eac7` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/463| `e110eac7` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/467| `76d064c7` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/452| `76d064c7` test-mac-arm>\n   [Failed] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/453| `76d064c7` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/462| `76d064c7` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-04-08T11:31:10.755+0000",
                    "updated": "2022-04-08T11:31:10.755+0000",
                    "started": "2022-04-08T11:31:10.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754536",
                    "issueId": "13431786"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4d2cb3cc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@642e704b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45355998[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@520ed55d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24edafec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@307f8866[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f69ee68[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7b696ce5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32323eab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7ec2ac33[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e48172d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5e764045[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 07 16:50:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-07T16:50:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15841/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-03T18:14:20.000+0000",
        "updated": "2022-04-19T12:53:26.000+0000",
        "timeoriginalestimate": null,
        "description": "In ARROW-9235 we have a problem where we need to evaluate code (may be C++ that calls the R API in a way that may allocate R memory or literal R code) on the R main thread. As discussed in the pull request ( https://github.com/apache/arrow/pull/12323#issuecomment-1054726309 ), there are other times that this has come up and will come up in the future (e.g., evaluating user-defined R functions from the query engine, implementing extension types from R).\r\n\r\nAfter discussing with [~westonpace], it seems like it is worth investing in a {{SafeCallFromR()}} C++ function that lives in the R bindings. The initial approach (that may need to be altered as we go) will be to\r\n\r\n- have a global object that is initialized at the beginning of a C++ call from R to specific functions (and released on exit) that maintains some list of tasks that need to run on the R main thread and an event loop to periodically evaluate them while background tasks are running.\r\n- define a {{SafeCallFromR()}} C++ function that adds a task to the global object and waits for the result to come back.\r\n\r\n(with apologies to Weston if I mischaracterized our conversation!)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Implement SafeCallIntoR to safely call the R API from another thread",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/comment/17500964",
                    "id": "17500964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "We may already have some of this here: https://github.com/apache/arrow/blob/master/r/src/RTasks.cpp",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-03-03T18:19:19.442+0000",
                    "updated": "2022-03-03T18:19:19.442+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431786/comment/17519016",
                    "id": "17519016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 12558\n[https://github.com/apache/arrow/pull/12558]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-07T16:50:36.812+0000",
                    "updated": "2022-04-07T16:50:36.812+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z1052g:",
        "customfield_12314139": null
    }
}