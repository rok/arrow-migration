{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13134522",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522",
    "key": "ARROW-2052",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2052/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@792cbf00[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26c4cf96[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a438656[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7afb4ef7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e0b94e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17b0223f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71a777a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@518b139c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23d519e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@35627679[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fb24543[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@76acaeda[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 02 05:07:24 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-02T05:07:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2052/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-01-29T18:22:27.000+0000",
        "updated": "2018-02-02T05:07:24.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently {{OwnedRef}} and {{ScopedRef}} have similar semantics with small differences. Furtheremore, the naming distinction isn't obvious.\r\n\r\nI propose to unify them as a single {{OwnedRef}} class with the following characteristics:\r\n- doesn't take the GIL automatically\r\n- has a {{release()}} method that decrefs the pointer (and sets the internal copy to NULL) before returning it\r\n- has a {{detach()}} method that returns the pointer (and sets the internal copy to NULL) without decrefing it\r\n\r\nFor the rare situations where an {{OwnedRef}} may be destroyed with the GIL released, a {{OwnedRefNoGIL}} derived class would also be proposed (the naming scheme follows Cython here).\r\n\r\nOpinions / comments?",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Unify OwnedRef and ScopedRef",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16344064",
                    "id": "16344064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Other remark : the {{release()}} method on C++ smart pointers don't decrement the underlying reference count, so deviating from that may be confusing.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-29T21:42:57.135+0000",
                    "updated": "2018-01-29T21:42:57.135+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16344477",
                    "id": "16344477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Sounds good to me. Acquiring the GIL in the destructor of {{OwnedRef}} seemed a bit unclean to me, so I think it would be better to be explicit about holding the GIL externally whenever a managed reference may go out of scope. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-30T04:17:38.382+0000",
                    "updated": "2018-01-30T04:17:38.382+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345398",
                    "id": "16345398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534\n \n \n   OwnedRef API cleaned up:\r\n   - doesn't try to take the GIL in its destructor anymore\r\n   - reset() decrefs the underlying pointer\r\n   - detach() unowns the pointer without decrefing it\r\n   \r\n   Add OwnedRefNoGIL which forcefully takes the GIL in its destructor, at the expense of runtime performance.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:16:58.247+0000",
                    "updated": "2018-01-30T17:16:58.247+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345400",
                    "id": "16345400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361666379\n \n \n   This PR has an interesting performance impact here:\r\n   ```\r\n   $ python -m timeit -s \"import pyarrow as pa; ty=pa.int64(); data=[None]*1000000\" \"pa.array(data, type=ty)\"\r\n   ```\r\n   * before: 27.1 msec per loop\r\n   * after: 14.9 msec per loop\r\n   \r\n   Probably because of less calls to `PyGILState_Ensure`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:18:28.589+0000",
                    "updated": "2018-01-30T17:18:28.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345486",
                    "id": "16345486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361671140\n \n \n   On the subject of performance, our Airspeed / ASV setup is in a state of disrepair. We should start building a suite of microbenchmarks so we can monitor the performance of operations like these in a more systematic way. There are already some JIRAs open about getting this cleaned up and well-documented for other developers, would you be interested in taking a look?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:33:21.534+0000",
                    "updated": "2018-01-30T17:33:21.534+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345498",
                    "id": "16345498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361673351\n \n \n   > There are already some JIRAs open about getting this cleaned up and well-documented for other developers, would you be interested in taking a look?\r\n   \r\n   Definitely, can you give me some pointers?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:40:21.010+0000",
                    "updated": "2018-01-30T17:40:21.010+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345582",
                    "id": "16345582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361691298\n \n \n   See https://issues.apache.org/jira/browse/ARROW-1861\r\n   \r\n   There is already an asv.conf.json in https://github.com/apache/arrow/tree/master/python and a couple of benchmarks, but I tried to run it myself some time ago and ran into issues. It's not documented at all AFAICT. pandas has a pretty deep suite of benchmarks https://github.com/pandas-dev/pandas/tree/master/asv_bench\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T18:37:55.941+0000",
                    "updated": "2018-01-30T18:37:55.941+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16345794",
                    "id": "16345794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361731025\n \n \n   I need to take a closer look at our various usages of `OwnedRef` -- there are places where we have `OwnedRef` as member variables of classes, so the risk is that an OwnedRef might be destructed at the same time that a `PyAcquireGIL` lock is being destructed, so we could be relying on the order of destruction to make sure the GIL is held. We'll need to prevent this by making sure that no OwnedRef can be destructed at the same time as a GIL is released by RAII\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T20:55:09.757+0000",
                    "updated": "2018-01-30T20:55:09.757+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16346436",
                    "id": "16346436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361860680\n \n \n   > I need to take a closer look at our various usages of OwnedRef -- there are places where we have OwnedRef as member variables of classes, so the risk is that an OwnedRef might be destructed at the same time that a PyAcquireGIL lock is being destructed\r\n   \r\n   The PR already takes care of that, by using OwnedRefNoGIL in those places (perhaps I've missed some?).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-31T08:35:50.877+0000",
                    "updated": "2018-01-31T08:35:50.877+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16346437",
                    "id": "16346437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534#issuecomment-361861046\n \n \n   > Is it correct to say that now callers must be more careful about acquiring the GIL before making calls into the Python C API (assuming use of OwnedRef)?\r\n   \r\n   The GIL rules for OwnedRef are now the same as they were for ScopedRef. If you're not sure the GIL will remain held at the right times, you can use OwnedRefNoGIL instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-31T08:37:24.783+0000",
                    "updated": "2018-01-31T08:37:24.783+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16349797",
                    "id": "16349797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1534\n[https://github.com/apache/arrow/pull/1534]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-02T05:07:21.605+0000",
                    "updated": "2018-02-02T05:07:21.605+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13134522/comment/16349798",
                    "id": "16349798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1534: ARROW-2052: [C++ / Python] Rework OwnedRef, remove ScopedRef\nURL: https://github.com/apache/arrow/pull/1534\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 5c8c970e1..fcf05f833 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -265,13 +265,13 @@ class PandasBlock {\n   int64_t num_rows_;\n   int num_columns_;\n \n-  OwnedRef block_arr_;\n+  OwnedRefNoGIL block_arr_;\n   uint8_t* block_data_;\n \n   PandasOptions options_;\n \n   // ndarray<int32>\n-  OwnedRef placement_arr_;\n+  OwnedRefNoGIL placement_arr_;\n   int64_t* placement_data_;\n \n  private:\n@@ -1140,7 +1140,7 @@ class CategoricalBlock : public PandasBlock {\n   }\n \n   MemoryPool* pool_;\n-  OwnedRef dictionary_;\n+  OwnedRefNoGIL dictionary_;\n   bool ordered_;\n   bool needs_copy_;\n };\ndiff --git a/cpp/src/arrow/python/arrow_to_python.cc b/cpp/src/arrow/python/arrow_to_python.cc\nindex c67e5410e..54a71d5a3 100644\n--- a/cpp/src/arrow/python/arrow_to_python.cc\n+++ b/cpp/src/arrow/python/arrow_to_python.cc\n@@ -64,8 +64,8 @@ Status DeserializeDict(PyObject* context, const Array& array, int64_t start_idx,\n                        int64_t stop_idx, PyObject* base, const SerializedPyObject& blobs,\n                        PyObject** out) {\n   const auto& data = static_cast<const StructArray&>(array);\n-  ScopedRef keys, vals;\n-  ScopedRef result(PyDict_New());\n+  OwnedRef keys, vals;\n+  OwnedRef result(PyDict_New());\n   RETURN_IF_PYERROR();\n \n   DCHECK_EQ(2, data.num_fields());\n@@ -77,16 +77,16 @@ Status DeserializeDict(PyObject* context, const Array& array, int64_t start_idx,\n   for (int64_t i = start_idx; i < stop_idx; ++i) {\n     // PyDict_SetItem behaves differently from PyList_SetItem and PyTuple_SetItem.\n     // The latter two steal references whereas PyDict_SetItem does not. So we need\n-    // to make sure the reference count is decremented by letting the ScopedRef\n+    // to make sure the reference count is decremented by letting the OwnedRef\n     // go out of scope at the end.\n-    PyDict_SetItem(result.get(), PyList_GET_ITEM(keys.get(), i - start_idx),\n-                   PyList_GET_ITEM(vals.get(), i - start_idx));\n+    PyDict_SetItem(result.obj(), PyList_GET_ITEM(keys.obj(), i - start_idx),\n+                   PyList_GET_ITEM(vals.obj(), i - start_idx));\n   }\n   static PyObject* py_type = PyUnicode_FromString(\"_pytype_\");\n-  if (PyDict_Contains(result.get(), py_type)) {\n-    RETURN_NOT_OK(CallDeserializeCallback(context, result.get(), out));\n+  if (PyDict_Contains(result.obj(), py_type)) {\n+    RETURN_NOT_OK(CallDeserializeCallback(context, result.obj(), out));\n   } else {\n-    *out = result.release();\n+    *out = result.detach();\n   }\n   return Status::OK();\n }\n@@ -96,10 +96,10 @@ Status DeserializeArray(const Array& array, int64_t offset, PyObject* base,\n   int32_t index = static_cast<const Int32Array&>(array).Value(offset);\n   RETURN_NOT_OK(py::TensorToNdarray(*blobs.tensors[index], base, out));\n   // Mark the array as immutable\n-  ScopedRef flags(PyObject_GetAttrString(*out, \"flags\"));\n-  DCHECK(flags.get() != NULL) << \"Could not mark Numpy array immutable\";\n+  OwnedRef flags(PyObject_GetAttrString(*out, \"flags\"));\n+  DCHECK(flags.obj() != NULL) << \"Could not mark Numpy array immutable\";\n   Py_INCREF(Py_False);\n-  int flag_set = PyObject_SetAttrString(flags.get(), \"writeable\", Py_False);\n+  int flag_set = PyObject_SetAttrString(flags.obj(), \"writeable\", Py_False);\n   DCHECK(flag_set == 0) << \"Could not mark Numpy array immutable\";\n   return Status::OK();\n }\n@@ -184,23 +184,23 @@ Status GetValue(PyObject* context, const UnionArray& parent, const Array& arr,\n \n #define DESERIALIZE_SEQUENCE(CREATE_FN, SET_ITEM_FN)                                     \\\n   const auto& data = static_cast<const UnionArray&>(array);                              \\\n-  ScopedRef result(CREATE_FN(stop_idx - start_idx));                                     \\\n+  OwnedRef result(CREATE_FN(stop_idx - start_idx));                                      \\\n   const uint8_t* type_ids = data.raw_type_ids();                                         \\\n   const int32_t* value_offsets = data.raw_value_offsets();                               \\\n   for (int64_t i = start_idx; i < stop_idx; ++i) {                                       \\\n     if (data.IsNull(i)) {                                                                \\\n       Py_INCREF(Py_None);                                                                \\\n-      SET_ITEM_FN(result.get(), i - start_idx, Py_None);                                 \\\n+      SET_ITEM_FN(result.obj(), i - start_idx, Py_None);                                 \\\n     } else {                                                                             \\\n       int64_t offset = value_offsets[i];                                                 \\\n       uint8_t type = type_ids[i];                                                        \\\n       PyObject* value;                                                                   \\\n       RETURN_NOT_OK(GetValue(context, data, *data.UnsafeChild(type), offset, type, base, \\\n                              blobs, &value));                                            \\\n-      SET_ITEM_FN(result.get(), i - start_idx, value);                                   \\\n+      SET_ITEM_FN(result.obj(), i - start_idx, value);                                   \\\n     }                                                                                    \\\n   }                                                                                      \\\n-  *out = result.release();                                                               \\\n+  *out = result.detach();                                                                \\\n   return Status::OK()\n \n Status DeserializeList(PyObject* context, const Array& array, int64_t start_idx,\n@@ -219,13 +219,13 @@ Status DeserializeSet(PyObject* context, const Array& array, int64_t start_idx,\n                       int64_t stop_idx, PyObject* base, const SerializedPyObject& blobs,\n                       PyObject** out) {\n   const auto& data = static_cast<const UnionArray&>(array);\n-  ScopedRef result(PySet_New(nullptr));\n+  OwnedRef result(PySet_New(nullptr));\n   const uint8_t* type_ids = data.raw_type_ids();\n   const int32_t* value_offsets = data.raw_value_offsets();\n   for (int64_t i = start_idx; i < stop_idx; ++i) {\n     if (data.IsNull(i)) {\n       Py_INCREF(Py_None);\n-      if (PySet_Add(result.get(), Py_None) < 0) {\n+      if (PySet_Add(result.obj(), Py_None) < 0) {\n         RETURN_IF_PYERROR();\n       }\n     } else {\n@@ -234,12 +234,12 @@ Status DeserializeSet(PyObject* context, const Array& array, int64_t start_idx,\n       PyObject* value;\n       RETURN_NOT_OK(GetValue(context, data, *data.UnsafeChild(type), offset, type, base,\n                              blobs, &value));\n-      if (PySet_Add(result.get(), value) < 0) {\n+      if (PySet_Add(result.obj(), value) < 0) {\n         RETURN_IF_PYERROR();\n       }\n     }\n   }\n-  *out = result.release();\n+  *out = result.detach();\n   return Status::OK();\n }\n \ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex 63d388925..d84b8a48c 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -830,7 +830,7 @@ static Status ConvertPySequenceReal(PyObject* obj, int64_t size,\n   PyAcquireGIL lock;\n \n   PyObject* seq;\n-  ScopedRef tmp_seq_nanny;\n+  OwnedRef tmp_seq_nanny;\n \n   std::shared_ptr<DataType> real_type;\n \ndiff --git a/cpp/src/arrow/python/common.h b/cpp/src/arrow/python/common.h\nindex 146864ffd..b1e0888af 100644\n--- a/cpp/src/arrow/python/common.h\n+++ b/cpp/src/arrow/python/common.h\n@@ -61,59 +61,30 @@ class ARROW_EXPORT PyAcquireGIL {\n \n #define PYARROW_IS_PY2 PY_MAJOR_VERSION <= 2\n \n+// A RAII primitive that DECREFs the underlying PyObject* when it\n+// goes out of scope.\n class ARROW_EXPORT OwnedRef {\n  public:\n   OwnedRef() : obj_(NULLPTR) {}\n \n   explicit OwnedRef(PyObject* obj) : obj_(obj) {}\n \n-  ~OwnedRef() {\n-    PyAcquireGIL lock;\n-    release();\n-  }\n+  ~OwnedRef() { reset(); }\n \n   void reset(PyObject* obj) {\n-    /// TODO(phillipc): Should we acquire the GIL here? It definitely needs to be\n-    /// acquired,\n-    /// but callers have probably already acquired it\n     Py_XDECREF(obj_);\n     obj_ = obj;\n   }\n \n-  void release() {\n-    Py_XDECREF(obj_);\n-    obj_ = NULLPTR;\n-  }\n-\n-  PyObject* obj() const { return obj_; }\n-\n- private:\n-  PyObject* obj_;\n-};\n-\n-// This is different from OwnedRef in that it assumes that\n-// the GIL is held by the caller and doesn't decrement the\n-// reference count when release is called.\n-class ARROW_EXPORT ScopedRef {\n- public:\n-  ScopedRef() : obj_(NULLPTR) {}\n+  void reset() { reset(NULLPTR); }\n \n-  explicit ScopedRef(PyObject* obj) : obj_(obj) {}\n-\n-  ~ScopedRef() { Py_XDECREF(obj_); }\n-\n-  void reset(PyObject* obj) {\n-    Py_XDECREF(obj_);\n-    obj_ = obj;\n-  }\n-\n-  PyObject* release() {\n+  PyObject* detach() {\n     PyObject* result = obj_;\n     obj_ = NULLPTR;\n     return result;\n   }\n \n-  PyObject* get() const { return obj_; }\n+  PyObject* obj() const { return obj_; }\n \n   PyObject** ref() { return &obj_; }\n \n@@ -121,6 +92,17 @@ class ARROW_EXPORT ScopedRef {\n   PyObject* obj_;\n };\n \n+// Same as OwnedRef, but ensures the GIL is taken when it goes out of scope.\n+// This is for situations where the GIL is not always known to be held\n+// (e.g. if it is released in the middle of a function for performance reasons)\n+class ARROW_EXPORT OwnedRefNoGIL : public OwnedRef {\n+ public:\n+  ~OwnedRefNoGIL() {\n+    PyAcquireGIL lock;\n+    reset();\n+  }\n+};\n+\n struct ARROW_EXPORT PyObjectStringify {\n   OwnedRef tmp_obj;\n   const char* bytes;\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex a1161fe32..1b1673bb8 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -1116,10 +1116,10 @@ Status LoopPySequence(PyObject* sequence, T func) {\n       }\n     }\n   } else if (PyObject_HasAttrString(sequence, \"__iter__\")) {\n-    OwnedRef iter = OwnedRef(PyObject_GetIter(sequence));\n+    OwnedRef iter(PyObject_GetIter(sequence));\n     PyObject* item;\n     while ((item = PyIter_Next(iter.obj()))) {\n-      OwnedRef ref = OwnedRef(item);\n+      OwnedRef ref(item);\n       RETURN_NOT_OK(func(ref.obj()));\n     }\n   } else {\n@@ -1149,11 +1149,11 @@ Status LoopPySequenceWithMasks(PyObject* sequence,\n       }\n     }\n   } else if (PyObject_HasAttrString(sequence, \"__iter__\")) {\n-    OwnedRef iter = OwnedRef(PyObject_GetIter(sequence));\n+    OwnedRef iter(PyObject_GetIter(sequence));\n     PyObject* item;\n     int64_t i = 0;\n     while ((item = PyIter_Next(iter.obj()))) {\n-      OwnedRef ref = OwnedRef(item);\n+      OwnedRef ref(item);\n       RETURN_NOT_OK(func(ref.obj(), have_mask && mask_values[i]));\n       i++;\n     }\n@@ -1476,20 +1476,20 @@ Status AppendUTF32(const char* data, int itemsize, int byteorder,\n     }\n   }\n \n-  ScopedRef unicode_obj(PyUnicode_DecodeUTF32(data, actual_length * kNumPyUnicodeSize,\n-                                              nullptr, &byteorder));\n+  OwnedRef unicode_obj(PyUnicode_DecodeUTF32(data, actual_length * kNumPyUnicodeSize,\n+                                             nullptr, &byteorder));\n   RETURN_IF_PYERROR();\n-  ScopedRef utf8_obj(PyUnicode_AsUTF8String(unicode_obj.get()));\n-  if (utf8_obj.get() == NULL) {\n+  OwnedRef utf8_obj(PyUnicode_AsUTF8String(unicode_obj.obj()));\n+  if (utf8_obj.obj() == NULL) {\n     PyErr_Clear();\n     return Status::Invalid(\"failed converting UTF32 to UTF8\");\n   }\n \n-  const int32_t length = static_cast<int32_t>(PyBytes_GET_SIZE(utf8_obj.get()));\n+  const int32_t length = static_cast<int32_t>(PyBytes_GET_SIZE(utf8_obj.obj()));\n   if (builder->value_data_length() + length > kBinaryMemoryLimit) {\n     return Status::Invalid(\"Encoded string length exceeds maximum size (2GB)\");\n   }\n-  return builder->Append(PyBytes_AS_STRING(utf8_obj.get()), length);\n+  return builder->Append(PyBytes_AS_STRING(utf8_obj.obj()), length);\n }\n \n }  // namespace\ndiff --git a/cpp/src/arrow/python/python_to_arrow.cc b/cpp/src/arrow/python/python_to_arrow.cc\nindex 253e9d9a7..6d4f64675 100644\n--- a/cpp/src/arrow/python/python_to_arrow.cc\n+++ b/cpp/src/arrow/python/python_to_arrow.cc\n@@ -365,15 +365,15 @@ Status CallCustomCallback(PyObject* context, PyObject* method_name, PyObject* el\n   *result = NULL;\n   if (context == Py_None) {\n     std::stringstream ss;\n-    ScopedRef repr(PyObject_Repr(elem));\n+    OwnedRef repr(PyObject_Repr(elem));\n     RETURN_IF_PYERROR();\n #if PY_MAJOR_VERSION >= 3\n-    ScopedRef ascii(PyUnicode_AsASCIIString(repr.get()));\n+    OwnedRef ascii(PyUnicode_AsASCIIString(repr.obj()));\n     RETURN_IF_PYERROR();\n-    ss << \"error while calling callback on \" << PyBytes_AsString(ascii.get())\n+    ss << \"error while calling callback on \" << PyBytes_AsString(ascii.obj())\n        << \": handler not registered\";\n #else\n-    ss << \"error while calling callback on \" << PyString_AsString(repr.get())\n+    ss << \"error while calling callback on \" << PyString_AsString(repr.obj())\n        << \": handler not registered\";\n #endif\n     return Status::SerializationError(ss.str());\n@@ -386,8 +386,8 @@ Status CallCustomCallback(PyObject* context, PyObject* method_name, PyObject* el\n \n Status CallSerializeCallback(PyObject* context, PyObject* value,\n                              PyObject** serialized_object) {\n-  ScopedRef method_name(PyUnicode_FromString(\"_serialize_callback\"));\n-  RETURN_NOT_OK(CallCustomCallback(context, method_name.get(), value, serialized_object));\n+  OwnedRef method_name(PyUnicode_FromString(\"_serialize_callback\"));\n+  RETURN_NOT_OK(CallCustomCallback(context, method_name.obj(), value, serialized_object));\n   if (!PyDict_Check(*serialized_object)) {\n     return Status::TypeError(\"serialization callback must return a valid dictionary\");\n   }\n@@ -396,8 +396,8 @@ Status CallSerializeCallback(PyObject* context, PyObject* value,\n \n Status CallDeserializeCallback(PyObject* context, PyObject* value,\n                                PyObject** deserialized_object) {\n-  ScopedRef method_name(PyUnicode_FromString(\"_deserialize_callback\"));\n-  return CallCustomCallback(context, method_name.get(), value, deserialized_object);\n+  OwnedRef method_name(PyUnicode_FromString(\"_deserialize_callback\"));\n+  return CallCustomCallback(context, method_name.obj(), value, deserialized_object);\n }\n \n Status SerializeDict(PyObject* context, std::vector<PyObject*> dicts,\n@@ -493,9 +493,9 @@ Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n #if PY_MAJOR_VERSION >= 3\n     char* data = PyUnicode_AsUTF8AndSize(elem, &size);\n #else\n-    ScopedRef str(PyUnicode_AsUTF8String(elem));\n-    char* data = PyString_AS_STRING(str.get());\n-    size = PyString_GET_SIZE(str.get());\n+    OwnedRef str(PyUnicode_AsUTF8String(elem));\n+    char* data = PyString_AS_STRING(str.obj());\n+    size = PyString_GET_SIZE(str.obj());\n #endif\n     if (size > std::numeric_limits<int32_t>::max()) {\n       return Status::Invalid(\"Cannot writes bytes over 2GB\");\n@@ -585,15 +585,15 @@ Status SerializeSequences(PyObject* context, std::vector<PyObject*> sequences,\n   SequenceBuilder builder(nullptr);\n   std::vector<PyObject*> sublists, subtuples, subdicts, subsets;\n   for (const auto& sequence : sequences) {\n-    ScopedRef iterator(PyObject_GetIter(sequence));\n+    OwnedRef iterator(PyObject_GetIter(sequence));\n     RETURN_IF_PYERROR();\n-    ScopedRef item;\n+    OwnedRef item;\n     while (true) {\n-      item.reset(PyIter_Next(iterator.get()));\n-      if (!item.get()) {\n+      item.reset(PyIter_Next(iterator.obj()));\n+      if (!item.obj()) {\n         break;\n       }\n-      RETURN_NOT_OK(Append(context, item.get(), &builder, &sublists, &subtuples,\n+      RETURN_NOT_OK(Append(context, item.obj(), &builder, &sublists, &subtuples,\n                            &subdicts, &subsets, blobs_out));\n     }\n   }\n@@ -739,18 +739,18 @@ Status SerializedPyObject::WriteTo(io::OutputStream* dst) {\n Status SerializedPyObject::GetComponents(MemoryPool* memory_pool, PyObject** out) {\n   PyAcquireGIL py_gil;\n \n-  ScopedRef result(PyDict_New());\n+  OwnedRef result(PyDict_New());\n   PyObject* buffers = PyList_New(0);\n \n   // TODO(wesm): Not sure how pedantic we need to be about checking the return\n   // values of these functions. There are other places where we do not check\n   // PyDict_SetItem/SetItemString return value, but these failures would be\n   // quite esoteric\n-  PyDict_SetItemString(result.get(), \"num_tensors\",\n+  PyDict_SetItemString(result.obj(), \"num_tensors\",\n                        PyLong_FromSize_t(this->tensors.size()));\n-  PyDict_SetItemString(result.get(), \"num_buffers\",\n+  PyDict_SetItemString(result.obj(), \"num_buffers\",\n                        PyLong_FromSize_t(this->buffers.size()));\n-  PyDict_SetItemString(result.get(), \"data\", buffers);\n+  PyDict_SetItemString(result.obj(), \"data\", buffers);\n   RETURN_IF_PYERROR();\n \n   Py_DECREF(buffers);\n@@ -792,7 +792,7 @@ Status SerializedPyObject::GetComponents(MemoryPool* memory_pool, PyObject** out\n     RETURN_NOT_OK(PushBuffer(buf));\n   }\n \n-  *out = result.release();\n+  *out = result.detach();\n   return Status::OK();\n }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T05:07:24.068+0000",
                    "updated": "2018-02-02T05:07:24.068+0000"
                }
            ],
            "maxResults": 12,
            "total": 12,
            "startAt": 0
        },
        "customfield_12311820": "0|i3phzz:",
        "customfield_12314139": null
    }
}