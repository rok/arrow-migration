{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13348042",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042",
    "key": "ARROW-11043",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bu2",
            "name": "bu2",
            "key": "bu2",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bu2&avatarId=45244",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bu2&avatarId=45244",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bu2&avatarId=45244",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bu2&avatarId=45244"
            },
            "displayName": "Bruno LE HYARIC",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bu2",
            "name": "bu2",
            "key": "bu2",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bu2&avatarId=45244",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bu2&avatarId=45244",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bu2&avatarId=45244",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bu2&avatarId=45244"
            },
            "displayName": "Bruno LE HYARIC",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bu2",
            "name": "bu2",
            "key": "bu2",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bu2&avatarId=45244",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bu2&avatarId=45244",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bu2&avatarId=45244",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bu2&avatarId=45244"
            },
            "displayName": "Bruno LE HYARIC",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11043/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 opened a new pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023\n\n\n   Add a \"is_nan\" kernel to check for NaN \"equality\" for FloatArray and DoubleArray (based on std::isnan()). The kernel signature is based on \"is_null\" kernel so I put my code in arrow/compute/kernels/scalar_validity.cc... but the implementation take some inspiration from \"compare\" kernel.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T00:38:58.498+0000",
                    "updated": "2020-12-28T00:38:58.498+0000",
                    "started": "2020-12-28T00:38:58.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528692",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549188157\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -126,12 +148,16 @@ void IsNullExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n \n const FunctionDoc is_valid_doc(\n     \"Return true if non-null\",\n-    (\"For each input value, emit true iff the value is valid (non-null).\"), {\"values\"});\n+    (\"For each input value, emit true if the value is valid (non-null).\"), {\"values\"});\n\nReview comment:\n       \"iff\" means \"if and only if\", not typo?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T01:41:48.410+0000",
                    "updated": "2020-12-28T01:41:48.410+0000",
                    "started": "2020-12-28T01:41:48.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528697",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#issuecomment-751544985\n\n\n   https://issues.apache.org/jira/browse/ARROW-11043\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T01:41:56.496+0000",
                    "updated": "2020-12-28T01:41:56.496+0000",
                    "started": "2020-12-28T01:41:56.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528699",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549188645\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,101 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n+    CheckScalarUnary(\"is_nan\",\n+                     ArrayFromJSON(float32(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                     ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+\n+    CheckScalarUnary(\"is_nan\",\n+    ArrayFromJSON(float32(), \"[0.0, 1.0, 2.0, 3.0, 4.0]\"),\n+    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n+\n+    CheckScalarUnary(\"is_nan\",\n+    ArrayFromJSON(float32(), \"[0.0, NaN, 2.0, NaN, 4.0]\"),\n+    ArrayFromJSON(boolean(), \"[false, true, false, true, false]\"));\n\nReview comment:\n       also test nulls?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T01:45:50.129+0000",
                    "updated": "2020-12-28T01:45:50.129+0000",
                    "started": "2020-12-28T01:45:50.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528700",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549188990\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -345,6 +345,18 @@ Result<Datum> IsValid(const Datum& values, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> IsNull(const Datum& values, ExecContext* ctx = NULLPTR);\n \n+/// \\brief IsNan returns true for each element of `values` that is NaN,\n+/// false otherwise\n+///\n+/// \\param[in] values input to look for NaN\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the resulting datum\n+///\n+/// \\since X.X.X\n+/// \\note API not yet finalized\n+ARROW_EXPORT\n+Result<Datum> IsNan(const Datum& values, ExecContext* ctx = NULLPTR);\n+\n\nReview comment:\n       Should also update document `docs/source/cpp/compute.rst`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T01:47:53.620+0000",
                    "updated": "2020-12-28T01:47:53.620+0000",
                    "started": "2020-12-28T01:47:53.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528701",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549192901\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -126,12 +148,16 @@ void IsNullExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n \n const FunctionDoc is_valid_doc(\n     \"Return true if non-null\",\n-    (\"For each input value, emit true iff the value is valid (non-null).\"), {\"values\"});\n+    (\"For each input value, emit true if the value is valid (non-null).\"), {\"values\"});\n\nReview comment:\n       You are right! First time I see this notation. Will fix it (including following comments) tomorrow.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T02:19:06.883+0000",
                    "updated": "2020-12-28T02:19:06.883+0000",
                    "started": "2020-12-28T02:19:06.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528702",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549518496\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,101 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n+    CheckScalarUnary(\"is_nan\",\n+                     ArrayFromJSON(float32(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                     ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+\n+    CheckScalarUnary(\"is_nan\",\n+    ArrayFromJSON(float32(), \"[0.0, 1.0, 2.0, 3.0, 4.0]\"),\n+    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n+\n+    CheckScalarUnary(\"is_nan\",\n+    ArrayFromJSON(float32(), \"[0.0, NaN, 2.0, NaN, 4.0]\"),\n+    ArrayFromJSON(boolean(), \"[false, true, false, true, false]\"));\n\nReview comment:\n       Fixed in last commit.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T23:35:55.401+0000",
                    "updated": "2020-12-28T23:35:55.401+0000",
                    "started": "2020-12-28T23:35:55.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528945",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549518578\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -126,12 +148,16 @@ void IsNullExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n \n const FunctionDoc is_valid_doc(\n     \"Return true if non-null\",\n-    (\"For each input value, emit true iff the value is valid (non-null).\"), {\"values\"});\n+    (\"For each input value, emit true if the value is valid (non-null).\"), {\"values\"});\n\nReview comment:\n       Fixed in last commit.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T23:36:18.297+0000",
                    "updated": "2020-12-28T23:36:18.297+0000",
                    "started": "2020-12-28T23:36:18.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528946",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549518627\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -345,6 +345,18 @@ Result<Datum> IsValid(const Datum& values, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> IsNull(const Datum& values, ExecContext* ctx = NULLPTR);\n \n+/// \\brief IsNan returns true for each element of `values` that is NaN,\n+/// false otherwise\n+///\n+/// \\param[in] values input to look for NaN\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the resulting datum\n+///\n+/// \\since X.X.X\n+/// \\note API not yet finalized\n+ARROW_EXPORT\n+Result<Datum> IsNan(const Datum& values, ExecContext* ctx = NULLPTR);\n+\n\nReview comment:\n       Fixed in last commit.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T23:36:41.188+0000",
                    "updated": "2020-12-28T23:36:41.188+0000",
                    "started": "2020-12-28T23:36:41.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528947",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549535933\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -455,20 +455,24 @@ Structural transforms\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n | is_null                  | Unary      | Any                                            | Boolean             | \\(2)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_valid                 | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_valid                 | Unary      | Any                                            | Boolean             | \\(3)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(4)    |\n+| is_nan                   | Unary      | Float, Double                                  | Boolean             | \\(4)    |\n\nReview comment:\n       nit: move `is_nan` above `is_null` to keep names ordered\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T01:25:11.547+0000",
                    "updated": "2020-12-29T01:25:11.547+0000",
                    "started": "2020-12-29T01:25:11.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528970",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/528973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r549537103\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -455,20 +455,24 @@ Structural transforms\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n | is_null                  | Unary      | Any                                            | Boolean             | \\(2)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_valid                 | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_valid                 | Unary      | Any                                            | Boolean             | \\(3)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(4)    |\n+| is_nan                   | Unary      | Float, Double                                  | Boolean             | \\(4)    |\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T01:32:56.166+0000",
                    "updated": "2020-12-29T01:32:56.166+0000",
                    "started": "2020-12-29T01:32:56.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528973",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551938144\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -345,6 +345,18 @@ Result<Datum> IsValid(const Datum& values, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> IsNull(const Datum& values, ExecContext* ctx = NULLPTR);\n \n+/// \\brief IsNan returns true for each element of `values` that is NaN,\n+/// false otherwise\n+///\n+/// \\param[in] values input to look for NaN\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the resulting datum\n+///\n+/// \\since X.X.X\n\nReview comment:\n       This would be 3.0.0 if this PR is merged in a week or two.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n\nReview comment:\n       Note that you can write type-parameterized tests, though it's perhaps not very useful here:\r\n   https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#typed-tests\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n+  // All NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                   ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+  // No NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[0.0, 1.0, 2.0, 3.0, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, false, false, false, false, null]\"));\n+  // Some NaNs\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[0.0, NaN, 2.0, NaN, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, true, false, true, false, null]\"));\n+}\n+\n+TEST_F(TestDoubleValidityKernels, DoubleArrayIsNan) {\n+  // All NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                   ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+  // No NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[0.0, 1.0, 2.0, 3.0, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, false, false, false, false, null]\"));\n+  // Some NaNs\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[0.0, NaN, 2.0, NaN, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, true, false, true, false, null]\"));\n+}\n+\n+TEST_F(TestFloatValidityKernels, FloatScalarIsNan) {\n+  CheckScalarUnary(\"is_nan\", MakeNullScalar(float32()), MakeNullScalar(boolean()));\n+  CheckScalarUnary(\"is_nan\", MakeScalar(42.0), MakeScalar(false));\n\nReview comment:\n       You probably mean `42.0f`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -132,6 +156,11 @@ const FunctionDoc is_null_doc(\"Return true if null\",\n                               (\"For each input value, emit true iff the value is null.\"),\n                               {\"values\"});\n \n+const FunctionDoc is_nan_doc(\"Return true if NaN\",\n+                             (\"For each input value, emit true iff the value is NaN \"\n+                              \"(according to std::isnan(value)).\"),\n\nReview comment:\n       I don't think \"according to\" is necessary, NaN values are standardized by IEEE floating point.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -453,22 +453,26 @@ Structural transforms\n +==========================+============+================================================+=====================+=========+\n | fill_null                | Binary     | Boolean, Null, Numeric, Temporal, String-like  | Input type          | \\(1)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_null                  | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_nan                   | Unary      | Float, Double                                  | Boolean             | \\(2)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_valid                 | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_null                  | Unary      | Any                                            | Boolean             | \\(3)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(4)    |\n+| is_valid                 | Unary      | Any                                            | Boolean             | \\(4)    |\n++--------------------------+------------+------------------------------------------------+---------------------+---------+\n+| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(5)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n \n * \\(1) First input must be an array, second input a scalar of the same type.\n   Output is an array of the same type as the inputs, and with the same values\n   as the first input, except for nulls replaced with the second input value.\n \n-* \\(2) Output is true iff the corresponding input element is non-null.\n+* \\(2) Output is true iff the corresponding input element is NaN according to std::isnan(value).\n\nReview comment:\n       As mentioned above, \"according to...\" isn't necessary.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n\nReview comment:\n       Style nit: we would rather use `using TestDoubleValidityKernels = TestValidityKernels<DoubleType>`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/common.h\n##########\n@@ -19,6 +19,7 @@\n \n // IWYU pragma: begin_exports\n \n+#include <cmath>\n\nReview comment:\n       Why add this to `common.h`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T13:46:48.904+0000",
                    "updated": "2021-01-05T13:46:48.904+0000",
                    "started": "2021-01-05T13:46:48.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531221",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551960501\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -345,6 +345,18 @@ Result<Datum> IsValid(const Datum& values, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> IsNull(const Datum& values, ExecContext* ctx = NULLPTR);\n \n+/// \\brief IsNan returns true for each element of `values` that is NaN,\n+/// false otherwise\n+///\n+/// \\param[in] values input to look for NaN\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the resulting datum\n+///\n+/// \\since X.X.X\n\nReview comment:\n       Thanks @pitrou for your review, I will update the PR today answering all points. Should I rebase first ?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:20:41.159+0000",
                    "updated": "2021-01-05T14:20:41.159+0000",
                    "started": "2021-01-05T14:20:41.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531242",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551969566\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/common.h\n##########\n@@ -19,6 +19,7 @@\n \n // IWYU pragma: begin_exports\n \n+#include <cmath>\n\nReview comment:\n       Initially I included cmath.h to use std::isnan(). I thought this header would be quite common to most kernels... my assumption might be wrong though ?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:35:21.778+0000",
                    "updated": "2021-01-05T14:35:21.778+0000",
                    "started": "2021-01-05T14:35:21.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531251",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551969646\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -132,6 +156,11 @@ const FunctionDoc is_null_doc(\"Return true if null\",\n                               (\"For each input value, emit true iff the value is null.\"),\n                               {\"values\"});\n \n+const FunctionDoc is_nan_doc(\"Return true if NaN\",\n+                             (\"For each input value, emit true iff the value is NaN \"\n+                              \"(according to std::isnan(value)).\"),\n\nReview comment:\n       Ok\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:35:34.725+0000",
                    "updated": "2021-01-05T14:35:34.725+0000",
                    "started": "2021-01-05T14:35:34.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531252",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551970210\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n+  // All NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                   ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+  // No NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[0.0, 1.0, 2.0, 3.0, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, false, false, false, false, null]\"));\n+  // Some NaNs\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float32(), \"[0.0, NaN, 2.0, NaN, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, true, false, true, false, null]\"));\n+}\n+\n+TEST_F(TestDoubleValidityKernels, DoubleArrayIsNan) {\n+  // All NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[NaN, NaN, NaN, NaN, NaN]\"),\n+                   ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n+  // No NaN\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[0.0, 1.0, 2.0, 3.0, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, false, false, false, false, null]\"));\n+  // Some NaNs\n+  CheckScalarUnary(\"is_nan\", ArrayFromJSON(float64(), \"[0.0, NaN, 2.0, NaN, 4.0, null]\"),\n+                   ArrayFromJSON(boolean(), \"[false, true, false, true, false, null]\"));\n+}\n+\n+TEST_F(TestFloatValidityKernels, FloatScalarIsNan) {\n+  CheckScalarUnary(\"is_nan\", MakeNullScalar(float32()), MakeNullScalar(boolean()));\n+  CheckScalarUnary(\"is_nan\", MakeScalar(42.0), MakeScalar(false));\n\nReview comment:\n       Yes, thanks.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:36:30.994+0000",
                    "updated": "2021-01-05T14:36:30.994+0000",
                    "started": "2021-01-05T14:36:30.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531254",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551971142\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -453,22 +453,26 @@ Structural transforms\n +==========================+============+================================================+=====================+=========+\n | fill_null                | Binary     | Boolean, Null, Numeric, Temporal, String-like  | Input type          | \\(1)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_null                  | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_nan                   | Unary      | Float, Double                                  | Boolean             | \\(2)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| is_valid                 | Unary      | Any                                            | Boolean             | \\(2)    |\n+| is_null                  | Unary      | Any                                            | Boolean             | \\(3)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n-| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(4)    |\n+| is_valid                 | Unary      | Any                                            | Boolean             | \\(4)    |\n++--------------------------+------------+------------------------------------------------+---------------------+---------+\n+| list_value_length        | Unary      | List-like                                      | Int32 or Int64      | \\(5)    |\n +--------------------------+------------+------------------------------------------------+---------------------+---------+\n \n * \\(1) First input must be an array, second input a scalar of the same type.\n   Output is an array of the same type as the inputs, and with the same values\n   as the first input, except for nulls replaced with the second input value.\n \n-* \\(2) Output is true iff the corresponding input element is non-null.\n+* \\(2) Output is true iff the corresponding input element is NaN according to std::isnan(value).\n\nReview comment:\n       Ok\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:37:53.626+0000",
                    "updated": "2021-01-05T14:37:53.626+0000",
                    "started": "2021-01-05T14:37:53.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531258",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551972306\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n\nReview comment:\n       Ok\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:39:30.728+0000",
                    "updated": "2021-01-05T14:39:30.728+0000",
                    "started": "2021-01-05T14:39:30.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531262",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bu2 commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551974405\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -31,61 +31,98 @@\n namespace arrow {\n namespace compute {\n \n+template <typename ArrowType>\n class TestValidityKernels : public ::testing::Test {\n  protected:\n-  // XXX Since IsValid and IsNull don't touch any buffers but the null bitmap\n-  // testing multiple types seems redundant.\n-  using ArrowType = BooleanType;\n-\n   static std::shared_ptr<DataType> type_singleton() {\n     return TypeTraits<ArrowType>::type_singleton();\n   }\n };\n \n-TEST_F(TestValidityKernels, ArrayIsValid) {\n+typedef TestValidityKernels<BooleanType> TestBooleanValidityKernels;\n+typedef TestValidityKernels<FloatType> TestFloatValidityKernels;\n+typedef TestValidityKernels<DoubleType> TestDoubleValidityKernels;\n+\n+TEST_F(TestBooleanValidityKernels, ArrayIsValid) {\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[1]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_valid\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[false, true, true, false]\");\n }\n \n-TEST_F(TestValidityKernels, IsValidIsNullNullType) {\n+TEST_F(TestBooleanValidityKernels, IsValidIsNullNullType) {\n   CheckScalarUnary(\"is_null\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[true, true, true, true, true]\"));\n   CheckScalarUnary(\"is_valid\", std::make_shared<NullArray>(5),\n                    ArrayFromJSON(boolean(), \"[false, false, false, false, false]\"));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsValidBufferPassthruOptimization) {\n   Datum arg = ArrayFromJSON(boolean(), \"[null, 1, 0, null]\");\n   ASSERT_OK_AND_ASSIGN(auto validity, arrow::compute::IsValid(arg));\n   ASSERT_EQ(validity.array()->buffers[1], arg.array()->buffers[0]);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsValid) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsValid) {\n   CheckScalarUnary(\"is_valid\", MakeScalar(19.7), MakeScalar(true));\n   CheckScalarUnary(\"is_valid\", MakeNullScalar(float64()), MakeScalar(false));\n }\n \n-TEST_F(TestValidityKernels, ArrayIsNull) {\n+TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[]\", type_singleton(), \"[]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null]\", type_singleton(), \"[true]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[1]\", type_singleton(), \"[false]\");\n   CheckScalarUnary(\"is_null\", type_singleton(), \"[null, 1, 0, null]\", type_singleton(),\n                    \"[true, false, false, true]\");\n }\n \n-TEST_F(TestValidityKernels, IsNullSetsZeroNullCount) {\n+TEST_F(TestBooleanValidityKernels, IsNullSetsZeroNullCount) {\n   auto arr = ArrayFromJSON(int32(), \"[1, 2, 3, 4]\");\n   std::shared_ptr<ArrayData> result = (*IsNull(arr)).array();\n   ASSERT_EQ(result->null_count, 0);\n }\n \n-TEST_F(TestValidityKernels, ScalarIsNull) {\n+TEST_F(TestBooleanValidityKernels, ScalarIsNull) {\n   CheckScalarUnary(\"is_null\", MakeScalar(19.7), MakeScalar(false));\n   CheckScalarUnary(\"is_null\", MakeNullScalar(float64()), MakeScalar(true));\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNan) {\n\nReview comment:\n       Ok, thanks for the link.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T14:42:48.357+0000",
                    "updated": "2021-01-05T14:42:48.357+0000",
                    "started": "2021-01-05T14:42:48.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531266",
                    "issueId": "13348042"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/worklog/531283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9023:\nURL: https://github.com/apache/arrow/pull/9023#discussion_r551989364\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/common.h\n##########\n@@ -19,6 +19,7 @@\n \n // IWYU pragma: begin_exports\n \n+#include <cmath>\n\nReview comment:\n       We only add inclusion in header files when it is required by the header file itself, otherwise it would inflate compilation times for nothing. Admittedly, `cmath` is probably not a large file.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T15:06:40.899+0000",
                    "updated": "2021-01-05T15:06:40.899+0000",
                    "started": "2021-01-05T15:06:40.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531283",
                    "issueId": "13348042"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7bdec7dc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@449e727f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@baa1e65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c1088e5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e482f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3f8b2ce7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64094445[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5ce6af81[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29eceb02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4f6616cc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61e35809[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@8107913[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 05 18:53:59 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-05T18:53:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11043/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-27T23:43:29.000+0000",
        "updated": "2021-01-05T19:51:57.000+0000",
        "timeoriginalestimate": null,
        "description": "Add \"is_nan\" kernel on the basis of \"is_null\" kernel signature (see arrow/compute/kernels/scalar_validity.cc) and implemented with applicator & operator like in arrow/compute/kernels/compare.cc kernels. Kernel only implemented for FloatType and DoubleType.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add \"is_nan\" kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348042/comment/17259138",
                    "id": "17259138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9023\n[https://github.com/apache/arrow/pull/9023]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-05T18:53:59.616+0000",
                    "updated": "2021-01-05T18:53:59.616+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0luzc:",
        "customfield_12314139": null
    }
}