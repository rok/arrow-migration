{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13206876",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876",
    "key": "ARROW-4130",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jlapacik",
            "name": "jlapacik",
            "key": "jlapacik",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joshua Lapacik",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jlapacik",
            "name": "jlapacik",
            "key": "jlapacik",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joshua Lapacik",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jlapacik",
            "name": "jlapacik",
            "key": "jlapacik",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joshua Lapacik",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4130/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jlapacik commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283\n \n \n   Closes https://github.com/apache/arrow/issues/3270 .\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-28T23:26:38.666+0000",
                    "updated": "2018-12-28T23:26:38.666+0000",
                    "started": "2018-12-28T23:26:38.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179590",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-450442873\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=h1) Report\n   > Merging [#3283](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8ed97cc15a2eff95dad28d3f5dce5af944f02ea3?src=pr&el=desc) will **decrease** coverage by `20.45%`.\n   > The diff coverage is `81.81%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3283/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3283       +/-   ##\n   ===========================================\n   - Coverage   88.58%   68.13%   -20.46%     \n   ===========================================\n     Files         539       58      -481     \n     Lines       72987     4029    -68958     \n   ===========================================\n   - Hits        64657     2745    -61912     \n   + Misses       8225     1179     -7046     \n     Partials      105      105\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | `84.21% <81.81%> (+27.06%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `36.84% <0%> (-26.32%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `42.85% <0%> (-14.29%)` | :arrow_down: |\n   | ... and [483 more](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=footer). Last update [8ed97cc...1b31d45](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-28T23:29:08.557+0000",
                    "updated": "2018-12-28T23:29:08.557+0000",
                    "started": "2018-12-28T23:29:08.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179591",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jlapacik commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-450443146\n \n \n   @stuartcarnie can you review this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-28T23:32:16.108+0000",
                    "updated": "2018-12-28T23:32:16.108+0000",
                    "started": "2018-12-28T23:32:16.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179593",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244477470\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,347 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n+\n+\tfor i := 0; i < l; i++ {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 0},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 5},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 10},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{5, 10},\n+\t\t\twant:     []string{\"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{10, 10},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 7},\n+\t\t\twant:     []string{\"def\", \"g\", \"hijk\", \"lm\", \"n\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tl = slice.Len()\n+\t\t\tvs = vs[:l]\n+\n+\t\t\tfor i := 0; i < l; i++ {\n+\t\t\t\tvs[i] = slice.ValueString(i)\n+\t\t\t}\n+\n+\t\t\tif got, want := vs, tc.want; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestBinarySliceDataWithNull(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"\", \"\", \"hijk\", \"lm\", \"\", \"opq\", \"\", \"tu\"}\n+\tvalids := []bool{true, true, false, false, true, true, true, true, false, true}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tb.AppendStringValues(values, valids)\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 3; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n \n Review comment:\n   ditto.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T10:43:35.057+0000",
                    "updated": "2018-12-29T10:43:35.057+0000",
                    "started": "2018-12-29T10:43:35.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179668",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244477498\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,347 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n+\n+\tfor i := 0; i < l; i++ {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 0},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 5},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 10},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{5, 10},\n+\t\t\twant:     []string{\"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{10, 10},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 7},\n+\t\t\twant:     []string{\"def\", \"g\", \"hijk\", \"lm\", \"n\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tl = slice.Len()\n+\t\t\tvs = vs[:l]\n+\n+\t\t\tfor i := 0; i < l; i++ {\n+\t\t\t\tvs[i] = slice.ValueString(i)\n+\t\t\t}\n+\n+\t\t\tif got, want := vs, tc.want; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestBinarySliceDataWithNull(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"\", \"\", \"hijk\", \"lm\", \"\", \"opq\", \"\", \"tu\"}\n+\tvalids := []bool{true, true, false, false, true, true, true, true, false, true}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tb.AppendStringValues(values, valids)\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 3; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n+\n+\tfor i := 0; i < l; i++ {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\tnulls    int\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 2},\n+\t\t\tnulls:    0,\n+\t\t\twant:     []string{\"a\", \"bc\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 3},\n+\t\t\tnulls:    1,\n+\t\t\twant:     []string{\"a\", \"bc\", \"\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 4},\n+\t\t\tnulls:    2,\n+\t\t\twant:     []string{\"a\", \"bc\", \"\", \"\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{4, 8},\n+\t\t\tnulls:    0,\n+\t\t\twant:     []string{\"hijk\", \"lm\", \"\", \"opq\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 9},\n+\t\t\tnulls:    3,\n+\t\t\twant:     []string{\"\", \"\", \"hijk\", \"lm\", \"\", \"opq\", \"\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := slice.NullN(), tc.nulls; got != want {\n+\t\t\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tl = slice.Len()\n+\t\t\tvs = vs[:0]\n \n Review comment:\n   ditto.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T10:43:35.091+0000",
                    "updated": "2018-12-29T10:43:35.091+0000",
                    "started": "2018-12-29T10:43:35.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179669",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244477291\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,347 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n+\n+\tfor i := 0; i < l; i++ {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 0},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 5},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 10},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{5, 10},\n+\t\t\twant:     []string{\"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{10, 10},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 7},\n+\t\t\twant:     []string{\"def\", \"g\", \"hijk\", \"lm\", \"n\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tl = slice.Len()\n+\t\t\tvs = vs[:l]\n \n Review comment:\n   I think reusing the same `vs` slice is unnecessarily clever.\r\n   what about:\r\n   ```go\r\n   vs := make([]string, slice.Len())\r\n   for i := range vs {\r\n       vs[i] = slice.ValueString(i)\r\n   }\r\n   ```\r\n   instead ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T10:43:35.161+0000",
                    "updated": "2018-12-29T10:43:35.161+0000",
                    "started": "2018-12-29T10:43:35.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179670",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244477438\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,347 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n \n Review comment:\n   what about:\r\n   ```go\r\n   vs := make([]string, arr.Len())\r\n   for i := range vs {\r\n       vs[i] = arr.ValueString(i)\r\n   }\r\n   ```\r\n   instead of creating this easy-to-mistake-with-1 `l` value?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T10:43:35.165+0000",
                    "updated": "2018-12-29T10:43:35.165+0000",
                    "started": "2018-12-29T10:43:35.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179671",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jlapacik commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244504828\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,347 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tl := arr.Len()\n+\tvs := make([]string, l)\n+\n+\tfor i := 0; i < l; i++ {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 0},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 5},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 10},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{5, 10},\n+\t\t\twant:     []string{\"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{10, 10},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 7},\n+\t\t\twant:     []string{\"def\", \"g\", \"hijk\", \"lm\", \"n\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tl = slice.Len()\n+\t\t\tvs = vs[:l]\n \n Review comment:\n   @sbinet I'd like it if the tests made as few allocations as possible, but if you think this change would increase readability then I have no problem with it. The extra allocations are negligible anyway.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T17:40:12.279+0000",
                    "updated": "2018-12-29T17:40:12.279+0000",
                    "started": "2018-12-29T17:40:12.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179719",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-450442873\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=h1) Report\n   > Merging [#3283](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8ed97cc15a2eff95dad28d3f5dce5af944f02ea3?src=pr&el=desc) will **decrease** coverage by `20.7%`.\n   > The diff coverage is `81.81%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3283/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3283       +/-   ##\n   ===========================================\n   - Coverage   88.58%   67.88%   -20.71%     \n   ===========================================\n     Files         539       58      -481     \n     Lines       72987     4029    -68958     \n   ===========================================\n   - Hits        64657     2735    -61922     \n   + Misses       8225     1185     -7040     \n   - Partials      105      109        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | `84.21% <81.81%> (+27.06%)` | :arrow_up: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-31.58%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-28.58%)` | :arrow_down: |\n   | ... and [483 more](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=footer). Last update [8ed97cc...a8b0a65](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T18:17:39.141+0000",
                    "updated": "2018-12-29T18:17:39.141+0000",
                    "started": "2018-12-29T18:17:39.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179722",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-450442873\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=h1) Report\n   > Merging [#3283](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8ed97cc15a2eff95dad28d3f5dce5af944f02ea3?src=pr&el=desc) will **decrease** coverage by `20.7%`.\n   > The diff coverage is `81.81%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3283/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3283       +/-   ##\n   ===========================================\n   - Coverage   88.58%   67.88%   -20.71%     \n   ===========================================\n     Files         539       58      -481     \n     Lines       72987     4029    -68958     \n   ===========================================\n   - Hits        64657     2735    -61922     \n   + Misses       8225     1185     -7040     \n   - Partials      105      109        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | `84.21% <81.81%> (+27.06%)` | :arrow_up: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-31.58%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-28.58%)` | :arrow_down: |\n   | ... and [483 more](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=footer). Last update [8ed97cc...a3c4d69](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-29T22:35:21.556+0000",
                    "updated": "2018-12-29T22:35:21.556+0000",
                    "started": "2018-12-29T22:35:21.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179747",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/179783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r244533325\n \n \n\n ##########\n File path: go/arrow/array/binary_test.go\n ##########\n @@ -62,3 +63,343 @@ func TestBinary(t *testing.T) {\n \n \tb.Release()\n }\n+\n+func TestBinarySliceData(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tvs := make([]string, arr.Len())\n+\n+\tfor i := range vs {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 0},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 5},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 10},\n+\t\t\twant:     []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{5, 10},\n+\t\t\twant:     []string{\"lm\", \"n\", \"opq\", \"rs\", \"tu\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{10, 10},\n+\t\t\twant:     []string{},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 7},\n+\t\t\twant:     []string{\"def\", \"g\", \"hijk\", \"lm\", \"n\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tvs := make([]string, slice.Len())\n+\n+\t\t\tfor i := range vs {\n+\t\t\t\tvs[i] = slice.ValueString(i)\n+\t\t\t}\n+\n+\t\t\tif got, want := vs, tc.want; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestBinarySliceDataWithNull(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"\", \"\", \"hijk\", \"lm\", \"\", \"opq\", \"\", \"tu\"}\n+\tvalids := []bool{true, true, false, false, true, true, true, true, false, true}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tb.AppendStringValues(values, valids)\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(values); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 3; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tvs := make([]string, arr.Len())\n+\n+\tfor i := range vs {\n+\t\tvs[i] = arr.ValueString(i)\n+\t}\n+\n+\tif got, want := vs, values; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\ttests := []struct {\n+\t\tinterval [2]int64\n+\t\tnulls    int\n+\t\twant     []string\n+\t}{\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 2},\n+\t\t\tnulls:    0,\n+\t\t\twant:     []string{\"a\", \"bc\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 3},\n+\t\t\tnulls:    1,\n+\t\t\twant:     []string{\"a\", \"bc\", \"\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{0, 4},\n+\t\t\tnulls:    2,\n+\t\t\twant:     []string{\"a\", \"bc\", \"\", \"\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{4, 8},\n+\t\t\tnulls:    0,\n+\t\t\twant:     []string{\"hijk\", \"lm\", \"\", \"opq\"},\n+\t\t},\n+\t\t{\n+\t\t\tinterval: [2]int64{2, 9},\n+\t\t\tnulls:    3,\n+\t\t\twant:     []string{\"\", \"\", \"hijk\", \"lm\", \"\", \"opq\", \"\"},\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tslice := NewSlice(arr, tc.interval[0], tc.interval[1]).(*Binary)\n+\t\t\tdefer slice.Release()\n+\n+\t\t\tif got, want := slice.Len(), len(tc.want); got != want {\n+\t\t\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tif got, want := slice.NullN(), tc.nulls; got != want {\n+\t\t\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t\t\t}\n+\n+\t\t\tvs := make([]string, slice.Len())\n+\n+\t\t\tfor i := range vs {\n+\t\t\t\tvs[i] = slice.ValueString(i)\n+\t\t\t}\n+\n+\t\t\tif got, want := vs, tc.want; !reflect.DeepEqual(got, want) {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestBinarySliceOutOfBounds(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tvalues := []string{\"a\", \"bc\", \"def\", \"g\", \"hijk\", \"lm\", \"n\", \"opq\", \"rs\", \"tu\"}\n+\n+\tb := NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer b.Release()\n+\n+\tfor _, v := range values {\n+\t\tb.AppendString(v)\n+\t}\n+\n+\tarr := b.NewArray().(*Binary)\n+\tdefer arr.Release()\n+\n+\tslice := NewSlice(arr, 3, 8).(*Binary)\n+\tdefer slice.Release()\n+\n+\ttests := []struct {\n+\t\tindex int\n+\t\tpanic bool\n+\t}{\n+\t\t{\n+\t\t\tindex: -1,\n+\t\t\tpanic: true,\n+\t\t},\n+\t\t{\n+\t\t\tindex: 5,\n+\t\t\tpanic: true,\n+\t\t},\n+\t\t{\n+\t\t\tindex: 0,\n+\t\t\tpanic: false,\n+\t\t},\n+\t\t{\n+\t\t\tindex: 4,\n+\t\t\tpanic: false,\n+\t\t},\n+\t}\n+\n+\tfor _, tc := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\n+\t\t\tif tc.panic {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"this should have panicked, but did not\")\n+\t\t\t\t\t}\n+\t\t\t\t\tif got, want := e.(string), \"arrow/array: index out of range\"; got != want {\n+\t\t\t\t\t\tt.Fatalf(\"invalid error. got=%q, want=%q\", got, want)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t} else {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\tif e := recover(); e != nil {\n+\t\t\t\t\t\tt.Fatalf(\"unexpected panic: %v\", e)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\n+\t\t\tslice.ValueString(tc.index)\n \n Review comment:\n   perhaps store the returned value and display it if `tc.panic` is `true` to prevent any unwanted compiler ellision?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-30T12:50:02.890+0000",
                    "updated": "2018-12-30T12:50:02.890+0000",
                    "started": "2018-12-30T12:50:02.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "179783",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/180216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-450442873\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=h1) Report\n   > Merging [#3283](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9376d85c409f4b9b272297b3acb6a0f70dcedc32?src=pr&el=desc) will **decrease** coverage by `20.62%`.\n   > The diff coverage is `81.81%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3283/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #3283       +/-   ##\n   ===========================================\n   - Coverage    88.5%   67.88%   -20.63%     \n   ===========================================\n     Files         539       58      -481     \n     Lines       72968     4029    -68939     \n   ===========================================\n   - Hits        64583     2735    -61848     \n   + Misses       8278     1185     -7093     \n   - Partials      107      109        +2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | `84.21% <81.81%> (+27.06%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/arrow/array/builder\\_decimal.cc](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX2RlY2ltYWwuY2M=) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/gandiva/function\\_registry.h](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5Lmg=) | | |\n   | [cpp/src/arrow/util/int-util-test.cc](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLXRlc3QuY2M=) | | |\n   | ... and [474 more](https://codecov.io/gh/apache/arrow/pull/3283/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=footer). Last update [9376d85...5cf6a4f](https://codecov.io/gh/apache/arrow/pull/3283?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-02T16:08:41.787+0000",
                    "updated": "2019-01-02T16:08:41.787+0000",
                    "started": "2019-01-02T16:08:41.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "180216",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/181255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-451518794\n \n \n   @stuartcarnie @alexandreyc can you review?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-04T17:56:05.325+0000",
                    "updated": "2019-01-04T17:56:05.325+0000",
                    "started": "2019-01-04T17:56:05.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181255",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/181256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r245372195\n \n \n\n ##########\n File path: go/arrow/array/binary.go\n ##########\n @@ -38,7 +38,13 @@ func NewBinaryData(data *Data) *Binary {\n }\n \n // Value returns the slice at index i. This value should not be mutated.\n-func (a *Binary) Value(i int) []byte { return a.valueBytes[a.valueOffsets[i]:a.valueOffsets[i+1]] }\n+func (a *Binary) Value(i int) []byte {\n+\tif i < 0 || i >= a.array.data.length {\n+\t\tpanic(\"arrow/array: index out of range\")\n+\t}\n \n Review comment:\n   Is it Go-ey to boundscheck?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-04T17:56:12.029+0000",
                    "updated": "2019-01-04T17:56:12.029+0000",
                    "started": "2019-01-04T17:56:12.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181256",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/181274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#discussion_r245381939\n \n \n\n ##########\n File path: go/arrow/array/binary.go\n ##########\n @@ -38,7 +38,13 @@ func NewBinaryData(data *Data) *Binary {\n }\n \n // Value returns the slice at index i. This value should not be mutated.\n-func (a *Binary) Value(i int) []byte { return a.valueBytes[a.valueOffsets[i]:a.valueOffsets[i+1]] }\n+func (a *Binary) Value(i int) []byte {\n+\tif i < 0 || i >= a.array.data.length {\n+\t\tpanic(\"arrow/array: index out of range\")\n+\t}\n \n Review comment:\n   Go compilers do it for slices and arrays. It's in the specs of the Go language.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-04T18:32:35.860+0000",
                    "updated": "2019-01-04T18:32:35.860+0000",
                    "started": "2019-01-04T18:32:35.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181274",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/181406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283#issuecomment-451662986\n \n \n   LGTM\r\n   \r\n   (Sorry for being rather inactive these last weeks, I hope I will have more time to contribute in a few weeks)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-05T15:03:48.534+0000",
                    "updated": "2019-01-05T15:03:48.534+0000",
                    "started": "2019-01-05T15:03:48.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181406",
                    "issueId": "13206876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/worklog/181448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3283: ARROW-4130: [Go] offset not used when accessing binary array\nURL: https://github.com/apache/arrow/pull/3283\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-05T20:29:26.181+0000",
                    "updated": "2019-01-05T20:29:26.181+0000",
                    "started": "2019-01-05T20:29:26.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "181448",
                    "issueId": "13206876"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53cdff5d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42c91679[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4728db82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4dd867c0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@595cbfbd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d3ea63e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c4b9ed0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@322308fe[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e3ef850[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46f9b0ff[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26a41bee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@cea933c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Jan 05 20:30:29 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-05T20:30:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4130/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-12-28T23:20:49.000+0000",
        "updated": "2019-06-03T12:21:56.000+0000",
        "timeoriginalestimate": null,
        "description": "When accessing a\u00a0binary\u00a0array, the offset of the underlying data buffer is not used. This affects the behavior of slicing. See [https://github.com/apache/arrow/issues/3270]\u00a0.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] offset not used when accessing binary array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206876/comment/16734997",
                    "id": "16734997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3283\n[https://github.com/apache/arrow/pull/3283]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-05T20:30:29.935+0000",
                    "updated": "2019-01-05T20:30:29.935+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|u00dqw:",
        "customfield_12314139": null
    }
}