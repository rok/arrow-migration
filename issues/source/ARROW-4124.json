{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13206651",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651",
    "key": "ARROW-4124",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12550830",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550830",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13181204",
                    "key": "ARROW-3120",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181204",
                    "fields": {
                        "summary": "[C++] Parallelize execution of ScalarAggregateFunction",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12550831",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550831",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13181205",
                    "key": "ARROW-3121",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205",
                    "fields": {
                        "summary": "[C++]  Mean kernel aggregate",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12550832",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550832",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13181207",
                    "key": "ARROW-3123",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181207",
                    "fields": {
                        "summary": "[C++] Incremental Count, Count Not Null aggregator",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12550833",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550833",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13181206",
                    "key": "ARROW-3122",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181206",
                    "fields": {
                        "summary": "[C++] Incremental Variance, Standard Deviation aggregators",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 42600,
            "total": 42600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 42600,
            "total": 42600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4124/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 81,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407\n \n \n   This is a draft of the aggregate kernel interface. The goal of publishing this PR is to gather feedback on the design and architecture.\r\n   \r\n   - `AggregateUnaryKernel/AggregateState` decomposition kernel implementation and parallel execution. The implementor of an `AggregateState` does not need to be concerned about details of parallel execution (minus the thread-safety of the `Consume` method). It also allows user to implement custom aggregates. \r\n   - `Monoid` a class representing a mathematical monoid.\r\n   - `MonoidAggregateState` a specific implementation of `AggregateState` that is generic enough to support various monoids. Note that it is limited to monoid known at compile time, usually monoids on primitives.\r\n   \r\n   The following needs to be completed in this PR.\r\n   - [ ] Add optional multi-threading support in `AggregateKernel::Call`\r\n   - [ ] Implement primitive kernel (min, max, count, countnull, mean, stddev)\r\n   - [\u00a0] Deal with Sum/Mean saturation/overflow\r\n   - [\u00a0] Add documentation for relevant interfaces (and add ARROW_EXPORT hint)\r\n   \r\n   The current draft does not take into account filtering and groups. I do have an idea of how this would be done, e.g. add `AggregateState::Consume(..., const Mask &filter)`. I delayed incorporating this interface until we implement the filtering kernel. This is going to be done in a different ticket.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T18:19:03.984+0000",
                    "updated": "2019-01-15T18:19:03.984+0000",
                    "started": "2019-01-15T18:19:03.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185370",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248070443\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n+    return Status::OK();\n+  }\n+\n+  Status VisitNull() { return Status::OK(); }\n+\n+  MonoidType Value() const { return monoid_; }\n+\n+ private:\n+  MonoidType monoid_;\n+};\n+\n+template <typename NumericType, typename MonoidType, typename MonoidVisitor = IdentityVisitor<MonoidType>>\n+class MonoidAggregateState : public AggregateState {\n+ public:\n+  Status Consume(FunctionContext* ctx, const Array& input) final {\n+    auto data = input.data();\n+    MonoidVisitor visitor;\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<NumericType>::Visit(*data, &visitor));\n+\n+    {\n+      // Merging the state must be protected by a mutex for concurrent access.\n+      // The contention should be low assuming that the majority of time is\n+      // spent in the preceding `Visit` call.\n+      std::lock_guard<std::mutex> guard(monoid_mutex_);\n+      monoid_ += visitor.Value();\n+    }\n+\n+    return Status::OK();\n+  };\n+\n+  Status Finalize(FunctionContext* ctx, Datum* out) final {\n+    *out = Datum(Scalar(monoid_.value()));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::mutex monoid_mutex_;\n+  MonoidType monoid_;\n+};\n+\n+#define GET_MONOID_KERNEL_CASE(T, M)                                                 \\\n+  case T::type_id:                                                                   \\\n+    kernel =                                                                         \\\n+        std::unique_ptr<AggregateUnaryKernel>(new AggregateUnaryKernel(new M<T>())); \\\n+    break\n+\n+#define DEFINE_GET_MONOID_KERNEL(MonoidStateType)                     \\\n \n Review comment:\n   These should be undefed below\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T21:33:23.332+0000",
                    "updated": "2019-01-15T21:33:23.332+0000",
                    "started": "2019-01-15T21:33:23.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185435",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248068574\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -43,25 +43,64 @@ class ARROW_EXPORT OpKernel {\n \n /// \\brief Placeholder for Scalar values until we implement these\n struct ARROW_EXPORT Scalar {\n-  ~Scalar() {}\n-\n-  ARROW_DISALLOW_COPY_AND_ASSIGN(Scalar);\n+  util::variant<bool, uint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double> value;\n+\n+  Scalar(bool value) : value(value) {}\n+  Scalar(uint8_t value) : value(value) {}\n+  Scalar(int8_t value) : value(value) {}\n+  Scalar(uint16_t value) : value(value) {}\n+  Scalar(int16_t value) : value(value) {}\n+  Scalar(uint32_t value) : value(value) {}\n+  Scalar(int32_t value) : value(value) {}\n+  Scalar(uint64_t value) : value(value) {}\n+  Scalar(int64_t value) : value(value) {}\n+  Scalar(float value) : value(value) {}\n+  Scalar(double value) : value(value) {}\n+\n+  Type::type kind() const {\n+    switch (this->value.which()) {\n+      case 0:\n \n Review comment:\n   Couldn't you just `static_cast<Type::type>(this->value.which())`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-15T21:33:23.421+0000",
                    "updated": "2019-01-15T21:33:23.421+0000",
                    "started": "2019-01-15T21:33:23.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185436",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248147125\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregation.h\n ##########\n @@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_AGGREGATION_H\n+#define ARROW_COMPUTE_KERNELS_AGGREGATION_H\n+\n+#include <memory>\n+#include <mutex>\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FunctionContext;\n+\n+/// \\class AggregateState\n+/// \\brief Interface for aggregate kernels.\n+///\n+/// An AggregateState separate the concerns of kernel computation and parallel\n+/// scheduling.\n+///\n+/// \\code{.cpp}\n+/// // Loop can run in parallel.\n \n Review comment:\n   I think this is only true for Monoids?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.223+0000",
                    "updated": "2019-01-16T04:32:00.223+0000",
                    "started": "2019-01-16T04:32:00.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185564",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248142986\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregation.h\n ##########\n @@ -0,0 +1,84 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_AGGREGATION_H\n+#define ARROW_COMPUTE_KERNELS_AGGREGATION_H\n+\n+#include <memory>\n+#include <mutex>\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FunctionContext;\n+\n+/// \\class AggregateState\n+/// \\brief Interface for aggregate kernels.\n+///\n+/// An AggregateState separate the concerns of kernel computation and parallel\n+/// scheduling.\n+///\n+/// \\code{.cpp}\n+/// // Loop can run in parallel.\n+/// for (array: input.chunks()) {\n+///   RETURN_NOT_OK(state->Consume(ctx, array));\n+/// }\n+///\n+/// return state->Finalize(ctx, out);\n+/// \\endcode\n+class AggregateState {\n+ public:\n+  /// \\brief Consume an array.\n+  ///\n+  /// \\param[in] ctx Function context provided by the user.\n+  /// \\param[in] input Array to consume.\n+  virtual Status Consume(FunctionContext* ctx, const Array& input) = 0;\n+\n+  /// \\brief Finalize the computation into a Datum.\n+  ///\n+  ///\n+  ///\n+  /// \\param[in] ctx Function context provided by the user.\n+  /// \\param[out] out The output of the function.\n+  virtual Status Finalize(FunctionContext* ctx, Datum* out) = 0;\n+\n+  virtual ~AggregateState() {}\n+};\n+\n+\n+/// \\brief UnaryKernel implemented by an AggregateState\n+class ARROW_EXPORT AggregateUnaryKernel : public UnaryKernel {\n+ public:\n+  explicit AggregateUnaryKernel(AggregateState* state) : state_(state) {}\n \n Review comment:\n   Generally, you would want to pass this through as a unique_ptr to make the ownership transfer explicit\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.540+0000",
                    "updated": "2019-01-16T04:32:00.540+0000",
                    "started": "2019-01-16T04:32:00.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185565",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248147326\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n \n Review comment:\n   Are compilers generally good enough to optimize out any overhead from calling the constructor (I would assume so), or would it make sense to have have a slightly less clean Monoid abstraction that takes the raw ValueType?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.664+0000",
                    "updated": "2019-01-16T04:32:00.664+0000",
                    "started": "2019-01-16T04:32:00.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185566",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248148585\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-test.cc\n ##########\n @@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/test-common.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/sum.h\"\n+#include \"arrow/compute/test-util.h\"\n+\n+using std::shared_ptr;\n+using std::vector;\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename Type, typename CType>\n+void CheckSum(FunctionContext* ctx, const Array& input, CType expected) {\n \n Review comment:\n   nit: CheckSum is a little bit confusing name due to checksum being  a potential operation.  Something like VerifySum might read a little better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.743+0000",
                    "updated": "2019-01-16T04:32:00.743+0000",
                    "started": "2019-01-16T04:32:00.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185567",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248148248\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n+    return Status::OK();\n+  }\n+\n+  Status VisitNull() { return Status::OK(); }\n+\n+  MonoidType Value() const { return monoid_; }\n+\n+ private:\n+  MonoidType monoid_;\n+};\n+\n+template <typename NumericType, typename MonoidType, typename MonoidVisitor = IdentityVisitor<MonoidType>>\n+class MonoidAggregateState : public AggregateState {\n+ public:\n+  Status Consume(FunctionContext* ctx, const Array& input) final {\n+    auto data = input.data();\n+    MonoidVisitor visitor;\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<NumericType>::Visit(*data, &visitor));\n+\n+    {\n+      // Merging the state must be protected by a mutex for concurrent access.\n+      // The contention should be low assuming that the majority of time is\n+      // spent in the preceding `Visit` call.\n+      std::lock_guard<std::mutex> guard(monoid_mutex_);\n \n Review comment:\n   I'm not sure if the discussion happened already but it would be good to understand the general plan around threading model, and how this relates the physical execution layer (i.e. something like the volcano model) and what exactly should live in which level (i.e. what belongs in the kernel/state).\r\n   \r\n   I'm sure you considered this, but a different design might create a kernel per thread, then merge each scalar at the end if the work can in fact can be run in parallel.  Probably not much difference performance wise but it still might eliminate an unnecessary memory barrier/system call.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.746+0000",
                    "updated": "2019-01-16T04:32:00.746+0000",
                    "started": "2019-01-16T04:32:00.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185568",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248146718\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregation.cc\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/aggregation.h\"\n+\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status AggregateUnaryKernel::Call(FunctionContext* ctx, const Datum& input, Datum* out) {\n+  switch (input.kind()) {\n \n Review comment:\n   this seems like a slightly different pattern then was taken for UnaryArrayKernel (i.e. this pattern wasn't in the kernel, but instead in util-internal.h).  I haven't thought through if a similar pattern should try to be established, have you?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.761+0000",
                    "updated": "2019-01-16T04:32:00.761+0000",
                    "started": "2019-01-16T04:32:00.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185569",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248148357\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n+    return Status::OK();\n+  }\n+\n+  Status VisitNull() { return Status::OK(); }\n+\n+  MonoidType Value() const { return monoid_; }\n+\n+ private:\n+  MonoidType monoid_;\n+};\n+\n+template <typename NumericType, typename MonoidType, typename MonoidVisitor = IdentityVisitor<MonoidType>>\n+class MonoidAggregateState : public AggregateState {\n+ public:\n+  Status Consume(FunctionContext* ctx, const Array& input) final {\n+    auto data = input.data();\n+    MonoidVisitor visitor;\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<NumericType>::Visit(*data, &visitor));\n+\n+    {\n+      // Merging the state must be protected by a mutex for concurrent access.\n+      // The contention should be low assuming that the majority of time is\n+      // spent in the preceding `Visit` call.\n+      std::lock_guard<std::mutex> guard(monoid_mutex_);\n+      monoid_ += visitor.Value();\n+    }\n+\n+    return Status::OK();\n+  };\n+\n+  Status Finalize(FunctionContext* ctx, Datum* out) final {\n+    *out = Datum(Scalar(monoid_.value()));\n \n Review comment:\n   Do monoids always have to be a scalar?  Would it make sense to have monoid_ populate the datum instead of assuming this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T04:32:00.762+0000",
                    "updated": "2019-01-16T04:32:00.762+0000",
                    "started": "2019-01-16T04:32:00.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185570",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#issuecomment-454664343\n \n \n   I will take a closer look, but one comment: thread control / multithreading should be handled (IMHO) at a higher level than the aggregation kernels. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T06:12:14.862+0000",
                    "updated": "2019-01-16T06:12:14.862+0000",
                    "started": "2019-01-16T06:12:14.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185607",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248246248\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n+    return Status::OK();\n+  }\n+\n+  Status VisitNull() { return Status::OK(); }\n+\n+  MonoidType Value() const { return monoid_; }\n+\n+ private:\n+  MonoidType monoid_;\n+};\n+\n+template <typename NumericType, typename MonoidType, typename MonoidVisitor = IdentityVisitor<MonoidType>>\n+class MonoidAggregateState : public AggregateState {\n+ public:\n+  Status Consume(FunctionContext* ctx, const Array& input) final {\n+    auto data = input.data();\n+    MonoidVisitor visitor;\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<NumericType>::Visit(*data, &visitor));\n+\n+    {\n+      // Merging the state must be protected by a mutex for concurrent access.\n+      // The contention should be low assuming that the majority of time is\n+      // spent in the preceding `Visit` call.\n+      std::lock_guard<std::mutex> guard(monoid_mutex_);\n+      monoid_ += visitor.Value();\n+    }\n+\n+    return Status::OK();\n+  };\n+\n+  Status Finalize(FunctionContext* ctx, Datum* out) final {\n+    *out = Datum(Scalar(monoid_.value()));\n \n Review comment:\n   In a subsequent change the `MonoidState` will also be parametrized with a finalizer, which is a functor that materialize to a Datum. Mean and Hyperloglog are example that needs this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:30:01.164+0000",
                    "updated": "2019-01-16T11:30:01.164+0000",
                    "started": "2019-01-16T11:30:01.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185697",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248248452\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregation.cc\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/aggregation.h\"\n+\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status AggregateUnaryKernel::Call(FunctionContext* ctx, const Datum& input, Datum* out) {\n+  switch (input.kind()) {\n \n Review comment:\n   I didn't see `util-internal.h`, I'll try to merge both. When I used this piece, I would have preferred to not be concerned with this and hoped that `Datum` provided a ChunkedArray for both cases (wrapping in a single element ChunkedArray when datum is Array).\r\n   \r\n   I'll add this feature.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:38:01.088+0000",
                    "updated": "2019-01-16T11:38:01.088+0000",
                    "started": "2019-01-16T11:38:01.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185709",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248248857\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -43,25 +43,64 @@ class ARROW_EXPORT OpKernel {\n \n /// \\brief Placeholder for Scalar values until we implement these\n struct ARROW_EXPORT Scalar {\n-  ~Scalar() {}\n-\n-  ARROW_DISALLOW_COPY_AND_ASSIGN(Scalar);\n+  util::variant<bool, uint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double> value;\n+\n+  Scalar(bool value) : value(value) {}\n+  Scalar(uint8_t value) : value(value) {}\n+  Scalar(int8_t value) : value(value) {}\n+  Scalar(uint16_t value) : value(value) {}\n+  Scalar(int16_t value) : value(value) {}\n+  Scalar(uint32_t value) : value(value) {}\n+  Scalar(int32_t value) : value(value) {}\n+  Scalar(uint64_t value) : value(value) {}\n+  Scalar(int64_t value) : value(value) {}\n+  Scalar(float value) : value(value) {}\n+  Scalar(double value) : value(value) {}\n+\n+  Type::type kind() const {\n+    switch (this->value.which()) {\n+      case 0:\n \n Review comment:\n   We'd have to make sure the mapping is exact, which is almost equivalent to expliciting this list.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:39:47.196+0000",
                    "updated": "2019-01-16T11:39:47.196+0000",
                    "started": "2019-01-16T11:39:47.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185711",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248249766\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n \n Review comment:\n   The compiler is clever enough (at least with O3). But, we can also add a second `operator+=` that takes the scalar value .\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:43:10.798+0000",
                    "updated": "2019-01-16T11:43:10.798+0000",
                    "started": "2019-01-16T11:43:10.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185712",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248249766\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n \n Review comment:\n   The compiler is clever enough (at least with O3). But, we can also add a second `operator+=` that takes the scalar value. When I compile locally with `-march=native`, this is the hotloop as reported by perf.\r\n   \r\n   ```\r\n   10.96 \u2502       vpaddq (%rax,%rdi,8),%zmm0,%zmm0     \r\n    6.73 \u2502       vpaddq 0x40(%rax,%rdi,8),%zmm1,%zmm1 \r\n    5.26 \u2502       vpaddq 0x80(%rax,%rdi,8),%zmm2,%zmm2 \r\n    5.40 \u2502       vpaddq 0xc0(%rax,%rdi,8),%zmm3,%zmm3 \r\n    9.53 \u2502       vpaddq 0x100(%rax,%rdi,8),%zmm0,%zmm0\r\n    5.78 \u2502       vpaddq 0x140(%rax,%rdi,8),%zmm1,%zmm1\r\n    5.06 \u2502       vpaddq 0x180(%rax,%rdi,8),%zmm2,%zmm2\r\n    5.06 \u2502       vpaddq 0x1c0(%rax,%rdi,8),%zmm3,%zmm3\r\n    8.38 \u2502       vpaddq 0x200(%rax,%rdi,8),%zmm0,%zmm0\r\n    5.53 \u2502       vpaddq 0x240(%rax,%rdi,8),%zmm1,%zmm1\r\n    4.97 \u2502       vpaddq 0x280(%rax,%rdi,8),%zmm2,%zmm2\r\n    4.84 \u2502       vpaddq 0x2c0(%rax,%rdi,8),%zmm3,%zmm3\r\n    7.46 \u2502       vpaddq 0x300(%rax,%rdi,8),%zmm0,%zmm0\r\n    5.39 \u2502       vpaddq 0x340(%rax,%rdi,8),%zmm1,%zmm1\r\n    5.07 \u2502       vpaddq 0x380(%rax,%rdi,8),%zmm2,%zmm2\r\n    4.34 \u2502       vpaddq 0x3c0(%rax,%rdi,8),%zmm3,%zmm3\r\n    0.24 \u2502       sub    $0xffffffffffffff80,%rdi      \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:44:49.425+0000",
                    "updated": "2019-01-16T11:44:49.425+0000",
                    "started": "2019-01-16T11:44:49.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185714",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/185715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248250442\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n \n Review comment:\n   Also note that some Monoid will be composed and aren't made of a single scalar value, e.g. the `Mean` monoid is made of `std::tuple<size_t, T>`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-16T11:45:39.889+0000",
                    "updated": "2019-01-16T11:45:39.889+0000",
                    "started": "2019-01-16T11:45:39.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "185715",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/186130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248531689\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/monoid-impl.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+#define ARROW_COMPUTE_KERNELS_MONOID_IMPL_H\n+\n+#include <algorithm>\n+#include <functional>\n+#include <mutex>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregation.h\"\n+#include \"arrow/compute/kernels/monoid.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename MonoidType>\n+class IdentityVisitor {\n+ public:\n+  using ValueType = typename MonoidType::ValueType;\n+\n+  Status VisitValue(const ValueType& value) {\n+    monoid_ += MonoidType(value);\n \n Review comment:\n   \ud83d\udc4d cool, its nice to see the compiler can auto-vectorize this. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-17T03:51:09.645+0000",
                    "updated": "2019-01-17T03:51:09.645+0000",
                    "started": "2019-01-17T03:51:09.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "186130",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/186132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248531837\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-benchmark.cc\n ##########\n @@ -0,0 +1,60 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/test-util.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/sum.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+static void BenchmarkSum(benchmark::State& state) {  // NOLINT non-const reference\n+  const int64_t iterations = 1UL << 12;\n+\n+  std::vector<int64_t> values;\n+  std::vector<bool> is_valid;\n+  for (int64_t i = 0; i < iterations; i++) {\n+    for (int64_t j = 0; j < i; j++) {\n+      is_valid.push_back(true);\n \n Review comment:\n   might be nice to have a benchmark that includes some nulls\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-17T03:52:31.285+0000",
                    "updated": "2019-01-17T03:52:31.285+0000",
                    "started": "2019-01-17T03:52:31.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "186132",
                    "issueId": "13206651"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/worklog/186135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3407: ARROW-4124: [C++] Draft Aggregate and Sum kernels [WIP]\nURL: https://github.com/apache/arrow/pull/3407#discussion_r248531960\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-test.cc\n ##########\n @@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+#include <string>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/test-common.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/sum.h\"\n+#include \"arrow/compute/test-util.h\"\n+\n+using std::shared_ptr;\n+using std::vector;\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename Type, typename CType>\n+void CheckSum(FunctionContext* ctx, const Array& input, CType expected) {\n+  Datum result;\n+  ASSERT_OK(Sum(ctx, input, &result));\n+\n+  // Ensure Datum is Scalar of proper type.\n+  ASSERT_EQ(result.kind(), Datum::SCALAR);\n+  auto type = TypeTraits<Type>::type_singleton();\n+  ASSERT_EQ(result.scalar().kind(), type->id());\n+\n+  ASSERT_EQ(util::get<CType>(result.scalar().value), expected);\n+}\n+\n+template <typename Type, typename CType>\n+void CheckSum(FunctionContext* ctx, const std::string& json, CType expected) {\n+  Datum result;\n+  auto array = ArrayFromJSON(TypeTraits<Type>::type_singleton(), json);\n+\n+  CheckSum<Type, CType>(ctx, *array, expected);\n+}\n+\n+template <typename Type>\n+class TestSumKernelNumeric : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType>\n+    NumericTypes;\n+\n+TYPED_TEST_CASE(TestSumKernelNumeric, NumericTypes);\n+\n+TYPED_TEST(TestSumKernelNumeric, SimpleSum) {\n+  using CType = typename TypeParam::c_type;\n+\n+  CheckSum<TypeParam, CType>(&this->ctx_, \"[0, 1, 2, 3, 4, 5]\", 5 * 6 / 2);\n+\n+  // Avoid this tests for (U)Int8Type\n+  if (sizeof(CType) > 1)\n+    CheckSum<TypeParam, CType>(&this->ctx_, \"[1000, null, 300, null, 30, null, 7]\", 1337);\n \n Review comment:\n   one interesting case is all nulls. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-17T03:53:32.597+0000",
                    "updated": "2019-01-17T03:53:32.597+0000",
                    "started": "2019-01-17T03:53:32.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "186135",
                    "issueId": "13206651"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 42600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@62644e4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5edcec1c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31eb95d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@86e33f4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d3b12ae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f903e1b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32382d6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b30594d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e6b9ce7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@60d50dd7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13f517e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5ac6dee7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 42600,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 10 01:05:20 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-10T01:05:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4124/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-12-27T17:53:19.000+0000",
        "updated": "2019-02-11T16:07:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to the particular details of implementing various aggregation types, we should first put a bit of energy into the abstract API for aggregating data in a multi-threaded setting\r\n\r\nAggregators must support both hash/group (e.g. \"group by\" in SQL or data frame libraries) modes and non-group modes. \r\n\r\nAggregations ideally should also support filter pushdown. For example:\r\n\r\n{code}\r\nselect $AGG($EXPR)\r\nfrom $TABLE\r\nwhere $PREDICATE\r\n{code}\r\n\r\nSome systems might materialize the post-predicate / filtered version of {{$EXPR}}, then aggregate that. pandas does this for example. Vectorized performance can be much improved by filtering inside the aggregation kernel. How the predicate true/false values are handled may depend on the implementation details of the kernel (e.g. SUM or MEAN will be a bit different from PRODUCT)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 42600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Abstract aggregation kernel API",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651/comment/16764272",
                    "id": "16764272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3407\n[https://github.com/apache/arrow/pull/3407]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-10T01:05:20.807+0000",
                    "updated": "2019-02-10T01:05:20.807+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|u00cd4:",
        "customfield_12314139": null
    }
}