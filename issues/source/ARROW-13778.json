{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13397670",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670",
    "key": "ARROW-13778",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621957",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621957",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13394945",
                    "key": "ARROW-13618",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13394945",
                    "fields": {
                        "summary": "[R] Use Arrow engine for summarize() by default  ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13778/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/647977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108\n\n\n   This handles `summarize()` queries like `avg = sum(x) / n()` by extracting the aggregations and evaluating them first, then implicitly doing `mutate()` afterwards. It does not support things like `stddev = sqrt(sum((x - mean(x)) ^ 2) / n())` because `x - mean(x)` implies a grouped aggregation -> left join -> mutate; that will be ARROW-13926 (after we can do joins). \r\n   \r\n   TODO:\r\n   \r\n   - [ ] More testing and better error handling for unsupported cases\r\n   - [ ] Add more explanatory discussion in comments because the logic gets complex\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-08T13:58:17.089+0000",
                    "updated": "2021-09-08T13:58:17.089+0000",
                    "started": "2021-09-08T13:58:17.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647977",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/647978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#issuecomment-915263970\n\n\n   https://issues.apache.org/jira/browse/ARROW-13778\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-08T13:58:30.816+0000",
                    "updated": "2021-09-08T13:58:30.816+0000",
                    "started": "2021-09-08T13:58:30.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647978",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/648887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#discussion_r705692706\n\n\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -42,33 +49,63 @@ summarise.arrow_dplyr_query <- function(.data, ..., .engine = c(\"arrow\", \"duckdb\n }\n summarise.Dataset <- summarise.ArrowTabular <- summarise.arrow_dplyr_query\n \n+# This is the Arrow summarize implementation\n\nReview comment:\n       This is great \u2014 finding these can be tricky in this code sometimes\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n+    # So based on the aggregations that have been extracted, mutate after\n+    mutate_mask <- arrow_mask(\n+      list(selected_columns = make_field_refs(names(ctx$aggregations)))\n+    )\n+    ctx$post_mutate[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      mutate_mask\n+    )\n+    return()\n+  }\n+\n+  # Backstop for any other odd cases, like fun(x, y) (i.e. no aggregation),\n+  # or aggregation functions that aren't supported in Arrow (not in agg_funcs)\n+  stop(\n+    handle_arrow_not_supported(\n+      quo_get_expr(quosure),\n+      as_label(quo_get_expr(quosure))\n+    ),\n+    call. = FALSE\n+  )\n+}\n+\n+# This function recurses through expr, pulls out any aggregation expressions,\n+# and inserts a variable name (field ref) in place of the aggregation\n+extract_aggregations <- function(expr, ctx) {\n+  # Keep the input in case we need to raise an error message with it\n+  original_expr <- expr\n+  funs <- all_funs(expr)\n+  if (length(funs) == 0) {\n+    return(expr)\n+  } else if (length(funs) > 1) {\n+    # Recurse more\n+    expr[-1] <- lapply(expr[-1], extract_aggregations, ctx)\n+  }\n+  if (funs[1] %in% names(agg_funcs)) {\n+    inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+    if (any(inner_agg_exprs) & !all(inner_agg_exprs)) {\n+      # We can't aggregate over a combination of dataset columns and other\n+      # aggregations (e.g. sum(x - mean(x)))\n+      # TODO: support in ARROW-13926\n+      # TODO: Add \"because\" arg to explain _why_ it's not supported?\n+      # TODO: this message could also say \"not supported in summarize()\"\n+      #       since some of these expressions may be legal elsewhere\n\nReview comment:\n       This last TODO I think is important \u2014 I think anyone who gets a not supported message will assume that expression is not supported in Arrow at all anywhere.\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -42,33 +49,63 @@ summarise.arrow_dplyr_query <- function(.data, ..., .engine = c(\"arrow\", \"duckdb\n }\n summarise.Dataset <- summarise.ArrowTabular <- summarise.arrow_dplyr_query\n \n+# This is the Arrow summarize implementation\n do_arrow_summarize <- function(.data, ..., .groups = NULL) {\n   if (!is.null(.groups)) {\n     # ARROW-13550\n     abort(\"`summarize()` with `.groups` argument not supported in Arrow\")\n   }\n   exprs <- ensure_named_exprs(quos(...))\n \n-  mask <- arrow_mask(.data, aggregation = TRUE)\n-\n-  results <- empty_named_list()\n+  # Create a stateful environment for recording our evaluated expressions\n+  # It's more complex than other places because a single summarize() expr\n+  # may result in multiple query nodes (Aggregate, Project),\n+  # and we have to walk through the expressions to disentangle them.\n+  ctx <- env(\n+    mask = arrow_mask(.data, aggregation = TRUE),\n+    aggregations = empty_named_list(),\n+    post_mutate = empty_named_list()\n+  )\n   for (i in seq_along(exprs)) {\n     # Iterate over the indices and not the names because names may be repeated\n     # (which overwrites the previous name)\n-    new_var <- names(exprs)[i]\n-    results[[new_var]] <- arrow_eval(exprs[[i]], mask)\n-    if (inherits(results[[new_var]], \"try-error\")) {\n-      msg <- handle_arrow_not_supported(\n-        results[[new_var]],\n-        as_label(exprs[[i]])\n-      )\n-      stop(msg, call. = FALSE)\n-    }\n+    summarize_eval(names(exprs)[i], exprs[[i]], ctx)\n   }\n \n-  .data$aggregations <- results\n-  # TODO: should in-memory query evaluate eagerly?\n-  collapse.arrow_dplyr_query(.data)\n+  # Apply the results to the .data object.\n+  # First, the aggregations\n+  .data$aggregations <- ctx$aggregations\n+  # Then collapse the query so that the resulting query object can have\n+  # additional operations applied to it\n+  out <- collapse.arrow_dplyr_query(.data)\n+  # The expressions may have been translated into\n+  # \"first, aggregate, then transform the result further\"\n+  # For example,\n+  #   summarize(mean = sum(x) / n())\n+  # is effectively implemented as\n+  #   summarize(..temp0 = sum(x), ..temp1 = n()) %>%\n+  #   mutate(mean = ..temp0 / ..temp1) %>%\n+  #   select(-starts_with(\"..temp\"))\n+  # If this is the case, there will be expressions in post_mutate\n\nReview comment:\n       ```suggestion\r\n     # If this is the case, there will be expressions in post_mutate\r\n     # nolint end\r\n   ```\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -42,33 +49,63 @@ summarise.arrow_dplyr_query <- function(.data, ..., .engine = c(\"arrow\", \"duckdb\n }\n summarise.Dataset <- summarise.ArrowTabular <- summarise.arrow_dplyr_query\n \n+# This is the Arrow summarize implementation\n do_arrow_summarize <- function(.data, ..., .groups = NULL) {\n   if (!is.null(.groups)) {\n     # ARROW-13550\n     abort(\"`summarize()` with `.groups` argument not supported in Arrow\")\n   }\n   exprs <- ensure_named_exprs(quos(...))\n \n-  mask <- arrow_mask(.data, aggregation = TRUE)\n-\n-  results <- empty_named_list()\n+  # Create a stateful environment for recording our evaluated expressions\n+  # It's more complex than other places because a single summarize() expr\n+  # may result in multiple query nodes (Aggregate, Project),\n+  # and we have to walk through the expressions to disentangle them.\n+  ctx <- env(\n+    mask = arrow_mask(.data, aggregation = TRUE),\n+    aggregations = empty_named_list(),\n+    post_mutate = empty_named_list()\n+  )\n   for (i in seq_along(exprs)) {\n     # Iterate over the indices and not the names because names may be repeated\n     # (which overwrites the previous name)\n-    new_var <- names(exprs)[i]\n-    results[[new_var]] <- arrow_eval(exprs[[i]], mask)\n-    if (inherits(results[[new_var]], \"try-error\")) {\n-      msg <- handle_arrow_not_supported(\n-        results[[new_var]],\n-        as_label(exprs[[i]])\n-      )\n-      stop(msg, call. = FALSE)\n-    }\n+    summarize_eval(names(exprs)[i], exprs[[i]], ctx)\n   }\n \n-  .data$aggregations <- results\n-  # TODO: should in-memory query evaluate eagerly?\n-  collapse.arrow_dplyr_query(.data)\n+  # Apply the results to the .data object.\n+  # First, the aggregations\n+  .data$aggregations <- ctx$aggregations\n+  # Then collapse the query so that the resulting query object can have\n+  # additional operations applied to it\n+  out <- collapse.arrow_dplyr_query(.data)\n+  # The expressions may have been translated into\n+  # \"first, aggregate, then transform the result further\"\n+  # For example,\n\nReview comment:\n       ```suggestion\r\n     # nolint start\r\n     # For example,\r\n   ```\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n\nReview comment:\n       ```suggestion\r\n       # Something like: fun(agg(x), agg(y))\r\n   ```\r\n   \r\n   We can turn off the commented code lintr if this gets too annoying (though when it catches legit comment code, it's great)\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n+    # So based on the aggregations that have been extracted, mutate after\n+    mutate_mask <- arrow_mask(\n+      list(selected_columns = make_field_refs(names(ctx$aggregations)))\n+    )\n+    ctx$post_mutate[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      mutate_mask\n+    )\n+    return()\n+  }\n+\n+  # Backstop for any other odd cases, like fun(x, y) (i.e. no aggregation),\n+  # or aggregation functions that aren't supported in Arrow (not in agg_funcs)\n+  stop(\n+    handle_arrow_not_supported(\n+      quo_get_expr(quosure),\n+      as_label(quo_get_expr(quosure))\n+    ),\n+    call. = FALSE\n+  )\n+}\n+\n+# This function recurses through expr, pulls out any aggregation expressions,\n+# and inserts a variable name (field ref) in place of the aggregation\n+extract_aggregations <- function(expr, ctx) {\n+  # Keep the input in case we need to raise an error message with it\n+  original_expr <- expr\n+  funs <- all_funs(expr)\n+  if (length(funs) == 0) {\n+    return(expr)\n+  } else if (length(funs) > 1) {\n+    # Recurse more\n+    expr[-1] <- lapply(expr[-1], extract_aggregations, ctx)\n+  }\n+  if (funs[1] %in% names(agg_funcs)) {\n+    inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+    if (any(inner_agg_exprs) & !all(inner_agg_exprs)) {\n+      # We can't aggregate over a combination of dataset columns and other\n+      # aggregations (e.g. sum(x - mean(x)))\n+      # TODO: support in ARROW-13926\n+      # TODO: Add \"because\" arg to explain _why_ it's not supported?\n+      # TODO: this message could also say \"not supported in summarize()\"\n+      #       since some of these expressions may be legal elsewhere\n+      stop(\n+        handle_arrow_not_supported(original_expr, as_label(original_expr)),\n+        call. = FALSE\n+      )\n+    }\n+\n+    # We have an aggregation expression with no other aggregations inside it,\n+    # so arrow_eval the expression on the data and give it a ..temp name prefix,\n+    # then insert that name (symbol) back into the expression so that we can\n+    # mutate() on the result of the aggregation and reference this field.\n+    tmpname <- paste0(\"..temp\", length(ctx$aggregations))\n\nReview comment:\n       This is vanishingly rare, but could we at this point check for any fields named in `tmpname` here? I can't imagine anyone would have one, but it would be better to error. Or would this error later without proactive checking? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T21:13:21.777+0000",
                    "updated": "2021-09-09T21:13:21.777+0000",
                    "started": "2021-09-09T21:13:21.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648887",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/648929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#discussion_r705800003\n\n\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n+    # So based on the aggregations that have been extracted, mutate after\n+    mutate_mask <- arrow_mask(\n+      list(selected_columns = make_field_refs(names(ctx$aggregations)))\n+    )\n+    ctx$post_mutate[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      mutate_mask\n+    )\n+    return()\n+  }\n+\n+  # Backstop for any other odd cases, like fun(x, y) (i.e. no aggregation),\n+  # or aggregation functions that aren't supported in Arrow (not in agg_funcs)\n+  stop(\n+    handle_arrow_not_supported(\n+      quo_get_expr(quosure),\n+      as_label(quo_get_expr(quosure))\n+    ),\n+    call. = FALSE\n+  )\n+}\n+\n+# This function recurses through expr, pulls out any aggregation expressions,\n+# and inserts a variable name (field ref) in place of the aggregation\n+extract_aggregations <- function(expr, ctx) {\n+  # Keep the input in case we need to raise an error message with it\n+  original_expr <- expr\n+  funs <- all_funs(expr)\n+  if (length(funs) == 0) {\n+    return(expr)\n+  } else if (length(funs) > 1) {\n+    # Recurse more\n+    expr[-1] <- lapply(expr[-1], extract_aggregations, ctx)\n+  }\n+  if (funs[1] %in% names(agg_funcs)) {\n+    inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+    if (any(inner_agg_exprs) & !all(inner_agg_exprs)) {\n+      # We can't aggregate over a combination of dataset columns and other\n+      # aggregations (e.g. sum(x - mean(x)))\n+      # TODO: support in ARROW-13926\n+      # TODO: Add \"because\" arg to explain _why_ it's not supported?\n+      # TODO: this message could also say \"not supported in summarize()\"\n+      #       since some of these expressions may be legal elsewhere\n\nReview comment:\n       Yeah maybe so, but all of the examples I can think of are just bad form (like `summarize(new_column = dbl - int)`, which really should be expressed in `mutate()`). Anyway I don't think this PR is the last word on any of this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T23:59:50.187+0000",
                    "updated": "2021-09-09T23:59:50.187+0000",
                    "started": "2021-09-09T23:59:50.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648929",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/648933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#discussion_r705801196\n\n\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n+    # So based on the aggregations that have been extracted, mutate after\n+    mutate_mask <- arrow_mask(\n+      list(selected_columns = make_field_refs(names(ctx$aggregations)))\n+    )\n+    ctx$post_mutate[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      mutate_mask\n+    )\n+    return()\n+  }\n+\n+  # Backstop for any other odd cases, like fun(x, y) (i.e. no aggregation),\n+  # or aggregation functions that aren't supported in Arrow (not in agg_funcs)\n+  stop(\n+    handle_arrow_not_supported(\n+      quo_get_expr(quosure),\n+      as_label(quo_get_expr(quosure))\n+    ),\n+    call. = FALSE\n+  )\n+}\n+\n+# This function recurses through expr, pulls out any aggregation expressions,\n+# and inserts a variable name (field ref) in place of the aggregation\n+extract_aggregations <- function(expr, ctx) {\n+  # Keep the input in case we need to raise an error message with it\n+  original_expr <- expr\n+  funs <- all_funs(expr)\n+  if (length(funs) == 0) {\n+    return(expr)\n+  } else if (length(funs) > 1) {\n+    # Recurse more\n+    expr[-1] <- lapply(expr[-1], extract_aggregations, ctx)\n+  }\n+  if (funs[1] %in% names(agg_funcs)) {\n+    inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+    if (any(inner_agg_exprs) & !all(inner_agg_exprs)) {\n+      # We can't aggregate over a combination of dataset columns and other\n+      # aggregations (e.g. sum(x - mean(x)))\n+      # TODO: support in ARROW-13926\n+      # TODO: Add \"because\" arg to explain _why_ it's not supported?\n+      # TODO: this message could also say \"not supported in summarize()\"\n+      #       since some of these expressions may be legal elsewhere\n+      stop(\n+        handle_arrow_not_supported(original_expr, as_label(original_expr)),\n+        call. = FALSE\n+      )\n+    }\n+\n+    # We have an aggregation expression with no other aggregations inside it,\n+    # so arrow_eval the expression on the data and give it a ..temp name prefix,\n+    # then insert that name (symbol) back into the expression so that we can\n+    # mutate() on the result of the aggregation and reference this field.\n+    tmpname <- paste0(\"..temp\", length(ctx$aggregations))\n\nReview comment:\n       The only way this would fail that I can think of is that if you deliberately did something like `summarize(..temp1 = mean(x), avg = sum(x) / n())`, and, well, can't you just not do that? Open to other suggestions, the names don't matter as long as they're unique and valid as names (so you can't just use the expression like `\"sum(x)\"` as the name).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T00:03:31.966+0000",
                    "updated": "2021-09-10T00:03:31.966+0000",
                    "started": "2021-09-10T00:03:31.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648933",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/648934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#discussion_r705801480\n\n\n\n##########\nFile path: r/R/dplyr-summarize.R\n##########\n@@ -81,3 +118,109 @@ summarize_projection <- function(.data) {\n format_aggregation <- function(x) {\n   paste0(x$fun, \"(\", x$data$ToString(), \")\")\n }\n+\n+# This function handles each summarize expression and turns it into the\n+# appropriate combination of (1) aggregations (possibly temporary) and\n+# (2) post-aggregation transformations (mutate)\n+# The function returns nothing: it assigns into the `ctx` environment\n+summarize_eval <- function(name, quosure, ctx, recurse = FALSE) {\n+  expr <- quo_get_expr(quosure)\n+  ctx$quo_env <- quo_get_env(quosure)\n+\n+  funs_in_expr <- all_funs(expr)\n+  if (length(funs_in_expr) == 0) {\n+    # If it is a scalar or field ref, no special handling required\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(quosure, ctx$mask)\n+    return()\n+  }\n+\n+  # Start inspecting the expr to see what aggregations it involves\n+  agg_funs <- names(agg_funcs)\n+  outer_agg <- funs_in_expr[1] %in% agg_funs\n+  inner_agg <- funs_in_expr[-1] %in% agg_funs\n+\n+  # First, pull out any aggregations wrapped in other function calls\n+  if (any(inner_agg)) {\n+    expr <- extract_aggregations(expr, ctx)\n+  }\n+\n+  # By this point, there are no more aggregation functions in expr\n+  # except for possibly the outer function call:\n+  # they've all been pulled out to ctx$aggregations, and in their place in expr\n+  # there are variable names, which will correspond to field refs in the\n+  # query object after aggregation and collapse().\n+  # So if we want to know if there are any aggregations inside expr,\n+  # we have to look for them by their new var names\n+  inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+\n+  if (outer_agg) {\n+    # This is something like agg(fun(x, y)\n+    # It just works by normal arrow_eval, unless there's a mix of aggs and\n+    # columns in the original data like agg(fun(x, agg(x)))\n+    # (but that will have been caught in extract_aggregations())\n+    ctx$aggregations[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      ctx$mask\n+    )\n+    return()\n+  } else if (all(inner_agg_exprs)) {\n+    # fun(agg(x), agg(y))\n+    # So based on the aggregations that have been extracted, mutate after\n+    mutate_mask <- arrow_mask(\n+      list(selected_columns = make_field_refs(names(ctx$aggregations)))\n+    )\n+    ctx$post_mutate[[name]] <- arrow_eval_or_stop(\n+      as_quosure(expr, ctx$quo_env),\n+      mutate_mask\n+    )\n+    return()\n+  }\n+\n+  # Backstop for any other odd cases, like fun(x, y) (i.e. no aggregation),\n+  # or aggregation functions that aren't supported in Arrow (not in agg_funcs)\n+  stop(\n+    handle_arrow_not_supported(\n+      quo_get_expr(quosure),\n+      as_label(quo_get_expr(quosure))\n+    ),\n+    call. = FALSE\n+  )\n+}\n+\n+# This function recurses through expr, pulls out any aggregation expressions,\n+# and inserts a variable name (field ref) in place of the aggregation\n+extract_aggregations <- function(expr, ctx) {\n+  # Keep the input in case we need to raise an error message with it\n+  original_expr <- expr\n+  funs <- all_funs(expr)\n+  if (length(funs) == 0) {\n+    return(expr)\n+  } else if (length(funs) > 1) {\n+    # Recurse more\n+    expr[-1] <- lapply(expr[-1], extract_aggregations, ctx)\n+  }\n+  if (funs[1] %in% names(agg_funcs)) {\n+    inner_agg_exprs <- all_vars(expr) %in% names(ctx$aggregations)\n+    if (any(inner_agg_exprs) & !all(inner_agg_exprs)) {\n+      # We can't aggregate over a combination of dataset columns and other\n+      # aggregations (e.g. sum(x - mean(x)))\n+      # TODO: support in ARROW-13926\n+      # TODO: Add \"because\" arg to explain _why_ it's not supported?\n+      # TODO: this message could also say \"not supported in summarize()\"\n+      #       since some of these expressions may be legal elsewhere\n\nReview comment:\n       Example: https://github.com/apache/arrow/pull/11108/files#diff-a18898eb61bfc3d3dda292cf594b26d5f08a8cd7b455b72ed9c58f6e9c1311edR468\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T00:04:25.192+0000",
                    "updated": "2021-09-10T00:04:25.192+0000",
                    "started": "2021-09-10T00:04:25.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648934",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/649197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108#issuecomment-916873468\n\n\n   Merging; happy to address any other feedback in a followup.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T12:39:16.372+0000",
                    "updated": "2021-09-10T12:39:16.372+0000",
                    "started": "2021-09-10T12:39:16.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649197",
                    "issueId": "13397670"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/worklog/649198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #11108:\nURL: https://github.com/apache/arrow/pull/11108\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T12:39:50.605+0000",
                    "updated": "2021-09-10T12:39:50.605+0000",
                    "started": "2021-09-10T12:39:50.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649198",
                    "issueId": "13397670"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5b57d0f8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23762404[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d772fdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f337473[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b878948[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@542b9597[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20d65108[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6482398d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3318319c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b979d45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29dbd52e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5ce0cfc9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 10 12:39:48 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-10T12:39:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13778/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-08-27T00:15:14.000+0000",
        "updated": "2021-09-10T12:39:51.000+0000",
        "timeoriginalestimate": null,
        "description": "Right now we can do {{summarize(x = agg(field), y = agg(expr))}} but we can't do {{z = agg(fn\\(x\\))}} or {{q = agg(field) + agg(field)}}. This will require more complex expression massaging.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Handle complex summarize expressions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397670/comment/17413160",
                    "id": "17413160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 11108\n[https://github.com/apache/arrow/pull/11108]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-10T12:39:48.637+0000",
                    "updated": "2021-09-10T12:39:48.637+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ubmg:",
        "customfield_12314139": null
    }
}