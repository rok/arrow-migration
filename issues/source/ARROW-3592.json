{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13193488",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193488",
    "key": "ARROW-3592",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3592/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193488/worklog/160106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2866: ARROW-3592: [Python] Allow getting view of a binary scalar\nURL: https://github.com/apache/arrow/pull/2866\n \n \n   Also add some docstrings.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T18:01:09.977+0000",
                    "updated": "2018-10-29T18:01:09.977+0000",
                    "started": "2018-10-29T18:01:09.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160106",
                    "issueId": "13193488"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193488/worklog/160230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2866: ARROW-3592: [Python] Allow getting view of a binary scalar\nURL: https://github.com/apache/arrow/pull/2866\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex b93b0cd0c5..ab6e1b7eba 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -411,6 +411,9 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n \n     cdef cppclass CBinaryArray\" arrow::BinaryArray\"(CListArray):\n         const uint8_t* GetValue(int i, int32_t* length)\n+        shared_ptr[CBuffer] value_data()\n+        int32_t value_offset(int64_t i)\n+        int32_t value_length(int64_t i)\n \n     cdef cppclass CStringArray\" arrow::StringArray\"(CBinaryArray):\n         CStringArray(int64_t length, shared_ptr[CBuffer] value_offsets,\ndiff --git a/python/pyarrow/scalar.pxi b/python/pyarrow/scalar.pxi\nindex 79d6c2c464..a2a133beb4 100644\n--- a/python/pyarrow/scalar.pxi\n+++ b/python/pyarrow/scalar.pxi\n@@ -34,6 +34,9 @@ cdef class NullType(Scalar):\n         return 'NULL'\n \n     def as_py(self):\n+        \"\"\"\n+        Return None\n+        \"\"\"\n         return None\n \n \n@@ -84,6 +87,9 @@ cdef class ArrayValue(Scalar):\n cdef class BooleanValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python bool.\n+        \"\"\"\n         cdef CBooleanArray* ap = <CBooleanArray*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -91,6 +97,9 @@ cdef class BooleanValue(ArrayValue):\n cdef class Int8Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CInt8Array* ap = <CInt8Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -98,6 +107,9 @@ cdef class Int8Value(ArrayValue):\n cdef class UInt8Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CUInt8Array* ap = <CUInt8Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -105,6 +117,9 @@ cdef class UInt8Value(ArrayValue):\n cdef class Int16Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CInt16Array* ap = <CInt16Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -112,6 +127,9 @@ cdef class Int16Value(ArrayValue):\n cdef class UInt16Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CUInt16Array* ap = <CUInt16Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -119,6 +137,9 @@ cdef class UInt16Value(ArrayValue):\n cdef class Int32Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CInt32Array* ap = <CInt32Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -126,6 +147,9 @@ cdef class Int32Value(ArrayValue):\n cdef class UInt32Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CUInt32Array* ap = <CUInt32Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -133,6 +157,9 @@ cdef class UInt32Value(ArrayValue):\n cdef class Int64Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CInt64Array* ap = <CInt64Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -140,6 +167,9 @@ cdef class Int64Value(ArrayValue):\n cdef class UInt64Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python int.\n+        \"\"\"\n         cdef CUInt64Array* ap = <CUInt64Array*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -147,6 +177,9 @@ cdef class UInt64Value(ArrayValue):\n cdef class Date32Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python datetime.datetime instance.\n+        \"\"\"\n         cdef CDate32Array* ap = <CDate32Array*> self.sp_array.get()\n \n         # Shift to seconds since epoch\n@@ -157,6 +190,9 @@ cdef class Date32Value(ArrayValue):\n cdef class Date64Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python datetime.datetime instance.\n+        \"\"\"\n         cdef CDate64Array* ap = <CDate64Array*> self.sp_array.get()\n         return datetime.datetime.utcfromtimestamp(\n             ap.Value(self.index) / 1000).date()\n@@ -165,6 +201,9 @@ cdef class Date64Value(ArrayValue):\n cdef class Time32Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python datetime.timedelta instance.\n+        \"\"\"\n         cdef:\n             CTime32Array* ap = <CTime32Array*> self.sp_array.get()\n             CTime32Type* dtype = <CTime32Type*> ap.type().get()\n@@ -180,6 +219,9 @@ cdef class Time32Value(ArrayValue):\n cdef class Time64Value(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python datetime.timedelta instance.\n+        \"\"\"\n         cdef:\n             CTime64Array* ap = <CTime64Array*> self.sp_array.get()\n             CTime64Type* dtype = <CTime64Type*> ap.type().get()\n@@ -235,6 +277,10 @@ cdef class TimestampValue(ArrayValue):\n         return ap.Value(self.index)\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Pandas Timestamp instance (if available),\n+        otherwise as a Python datetime.timedelta instance.\n+        \"\"\"\n         cdef CTimestampArray* ap = <CTimestampArray*> self.sp_array.get()\n         cdef CTimestampType* dtype = <CTimestampType*> ap.type().get()\n \n@@ -257,6 +303,9 @@ cdef class TimestampValue(ArrayValue):\n cdef class HalfFloatValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python float.\n+        \"\"\"\n         cdef CHalfFloatArray* ap = <CHalfFloatArray*> self.sp_array.get()\n         return PyHalf_FromHalf(ap.Value(self.index))\n \n@@ -264,6 +313,9 @@ cdef class HalfFloatValue(ArrayValue):\n cdef class FloatValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python float.\n+        \"\"\"\n         cdef CFloatArray* ap = <CFloatArray*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -271,6 +323,9 @@ cdef class FloatValue(ArrayValue):\n cdef class DoubleValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python float.\n+        \"\"\"\n         cdef CDoubleArray* ap = <CDoubleArray*> self.sp_array.get()\n         return ap.Value(self.index)\n \n@@ -278,6 +333,9 @@ cdef class DoubleValue(ArrayValue):\n cdef class DecimalValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python Decimal.\n+        \"\"\"\n         cdef:\n             CDecimal128Array* ap = <CDecimal128Array*> self.sp_array.get()\n             c_string s = ap.FormatValue(self.index)\n@@ -287,6 +345,9 @@ cdef class DecimalValue(ArrayValue):\n cdef class StringValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python unicode string.\n+        \"\"\"\n         cdef CStringArray* ap = <CStringArray*> self.sp_array.get()\n         return ap.GetString(self.index).decode('utf-8')\n \n@@ -294,6 +355,9 @@ cdef class StringValue(ArrayValue):\n cdef class BinaryValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python bytes object.\n+        \"\"\"\n         cdef:\n             const uint8_t* ptr\n             int32_t length\n@@ -302,6 +366,18 @@ cdef class BinaryValue(ArrayValue):\n         ptr = ap.GetValue(self.index, &length)\n         return cp.PyBytes_FromStringAndSize(<const char*>(ptr), length)\n \n+    def as_buffer(self):\n+        \"\"\"\n+        Return a view over this value as a Buffer object.\n+        \"\"\"\n+        cdef:\n+            CBinaryArray* ap = <CBinaryArray*> self.sp_array.get()\n+            shared_ptr[CBuffer] buf\n+\n+        buf = SliceBuffer(ap.value_data(), ap.value_offset(self.index),\n+                          ap.value_length(self.index))\n+        return pyarrow_wrap_buffer(buf)\n+\n \n cdef class ListValue(ArrayValue):\n \n@@ -329,6 +405,9 @@ cdef class ListValue(ArrayValue):\n         return self.ap.value_length(self.index)\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python list.\n+        \"\"\"\n         cdef:\n             int64_t j\n             list result = []\n@@ -355,12 +434,18 @@ cdef class UnionValue(ArrayValue):\n                               self.ap.value_offset(i))\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python object.\n+        \"\"\"\n         return self.getitem(self.index).as_py()\n \n \n cdef class FixedSizeBinaryValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python bytes object.\n+        \"\"\"\n         cdef:\n             CFixedSizeBinaryArray* ap\n             CFixedSizeBinaryType* ap_type\n@@ -393,6 +478,9 @@ cdef class StructValue(ArrayValue):\n         return pyarrow_wrap_array(self.ap.field(index))[self.index]\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python dict.\n+        \"\"\"\n         cdef:\n             vector[shared_ptr[CField]] child_fields = self.type.type.children()\n \n@@ -410,16 +498,25 @@ cdef class StructValue(ArrayValue):\n cdef class DictionaryValue(ArrayValue):\n \n     def as_py(self):\n+        \"\"\"\n+        Return this value as a Python object.\n+        \"\"\"\n         return self.dictionary_value.as_py()\n \n     @property\n     def index_value(self):\n+        \"\"\"\n+        Return this value's underlying index as a Int32Value.\n+        \"\"\"\n         cdef CDictionaryArray* darr = <CDictionaryArray*>(self.sp_array.get())\n         indices = pyarrow_wrap_array(darr.indices())\n         return indices[self.index]\n \n     @property\n     def dictionary_value(self):\n+        \"\"\"\n+        Return this value's underlying dictionary value as a ArrayValue.\n+        \"\"\"\n         cdef CDictionaryArray* darr = <CDictionaryArray*>(self.sp_array.get())\n         dictionary = pyarrow_wrap_array(darr.dictionary())\n         return dictionary[self.index_value.as_py()]\ndiff --git a/python/pyarrow/tests/test_scalars.py b/python/pyarrow/tests/test_scalars.py\nindex 051cf128ae..892d65b3af 100644\n--- a/python/pyarrow/tests/test_scalars.py\n+++ b/python/pyarrow/tests/test_scalars.py\n@@ -31,6 +31,12 @@ def test_null_singleton(self):\n         with pytest.raises(Exception):\n             pa.NAType()\n \n+    def test_nulls(self):\n+        arr = pa.array([None, None])\n+        for v in arr:\n+            assert v is pa.NA\n+            assert v.as_py() is None\n+\n     def test_bool(self):\n         arr = pa.array([True, None, False, None])\n \n@@ -102,18 +108,20 @@ def test_string_unicode(self):\n     def test_bytes(self):\n         arr = pa.array([b'foo', None, u('bar')])\n \n-        v = arr[0]\n-        assert isinstance(v, pa.BinaryValue)\n-        assert v.as_py() == b'foo'\n-        assert str(v) == str(b\"foo\")\n-        assert repr(v) == repr(b\"foo\")\n-        assert v == b'foo'\n-\n+        def check_value(v, expected):\n+            assert isinstance(v, pa.BinaryValue)\n+            assert v.as_py() == expected\n+            assert str(v) == str(expected)\n+            assert repr(v) == repr(expected)\n+            assert v == expected\n+            assert v != b'xxxxx'\n+            buf = v.as_buffer()\n+            assert isinstance(buf, pa.Buffer)\n+            assert buf.to_pybytes() == expected\n+\n+        check_value(arr[0], b'foo')\n         assert arr[1] is pa.NA\n-\n-        v = arr[2].as_py()\n-        assert v == b'bar'\n-        assert isinstance(v, bytes)\n+        check_value(arr[2], b'bar')\n \n     def test_fixed_size_bytes(self):\n         data = [b'foof', None, b'barb']\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T21:48:45.333+0000",
                    "updated": "2018-10-29T21:48:45.333+0000",
                    "started": "2018-10-29T21:48:45.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160230",
                    "issueId": "13193488"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45d4aa88[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e3e546e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20b5f80c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1c945550[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e01eb9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@62ebc614[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d9127dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5311c1ea[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52cdbd29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6e2a0a02[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a6167d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5722f9e2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 29 21:51:15 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-29T21:51:15.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3592/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-23T08:36:15.000+0000",
        "updated": "2018-10-29T21:51:15.000+0000",
        "timeoriginalestimate": null,
        "description": "If users are embedding other data structures in a {{BinaryArray}}, they cannot access these values in Python without copying\r\n\r\nsee https://lists.apache.org/thread.html/7c70a1f84a65c0b10cfb84d0b113c85cbed878937087d6676776b465@%3Cdev.arrow.apache.org%3E",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Get BinaryArray value as zero copy memory view",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193488/comment/16667803",
                    "id": "16667803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2866\n[https://github.com/apache/arrow/pull/2866]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-29T21:51:15.112+0000",
                    "updated": "2018-10-29T21:51:15.112+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zitr:",
        "customfield_12314139": null
    }
}