{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13314667",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667",
    "key": "ARROW-9297",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "dataset-parquet-read",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 25800,
            "total": 25800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 25800,
            "total": 25800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9297/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 43,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704\n\n\n   Previously, if any field reader for a row group yielded multiple chunks for a single row group an error would be raised.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:27:42.849+0000",
                    "updated": "2020-07-10T18:27:42.849+0000",
                    "started": "2020-07-10T18:27:42.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457296",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#issuecomment-656821476\n\n\n   https://issues.apache.org/jira/browse/ARROW-9297\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T18:31:52.897+0000",
                    "updated": "2020-07-10T18:31:52.897+0000",
                    "started": "2020-07-10T18:31:52.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457297",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453148683\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2877,11 +2877,22 @@ TEST(TestArrowReaderAdHoc, LARGE_MEMORY_TEST(LargeStringColumn)) {\n   array.reset();\n \n   auto reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n-\n   std::unique_ptr<FileReader> arrow_reader;\n   ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n   ASSERT_OK_NO_THROW(arrow_reader->ReadTable(&table));\n   ASSERT_OK(table->ValidateFull());\n+\n+  // ARROW-9297: ensure RecordBatchReader also works\n+  reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n+  ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n+  std::shared_ptr<::arrow::RecordBatchReader> batch_reader;\n+  auto all_row_groups = ::arrow::internal::Iota(reader->metadata()->num_row_groups());\n\nReview comment:\n       Could this be simplified to:\r\n   `::arrow::internal::Iota all_row_groups(...);\r\n   \r\n   if so please do it.  If not please spell out the type instead of auto.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:25:01.612+0000",
                    "updated": "2020-07-11T03:25:01.612+0000",
                    "started": "2020-07-11T03:25:01.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457484",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453148755\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2877,11 +2877,22 @@ TEST(TestArrowReaderAdHoc, LARGE_MEMORY_TEST(LargeStringColumn)) {\n   array.reset();\n \n   auto reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n-\n   std::unique_ptr<FileReader> arrow_reader;\n   ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n   ASSERT_OK_NO_THROW(arrow_reader->ReadTable(&table));\n   ASSERT_OK(table->ValidateFull());\n+\n+  // ARROW-9297: ensure RecordBatchReader also works\n+  reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n+  ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n+  std::shared_ptr<::arrow::RecordBatchReader> batch_reader;\n+  auto all_row_groups = ::arrow::internal::Iota(reader->metadata()->num_row_groups());\n+  ASSERT_OK_NO_THROW(arrow_reader->GetRecordBatchReader(all_row_groups, &batch_reader));\n+  ASSERT_OK_AND_ASSIGN(auto batched_table,\n\nReview comment:\n       type here I think is still useful (i.e. not auto).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:25:34.716+0000",
                    "updated": "2020-07-11T03:25:34.716+0000",
                    "started": "2020-07-11T03:25:34.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457485",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453148787\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -2877,11 +2877,22 @@ TEST(TestArrowReaderAdHoc, LARGE_MEMORY_TEST(LargeStringColumn)) {\n   array.reset();\n \n   auto reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n-\n   std::unique_ptr<FileReader> arrow_reader;\n   ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n   ASSERT_OK_NO_THROW(arrow_reader->ReadTable(&table));\n   ASSERT_OK(table->ValidateFull());\n+\n+  // ARROW-9297: ensure RecordBatchReader also works\n+  reader = ParquetFileReader::Open(std::make_shared<BufferReader>(tables_buffer));\n+  ASSERT_OK(FileReader::Make(default_memory_pool(), std::move(reader), &arrow_reader));\n+  std::shared_ptr<::arrow::RecordBatchReader> batch_reader;\n+  auto all_row_groups = ::arrow::internal::Iota(reader->metadata()->num_row_groups());\n+  ASSERT_OK_NO_THROW(arrow_reader->GetRecordBatchReader(all_row_groups, &batch_reader));\n+  ASSERT_OK_AND_ASSIGN(auto batched_table,\n\nReview comment:\n       nm.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:25:47.774+0000",
                    "updated": "2020-07-11T03:25:47.774+0000",
                    "started": "2020-07-11T03:25:47.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457486",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453148949\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_schema_test.cc\n##########\n@@ -644,6 +649,78 @@ TEST_F(TestConvertParquetSchema, ParquetRepeatedNestedSchema) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n }\n \n+TEST_F(TestConvertParquetSchema, ColumnSubselection) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+  {\n+    //   optional int32 leaf1;\n+    //   repeated group outerGroup {\n+    //     optional int32 leaf2;\n+    //     repeated group innerGroup {\n+    //       optional int32 leaf3;\n+    //     }\n+    //   }\n+    parquet_fields.push_back(\n\nReview comment:\n       are these intentionally not using logical annotations (i.e. LIST?).  Maybe ad a comment if so.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:28:11.218+0000",
                    "updated": "2020-07-11T03:28:11.218+0000",
                    "started": "2020-07-11T03:28:11.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457487",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149053\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_schema_test.cc\n##########\n@@ -644,6 +649,78 @@ TEST_F(TestConvertParquetSchema, ParquetRepeatedNestedSchema) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n }\n \n+TEST_F(TestConvertParquetSchema, ColumnSubselection) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+  {\n+    //   optional int32 leaf1;\n+    //   repeated group outerGroup {\n+    //     optional int32 leaf2;\n+    //     repeated group innerGroup {\n+    //       optional int32 leaf3;\n+    //     }\n+    //   }\n+    parquet_fields.push_back(\n+        PrimitiveNode::Make(\"leaf1\", Repetition::OPTIONAL, ParquetType::INT32));\n+    parquet_fields.push_back(GroupNode::Make(\n+        \"outerGroup\", Repetition::REPEATED,\n+        {PrimitiveNode::Make(\"leaf2\", Repetition::OPTIONAL, ParquetType::INT32),\n+         GroupNode::Make(\n+             \"innerGroup\", Repetition::REPEATED,\n+             {PrimitiveNode::Make(\"leaf3\", Repetition::OPTIONAL, ParquetType::INT32)})}));\n+\n+    auto inner_group_fields = {::arrow::field(\"leaf3\", INT32, true)};\n\nReview comment:\n       please spell out types in some form where you are using bracket initializations.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:29:54.454+0000",
                    "updated": "2020-07-11T03:29:54.454+0000",
                    "started": "2020-07-11T03:29:54.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457488",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149152\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_schema_test.cc\n##########\n@@ -644,6 +649,78 @@ TEST_F(TestConvertParquetSchema, ParquetRepeatedNestedSchema) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n }\n \n+TEST_F(TestConvertParquetSchema, ColumnSubselection) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+  {\n+    //   optional int32 leaf1;\n+    //   repeated group outerGroup {\n+    //     optional int32 leaf2;\n+    //     repeated group innerGroup {\n+    //       optional int32 leaf3;\n+    //     }\n+    //   }\n+    parquet_fields.push_back(\n+        PrimitiveNode::Make(\"leaf1\", Repetition::OPTIONAL, ParquetType::INT32));\n+    parquet_fields.push_back(GroupNode::Make(\n+        \"outerGroup\", Repetition::REPEATED,\n+        {PrimitiveNode::Make(\"leaf2\", Repetition::OPTIONAL, ParquetType::INT32),\n+         GroupNode::Make(\n+             \"innerGroup\", Repetition::REPEATED,\n+             {PrimitiveNode::Make(\"leaf3\", Repetition::OPTIONAL, ParquetType::INT32)})}));\n+\n+    auto inner_group_fields = {::arrow::field(\"leaf3\", INT32, true)};\n\nReview comment:\n       P.S. we really need a JSON utility to construct a schema from json., it would make this much easier to read.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:30:37.849+0000",
                    "updated": "2020-07-11T03:30:37.849+0000",
                    "started": "2020-07-11T03:30:37.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457489",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149320\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_schema_test.cc\n##########\n@@ -644,6 +649,78 @@ TEST_F(TestConvertParquetSchema, ParquetRepeatedNestedSchema) {\n   ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n }\n \n+TEST_F(TestConvertParquetSchema, ColumnSubselection) {\n+  std::vector<NodePtr> parquet_fields;\n+  std::vector<std::shared_ptr<Field>> arrow_fields;\n+  {\n+    //   optional int32 leaf1;\n+    //   repeated group outerGroup {\n+    //     optional int32 leaf2;\n+    //     repeated group innerGroup {\n+    //       optional int32 leaf3;\n+    //     }\n+    //   }\n+    parquet_fields.push_back(\n+        PrimitiveNode::Make(\"leaf1\", Repetition::OPTIONAL, ParquetType::INT32));\n+    parquet_fields.push_back(GroupNode::Make(\n+        \"outerGroup\", Repetition::REPEATED,\n+        {PrimitiveNode::Make(\"leaf2\", Repetition::OPTIONAL, ParquetType::INT32),\n+         GroupNode::Make(\n+             \"innerGroup\", Repetition::REPEATED,\n+             {PrimitiveNode::Make(\"leaf3\", Repetition::OPTIONAL, ParquetType::INT32)})}));\n+\n+    auto inner_group_fields = {::arrow::field(\"leaf3\", INT32, true)};\n+    auto inner_group_type = ::arrow::struct_(inner_group_fields);\n+    auto outer_group_fields = {\n+        ::arrow::field(\"leaf2\", INT32, true),\n+        ::arrow::field(\n+            \"innerGroup\",\n+            ::arrow::list(::arrow::field(\"innerGroup\", inner_group_type, false)), false)};\n+    auto outer_group_type = ::arrow::struct_(outer_group_fields);\n+\n+    arrow_fields.push_back(::arrow::field(\"leaf1\", INT32, true));\n+    arrow_fields.push_back(::arrow::field(\n+        \"outerGroup\",\n+        ::arrow::list(::arrow::field(\"outerGroup\", outer_group_type, false)), false));\n+  }\n+  std::shared_ptr<::arrow::Schema> arrow_schema;\n+  std::vector<int> column_indices;\n+\n+  column_indices = {};\n+  ASSERT_OK(\n+      ConvertSchema(parquet_fields, /*key_value_metadata=*/nullptr, &column_indices));\n+  arrow_schema = ::arrow::schema({});\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n+\n+  column_indices = {0, 1, 2};\n+  ASSERT_OK(\n+      ConvertSchema(parquet_fields, /*key_value_metadata=*/nullptr, &column_indices));\n+  arrow_schema = ::arrow::schema(arrow_fields);\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n+\n+  column_indices = {0};\n+  ASSERT_OK(\n+      ConvertSchema(parquet_fields, /*key_value_metadata=*/nullptr, &column_indices));\n+  arrow_schema = ::arrow::schema({arrow_fields[0]});\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n+\n+  column_indices = {1};\n+  ASSERT_OK(\n+      ConvertSchema(parquet_fields, /*key_value_metadata=*/nullptr, &column_indices));\n+  arrow_schema = ::arrow::schema({arrow_fields[1]});\n+  ASSERT_NO_FATAL_FAILURE(CheckFlatSchema(arrow_schema));\n+\n+  column_indices = {2};\n\nReview comment:\n       does it pay to test at least one pair?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:32:54.691+0000",
                    "updated": "2020-07-11T03:32:54.691+0000",
                    "started": "2020-07-11T03:32:54.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457491",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149446\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n\nReview comment:\n       not present before but adding some docs here might be useful.  especially around lifecyle of reader.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:34:28.221+0000",
                    "updated": "2020-07-11T03:34:28.221+0000",
                    "started": "2020-07-11T03:34:28.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457492",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149597\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      int64_t batch_size, FileReaderImpl* reader) {\n+    std::unique_ptr<RowGroupRecordBatchReader> out(new RowGroupRecordBatchReader);\n\nReview comment:\n       *rant* it annoys me that that make_unique can't access private constructors.\r\n   nit: please construct using empty parens at the end.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:36:01.483+0000",
                    "updated": "2020-07-11T03:36:01.483+0000",
                    "started": "2020-07-11T03:36:01.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457493",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149711\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      int64_t batch_size, FileReaderImpl* reader) {\n+    std::unique_ptr<RowGroupRecordBatchReader> out(new RowGroupRecordBatchReader);\n \n-    std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers(field_indices.size());\n-    std::vector<std::shared_ptr<Field>> fields;\n+    RETURN_NOT_OK(FromParquetSchema(\n+        reader->parquet_reader()->metadata()->schema(), default_arrow_reader_properties(),\n\nReview comment:\n       its probably not great that we don't propagate reader properties here?  I'm not sure I see if this was a problem in the old code as well?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:37:35.673+0000",
                    "updated": "2020-07-11T03:37:35.673+0000",
                    "started": "2020-07-11T03:37:35.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457494",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149789\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      int64_t batch_size, FileReaderImpl* reader) {\n+    std::unique_ptr<RowGroupRecordBatchReader> out(new RowGroupRecordBatchReader);\n \n-    std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers(field_indices.size());\n-    std::vector<std::shared_ptr<Field>> fields;\n+    RETURN_NOT_OK(FromParquetSchema(\n+        reader->parquet_reader()->metadata()->schema(), default_arrow_reader_properties(),\n+        /*key_value_metadata=*/nullptr, column_indices, &out->schema_));\n \n-    auto included_leaves = VectorToSharedSet(column_indices);\n-    for (size_t i = 0; i < field_indices.size(); ++i) {\n-      RETURN_NOT_OK(reader->GetFieldReader(field_indices[i], included_leaves, row_groups,\n-                                           &field_readers[i]));\n-      fields.push_back(field_readers[i]->field());\n-    }\n-    out->reset(new RowGroupRecordBatchReader(std::move(field_readers),\n-                                             ::arrow::schema(fields), batch_size));\n-    return Status::OK();\n+    using ::arrow::RecordBatchIterator;\n+\n+    auto row_group_index_to_batch_iterator =\n+        [=](const int* i) -> ::arrow::Result<RecordBatchIterator> {\n\nReview comment:\n       this binding everything by value here intentional?  If so could you add a comment why?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:38:38.760+0000",
                    "updated": "2020-07-11T03:38:38.760+0000",
                    "started": "2020-07-11T03:38:38.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457495",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453149894\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      int64_t batch_size, FileReaderImpl* reader) {\n+    std::unique_ptr<RowGroupRecordBatchReader> out(new RowGroupRecordBatchReader);\n \n-    std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers(field_indices.size());\n-    std::vector<std::shared_ptr<Field>> fields;\n+    RETURN_NOT_OK(FromParquetSchema(\n+        reader->parquet_reader()->metadata()->schema(), default_arrow_reader_properties(),\n+        /*key_value_metadata=*/nullptr, column_indices, &out->schema_));\n \n-    auto included_leaves = VectorToSharedSet(column_indices);\n-    for (size_t i = 0; i < field_indices.size(); ++i) {\n-      RETURN_NOT_OK(reader->GetFieldReader(field_indices[i], included_leaves, row_groups,\n-                                           &field_readers[i]));\n-      fields.push_back(field_readers[i]->field());\n-    }\n-    out->reset(new RowGroupRecordBatchReader(std::move(field_readers),\n-                                             ::arrow::schema(fields), batch_size));\n-    return Status::OK();\n+    using ::arrow::RecordBatchIterator;\n+\n+    auto row_group_index_to_batch_iterator =\n+        [=](const int* i) -> ::arrow::Result<RecordBatchIterator> {\n\nReview comment:\n       If it is intentional (it looks like this escapes the scope) I would prefer to be explicit about the values being captured.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:40:02.405+0000",
                    "updated": "2020-07-11T03:40:02.405+0000",
                    "started": "2020-07-11T03:40:02.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457496",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453150052\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -781,6 +770,9 @@ Status FileReaderImpl::GetRecordBatchReader(const std::vector<int>& row_group_in\n                                             const std::vector<int>& column_indices,\n                                             std::unique_ptr<RecordBatchReader>* out) {\n   // column indices check\n+  ARROW_ASSIGN_OR_RAISE(std::ignore, manifest_.GetFieldIndices(column_indices));\n\nReview comment:\n       it would be nice if RETURN_NOT_OK could be used here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:41:25.743+0000",
                    "updated": "2020-07-11T03:41:25.743+0000",
                    "started": "2020-07-11T03:41:25.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457497",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453150104\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -819,10 +812,7 @@ Status FileReaderImpl::ReadRowGroups(const std::vector<int>& row_groups,\n \n   // We only need to read schema fields which have columns indicated\n   // in the indices vector\n-  std::vector<int> field_indices;\n-  if (!manifest_.GetFieldIndices(indices, &field_indices)) {\n-    return Status::Invalid(\"Invalid column index\");\n-  }\n+  ARROW_ASSIGN_OR_RAISE(auto field_indices, manifest_.GetFieldIndices(indices));\n\nReview comment:\n       please spell out type.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:42:18.939+0000",
                    "updated": "2020-07-11T03:42:18.939+0000",
                    "started": "2020-07-11T03:42:18.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457498",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453150835\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/schema.h\n##########\n@@ -163,24 +165,28 @@ struct PARQUET_EXPORT SchemaManifest {\n     return it->second;\n   }\n \n-  bool GetFieldIndices(const std::vector<int>& column_indices, std::vector<int>* out) {\n+  ::arrow::Result<std::vector<int>> GetFieldIndices(\n+      const std::vector<int>& column_indices) {\n     // Coalesce a list of schema field indices which are the roots of the\n\nReview comment:\n       could we move the comment to a docstring and give an example?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:51:12.952+0000",
                    "updated": "2020-07-11T03:51:12.952+0000",
                    "started": "2020-07-11T03:51:12.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457500",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453150926\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/schema.h\n##########\n@@ -163,24 +165,28 @@ struct PARQUET_EXPORT SchemaManifest {\n     return it->second;\n   }\n \n-  bool GetFieldIndices(const std::vector<int>& column_indices, std::vector<int>* out) {\n+  ::arrow::Result<std::vector<int>> GetFieldIndices(\n+      const std::vector<int>& column_indices) {\n     // Coalesce a list of schema field indices which are the roots of the\n     // columns referred to by a list of column indices\n     const schema::GroupNode* group = descr->group_node();\n     std::unordered_set<int> already_added;\n-    out->clear();\n-    for (auto& column_idx : column_indices) {\n+\n+    std::vector<int> out;\n+    for (int column_idx : column_indices) {\n+      if (column_idx < 0 || column_idx >= descr->num_columns()) {\n+        return ::arrow::Status::IndexError(\"Column index \", column_idx, \" is not valid\");\n+      }\n       auto field_node = descr->GetColumnRoot(column_idx);\n       auto field_idx = group->FieldIndex(*field_node);\n       if (field_idx < 0) {\n\nReview comment:\n       not your code, but is this really checking for equality to -1?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T03:52:29.456+0000",
                    "updated": "2020-07-11T03:52:29.456+0000",
                    "started": "2020-07-11T03:52:29.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457502",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453223663\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -301,62 +302,50 @@ class FileReaderImpl : public FileReader {\n \n class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n  public:\n-  RowGroupRecordBatchReader(std::vector<std::unique_ptr<ColumnReaderImpl>> field_readers,\n-                            std::shared_ptr<::arrow::Schema> schema, int64_t batch_size)\n-      : field_readers_(std::move(field_readers)),\n-        schema_(std::move(schema)),\n-        batch_size_(batch_size) {}\n-\n   ~RowGroupRecordBatchReader() override {}\n \n   std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n \n-  static Status Make(const std::vector<int>& row_groups,\n-                     const std::vector<int>& column_indices, FileReaderImpl* reader,\n-                     int64_t batch_size,\n-                     std::unique_ptr<::arrow::RecordBatchReader>* out) {\n-    std::vector<int> field_indices;\n-    if (!reader->manifest_.GetFieldIndices(column_indices, &field_indices)) {\n-      return Status::Invalid(\"Invalid column index\");\n-    }\n+  static ::arrow::Result<std::unique_ptr<RowGroupRecordBatchReader>> Make(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      int64_t batch_size, FileReaderImpl* reader) {\n+    std::unique_ptr<RowGroupRecordBatchReader> out(new RowGroupRecordBatchReader);\n\nReview comment:\n       In this case the constructor isn't private, so I'll refactor to use `make_unique` here\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T18:53:12.403+0000",
                    "updated": "2020-07-11T18:53:12.403+0000",
                    "started": "2020-07-11T18:53:12.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457601",
                    "issueId": "13314667"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/worklog/457602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7704:\nURL: https://github.com/apache/arrow/pull/7704#discussion_r453223708\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/schema.h\n##########\n@@ -163,24 +165,28 @@ struct PARQUET_EXPORT SchemaManifest {\n     return it->second;\n   }\n \n-  bool GetFieldIndices(const std::vector<int>& column_indices, std::vector<int>* out) {\n+  ::arrow::Result<std::vector<int>> GetFieldIndices(\n+      const std::vector<int>& column_indices) {\n     // Coalesce a list of schema field indices which are the roots of the\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-11T18:53:56.555+0000",
                    "updated": "2020-07-11T18:53:56.555+0000",
                    "started": "2020-07-11T18:53:56.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457602",
                    "issueId": "13314667"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 25800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6923e37[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@265e6d1c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@111f33aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@44fc9a18[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39f460cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61f1ccd1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@91b3126[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@29975647[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@337fb9a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5c876c58[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c45f4ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1ff3be4e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Jul 12 21:54:04 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-07-12T21:54:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9297/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-07-02T12:05:36.000+0000",
        "updated": "2020-07-13T15:02:26.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to ARROW-3762 (the parquet issue which has been solved), and discovered in ARROW-9139.\r\n\r\nWhen creating a Parquet file with a large binary column (larger than BinaryArray capacity):\r\n\r\n{code}\r\n# code from the test_parquet.py::test_binary_array_overflow_to_chunked test\r\nvalues = [b'x'] + [ \r\n    b'x' * (1 << 20) \r\n] * 2 * (1 << 10)                                                                                                                                                                                     \r\n\r\ntable = pa.table({'byte_col': values})                                                                                                                                                                    \r\npq.write_table(table, \"test_large_binary.parquet\")                                                                                                                                                        \r\n{code}\r\n\r\nthen reading this with the parquet API works (fixed by ARROW-3762):\r\n\r\n{code}\r\nIn [3]: pq.read_table(\"test_large_binary.parquet\")                                                                                                                                        \r\nOut[3]: \r\npyarrow.Table\r\nbyte_col: binary\r\n{code}\r\n\r\nbut with the Datasets API this still fails:\r\n\r\n{code}\r\nIn [1]: import pyarrow.dataset as ds                                                                                                                                                                               \r\n\r\nIn [2]: dataset = ds.dataset(\"test_large_binary.parquet\", format=\"parquet\")                                                                                                                                        \r\n\r\nIn [4]: dataset.to_table()                                                                                                                                                                                         \r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\n<ipython-input-4-6fb0d79c4511> in <module>\r\n----> 1 dataset.to_table()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/_dataset.pyx in pyarrow._dataset.Dataset.to_table()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/_dataset.pyx in pyarrow._dataset.Scanner.to_table()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/error.pxi in pyarrow.lib.pyarrow_internal_check_status()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: This class cannot yet iterate chunked arrays\r\n\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 25800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Dataset scanner cannot handle large binary column (> 2 GB)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/comment/17150352",
                    "id": "17150352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Is the issue that pyarrow makes a Binary ChunkedArray instead of a LargeBinary Array when it gets a big binary column?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-07-02T15:06:33.820+0000",
                    "updated": "2020-07-02T15:06:33.820+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/comment/17150395",
                    "id": "17150395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Yes. And the {{RowGroupRecordBatchReader::ReadNext}} (https://github.com/apache/arrow/blob/e3c7dbfa934a971f004ef54eaafb0378453a52dd/cpp/src/parquet/arrow/reader.cc#L344) apparently cannot deal with this chunked array (maybe because a RecordBatch requires all single arrays, not chunked arrays). While the code path in the existing {{parquet.read_table}} can handle this.\r\n\r\nThe difference might be that {{parquet.read_table}} -> {{ParquetFile.read}} uses {{FileReader::ReadTable}}, while the datasets API uses {{FileReader::GetRecordBatchReader}}. \r\n\r\nAnd I am not sure how to deal with a chunked array if you expect to return record batches (so this might not be that easy to solve, although some general we need to solve for the Datasets API, not just for being able to use it in {{parquet.read_table}}).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-07-02T15:42:45.092+0000",
                    "updated": "2020-07-02T15:42:45.092+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/comment/17150402",
                    "id": "17150402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yeah, this is why in ARROW-3308 in the R bindings I opted to make a LargeString Array rather than a ChunkedArray: RecordBatches must contain Arrays.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-07-02T15:51:51.379+0000",
                    "updated": "2020-07-02T15:51:51.379+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314667/comment/17156396",
                    "id": "17156396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7704\n[https://github.com/apache/arrow/pull/7704]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-07-12T21:54:04.015+0000",
                    "updated": "2020-07-12T21:54:04.015+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gehk:",
        "customfield_12314139": null
    }
}