{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13407753",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753",
    "key": "ARROW-14413",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12625900",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12625900",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "outwardIssue": {
                    "id": "13398600",
                    "key": "ARROW-13827",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600",
                    "fields": {
                        "summary": "[C++][Gandiva] Implement LEVENSHTEIN Hive function on Gandiva",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14413/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/668953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#issuecomment-949675253\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T14:18:53.039+0000",
                    "updated": "2021-10-22T14:18:53.039+0000",
                    "started": "2021-10-22T14:18:53.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "668953",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/673107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r740961823\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Why len_dist_1 + 1 and not len_dist_1?\r\n   \r\n   The algorithm in wikipedia allocates a matrix of size (in1_len + 1) x (in2_len + 1)\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       Can you implement this algorithm \"Iterative with two matrix rows\" from https://en.wikipedia.org/wiki/Levenshtein_distance instead? It uses less memory and takes the same amount of time to compute the distance\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Can we allocate one large chunk of memory instead of making multiple calls to malloc? Each call to malloc requires a lock!!!\r\n   \r\n   * ptr = malloc((in1_len + 1) * (in2_len + 1) * sizeof(int)) space. Line 1663 is allocating space for int*\r\n   * rowSize = (int2_len + 1) * sizeof(int)\r\n   * dist[i] = ptr + i * rowSize\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T11:34:59.360+0000",
                    "updated": "2021-11-02T11:34:59.360+0000",
                    "started": "2021-11-02T11:34:59.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673107",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/673374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r740961823\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Why len_dist_1 + 1 and not len_dist_1?\r\n   \r\n   The algorithm in wikipedia allocates a matrix of size (in1_len + 1) x (in2_len + 1)\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       Can you implement this algorithm \"Iterative with two matrix rows\" from https://en.wikipedia.org/wiki/Levenshtein_distance instead? It uses less memory and takes the same amount of time to compute the distance\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Can we allocate one large chunk of memory instead of making multiple calls to malloc? Each call to malloc requires a lock!!!\r\n   \r\n   * ptr = malloc((in1_len + 1) * (in2_len + 1) * sizeof(int)) space. Line 1663 is allocating space for int*\r\n   * rowSize = (int2_len + 1) * sizeof(int)\r\n   * dist[i] = ptr + i * rowSize\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:51:22.616+0000",
                    "updated": "2021-11-02T17:51:22.616+0000",
                    "started": "2021-11-02T17:51:22.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673374",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/673946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r740961823\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Why len_dist_1 + 1 and not len_dist_1?\r\n   \r\n   The algorithm in wikipedia allocates a matrix of size (in1_len + 1) x (in2_len + 1)\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       Can you implement this algorithm \"Iterative with two matrix rows\" from https://en.wikipedia.org/wiki/Levenshtein_distance instead? It uses less memory and takes the same amount of time to compute the distance\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Can we allocate one large chunk of memory instead of making multiple calls to malloc? Each call to malloc requires a lock!!!\r\n   \r\n   * ptr = malloc((in1_len + 1) * (in2_len + 1) * sizeof(int)) space. Line 1663 is allocating space for int*\r\n   * rowSize = (int2_len + 1) * sizeof(int)\r\n   * dist[i] = ptr + i * rowSize\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:23:23.041+0000",
                    "updated": "2021-11-02T21:23:23.041+0000",
                    "started": "2021-11-02T21:23:23.040+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673946",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/674661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r742006969\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Yeah, right, i removed this, thank you!\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Oh, i don't have did think in this, i'll trying modify\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I had tried recursion, but it didn't work, I'll try it with Iterative then.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T14:38:32.327+0000",
                    "updated": "2021-11-03T14:38:32.327+0000",
                    "started": "2021-11-03T14:38:32.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674661",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/675472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r742006969\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Yeah, right, i removed this, thank you!\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Oh, i don't have did think in this, i'll trying modify\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I had tried recursion, but it didn't work, I'll try it with Iterative then.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Yeah, right, i removed this, thank you!\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Oh, i don't have did think in this, i'll trying modify\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I had tried recursion, but it didn't work, I'll try it with Iterative then.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:53:54.852+0000",
                    "updated": "2021-11-04T00:53:54.852+0000",
                    "started": "2021-11-04T00:53:54.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675472",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/676109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r742006969\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Yeah, right, i removed this, thank you!\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       Oh, i don't have did think in this, i'll trying modify\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I had tried recursion, but it didn't work, I'll try it with Iterative then.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T02:00:00.443+0000",
                    "updated": "2021-11-04T02:00:00.443+0000",
                    "started": "2021-11-04T02:00:00.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676109",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/676218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r742556027\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       @ViniciusSouzaRoque I have reviewed levenshtien in the following pull request:\r\n   \r\n   https://github.com/apache/arrow/pull/11051\r\n   \r\n   Why there are two pull requests? Can you remove one of them? Also, my comments are similar to Vivek, but there might be additional comments there and a link to a memory efficient levenstein implementation. See if they are helpful.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T05:53:45.644+0000",
                    "updated": "2021-11-04T05:53:45.644+0000",
                    "started": "2021-11-04T05:53:45.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676218",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/676726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743194505\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I created this solution using this algorithm, and applied a new memory allocation, using only one large chunk of memory.\r\n   I was also able to remove the memory dump using std::swap()\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T20:52:00.054+0000",
                    "updated": "2021-11-04T20:52:00.054+0000",
                    "started": "2021-11-04T20:52:00.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676726",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/676877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743381048\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       There is one more optimization possible (looking at the java code). what if in1_len is far lesser than in2_len? Maybe doing an initial swap and using the bigger array in the outer loop and smaller array in the inner loop may make it more efficient. Or are you planning to make sure in2 is always than in1 when calling the method? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T04:18:59.801+0000",
                    "updated": "2021-11-05T04:18:59.801+0000",
                    "started": "2021-11-05T04:18:59.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676877",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/676962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743544688\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       Okay, it makes sense! I did the exchange using a boolean variable and two integers so I don't need to copy anything (besides the input sizes)\r\n   See if it looks good, please!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T10:28:18.201+0000",
                    "updated": "2021-11-05T10:28:18.201+0000",
                    "started": "2021-11-05T10:28:18.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676962",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/677269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743194505\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I created this solution using this algorithm, and applied a new memory allocation, using only one large chunk of memory.\r\n   I was also able to remove the memory dump using std::swap()\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       Okay, it makes sense! I did the exchange using a boolean variable and two integers so I don't need to copy anything (besides the input sizes)\r\n   See if it looks good, please!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:30:50.738+0000",
                    "updated": "2021-11-05T19:30:50.738+0000",
                    "started": "2021-11-05T19:30:50.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677269",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/677489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743381048\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       There is one more optimization possible (looking at the java code). what if in1_len is far lesser than in2_len? Maybe doing an initial swap and using the bigger array in the outer loop and smaller array in the inner loop may make it more efficient. Or are you planning to make sure in2 is always than in1 when calling the method? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:00:54.953+0000",
                    "updated": "2021-11-05T20:00:54.953+0000",
                    "started": "2021-11-05T20:00:54.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677489",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/677858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743381048\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       There is one more optimization possible (looking at the java code). what if in1_len is far lesser than in2_len? Maybe doing an initial swap and using the bigger array in the outer loop and smaller array in the inner loop may make it more efficient. Or are you planning to make sure in2 is always than in1 when calling the method? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:45:40.280+0000",
                    "updated": "2021-11-05T20:45:40.280+0000",
                    "started": "2021-11-05T20:45:40.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677858",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/677872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r743194505\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n+      } else {\n+        a = dist[i][j + 1] + 1;\n+        b = dist[i + 1][j] + 1;\n+        c = dist[i][j] + 1;\n+        aux = (a < b ? a : b);\n+        dist[i + 1][j + 1] = (aux < c ? aux : c);\n\nReview comment:\n       I created this solution using this algorithm, and applied a new memory allocation, using only one large chunk of memory.\r\n   I was also able to remove the memory dump using std::swap()\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,83 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  int* ptr = new int[(in2_len + 1) * 2];\n\nReview comment:\n       Okay, it makes sense! I did the exchange using a boolean variable and two integers so I don't need to copy anything (besides the input sizes)\r\n   See if it looks good, please!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:47:37.788+0000",
                    "updated": "2021-11-05T20:47:37.788+0000",
                    "started": "2021-11-05T20:47:37.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677872",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/678411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r744611922\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n+  if (ptr == 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // MEMORY ADRESS MALLOC\n+  // v0 -> (0, ..., &ptr[in2_len])\n+  // v1 -> (in2_len+1, ..., &ptr[in2_len * 2])\n+  int* v0;\n+  int* v1;\n+  v0 = &ptr[0];\n+  v1 = &ptr[B + 1];\n+\n+  // Initializate v0\n+  for (int i = 0; i <= B; i++) {\n+    v0[i] = i;\n+  }\n+\n+  // Initialize interactive mode\n+  for (int i = 0; i < A; i++) {\n+    // The first element to V1 is [i + 1]\n+    // For edit distance you can delete (i+1) chars from in1 to match empty in2 position\n+    v1[0] = i + 1;\n+\n+    for (int j = 0; j < B; j++) {\n+      // Calculate costs to modify\n+      int deletionCost = v0[j + 1] + 1;\n+      int insertionCost = v1[j] + 1;\n+      int substitutionCost = v0[j] + 1;\n+\n+      if (smaller) {\n\nReview comment:\n       You can eliminate the if (smaller) condition by using:\r\n   if (arr_larger[i] == arr_smaller[j]) {\r\n   }\r\n   \r\n   You will avoid len_smaller * len_larger if-conditions\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n+  if (ptr == 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // MEMORY ADRESS MALLOC\n+  // v0 -> (0, ..., &ptr[in2_len])\n+  // v1 -> (in2_len+1, ..., &ptr[in2_len * 2])\n+  int* v0;\n+  int* v1;\n+  v0 = &ptr[0];\n+  v1 = &ptr[B + 1];\n+\n+  // Initializate v0\n+  for (int i = 0; i <= B; i++) {\n+    v0[i] = i;\n+  }\n+\n+  // Initialize interactive mode\n+  for (int i = 0; i < A; i++) {\n+    // The first element to V1 is [i + 1]\n+    // For edit distance you can delete (i+1) chars from in1 to match empty in2 position\n+    v1[0] = i + 1;\n+\n+    for (int j = 0; j < B; j++) {\n+      // Calculate costs to modify\n+      int deletionCost = v0[j + 1] + 1;\n+      int insertionCost = v1[j] + 1;\n+      int substitutionCost = v0[j] + 1;\n+\n+      if (smaller) {\n+        if (in2[i] == in1[j]) {\n+          substitutionCost = v0[j];\n+        }\n+      } else {\n+        if (in1[i] == in2[j]) {\n+          substitutionCost = v0[j];\n+        }\n+      }\n+\n+      // Catch the minor cost\n+      int min;\n+      min = deletionCost;\n+\n+      if (min > substitutionCost) {\n+        min = substitutionCost;\n+      }\n+      if (min > insertionCost) {\n+        min = insertionCost;\n+      }\n+\n+      // Set the minor cost to v1\n+      v1[j + 1] = min;\n+    }\n+\n+    // Swaping v0 and v1\n+    std::swap(v0, v1);\n+  }\n+  // The results of v1 are now in v0, Levenshtein value is in v0[n]\n\nReview comment:\n       Not sure what this means - results of v1 are now in v0. Is this comment correct?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n\nReview comment:\n       You can do better than this; define the following:\r\n   char *arr_larger; // points to the larger array\r\n   char *arr_smaller; // points to the smaller array\r\n   \r\n   Similarly, len_larger and len_smaller\r\n   \r\n   Do one if-condition like this and initialise arr_larger, arr_smaller, len_larger, len_smaller\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n+  if (ptr == 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // MEMORY ADRESS MALLOC\n+  // v0 -> (0, ..., &ptr[in2_len])\n+  // v1 -> (in2_len+1, ..., &ptr[in2_len * 2])\n+  int* v0;\n+  int* v1;\n+  v0 = &ptr[0];\n+  v1 = &ptr[B + 1];\n+\n+  // Initializate v0\n+  for (int i = 0; i <= B; i++) {\n+    v0[i] = i;\n+  }\n+\n+  // Initialize interactive mode\n+  for (int i = 0; i < A; i++) {\n\nReview comment:\n       outer loop will iterate to len_larger\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n+  if (ptr == 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // MEMORY ADRESS MALLOC\n+  // v0 -> (0, ..., &ptr[in2_len])\n+  // v1 -> (in2_len+1, ..., &ptr[in2_len * 2])\n+  int* v0;\n+  int* v1;\n+  v0 = &ptr[0];\n+  v1 = &ptr[B + 1];\n+\n+  // Initializate v0\n+  for (int i = 0; i <= B; i++) {\n+    v0[i] = i;\n+  }\n+\n+  // Initialize interactive mode\n+  for (int i = 0; i < A; i++) {\n+    // The first element to V1 is [i + 1]\n+    // For edit distance you can delete (i+1) chars from in1 to match empty in2 position\n+    v1[0] = i + 1;\n+\n+    for (int j = 0; j < B; j++) {\n\nReview comment:\n       inner loop will iterate to len_smaller\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,35 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestLevenshtein) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"kitten\", 6, \"sitting\", 7), 3);\n\nReview comment:\n       Can you add more test cases from the wikipedia page? or even from the Hive UDF implementation?\r\n   \r\n   The logic is quite complex, it is better to have good test coverage\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n\nReview comment:\n       Memory allocation is for (len_smaller + 1) * 2\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T10:57:14.009+0000",
                    "updated": "2021-11-08T10:57:14.009+0000",
                    "started": "2021-11-08T10:57:14.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678411",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/678450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r744694943\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,104 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // Check input size 0\n+  if (in1_len == 0) {\n+    return in2_len;\n+  }\n+  if (in2_len == 0) {\n+    return in1_len;\n+  }\n+\n+  // A and B is one copy from lengths\n+  int A;\n+  int B;\n+\n+  // 'smaller' Is a variable to validate the inversion of entries without a copy of them.\n+  bool smaller = false;\n+  if (in1_len < in2_len) {\n+    smaller = true;\n+    A = in2_len;\n+    B = in1_len;\n+  } else {\n+    A = in1_len;\n+    B = in2_len;\n+  }\n+\n+  int* ptr = new int[(B + 1) * 2];\n+  if (ptr == 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+\n+  // MEMORY ADRESS MALLOC\n+  // v0 -> (0, ..., &ptr[in2_len])\n+  // v1 -> (in2_len+1, ..., &ptr[in2_len * 2])\n+  int* v0;\n+  int* v1;\n+  v0 = &ptr[0];\n+  v1 = &ptr[B + 1];\n+\n+  // Initializate v0\n+  for (int i = 0; i <= B; i++) {\n+    v0[i] = i;\n+  }\n+\n+  // Initialize interactive mode\n+  for (int i = 0; i < A; i++) {\n+    // The first element to V1 is [i + 1]\n+    // For edit distance you can delete (i+1) chars from in1 to match empty in2 position\n+    v1[0] = i + 1;\n+\n+    for (int j = 0; j < B; j++) {\n+      // Calculate costs to modify\n+      int deletionCost = v0[j + 1] + 1;\n+      int insertionCost = v1[j] + 1;\n+      int substitutionCost = v0[j] + 1;\n+\n+      if (smaller) {\n+        if (in2[i] == in1[j]) {\n+          substitutionCost = v0[j];\n+        }\n+      } else {\n+        if (in1[i] == in2[j]) {\n+          substitutionCost = v0[j];\n+        }\n+      }\n+\n+      // Catch the minor cost\n+      int min;\n+      min = deletionCost;\n+\n+      if (min > substitutionCost) {\n+        min = substitutionCost;\n+      }\n+      if (min > insertionCost) {\n+        min = insertionCost;\n+      }\n+\n+      // Set the minor cost to v1\n+      v1[j + 1] = min;\n+    }\n+\n+    // Swaping v0 and v1\n+    std::swap(v0, v1);\n+  }\n+  // The results of v1 are now in v0, Levenshtein value is in v0[n]\n\nReview comment:\n       yeah, this coment is right, in Levenshtein \"Iterative with two matrix rows\" solicited per @rkavanap , after the last swap, the results of v1 are now in v0.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T12:52:53.622+0000",
                    "updated": "2021-11-08T12:52:53.622+0000",
                    "started": "2021-11-08T12:52:53.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678450",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/678454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r744701477\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,35 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestLevenshtein) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"kitten\", 6, \"sitting\", 7), 3);\n\nReview comment:\n       Okay! I will apply the changes mentioned above and add more tests!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T13:01:25.706+0000",
                    "updated": "2021-11-08T13:01:25.706+0000",
                    "started": "2021-11-08T13:01:25.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678454",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/685801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r756004169\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,107 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       I dont think this algorithm is written to work for utf-8 input. utf-8 uses multiple bytes to encode a character... this algorithm doesn't handle this correctly..\r\n   \r\n   Can you change the name of the function to not include utf-8 in the name?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T12:16:50.870+0000",
                    "updated": "2021-11-24T12:16:50.870+0000",
                    "started": "2021-11-24T12:16:50.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685801",
                    "issueId": "13407753"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/worklog/685803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #11522:\nURL: https://github.com/apache/arrow/pull/11522#discussion_r756009622\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,107 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Yeah, of corse!\r\n   I go change this now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T12:21:22.447+0000",
                    "updated": "2021-11-24T12:21:22.447+0000",
                    "started": "2021-11-24T12:21:22.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685803",
                    "issueId": "13407753"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71b4a01c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fc4987e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5183c03f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4a1fa519[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b0eb18d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@47d7336f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@81a8192[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3f1adae5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11b68652[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f048340[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33ce9923[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5aeaa04d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Dec 03 11:51:57 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-03T11:51:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14413/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-10-21T11:45:06.000+0000",
        "updated": "2021-12-04T01:31:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Returns the Levenshtein distance between two strings\u00a0. For example, levenshtein('kitten', 'sitting') results in 3.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement levenshtein function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753/comment/17452946",
                    "id": "17452946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 11522\n[https://github.com/apache/arrow/pull/11522]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2021-12-03T11:51:57.753+0000",
                    "updated": "2021-12-03T11:51:57.753+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0w1so:",
        "customfield_12314139": null
    }
}