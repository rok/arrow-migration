{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13334647",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647",
    "key": "ARROW-10249",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10249/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique opened a new pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430\n\n\n   Support nested dictionaries inside list arrays for arrow JSON reader.\r\n   This pr makes reading nested JSON fields a little bit easier by making a single reader method for the list arrays.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T20:31:49.017+0000",
                    "updated": "2020-10-10T20:31:49.017+0000",
                    "started": "2020-10-10T20:31:49.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499000",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-706607598\n\n\n   https://issues.apache.org/jira/browse/ARROW-10249\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T20:34:32.532+0000",
                    "updated": "2020-10-10T20:34:32.532+0000",
                    "started": "2020-10-10T20:34:32.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499001",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-707074594\n\n\n   @andygrove @paddyhoran @nevi-me Can I get a pair of eyes here?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T11:55:51.260+0000",
                    "updated": "2020-10-12T11:55:51.260+0000",
                    "started": "2020-10-12T11:55:51.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499350",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503270914\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n\nReview comment:\n       I think splitting this method into two, one for plain Utf8 and one for dictionary encoded, would simplify the code and should allow it to work without dynamic dispatch. There is only a bit of common code converting the json into a vec (line 749) which could be extracted and reused.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T12:46:12.658+0000",
                    "updated": "2020-10-12T12:46:12.658+0000",
                    "started": "2020-10-12T12:46:12.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499390",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503288791\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n\nReview comment:\n       > I think splitting this method into two, one for plain Utf8 and one for dictionary encoded, would simplify the code and should allow it to work without dynamic dispatch.\r\n   \r\n   There is no dynamic dispatch going on here. dyn ArrayBuilder is converted down to the concrete type. So no dynamic dispatch is going on.\r\n   \r\n   > There is only a bit of common code converting the json into a vec (line 749) which could be extracted and reused.\r\n   \r\n   If extracted, loop contains different builders with different build methods as mentioned in:\r\n   https://github.com/apache/arrow/pull/8430/files#diff-3fa6fc3c0ee201f5a3a1a5d25d0062ffR775\r\n   So that wouldn't work, because you need code duplication with the same parameters of this method, which doesn't bring any value again.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T13:16:34.445+0000",
                    "updated": "2020-10-12T13:16:34.445+0000",
                    "started": "2020-10-12T13:16:34.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499403",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503288791\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n\nReview comment:\n       > I think splitting this method into two, one for plain Utf8 and one for dictionary encoded, would simplify the code and should allow it to work without dynamic dispatch.\r\n   \r\n   There is no dynamic dispatch going on here. dyn ArrayBuilder is converted down to the concrete type. Dynamic dispatch is `<T as ArrayBuilder>::finish()`. That doesn't exist here.\r\n   \r\n   > There is only a bit of common code converting the json into a vec (line 749) which could be extracted and reused.\r\n   \r\n   If extracted, loop contains different builders with different build methods as mentioned in:\r\n   https://github.com/apache/arrow/pull/8430/files#diff-3fa6fc3c0ee201f5a3a1a5d25d0062ffR775\r\n   So that wouldn't work, because you need code duplication with the same parameters of this method, which doesn't bring any value again.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T13:17:23.887+0000",
                    "updated": "2020-10-12T13:17:23.887+0000",
                    "started": "2020-10-12T13:17:23.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499405",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503372369\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n\nReview comment:\n       Ok, but splitting the function would allow to remove the Box::leak and unsafe pointer casting, no?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T15:28:19.369+0000",
                    "updated": "2020-10-12T15:28:19.369+0000",
                    "started": "2020-10-12T15:28:19.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499469",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503472334\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<StringBuilder>)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                builder.values().append_value(&v)?\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Amend to the list\n+                        builder.append(true)?;\n\nReview comment:\n       amend or append?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T18:58:59.118+0000",
                    "updated": "2020-10-12T18:58:59.118+0000",
                    "started": "2020-10-12T18:58:59.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499585",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503520332\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<StringBuilder>)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                builder.values().append_value(&v)?\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Amend to the list\n+                        builder.append(true)?;\n\nReview comment:\n       append it is.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T20:37:52.324+0000",
                    "updated": "2020-10-12T20:37:52.324+0000",
                    "started": "2020-10-12T20:37:52.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499625",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-707341797\n\n\n   @nevi-me \r\n   \r\n   > I didn't do a detailed review, but I'm happy with the changes. It's been a while since I looked at the JSON reader, how hard/easy do you think it would be for us to support the outstanding work on https://issues.apache.org/jira/browse/ARROW-4534?\r\n   \r\n   Thanks! Especially on the nested reading part (https://issues.apache.org/jira/browse/ARROW-4544), it would be nice to reuse builders at entry. Having a recursive reader with a `recursion_limit` set would be good to go. If we go down into the iterative approach, we will explicitly generate a macro to expand on the compile-time with a depth embedded in. That might slow down to compile times and create larger binaries.\r\n   \r\n   The good part of the recursive approach is that it will be limited by the stack size (but there might be growing stack implementation), where the user can increase this by hand. The bad part is that the recursion limit we have defined shouldn't hit to default stack size, and we should have a sweet spot for it.\r\n   \r\n   About the other ticket that is still open (https://issues.apache.org/jira/browse/ARROW-4803). Type inference for schema might be hard at first. Although it is hard, we can do assumption based parsing by parsing that first(or +2) record's data to infer the type. But when the type is given, we can try to parse all down in iso format.\r\n   \r\n   > I also have the feeling that the reader might be slower than other readers. What has been your experience @vertexclique?\r\n   \r\n   I didn't test the performance, since I was using this in tests, I needed it. We can create a benchmark for r/w, maybe? wdyt?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T20:56:40.623+0000",
                    "updated": "2020-10-12T20:56:40.623+0000",
                    "started": "2020-10-12T20:56:40.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499631",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/499635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r503529865\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n\nReview comment:\n       Nope, it is inside the loop where the `builder` is carried over from the previous loop. If we apply recursion for nested structures sometime later, I want to keep the pointer juggling inside a single block.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T21:00:57.985+0000",
                    "updated": "2020-10-12T21:00:57.985+0000",
                    "started": "2020-10-12T21:00:57.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499635",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/500410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r504385888\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<StringBuilder>)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                builder.values().append_value(&v)?\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Append to the list\n+                        builder.append(true)?;\n+                    }\n+                    DataType::Dictionary(_, _) => {\n+                        let builder: &mut &mut ListBuilder<\n+                            StringDictionaryBuilder<DICT_TY>,\n+                        > = unsafe {\n\nReview comment:\n       Same here.\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<StringBuilder>)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                builder.values().append_value(&v)?\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Append to the list\n+                        builder.append(true)?;\n+                    }\n+                    DataType::Dictionary(_, _) => {\n+                        let builder: &mut &mut ListBuilder<\n+                            StringDictionaryBuilder<DICT_TY>,\n+                        > = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<\n+                                    StringDictionaryBuilder<DICT_TY>,\n+                                >)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                let _ = builder.values().append(&v)?;\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Append to the list\n+                        builder.append(true)?;\n+                    }\n+                    e => {\n+                        return Err(ArrowError::JsonError(format!(\n+                            \"Nested list data builder type is not supported: {:?}\",\n+                            e\n+                        )))\n+                    }\n+                }\n+            }\n+        }\n+        unsafe { Ok((*Box::from_raw(builder)).finish() as ArrayRef) }\n\nReview comment:\n       why do we need to break lifetime rules here with `Box::leak`? Isn't there a safe approach to this? If this is required, can we comment why this is required and why other approaches do not?\r\n   \n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n\nReview comment:\n       IMO this needs documentation. As it stands, it is hard to understand why this is being done.\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n\nReview comment:\n       I think we could rely on ARROW- issues to document `todo`s instead of user handles.\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n\nReview comment:\n       I am also very happy with this: there is likely a more idiomatic way of performing this.\r\n   \r\n   Could you document / add comments about what is happening here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T04:05:18.072+0000",
                    "updated": "2020-10-14T04:05:18.072+0000",
                    "started": "2020-10-14T04:05:18.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500410",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/500411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r504385827\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n\nReview comment:\n       Could you document / add comments about what is happening here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T04:06:01.684+0000",
                    "updated": "2020-10-14T04:06:01.684+0000",
                    "started": "2020-10-14T04:06:01.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500411",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/501915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-711318388\n\n\n   @jorgecarleitao written docs.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-18T17:34:27.813+0000",
                    "updated": "2020-10-18T17:34:27.813+0000",
                    "started": "2020-10-18T17:34:27.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501915",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/502173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-712135918\n\n\n   @jorgecarleitao @nevi-me  Can I push this out of the door peeps? I am kind of blocked by this atm.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T12:54:16.486+0000",
                    "updated": "2020-10-19T12:54:16.486+0000",
                    "started": "2020-10-19T12:54:16.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502173",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/502379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-712369692\n\n\n   @vertexclique , I think that the feature is appreciated, but the implementation shows some underlying issue with the API to build arrays.\r\n   \r\n   IMO, In light of this PR we should revisit the API before merging this to ensure that we can create nested structures without `unsafe`, and, if we need an `unsafe`, that we use it in a well-defined, limited scope.\r\n   \r\n   If we accept this, IMO we are opening the door to all kind of usage of `unsafe` in high-level APIs, which is not only an anti-pattern in Rust, but also discouraged except in well defined use-cases, as it risks UB. Note that I am not criticizing this implementation in particular, but that if anyone changes this, it requires a significant care by everyone involved to ensure no UB.\r\n   \r\n   In other words, this implementation adds technical debt that I (and I alone) will be unable to pay back, which means that I cannot commit at maintaining this change. I would obviously not block others from approving it and merging if they feel that they can maintain this change.\r\n   \r\n   cc @paddyhoran\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T18:44:28.806+0000",
                    "updated": "2020-10-19T18:44:28.806+0000",
                    "started": "2020-10-19T18:44:28.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502379",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/502704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#discussion_r508527928\n\n\n\n##########\nFile path: rust/arrow/src/json/reader.rs\n##########\n@@ -612,6 +644,240 @@ impl<R: Read> Reader<R> {\n         arrays.and_then(|arr| RecordBatch::try_new(projected_schema, arr).map(Some))\n     }\n \n+    fn build_wrapped_list_array(\n+        &self,\n+        rows: &[Value],\n+        col_name: &str,\n+        key_type: &DataType,\n+    ) -> Result<ArrayRef> {\n+        match *key_type {\n+            DataType::Int8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::Int64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::Int64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<Int64Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt8 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt8),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt8Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt16 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt16),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt16Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt32 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt32),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt32Type>(&dtype, col_name, rows)\n+            }\n+            DataType::UInt64 => {\n+                let dtype = DataType::Dictionary(\n+                    Box::new(DataType::UInt64),\n+                    Box::new(DataType::Utf8),\n+                );\n+                self.list_array_string_array_builder::<UInt64Type>(&dtype, col_name, rows)\n+            }\n+            ref e => Err(ArrowError::JsonError(format!(\n+                \"Data type is currently not supported for dictionaries in list : {:?}\",\n+                e\n+            ))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn list_array_string_array_builder<DICT_TY>(\n+        &self,\n+        data_type: &DataType,\n+        col_name: &str,\n+        rows: &[Value],\n+    ) -> Result<ArrayRef>\n+    where\n+        DICT_TY: ArrowPrimitiveType + ArrowDictionaryKeyType,\n+    {\n+        let builder: Box<dyn ArrayBuilder> = match data_type {\n+            DataType::Utf8 => {\n+                let values_builder = StringBuilder::new(rows.len() * 5);\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            DataType::Dictionary(_, _) => {\n+                let values_builder =\n+                    self.build_string_dictionary_builder::<DICT_TY>(rows.len() * 5)?;\n+                Box::new(ListBuilder::new(values_builder))\n+            }\n+            e => {\n+                return Err(ArrowError::JsonError(format!(\n+                    \"Nested list data builder type is not supported: {:?}\",\n+                    e\n+                )))\n+            }\n+        };\n+        let mut builder = Box::leak(builder);\n+\n+        for row in rows {\n+            if let Some(value) = row.get(col_name) {\n+                // value can be an array or a scalar\n+                let vals: Vec<Option<String>> = if let Value::String(v) = value {\n+                    vec![Some(v.to_string())]\n+                } else if let Value::Array(n) = value {\n+                    n.iter()\n+                        .map(|v: &Value| {\n+                            if v.is_string() {\n+                                Some(v.as_str().unwrap().to_string())\n+                            } else if v.is_array() || v.is_object() {\n+                                // implicitly drop nested values\n+                                // TODO support deep-nesting\n+                                None\n+                            } else {\n+                                Some(v.to_string())\n+                            }\n+                        })\n+                        .collect()\n+                } else if let Value::Null = value {\n+                    vec![None]\n+                } else if !value.is_object() {\n+                    vec![Some(value.to_string())]\n+                } else {\n+                    return Err(ArrowError::JsonError(\n+                        \"Only scalars are currently supported in JSON arrays\".to_string(),\n+                    ));\n+                };\n+\n+                // TODO: (vertexclique): APIs of dictionary arrays and others are different. Unify them.\n+                match data_type {\n+                    DataType::Utf8 => {\n+                        let builder: &mut &mut ListBuilder<StringBuilder> = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<StringBuilder>)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                builder.values().append_value(&v)?\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Append to the list\n+                        builder.append(true)?;\n+                    }\n+                    DataType::Dictionary(_, _) => {\n+                        let builder: &mut &mut ListBuilder<\n+                            StringDictionaryBuilder<DICT_TY>,\n+                        > = unsafe {\n+                            &mut *(&mut builder as *mut &mut dyn ArrayBuilder\n+                                as *mut &mut ListBuilder<\n+                                    StringDictionaryBuilder<DICT_TY>,\n+                                >)\n+                        };\n+                        for val in vals {\n+                            if let Some(v) = val {\n+                                let _ = builder.values().append(&v)?;\n+                            } else {\n+                                builder.values().append_null()?\n+                            };\n+                        }\n+\n+                        // Append to the list\n+                        builder.append(true)?;\n+                    }\n+                    e => {\n+                        return Err(ArrowError::JsonError(format!(\n+                            \"Nested list data builder type is not supported: {:?}\",\n+                            e\n+                        )))\n+                    }\n+                }\n+            }\n+        }\n+        unsafe { Ok((*Box::from_raw(builder)).finish() as ArrayRef) }\n\nReview comment:\n       I share these concerns and agree that if there is a compelling argument for this we need to have it documented.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-20T13:57:11.634+0000",
                    "updated": "2020-10-20T13:57:11.634+0000",
                    "started": "2020-10-20T13:57:11.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502704",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/502708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-712875985\n\n\n   > @jorgecarleitao @nevi-me Can I push this out of the door peeps? I am kind of blocked by this atm.\r\n   \r\n   @vertexclique  When I started contributing here I had similar feelings but there is no reason you should be blocked. You can maintain a branch in your fork with all of your contributions that you need and have a git dependency on that. You could even vendor the code in your project if you need to release to crates.io\r\n   \r\n   Many/most of us here are volunteers and reviewing PRs in our free time so we can't always be responsive when we have work commitments.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-20T14:02:57.754+0000",
                    "updated": "2020-10-20T14:02:57.754+0000",
                    "started": "2020-10-20T14:02:57.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502708",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/502746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-712937618\n\n\n   @andygrove \r\n   \r\n   > @vertexclique When I started contributing here I had similar feelings but there is no reason you should be blocked. You can maintain a branch in your fork with all of your contributions that you need and have a git dependency on that. You could even vendor the code in your project if you need to release to crates.io\r\n   \r\n   > Many/most of us here are volunteers and reviewing PRs in our free time so we can't always be responsive when we have work commitments.\r\n   \r\n   Sorry if I caused a disturbance. I mean no disturbance here. We are in the same shoes altogether, since most of us are having work commitments. If I felt anyone uneasy, I don't mean that. Thanks for the friendly reminder.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-20T15:30:55.578+0000",
                    "updated": "2020-10-20T15:30:55.578+0000",
                    "started": "2020-10-20T15:30:55.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502746",
                    "issueId": "13334647"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/worklog/503617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8430:\nURL: https://github.com/apache/arrow/pull/8430#issuecomment-714323287\n\n\n   > (this part is regardless, and could fit in a future PR) You mentioned in the commit message that this drastically reduces performance. Did you quantified how much was that, or is there any benchmark that you have in mind that I can run on my own? I am asking that because that is one of the situations where unsafe can be considered based on the risks and maintenance vs performance benefits.\r\n   \r\n   Based on my estimations of how I wrote it, it will increase the parsing time for long record windows with large nested element size. I don't estimate how large will cause it but the main concern here is that refcell's stacked borrow and finalizer's dynamic dispatch. This can be decreased by pruning refcell by visiting the ticket that I mentioned in there to unify the interfaces. Then we will use dynamic dispatch in everywhere. Thou, dynamic dispatch can be slightly slower compared to pointer casts(or in-place transmutes) it can solve the overhead of refcell. This piece of code is open to revisiting after [ARROW-10335](https://issues.apache.org/jira/browse/ARROW-10335).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T08:25:04.921+0000",
                    "updated": "2020-10-22T08:25:04.921+0000",
                    "started": "2020-10-22T08:25:04.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503617",
                    "issueId": "13334647"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@302f90df[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@348933fc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26454e25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b2e9fc2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a1e68e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54466b40[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58fe338b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@778177d9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e11709e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@596a1077[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@702102ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@c629cd8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 23 02:36:01 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-23T02:36:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10249/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-09T12:54:31.000+0000",
        "updated": "2020-10-23T02:36:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, dictionary types for listarrays are not supported in Arrow JSON reader. It would be nice to add dictionary type support.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust]: Support Dictionary types for ListArrays in arrow json reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334647/comment/17219420",
                    "id": "17219420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8430\n[https://github.com/apache/arrow/pull/8430]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-23T02:36:01.465+0000",
                    "updated": "2020-10-23T02:36:01.465+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jkf4:",
        "customfield_12314139": null
    }
}