{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13370622",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622",
    "key": "ARROW-12311",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12639016",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12639016",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13442386",
                    "key": "ARROW-16410",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442386",
                    "fields": {
                        "summary": "[C++] Scanner -> ScanNode",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12311/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a25e9bc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a2fa34c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d50fe6c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a321949[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66733133[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@227c3c7d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28d515c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6267a9c2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1de2e614[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5e3ebe01[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e45cb13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1b340a0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 28 16:50:23 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12311/watchers",
            "watchCount": 6,
            "isWatching": true
        },
        "created": "2021-04-09T10:15:23.000+0000",
        "updated": "2022-10-04T08:33:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently R completely hides the `ScanOptions` class.\r\n\r\nIn python the class is exposed but the documentation prefers `dataset.scan` (which hides both the scanner and the scan options).\r\n\r\nHowever, there is some useful information in the `ScanOptions`.\u00a0 Specifically, the projected schema (which is a product of the dataset schema and the projection expression and not easily recreated) and the materialized fields (the list of fields referenced by either the filter or the projection) which might be useful for reporting purposes.\r\n\r\nCurrently R uses the projected schema to convert a list of column names into a partition schema.\u00a0 Python does not rely on either field.\r\n\r\n\u00a0\r\n\r\nOptions:\r\n\r\n\u00a0- Keep the status quo\r\n\r\n\u00a0- Expose the ScanOptions object (which itself is exposed via the Scanner)\r\n\r\n\u00a0- Expose the interesting fields via the Scanner\r\n\r\n\u00a0\r\n\r\nCurrently the C++ design is halfway between the latter two (projected schema is exposed and options).\u00a0 My preference would be the third option.\u00a0 It raises a further question about how to expose the scanner itself in Python?\u00a0 Should the user be using ScannerBuilder?\u00a0 Should they use NewScan?\u00a0 Should they use the scanner directly at all or should it be hidden?",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][R] Expose (hide?) ScanOptions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17317934",
                    "id": "17317934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Python is a bit inconsistent IMO: there are methods on Dataset that create a scanner for you and call to_table/scan_batches (this is fine). The scanner itself is also exposed (but not the builder), getting a scanner itself is less obvious (have to manually construct a scanner). The better thing would be to have {{dataset.scan(**kwargs)}} exposed. And then I would also lean towards #3. Particularly the projected schema doesn't really feel like an 'option' anyways.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-04-09T11:57:17.387+0000",
                    "updated": "2021-04-09T13:52:34.459+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17318001",
                    "id": "17318001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Agreed on option 3, if we can more easily expose the Scanner object in Python, that seems the appropriate place to expose interesting fields (like the projected schema). \r\n\r\nIt's a bit a pity that {{Dataset.scan()}} already creates a Scanner \u00e0nd starts the scan, otherwise that method could have returned a Scanner instead. Basically it's {{Dataset._scanner(**kwargs)}} that we want to expose from the Dataset, right? (without the user having to call {{Scanner.from_dataset(dataset, **kwargs)}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-04-09T13:52:21.066+0000",
                    "updated": "2021-04-09T13:52:50.639+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17318059",
                    "id": "17318059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "If there are useful things on ScanOptions and we can get them from Scanner, that would work from my perspective in R. Users generally don't create a Scanner themselves but Scanner$create(dataset, filter_expr, projection, ...) exists and is used inside functions that do the scanning. If Scanner had useful information about the scan-to-be and were cheap to construct, that could be useful.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-04-09T15:06:17.659+0000",
                    "updated": "2021-04-09T15:06:17.659+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17329419",
                    "id": "17329419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "From [~westonpace] on [this PR|https://github.com/apache/arrow/pull/10134#discussion_r618679685], there are some other things we can clean up on ScanOptions:\r\n\r\n{quote}Not for this PR but I feel like there are a number of places where we have to do something like this to maintain implicit invariants. It might be nice to have a {{ScanOptions}} cleanup at some point. Change the name so it isn't {{Options}}, hide it from the public API, give it more methods (like {{SetFilter}}) and private state.\r\n{quote}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-22T21:15:24.528+0000",
                    "updated": "2021-04-22T21:15:24.528+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17461633",
                    "id": "17461633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "If this is still a go, here's the `Scanner` object: https://github.com/apache/arrow/blob/master/r/R/dataset-scan.R#L63-L66\r\n\r\nAnd we expose {{options()->projected_schema}} here: https://github.com/apache/arrow/blob/master/r/src/dataset.cpp#L495-L498\r\n\r\nDefinition of the {{ScanOptions}}: https://github.com/apache/arrow/blob/master/cpp/src/arrow/dataset/scanner.h#L60-L144\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-17T19:45:56.062+0000",
                    "updated": "2021-12-17T19:45:56.062+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17461653",
                    "id": "17461653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> If this is still a go\r\n\r\nIt's still very much a valid cleanup in my mind (though I probably won't be working on it in the very near future).  ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-17T20:20:19.292+0000",
                    "updated": "2021-12-17T20:20:19.292+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17463238",
                    "id": "17463238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "What I should have asked is...should I work on a PR to implement access to any more of the options members from the R side for the 7.0.0 release? It's not particularly difficult to do but if the API is going to change then perhaps the 7.0.0 release isn't the right fit?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-21T13:06:11.927+0000",
                    "updated": "2021-12-21T13:06:11.927+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17469484",
                    "id": "17469484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I don't think this is going to fit into 7.0.0 (sorry for the delay).  Also, as I'm working on ARROW-13554 I'm wondering if there might be a simpler approach to take here.  If we combine the {{ScanOptions}} fields {{projected_schema}} and {{projection}} into a single type {{ProjectionOptions}} which has utility methods for creation (e.g. create from column names, create from expressions, create a default project-everything) then I think we can get rid of ScannerBuilder and just have ScanOptions.  This will also simplify ARROW-15257 since we can easily create scan options for use in scan nodes.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-05T19:00:22.829+0000",
                    "updated": "2022-01-05T19:00:22.829+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17491181",
                    "id": "17491181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I spent some time today thinking about scan options.  I'd like to propose a simplification.  Note that this simplification requires changes to the existing behavior of the scanner itself in some substantial ways.\r\n\r\nHere are my proposed options (with a bullet list of changes below)\r\n{noformat}\r\n/// Scan-specific options, which can be changed between scans of the same dataset.\r\nstruct ARROW_DS_EXPORT ScanOptions {\r\n  /// A row filter\r\n  ///\r\n  /// This is an opportunistic pushdown filter.  Filtering capabilities will\r\n  /// vary between fragments.\r\n  ///\r\n  /// Each fragment will do its best to filter the data based on the information\r\n  /// (partitioning guarantees, statistics) available to it.  If it is able to\r\n  /// apply some filtering then it will indicate what filtering it was able to\r\n  /// apply by attaching a guarantee to the batch.\r\n  ///\r\n  /// For example, if a filter is x < 50 && y > 40 then a batch may be able to\r\n  /// apply a guarantee x < 50.  Post-scan filtering would then only need to\r\n  /// consider y > 40 (for this specific batch).  The next batch may not be able\r\n  /// to attach any guarantee and both clauses would need to be applied to that batch.\r\n  ///\r\n  /// The filter expression may not be compatible with the schema of the underlying\r\n  /// file / statistics.  For example, a filter expression may be x > literal(-50,\r\n  /// int32()) The underlying data type might be uint64.  If possible, the reader may\r\n  /// attempt to apply the filter (in this case the gaurantee x > -50 can be attached to\r\n  /// the batch since we know all values will be >= 0 and thus x > -50 is true.\r\n  ///\r\n  /// If a reader is not capable of handling mismatched types in a filter then it should\r\n  /// ignore the filter.\r\n  ///\r\n  /// A single guarantee-aware filtering operation should generally be applied to all\r\n  /// resulting batches.  The scan node consumer is responsible for doing this.\r\n  ///\r\n  /// Note: If you are using a Scanner (as opposed to creating a scan node) there\r\n  /// are a number of convenience methods such as Scanner::Head, Scanner::ScanBatches,\r\n  /// etc.  These \"convenience\" methods will create an exec plan that includes a\r\n  /// scan node, a filter node, and a projection node.  So if you are using these\r\n  /// methods you do not need to worry about this final filtering step.\r\n  compute::Expression filter = compute::literal(true);\r\n\r\n  /// A mapping describing the desired output schema\r\n  ///\r\n  /// If a fragment contains a field that is not included in this mapping the field\r\n  /// should not be returned.  If possible the column should not be loaded from disk.\r\n  ///\r\n  /// If a fragment does not contain a field specified by the mapping then this is\r\n  /// not an error and the fragment should not return anything.  In particular, the\r\n  /// reader should not attempt to create an all-null placeholder.\r\n  ///\r\n  /// If a reference is a nested reference then readers should only return the\r\n  /// desired subset of the column.  For example, if the physical schema has a\r\n  /// field with the type \"points\": struct<{\"real\": double, \"imaginary\": double}>\r\n  /// and the ref is \"points\" then the entire column should be loaded and the data\r\n  /// type of the column will be struct<...>.  If the ref is \"points.real\" then\r\n  /// only the \"real\" portion of the column should be loaded and the data type of\r\n  /// the column will be \"real\"\r\n  ///\r\n  /// If the reader does not support partial loading of nested columns (e.g. CSV) then\r\n  /// the reader should load the entire column and then select the relevant nested\r\n  /// portion.  Note that a single source nested column many end up populating several\r\n  /// output columns.  Readers should take care not to load the source column from disk\r\n  /// multiple times.\r\n  ///\r\n  /// The output field type is included for opportunistic purposes.  If the underlying\r\n  /// column type does not match then this is not an error and the reader should return\r\n  /// the underlying column as is.  In particular, the reader should not cast.  However,\r\n  /// if the column type is unknown then the reader should attempt to infer the column\r\n  /// based on the desired output type.\r\n  ///\r\n  /// For example, consider the mapping: [ \"items\": {\"values\": int64 } ].  If the fragment\r\n  /// is a parquet file with a column named \"items\" that has a float64 data type then the\r\n  /// reader should emit the column \"values\":float64.\r\n  ///\r\n  /// If the fragment is a CSV file with a column named \"items\" it should attempt to parse\r\n  /// the column as int64, inserting null/na or erroring (depending on the reader options)\r\n  /// if it cannot parse a particular cell.\r\n  ///\r\n  /// The scan node itself is responsible for a final casting of data from whatever\r\n  /// physical type the reader was able to produce to the desired output type.  This means\r\n  /// that a scan node will always emit batches according to the output mapping's schema.\r\n  /// If a cast is impossible then the error_on_incompatible_types option will take\r\n  /// effect.\r\n  ///\r\n  /// If empty then no columns will be loaded from the file.  This can be useful\r\n  /// when you need row-count information only.  File readers that support a\r\n  /// metadata-only scan should utilize such a scan when an empty vector is specified.\r\n  std::vector<std::pair<FieldRef, Field>> output_mapping;\r\n\r\n  /// If true the scanner will error when a fragment cannot satisfy a type\r\n  /// requested by the output mapping\r\n  ///\r\n  /// If false the scanner will emit an all-null column (of the requested type) instead\r\n  bool error_on_incompatible_types = true;\r\n\r\n  /// If true the scanner will error when a batch does not include one of the fields\r\n  /// requested in the output_mapping.\r\n  ///\r\n  /// If false the scanner will emit an all-null column (of the requested type) instead\r\n  bool error_on_missing_fields = false;\r\n\r\n  /// Maximum row count for scanned batches.\r\n  int64_t batch_size = kDefaultBatchSize;\r\n\r\n  /// How many batches to read ahead within a file\r\n  ///\r\n  /// Set to 0 to disable batch readahead\r\n  ///\r\n  /// Note: May not be supported by all formats\r\n  int32_t batch_readahead = kDefaultBatchReadahead;\r\n\r\n  /// How many files to read ahead\r\n  ///\r\n  /// Set to 0 to disable fragment readahead\r\n  int32_t fragment_readahead = kDefaultFragmentReadahead;\r\n\r\n  /// A pool from which materialized and scanned arrays will be allocated.\r\n  MemoryPool* pool = arrow::default_memory_pool();\r\n\r\n  /// If true the scanner will scan in parallel\r\n  ///\r\n  /// Note: If true, this will use threads from both the cpu_executor and the\r\n  /// io_context.executor\r\n  bool use_threads = false;\r\n};\r\n{noformat}\r\n\r\n* The filtering behavior is not really different from what we have today but hopefully more explicit.  The only thing we don't handle great today is the case when the data type of the filter expression does not match the data type of the column.  See: ARROW-15146\r\n* The projection behavior we have today is very confusing to the point that I don't even know if what I'm proposing is that much of a change.  The actual syntax is different.  The old syntax (projection_schema + projection + dataset_schema) was rather confusing so I think it's worth the cost of introducing a new almost-schema vector of field ref/field pairs.  Unlike the filtering I don't think it is acceptable to leave some projection for the exec plan.  I've learned more of relational algebra and it seems that nodes should really have a consistent output type known at plan creation time.  Therefore, I think the scan node should be responsible for the final projection.  However, I think the scan node can take care of the casting to keep the reader logic simple.  So basically, readers will do the best they can, and the scan node will finish the rest.\r\n* Users often have clunky datasets that are full of inconsistencies.  As such, I introduced {{error_on_incompatible_types}} and {{error_on_missing_fields}} to allow the user to get nulls instead of errors.\r\n* Similar to the above, we should be setup to handle datasets that have different files in different formats.  I've removed fragment_scan_options.  This should be a property of the fragment.  If we want to make it easier for users then I think they can provide a default set of options during dataset discovery.  This would also mean that FileSystemDataset eventually loses it's \"format\" property but that can maybe be handled in a follow-up.\r\n* I removed the io_context option as that should come from the filesystem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-02-11T22:25:58.537+0000",
                    "updated": "2022-02-11T22:25:58.537+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17491182",
                    "id": "17491182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "CC [~lidavidm] [~bkietz]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-02-11T22:26:17.933+0000",
                    "updated": "2022-02-11T22:26:17.933+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17491199",
                    "id": "17491199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "* I think the projection behavior is the same, but this is a \"user friendly\" way of putting it. I suppose before you could have the projection be something completely arbitrary, if you implemented your own kernel returning a Struct type, but I don't think that's useful to support. However it seems we only support selecting/renaming/casting fields, not anything more complex? (Oh wait - \"scan node\" will become something distinct from the \"scanner\"? I'm a little confused here now.)\r\n* Do we want to error on reordered fields? That could matter if we allow indices for projection.\r\n* For multiple formats, we should perhaps consider the proposal in ARROW-11981: \"Dataset could be simplified to a concrete class containing a set of compatibly typed/formatted Fragments\". ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-11T22:48:14.541+0000",
                    "updated": "2022-02-11T22:48:14.541+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17492169",
                    "id": "17492169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> I suppose before you could have the projection be something completely arbitrary, if you implemented your own kernel returning a Struct type, but I don't think that's useful to support.\r\n\r\nAgreed, this is a little less flexible but pretty soon users will be able to issue full fledged queries through Ibis, etc. so they can still go that route and use an actual project node.\r\n\r\n> Oh wait - \"scan node\" will become something distinct from the \"scanner\"? I'm a little confused here now.\r\n\r\nIt's already confusing.  {{ScanNode}} takes a {{ScanOptions}} and creates a {{Scanner}} yet a {{Scanner}} takes a {{ScanOptions}} and creates a {{ScanNode}} (?!).  Scanner is both a high level \"lightweight query plan producer\" and a low level \"file and dataset reading\" utility.  The low level utility can probably become more and more internal.  Users will either interact with \"scan node\" via Ibis, dplyr, etc. or, if they don't want to use a 3rd party query plan producer, they can use Scanner, which is more of a substitute for those libraries with minimal functionality.\r\n\r\nIf we don't want to lose behavior in the high-level \"convenience methods\" (the ones that belong in the \"lightweight query plan producer\") like \"ToTable\", \"ScanBatches\", \"Head\", \"Count\" then we could have two \"scan options\" type classes.  A lower level ScanOptions that is consumed by the scan node and takes the limited projection and a higher level ScanOptions that is consumed by the high-level methods and creates a project node as part of the plan.  The convenience methods would have to extract the lower level projection out of the higher level dictionary of expressions but we already have logic to do that kind of thing today.\r\n\r\n> Do we want to error on reordered fields? That could matter if we allow indices for projection.\r\n\r\nGood point but I think that would mean the schema has to be identical (or maybe a subset from left to right) since there isn't any good way to have a \"hole\" in the schema.  I think we want to allow users some way to specify the dataset schema (e.g. the one the plan is built against and the output of the scan operator) and some kind of \"schema column resolution behavior\".  For example:\r\n * Error if non-matching - If the schema doesn't match exactly then error\r\n * Error if not-subset - If the schema doesn't match but allow missing columns at the end\r\n * Resolve by name - Requires unique names.  Find the output column position by looking for a column in the master schema with the same name\r\n * Resolve by id - Same as resolve by name but use the parquet ID field\r\n\r\n> For multiple formats, we should perhaps consider the proposal in ARROW-11981\r\n\r\nThat's a great idea.  I agree completely and it helps keep things simple.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-02-14T18:52:11.764+0000",
                    "updated": "2022-02-14T18:52:11.764+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370622/comment/17610656",
                    "id": "17610656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-09-28T16:50:23.737+0000",
                    "updated": "2022-09-28T16:50:23.737+0000"
                }
            ],
            "maxResults": 13,
            "total": 13,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ppmg:",
        "customfield_12314139": null
    }
}