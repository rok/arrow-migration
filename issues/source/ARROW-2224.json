{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13141074",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074",
    "key": "ARROW-2224",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12531533",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12531533",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13139892",
                    "key": "ARROW-2193",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139892",
                    "fields": {
                        "summary": "[Plasma] plasma_store has runtime dependency on Boost shared libraries when ARROW_BOOST_USE_SHARED=on",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12531531",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12531531",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13142191",
                    "key": "ARROW-2247",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142191",
                    "fields": {
                        "summary": "[Python] Statically-linking boost_regex in both libarrow and libparquet results in segfault",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2224/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7f0bc560[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e44ddf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1191f43c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@33b9d964[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29590af5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@19456c8a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76b5b8a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ae4c0fa[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b0b63f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@29986d26[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74f2d494[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@284d39e0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 11 15:54:17 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-11T15:54:15.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2224/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-02-26T23:33:10.000+0000",
        "updated": "2018-04-11T15:58:50.000+0000",
        "timeoriginalestimate": null,
        "description": "We're using {{boost::regex}} to parse decimal strings for {{decimal128}} types. We should use {{libre2}} instead.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Get rid of boost regex usage",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16432890",
                    "id": "16432890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Can you explain the \"should\"? AFAICS libre2 isn't header-only, so it may present the same linking and ABI issues as boost-regex.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-10T20:08:24.046+0000",
                    "updated": "2018-04-10T20:08:24.046+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16432928",
                    "id": "16432928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The \"should\" here isn't related to linking issues, rather, it's related to performance. See here for some benchmarks: http://lh3lh3.users.sourceforge.net/reb.shtml\r\n\r\nThose benchmarks are now coming up on 8 years old, so we should revisit that.\r\n\r\nSome of the linking issues might be mitigated by using {{<regex>}} on Windows and {{regcomp}} on UNIX platforms. I'm unaware of the perils of that solution (if any).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-10T20:38:04.801+0000",
                    "updated": "2018-04-10T20:38:04.801+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16432987",
                    "id": "16432987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "How important is it to have fast parsing of decimal types? If we reimplement our own parsing, we can tweak performance *and* remove the troublesome dependency.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-10T21:05:25.231+0000",
                    "updated": "2018-04-10T21:05:25.231+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16432995",
                    "id": "16432995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The original implementation used C++ iterators to implement a handwritten parser, but it quickly got complex once we needed to support integers with exponential notation. Maybe the complexity of dealing with boost is greater than the complexity of debugging a handwritten parser, in which case it would be worth it to reimplement it without a regular expression.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-04-10T21:11:36.107+0000",
                    "updated": "2018-04-10T21:11:46.773+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16432996",
                    "id": "16432996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Note that the day where we really care about decimal performance, we should probably use Stefan Krah's libmpdec, which is also used by the Python _decimal module. It's a pure C library, is fast and would probably allow us to have tighter interoperation with Python decimals.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-10T21:12:37.991+0000",
                    "updated": "2018-04-10T21:12:37.991+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433117",
                    "id": "16433117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880\n \n \n   Use a hand-written decimal parser.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T22:53:32.537+0000",
                    "updated": "2018-04-10T22:53:32.537+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433136",
                    "id": "16433136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180591991\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   Why not use iterators instead of a pointer plus size? It seems like we're subverting the language.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T22:59:37.627+0000",
                    "updated": "2018-04-10T22:59:37.627+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433138",
                    "id": "16433138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180592157\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n Review comment:\n   don't need parens here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:00:37.417+0000",
                    "updated": "2018-04-10T23:00:37.417+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433139",
                    "id": "16433139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180592291\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n Review comment:\n   Why not use `std::isdigit` for this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:01:20.880+0000",
                    "updated": "2018-04-10T23:01:20.880+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433145",
                    "id": "16433145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180592574\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n+  size_t pos = 0;\n \n-    if (scale != nullptr) {\n-      *scale = 0;\n+  if (size == 0) {\n+    return false;\n+  }\n+  // Sign of the number\n+  if (IsSign(s[pos])) {\n+    out->sign = std::string(s + pos, 1);\n+    ++pos;\n+  }\n+  // First run of digits\n+  pos = ParseDigitsRun(s, pos, size, &out->whole_digits);\n+  if (pos == size) {\n+    return !out->whole_digits.empty();\n+  }\n+  // Optional dot (if given in fractional form)\n+  bool has_dot = IsDot(s[pos]);\n+  if (has_dot) {\n+    // Second run of digits\n+    ++pos;\n+    pos = ParseDigitsRun(s, pos, size, &out->fractional_digits);\n+  }\n+  if (out->whole_digits.empty() && out->fractional_digits.empty()) {\n+    // Need at least some digits (whole or fractional)\n+    return false;\n+  }\n+  if (pos == size) {\n+    return true;\n+  }\n+  // Optional exponent\n+  if (StartsExponent(s[pos])) {\n+    ++pos;\n+    if (pos == size) {\n+      return false;\n+    }\n+    // Optional exponent sign\n+    if (IsSign(s[pos])) {\n+      out->exponent_sign = std::string(s + pos, 1);\n+      ++pos;\n+    }\n+    pos = ParseDigitsRun(s, pos, size, &out->exponent_digits);\n+    if (out->exponent_digits.empty()) {\n+      // Need some exponent digits\n+      return false;\n     }\n-\n-    *out = 0;\n-    return Status::OK();\n   }\n+  return pos == size;\n+}\n \n-  boost::smatch results;\n-  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+}  // namespace\n \n-  if (!matches) {\n-    std::stringstream ss;\n-    ss << \"The string \" << s << \" is not a valid decimal number\";\n-    return Status::Invalid(ss.str());\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n   }\n \n-  const std::string sign = results[\"SIGN\"];\n-  const std::string integer = results[\"INTEGER\"];\n-\n-  const std::string left_digits = results[\"LEFT_DIGITS\"];\n-  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n-\n-  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n-\n-  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n-  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n-\n-  std::string whole_part;\n-  std::string fractional_part;\n-  std::string exponent_value;\n-\n-  if (!integer.empty()) {\n-    whole_part = integer;\n-  } else if (!left_digits.empty()) {\n-    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n-    whole_part = left_digits;\n-    fractional_part = first_right_digits;\n-  } else {\n-    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n-    fractional_part = second_right_digits;\n+  DecimalComponents dec;\n+  if (!ParseDecimalComponents(s.data(), s.size(), &dec)) {\n+    std::stringstream ss;\n+    ss << \"The string '\" << s << \"' is not a valid decimal number\";\n+    return Status::Invalid(ss.str());\n   }\n+  std::string exponent_value = dec.exponent_sign + dec.exponent_digits;\n \n-  // skip leading zeros before the decimal point\n-  std::string::const_iterator without_leading_zeros =\n-      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n-  whole_part = std::string(without_leading_zeros, whole_part.cend());\n-\n-  if (!first_exp_value.empty()) {\n-    exponent_value = first_exp_value;\n-  } else {\n-    exponent_value = second_exp_value;\n+  // Count number of significant digits (without leading zeros)\n+  size_t first_non_zero = dec.whole_digits.find_first_not_of('0');\n+  size_t significant_digits = dec.fractional_digits.size();\n+  if (first_non_zero != std::string::npos) {\n+    significant_digits += dec.whole_digits.size() - first_non_zero;\n   }\n \n   if (precision != nullptr) {\n-    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(significant_digits);\n   }\n \n   if (scale != nullptr) {\n     if (!exponent_value.empty()) {\n       auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n-      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+      auto len = static_cast<int32_t>(significant_digits);\n       *scale = -adjusted_exponent + len - 1;\n     } else {\n-      *scale = static_cast<int32_t>(fractional_part.size());\n+      *scale = static_cast<int32_t>(dec.fractional_digits.size());\n     }\n   }\n \n   if (out != nullptr) {\n     *out = 0;\n-    StringToInteger(whole_part + fractional_part, out);\n-    if (sign == \"-\") {\n+    StringToInteger(dec.whole_digits + dec.fractional_digits, out);\n+    if (dec.sign == \"-\") {\n       out->Negate();\n     }\n \n     if (scale != nullptr && *scale < 0) {\n-      const int32_t abs_scale = std::abs(*scale);\n+      const auto abs_scale = std::abs(*scale);\n \n Review comment:\n   This does violate our usual type-must-exist-somewhere-in-the-left-or-right-hand-size rule, but I'm not against it here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:02:46.318+0000",
                    "updated": "2018-04-10T23:02:46.318+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433146",
                    "id": "16433146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180592739\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   I find it much readable like that. I don't know what \"subverting the language\" means.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:03:48.584+0000",
                    "updated": "2018-04-10T23:03:48.584+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433147",
                    "id": "16433147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180592851\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n Review comment:\n   I was too lazy to look it up :-) Will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:04:26.827+0000",
                    "updated": "2018-04-10T23:04:26.827+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433150",
                    "id": "16433150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180593109\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n+  size_t pos = 0;\n \n-    if (scale != nullptr) {\n-      *scale = 0;\n+  if (size == 0) {\n+    return false;\n+  }\n+  // Sign of the number\n+  if (IsSign(s[pos])) {\n+    out->sign = std::string(s + pos, 1);\n+    ++pos;\n+  }\n+  // First run of digits\n+  pos = ParseDigitsRun(s, pos, size, &out->whole_digits);\n+  if (pos == size) {\n+    return !out->whole_digits.empty();\n+  }\n+  // Optional dot (if given in fractional form)\n+  bool has_dot = IsDot(s[pos]);\n+  if (has_dot) {\n+    // Second run of digits\n+    ++pos;\n+    pos = ParseDigitsRun(s, pos, size, &out->fractional_digits);\n+  }\n+  if (out->whole_digits.empty() && out->fractional_digits.empty()) {\n+    // Need at least some digits (whole or fractional)\n+    return false;\n+  }\n+  if (pos == size) {\n+    return true;\n+  }\n+  // Optional exponent\n+  if (StartsExponent(s[pos])) {\n+    ++pos;\n+    if (pos == size) {\n+      return false;\n+    }\n+    // Optional exponent sign\n+    if (IsSign(s[pos])) {\n+      out->exponent_sign = std::string(s + pos, 1);\n+      ++pos;\n+    }\n+    pos = ParseDigitsRun(s, pos, size, &out->exponent_digits);\n+    if (out->exponent_digits.empty()) {\n+      // Need some exponent digits\n+      return false;\n     }\n-\n-    *out = 0;\n-    return Status::OK();\n   }\n+  return pos == size;\n+}\n \n-  boost::smatch results;\n-  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+}  // namespace\n \n-  if (!matches) {\n-    std::stringstream ss;\n-    ss << \"The string \" << s << \" is not a valid decimal number\";\n-    return Status::Invalid(ss.str());\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n   }\n \n-  const std::string sign = results[\"SIGN\"];\n-  const std::string integer = results[\"INTEGER\"];\n-\n-  const std::string left_digits = results[\"LEFT_DIGITS\"];\n-  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n-\n-  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n-\n-  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n-  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n-\n-  std::string whole_part;\n-  std::string fractional_part;\n-  std::string exponent_value;\n-\n-  if (!integer.empty()) {\n-    whole_part = integer;\n-  } else if (!left_digits.empty()) {\n-    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n-    whole_part = left_digits;\n-    fractional_part = first_right_digits;\n-  } else {\n-    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n-    fractional_part = second_right_digits;\n+  DecimalComponents dec;\n+  if (!ParseDecimalComponents(s.data(), s.size(), &dec)) {\n+    std::stringstream ss;\n+    ss << \"The string '\" << s << \"' is not a valid decimal number\";\n+    return Status::Invalid(ss.str());\n   }\n+  std::string exponent_value = dec.exponent_sign + dec.exponent_digits;\n \n-  // skip leading zeros before the decimal point\n-  std::string::const_iterator without_leading_zeros =\n-      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n-  whole_part = std::string(without_leading_zeros, whole_part.cend());\n-\n-  if (!first_exp_value.empty()) {\n-    exponent_value = first_exp_value;\n-  } else {\n-    exponent_value = second_exp_value;\n+  // Count number of significant digits (without leading zeros)\n+  size_t first_non_zero = dec.whole_digits.find_first_not_of('0');\n+  size_t significant_digits = dec.fractional_digits.size();\n+  if (first_non_zero != std::string::npos) {\n+    significant_digits += dec.whole_digits.size() - first_non_zero;\n   }\n \n   if (precision != nullptr) {\n-    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(significant_digits);\n   }\n \n   if (scale != nullptr) {\n     if (!exponent_value.empty()) {\n       auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n-      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+      auto len = static_cast<int32_t>(significant_digits);\n       *scale = -adjusted_exponent + len - 1;\n     } else {\n-      *scale = static_cast<int32_t>(fractional_part.size());\n+      *scale = static_cast<int32_t>(dec.fractional_digits.size());\n     }\n   }\n \n   if (out != nullptr) {\n     *out = 0;\n-    StringToInteger(whole_part + fractional_part, out);\n-    if (sign == \"-\") {\n+    StringToInteger(dec.whole_digits + dec.fractional_digits, out);\n+    if (dec.sign == \"-\") {\n       out->Negate();\n     }\n \n     if (scale != nullptr && *scale < 0) {\n-      const int32_t abs_scale = std::abs(*scale);\n+      const auto abs_scale = std::abs(*scale);\n \n Review comment:\n   Hmm, I see a large number of occurrences of \"auto\" without a type on the right hand side when grepping through `cpp/src/arrow`. That rule doesn't seem very well upholded ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:06:08.771+0000",
                    "updated": "2018-04-10T23:06:08.771+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433154",
                    "id": "16433154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180593708\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   Oh, I just mean that iterators abstract over pointer arithmetic and are built into the STL. It feels like C as opposed to C++, that's all.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:09:22.782+0000",
                    "updated": "2018-04-10T23:09:22.782+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433155",
                    "id": "16433155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180593829\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   I'll try an iterator version tomorrow and see if I like it better. It's a bit late tonight ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:10:06.809+0000",
                    "updated": "2018-04-10T23:10:06.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433158",
                    "id": "16433158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180594140\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n+  size_t pos = 0;\n \n-    if (scale != nullptr) {\n-      *scale = 0;\n+  if (size == 0) {\n+    return false;\n+  }\n+  // Sign of the number\n+  if (IsSign(s[pos])) {\n+    out->sign = std::string(s + pos, 1);\n+    ++pos;\n+  }\n+  // First run of digits\n+  pos = ParseDigitsRun(s, pos, size, &out->whole_digits);\n+  if (pos == size) {\n+    return !out->whole_digits.empty();\n+  }\n+  // Optional dot (if given in fractional form)\n+  bool has_dot = IsDot(s[pos]);\n+  if (has_dot) {\n+    // Second run of digits\n+    ++pos;\n+    pos = ParseDigitsRun(s, pos, size, &out->fractional_digits);\n+  }\n+  if (out->whole_digits.empty() && out->fractional_digits.empty()) {\n+    // Need at least some digits (whole or fractional)\n+    return false;\n+  }\n+  if (pos == size) {\n+    return true;\n+  }\n+  // Optional exponent\n+  if (StartsExponent(s[pos])) {\n+    ++pos;\n+    if (pos == size) {\n+      return false;\n+    }\n+    // Optional exponent sign\n+    if (IsSign(s[pos])) {\n+      out->exponent_sign = std::string(s + pos, 1);\n+      ++pos;\n+    }\n+    pos = ParseDigitsRun(s, pos, size, &out->exponent_digits);\n+    if (out->exponent_digits.empty()) {\n+      // Need some exponent digits\n+      return false;\n     }\n-\n-    *out = 0;\n-    return Status::OK();\n   }\n+  return pos == size;\n+}\n \n-  boost::smatch results;\n-  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+}  // namespace\n \n-  if (!matches) {\n-    std::stringstream ss;\n-    ss << \"The string \" << s << \" is not a valid decimal number\";\n-    return Status::Invalid(ss.str());\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n   }\n \n-  const std::string sign = results[\"SIGN\"];\n-  const std::string integer = results[\"INTEGER\"];\n-\n-  const std::string left_digits = results[\"LEFT_DIGITS\"];\n-  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n-\n-  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n-\n-  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n-  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n-\n-  std::string whole_part;\n-  std::string fractional_part;\n-  std::string exponent_value;\n-\n-  if (!integer.empty()) {\n-    whole_part = integer;\n-  } else if (!left_digits.empty()) {\n-    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n-    whole_part = left_digits;\n-    fractional_part = first_right_digits;\n-  } else {\n-    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n-    fractional_part = second_right_digits;\n+  DecimalComponents dec;\n+  if (!ParseDecimalComponents(s.data(), s.size(), &dec)) {\n+    std::stringstream ss;\n+    ss << \"The string '\" << s << \"' is not a valid decimal number\";\n+    return Status::Invalid(ss.str());\n   }\n+  std::string exponent_value = dec.exponent_sign + dec.exponent_digits;\n \n-  // skip leading zeros before the decimal point\n-  std::string::const_iterator without_leading_zeros =\n-      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n-  whole_part = std::string(without_leading_zeros, whole_part.cend());\n-\n-  if (!first_exp_value.empty()) {\n-    exponent_value = first_exp_value;\n-  } else {\n-    exponent_value = second_exp_value;\n+  // Count number of significant digits (without leading zeros)\n+  size_t first_non_zero = dec.whole_digits.find_first_not_of('0');\n+  size_t significant_digits = dec.fractional_digits.size();\n+  if (first_non_zero != std::string::npos) {\n+    significant_digits += dec.whole_digits.size() - first_non_zero;\n   }\n \n   if (precision != nullptr) {\n-    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(significant_digits);\n   }\n \n   if (scale != nullptr) {\n     if (!exponent_value.empty()) {\n       auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n-      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+      auto len = static_cast<int32_t>(significant_digits);\n       *scale = -adjusted_exponent + len - 1;\n     } else {\n-      *scale = static_cast<int32_t>(fractional_part.size());\n+      *scale = static_cast<int32_t>(dec.fractional_digits.size());\n     }\n   }\n \n   if (out != nullptr) {\n     *out = 0;\n-    StringToInteger(whole_part + fractional_part, out);\n-    if (sign == \"-\") {\n+    StringToInteger(dec.whole_digits + dec.fractional_digits, out);\n+    if (dec.sign == \"-\") {\n       out->Negate();\n     }\n \n     if (scale != nullptr && *scale < 0) {\n-      const int32_t abs_scale = std::abs(*scale);\n+      const auto abs_scale = std::abs(*scale);\n \n Review comment:\n   I wonder if there's a way to easily enforce that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:11:55.318+0000",
                    "updated": "2018-04-10T23:11:55.318+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433160",
                    "id": "16433160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180594466\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   By no means should you feel obliged to do that extra work :) If this works, then that's great. I thought maybe you had chosen not to use iterators for a particular reason.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:14:13.136+0000",
                    "updated": "2018-04-10T23:14:13.136+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433170",
                    "id": "16433170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380277704\n \n \n   By the way, I don't know if it's ok to remove boost-regex references from the Python build files, since parquet still requires boost-regex AFAIR.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:20:23.284+0000",
                    "updated": "2018-04-10T23:20:23.284+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433174",
                    "id": "16433174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380278313\n \n \n   Another note: the new implementation should support exponents without a sign, e.g. \"1.23e45\". The Python decimal module also does this. I need to add tests, though.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:24:07.021+0000",
                    "updated": "2018-04-10T23:24:07.021+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433175",
                    "id": "16433175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380278461\n \n \n   I think the current version supports that, does it not? I remember adding that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:25:02.650+0000",
                    "updated": "2018-04-10T23:25:02.650+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433176",
                    "id": "16433176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380278524\n \n \n   I may be misunderstand the usage of \"should\" here :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:25:16.679+0000",
                    "updated": "2018-04-10T23:25:16.679+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433178",
                    "id": "16433178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380278645\n \n \n   > By the way, I don't know if it's ok to remove boost-regex references from the Python build files, since parquet still requires boost-regex AFAIR.\r\n   \r\n   @xhochy Can you comment on this?\r\n   \r\n   I would think it's okay to remove them if they weren't there before the PR that introduced boost-regex.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:25:57.823+0000",
                    "updated": "2018-04-10T23:25:57.823+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433180",
                    "id": "16433180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380278833\n \n \n   Oh, you're right, I had misread the regex (it has `[-+]?` for the exponent part). The behaviour is unchanged then.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:27:04.374+0000",
                    "updated": "2018-04-10T23:27:04.374+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433182",
                    "id": "16433182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380279472\n \n \n   > I would think it's okay to remove them if they weren't there before the PR that introduced boost-regex.\r\n   \r\n   It seems the boost-regex references in the Python build files were introduced specifically for parquet: see cb5da9c1 and 8b1c8118.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-10T23:30:51.794+0000",
                    "updated": "2018-04-10T23:30:51.794+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433659",
                    "id": "16433659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: [WIP] ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180698163\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   I've decided against this. Not only would it be slightly less readable and more annoying to type, but the day we have a string view or span, the current solution adapts seamlessly. The \"abstracted\" variant OTOH is less abstracted from that point of view.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T09:56:08.792+0000",
                    "updated": "2018-04-11T09:56:08.792+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433683",
                    "id": "16433683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380401339\n \n \n   Reverted the `std::isdigit` change because of a silly performance warning (turned into an error) on MSVC. It's not like `isdigit` is more readable anyway, and apparently it risks being locale-dependent on Windows (which is a can of worms).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T10:14:25.219+0000",
                    "updated": "2018-04-11T10:14:25.219+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433867",
                    "id": "16433867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380439980\n \n \n   This PR reduces conversion time for decimals from Python to Arrow by ~45%:\r\n   * before:\r\n   ```\r\n   [100.00%] \u00b7\u00b7\u00b7 Running convert_builtins.ConvertPyListToArray.time_convert                                                                                   ok\r\n   [100.00%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ==================== =============\r\n                          type                      \r\n                  -------------------- -------------\r\n                        decimal          177\u00b10.06ms \r\n                  ==================== =============\r\n   ```\r\n   \r\n   * after:\r\n   ```\r\n   [100.00%] \u00b7\u00b7\u00b7 Running convert_builtins.ConvertPyListToArray.time_convert                                                                                   ok\r\n   [100.00%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ==================== =============\r\n                          type                      \r\n                  -------------------- -------------\r\n                        decimal          101\u00b10.5ms  \r\n                  ==================== =============\r\n   ```\r\n   \r\n   (irrelevant lines removed)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T12:49:56.961+0000",
                    "updated": "2018-04-11T12:49:56.961+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433888",
                    "id": "16433888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380443938\n \n \n   Also adding a Decimal::FromString benchmark. That benchmark is 60% faster with the PR (1.8M items/second up from 700k items/second here).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T13:03:39.039+0000",
                    "updated": "2018-04-11T13:03:39.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433941",
                    "id": "16433941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180761749\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   I don't follow how a `view`/`span` class is less abstracted, since that would presumably implement the c++ iterator interface, like every implementation of it usually does. However, as I said, I don't think this is really worth spending too much time on.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T13:54:10.980+0000",
                    "updated": "2018-04-11T13:54:10.980+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433942",
                    "id": "16433942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380460395\n \n \n   @pitrou Sweet. Thanks for doing this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T13:54:53.756+0000",
                    "updated": "2018-04-11T13:54:53.756+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433951",
                    "id": "16433951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#discussion_r180765500\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -253,117 +251,131 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return (c == '-' || c == '+'); }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return (c >= '0' && c <= '9'); }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return (c == 'e' || c == 'E'); }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n \n Review comment:\n   I mean if the parse function is taking a `string::const_iterator`, it maybe won't accept a different kind of iterator. Or we need to make it a template function, piling more layers of abstraction without any concrete advantage.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T14:04:35.116+0000",
                    "updated": "2018-04-11T14:04:35.116+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433952",
                    "id": "16433952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380464015\n \n \n   > It's not like isdigit is more readable anyway\r\n   \r\n   Readability wasn't my original concern, reimplementing a builtin function was.\r\n   \r\n   > and apparently it risks being locale-dependent on Windows (which is a can of worms).\r\n   \r\n   Is there some documentation on this somewhere? I found the following lines in the [`setlocale` documentation for Visual Studio 2015](https://msdn.microsoft.com/en-us/library/x99tb11d.aspx):\r\n   \r\n   > LC_CTYPE\r\n   The character-handling functions (except isdigit, isxdigit, mbstowcs, and mbtowc, which are unaffected).\r\n   \r\n   That suggests `isdigit` is *not* affected by locale. Am I reading something wrong?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T14:05:00.568+0000",
                    "updated": "2018-04-11T14:05:00.568+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433957",
                    "id": "16433957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380464846\n \n \n   I took it from here:\r\n   > isdigit and isxdigit are the only standard narrow character classification functions that are not affected by the currently installed C locale. although some implementations (e.g. Microsoft in 1252 codepage) may classify additional single-byte characters as digits. \r\n   \r\n   http://en.cppreference.com/w/cpp/string/byte/isdigit\r\n   \r\n   Not sure how authoritative that page is.\r\n   \r\n   That said, `static_cast<bool>(std::isdigit(c))` is not very pretty.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T14:07:22.211+0000",
                    "updated": "2018-04-11T14:07:22.211+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16433962",
                    "id": "16433962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380465437\n \n \n   Fair enough.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T14:08:59.490+0000",
                    "updated": "2018-04-11T14:08:59.490+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16434078",
                    "id": "16434078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880#issuecomment-380497242\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.291\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T15:36:55.759+0000",
                    "updated": "2018-04-11T15:36:55.759+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16434099",
                    "id": "16434099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 1880\n[https://github.com/apache/arrow/pull/1880]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-11T15:54:15.489+0000",
                    "updated": "2018-04-11T15:54:15.489+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141074/comment/16434100",
                    "id": "16434100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou closed pull request #1880: ARROW-2224: [C++] Remove boost-regex dependency\nURL: https://github.com/apache/arrow/pull/1880\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/README.md b/cpp/README.md\nindex 8018efd9e..daeeade72 100644\n--- a/cpp/README.md\n+++ b/cpp/README.md\n@@ -35,7 +35,6 @@ On Ubuntu/Debian you can install the requirements with:\n ```shell\n sudo apt-get install cmake \\\n      libboost-dev \\\n-     libboost-regex-dev \\\n      libboost-filesystem-dev \\\n      libboost-system-dev\n ```\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex 129174c8d..020e0ed44 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -157,11 +157,8 @@ if (ARROW_BOOST_VENDORED)\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_system${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_STATIC_FILESYSTEM_LIBRARY\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_filesystem${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n-  set(BOOST_STATIC_REGEX_LIBRARY\n-    \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_regex${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_SYSTEM_LIBRARY \"${BOOST_STATIC_SYSTEM_LIBRARY}\")\n   set(BOOST_FILESYSTEM_LIBRARY \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\")\n-  set(BOOST_REGEX_LIBRARY \"${BOOST_STATIC_REGEX_LIBRARY}\")\n   if (ARROW_BOOST_HEADER_ONLY)\n     set(BOOST_BUILD_PRODUCTS)\n     set(BOOST_CONFIGURE_COMMAND \"\")\n@@ -169,12 +166,11 @@ if (ARROW_BOOST_VENDORED)\n   else()\n     set(BOOST_BUILD_PRODUCTS\n       ${BOOST_SYSTEM_LIBRARY}\n-      ${BOOST_FILESYSTEM_LIBRARY}\n-      ${BOOST_REGEX_LIBRARY})\n+      ${BOOST_FILESYSTEM_LIBRARY})\n     set(BOOST_CONFIGURE_COMMAND\n       \"./bootstrap.sh\"\n       \"--prefix=${BOOST_PREFIX}\"\n-      \"--with-libraries=filesystem,system,regex\")\n+      \"--with-libraries=filesystem,system\")\n     if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n       set(BOOST_BUILD_VARIANT \"debug\")\n     else()\n@@ -214,19 +210,16 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n-        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n-        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_shared)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_shared)\n-      set(BOOST_REGEX_LIBRARY boost_regex_shared)\n     endif()\n   else()\n     # Find static boost headers and libs\n@@ -235,19 +228,16 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n-        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n-        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_static)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_static)\n-      set(BOOST_REGEX_LIBRARY boost_regex_static)\n     endif()\n   endif()\n endif()\n@@ -264,11 +254,7 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n       STATIC_LIB \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\"\n       SHARED_LIB \"${BOOST_SHARED_FILESYSTEM_LIBRARY}\")\n \n-  ADD_THIRDPARTY_LIB(boost_regex\n-      STATIC_LIB \"${BOOST_STATIC_REGEX_LIBRARY}\"\n-      SHARED_LIB \"${BOOST_SHARED_REGEX_LIBRARY}\")\n-\n-  SET(ARROW_BOOST_LIBS boost_system boost_filesystem boost_regex)\n+  SET(ARROW_BOOST_LIBS boost_system boost_filesystem)\n endif()\n \n include_directories(SYSTEM ${Boost_INCLUDE_DIR})\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 41c27a58f..896952705 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -60,5 +60,6 @@ ADD_ARROW_TEST(rle-encoding-test)\n ADD_ARROW_TEST(stl-util-test)\n \n ADD_ARROW_BENCHMARK(bit-util-benchmark)\n+ADD_ARROW_BENCHMARK(decimal-benchmark)\n \n add_subdirectory(variant)\ndiff --git a/cpp/src/arrow/util/decimal-benchmark.cc b/cpp/src/arrow/util/decimal-benchmark.cc\nnew file mode 100644\nindex 000000000..3129536cf\n--- /dev/null\n+++ b/cpp/src/arrow/util/decimal-benchmark.cc\n@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace Decimal {\n+\n+static void BM_FromString(benchmark::State& state) {  // NOLINT non-const reference\n+  std::vector<std::string> values = {\"0\", \"1.23\", \"12.345e6\", \"-12.345e-6\"};\n+\n+  while (state.KeepRunning()) {\n+    for (const auto& value : values) {\n+      Decimal128 dec;\n+      int32_t scale, precision;\n+      ARROW_UNUSED(Decimal128::FromString(value, &dec, &scale, &precision));\n+    }\n+  }\n+  state.SetItemsProcessed(state.iterations() * values.size());\n+}\n+\n+BENCHMARK(BM_FromString)->Repetitions(3)->Unit(benchmark::kMicrosecond);\n+\n+}  // namespace Decimal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex 6db46d485..2829e4ae6 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -205,9 +205,7 @@ TEST(DecimalZerosTest, LeadingZerosDecimalPoint) {\n   int32_t precision;\n   int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n-  // We explicitly do not support this for now, otherwise this would be ASSERT_EQ\n   ASSERT_EQ(4, precision);\n-\n   ASSERT_EQ(4, scale);\n   ASSERT_EQ(0, d);\n }\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex 48380a9c9..9e5e3ddb3 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -23,8 +23,6 @@\n #include <limits>\n #include <sstream>\n \n-#include <boost/regex.hpp>\n-\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n@@ -253,112 +251,126 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-static const boost::regex DECIMAL_REGEX(\n-    // sign of the number\n-    \"(?<SIGN>[-+]?)\"\n-\n-    // digits around the decimal point\n-    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n-    \")\"\n+namespace {\n \n-    // optional exponent\n-    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n+struct DecimalComponents {\n+  std::string sign;\n+  std::string whole_digits;\n+  std::string fractional_digits;\n+  std::string exponent_sign;\n+  std::string exponent_digits;\n+};\n \n-    // otherwise\n-    \"|\"\n+inline bool IsSign(char c) { return c == '-' || c == '+'; }\n \n-    // we're just an integer\n-    \"(?<INTEGER>\\\\d+)\"\n+inline bool IsDot(char c) { return c == '.'; }\n \n-    // or an integer with an exponent\n-    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n+inline bool IsDigit(char c) { return c >= '0' && c <= '9'; }\n \n-static inline bool is_zero_character(char c) { return c == '0'; }\n+inline bool StartsExponent(char c) { return c == 'e' || c == 'E'; }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n-                              int32_t* scale) {\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+inline size_t ParseDigitsRun(const char* s, size_t start, size_t size, std::string* out) {\n+  size_t pos;\n+  for (pos = start; pos < size; ++pos) {\n+    if (!IsDigit(s[pos])) {\n+      break;\n+    }\n   }\n+  *out = std::string(s + start, pos - start);\n+  return pos;\n+}\n \n-  // case of all zeros\n-  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n-    if (precision != nullptr) {\n-      *precision = 0;\n-    }\n+bool ParseDecimalComponents(const char* s, size_t size, DecimalComponents* out) {\n+  size_t pos = 0;\n \n-    if (scale != nullptr) {\n-      *scale = 0;\n+  if (size == 0) {\n+    return false;\n+  }\n+  // Sign of the number\n+  if (IsSign(s[pos])) {\n+    out->sign = std::string(s + pos, 1);\n+    ++pos;\n+  }\n+  // First run of digits\n+  pos = ParseDigitsRun(s, pos, size, &out->whole_digits);\n+  if (pos == size) {\n+    return !out->whole_digits.empty();\n+  }\n+  // Optional dot (if given in fractional form)\n+  bool has_dot = IsDot(s[pos]);\n+  if (has_dot) {\n+    // Second run of digits\n+    ++pos;\n+    pos = ParseDigitsRun(s, pos, size, &out->fractional_digits);\n+  }\n+  if (out->whole_digits.empty() && out->fractional_digits.empty()) {\n+    // Need at least some digits (whole or fractional)\n+    return false;\n+  }\n+  if (pos == size) {\n+    return true;\n+  }\n+  // Optional exponent\n+  if (StartsExponent(s[pos])) {\n+    ++pos;\n+    if (pos == size) {\n+      return false;\n+    }\n+    // Optional exponent sign\n+    if (IsSign(s[pos])) {\n+      out->exponent_sign = std::string(s + pos, 1);\n+      ++pos;\n+    }\n+    pos = ParseDigitsRun(s, pos, size, &out->exponent_digits);\n+    if (out->exponent_digits.empty()) {\n+      // Need some exponent digits\n+      return false;\n     }\n-\n-    *out = 0;\n-    return Status::OK();\n   }\n+  return pos == size;\n+}\n \n-  boost::smatch results;\n-  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+}  // namespace\n \n-  if (!matches) {\n-    std::stringstream ss;\n-    ss << \"The string \" << s << \" is not a valid decimal number\";\n-    return Status::Invalid(ss.str());\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n   }\n \n-  const std::string sign = results[\"SIGN\"];\n-  const std::string integer = results[\"INTEGER\"];\n-\n-  const std::string left_digits = results[\"LEFT_DIGITS\"];\n-  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n-\n-  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n-\n-  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n-  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n-\n-  std::string whole_part;\n-  std::string fractional_part;\n-  std::string exponent_value;\n-\n-  if (!integer.empty()) {\n-    whole_part = integer;\n-  } else if (!left_digits.empty()) {\n-    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n-    whole_part = left_digits;\n-    fractional_part = first_right_digits;\n-  } else {\n-    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n-    fractional_part = second_right_digits;\n+  DecimalComponents dec;\n+  if (!ParseDecimalComponents(s.data(), s.size(), &dec)) {\n+    std::stringstream ss;\n+    ss << \"The string '\" << s << \"' is not a valid decimal number\";\n+    return Status::Invalid(ss.str());\n   }\n+  std::string exponent_value = dec.exponent_sign + dec.exponent_digits;\n \n-  // skip leading zeros before the decimal point\n-  std::string::const_iterator without_leading_zeros =\n-      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n-  whole_part = std::string(without_leading_zeros, whole_part.cend());\n-\n-  if (!first_exp_value.empty()) {\n-    exponent_value = first_exp_value;\n-  } else {\n-    exponent_value = second_exp_value;\n+  // Count number of significant digits (without leading zeros)\n+  size_t first_non_zero = dec.whole_digits.find_first_not_of('0');\n+  size_t significant_digits = dec.fractional_digits.size();\n+  if (first_non_zero != std::string::npos) {\n+    significant_digits += dec.whole_digits.size() - first_non_zero;\n   }\n \n   if (precision != nullptr) {\n-    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(significant_digits);\n   }\n \n   if (scale != nullptr) {\n     if (!exponent_value.empty()) {\n       auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n-      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+      auto len = static_cast<int32_t>(significant_digits);\n       *scale = -adjusted_exponent + len - 1;\n     } else {\n-      *scale = static_cast<int32_t>(fractional_part.size());\n+      *scale = static_cast<int32_t>(dec.fractional_digits.size());\n     }\n   }\n \n   if (out != nullptr) {\n     *out = 0;\n-    StringToInteger(whole_part + fractional_part, out);\n-    if (sign == \"-\") {\n+    StringToInteger(dec.whole_digits + dec.fractional_digits, out);\n+    if (dec.sign == \"-\") {\n       out->Negate();\n     }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T15:54:17.110+0000",
                    "updated": "2018-04-11T15:54:17.110+0000"
                }
            ],
            "maxResults": 37,
            "total": 37,
            "startAt": 0
        },
        "customfield_12311820": "0|i3qmcv:",
        "customfield_12314139": null
    }
}