{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13202692",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13202692",
    "key": "ARROW-3946",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3946/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13202692/worklog/172570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #3112: ARROW-3946: [GLib] Add support for union\nURL: https://github.com/apache/arrow/pull/3112\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T04:40:20.159+0000",
                    "updated": "2018-12-06T04:40:20.159+0000",
                    "started": "2018-12-06T04:40:20.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172570",
                    "issueId": "13202692"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13202692/worklog/172906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 closed pull request #3112: ARROW-3946: [GLib] Add support for union\nURL: https://github.com/apache/arrow/pull/3112\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/basic-array.cpp b/c_glib/arrow-glib/basic-array.cpp\nindex 77f64fc0a8..47f9a955af 100644\n--- a/c_glib/arrow-glib/basic-array.cpp\n+++ b/c_glib/arrow-glib/basic-array.cpp\n@@ -209,7 +209,9 @@ enum {\n   PROP_ARRAY\n };\n \n-G_DEFINE_TYPE_WITH_PRIVATE(GArrowArray, garrow_array, G_TYPE_OBJECT)\n+G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE(GArrowArray,\n+                                    garrow_array,\n+                                    G_TYPE_OBJECT)\n \n #define GARROW_ARRAY_GET_PRIVATE(obj)         \\\n   static_cast<GArrowArrayPrivate *>(          \\\n@@ -2255,6 +2257,17 @@ garrow_array_new_raw(std::shared_ptr<arrow::Array> *arrow_array)\n   case arrow::Type::type::STRUCT:\n     type = GARROW_TYPE_STRUCT_ARRAY;\n     break;\n+  case arrow::Type::type::UNION:\n+    {\n+      auto arrow_union_array =\n+        std::static_pointer_cast<arrow::UnionArray>(*arrow_array);\n+      if (arrow_union_array->mode() == arrow::UnionMode::SPARSE) {\n+        type = GARROW_TYPE_SPARSE_UNION_ARRAY;\n+      } else {\n+        type = GARROW_TYPE_DENSE_UNION_ARRAY;\n+      }\n+    }\n+    break;\n   case arrow::Type::type::DICTIONARY:\n     type = GARROW_TYPE_DICTIONARY_ARRAY;\n     break;\ndiff --git a/c_glib/arrow-glib/basic-data-type.cpp b/c_glib/arrow-glib/basic-data-type.cpp\nindex 24133c99f4..86b86cfaba 100644\n--- a/c_glib/arrow-glib/basic-data-type.cpp\n+++ b/c_glib/arrow-glib/basic-data-type.cpp\n@@ -1184,6 +1184,17 @@ garrow_data_type_new_raw(std::shared_ptr<arrow::DataType> *arrow_data_type)\n   case arrow::Type::type::STRUCT:\n     type = GARROW_TYPE_STRUCT_DATA_TYPE;\n     break;\n+  case arrow::Type::type::UNION:\n+    {\n+      auto arrow_union_data_type =\n+        std::static_pointer_cast<arrow::UnionType>(*arrow_data_type);\n+      if (arrow_union_data_type->mode() == arrow::UnionMode::SPARSE) {\n+        type = GARROW_TYPE_SPARSE_UNION_DATA_TYPE;\n+      } else {\n+        type = GARROW_TYPE_DENSE_UNION_DATA_TYPE;\n+      }\n+    }\n+    break;\n   case arrow::Type::type::DICTIONARY:\n     type = GARROW_TYPE_DICTIONARY_DATA_TYPE;\n     break;\ndiff --git a/c_glib/arrow-glib/composite-array.cpp b/c_glib/arrow-glib/composite-array.cpp\nindex b040ac72c7..bff1858e85 100644\n--- a/c_glib/arrow-glib/composite-array.cpp\n+++ b/c_glib/arrow-glib/composite-array.cpp\n@@ -41,10 +41,18 @@ G_BEGIN_DECLS\n  * use #GArrowListArrayBuilder to create a new array.\n  *\n  * #GArrowStructArray is a class for struct array. It can store zero\n- * or more structs. One struct has zero or more fields. If you don't\n+ * or more structs. One struct has one or more fields. If you don't\n  * have Arrow format data, you need to use #GArrowStructArrayBuilder\n  * to create a new array.\n  *\n+ * #GArrowUnionArray is a base class for union array. It can store\n+ * zero or more unions. One union has one or more fields but one union\n+ * can store only one field value.\n+ *\n+ * #GArrowDenseUnionArray is a class for dense union array.\n+ *\n+ * #GArrowSparseUnionArray is a class for sparse union array.\n+ *\n  * #GArrowDictionaryArray is a class for dictionary array. It can\n  * store data with dictionary and indices. It's space effective than\n  * normal array when the array has many same values. You can convert a\n@@ -159,7 +167,7 @@ garrow_struct_array_class_init(GArrowStructArrayClass *klass)\n  * garrow_struct_array_new:\n  * @data_type: The data type of the struct.\n  * @length: The number of elements.\n- * @children: (element-type GArrowArray): The arrays for each field\n+ * @fields: (element-type GArrowArray): The arrays for each field\n  *   as #GList of #GArrowArray.\n  * @null_bitmap: (nullable): The bitmap that shows null elements. The\n  *   N-th element is null when the N-th bit is 0, not null otherwise.\n@@ -175,21 +183,21 @@ garrow_struct_array_class_init(GArrowStructArrayClass *klass)\n GArrowStructArray *\n garrow_struct_array_new(GArrowDataType *data_type,\n                         gint64 length,\n-                        GList *children,\n+                        GList *fields,\n                         GArrowBuffer *null_bitmap,\n                         gint64 n_nulls)\n {\n   const auto arrow_data_type = garrow_data_type_get_raw(data_type);\n-  std::vector<std::shared_ptr<arrow::Array>> arrow_children;\n-  for (GList *node = children; node; node = node->next) {\n-    GArrowArray *child = GARROW_ARRAY(node->data);\n-    arrow_children.push_back(garrow_array_get_raw(child));\n+  std::vector<std::shared_ptr<arrow::Array>> arrow_fields;\n+  for (auto node = fields; node; node = node->next) {\n+    auto child = GARROW_ARRAY(node->data);\n+    arrow_fields.push_back(garrow_array_get_raw(child));\n   }\n   const auto arrow_bitmap = garrow_buffer_get_raw(null_bitmap);\n   auto arrow_struct_array =\n     std::make_shared<arrow::StructArray>(arrow_data_type,\n                                          length,\n-                                         arrow_children,\n+                                         arrow_fields,\n                                          arrow_bitmap,\n                                          n_nulls);\n   auto arrow_array =\n@@ -264,6 +272,153 @@ garrow_struct_array_flatten(GArrowStructArray *array, GError **error)\n }\n \n \n+G_DEFINE_TYPE(GArrowUnionArray,\n+              garrow_union_array,\n+              GARROW_TYPE_ARRAY)\n+\n+static void\n+garrow_union_array_init(GArrowUnionArray *object)\n+{\n+}\n+\n+static void\n+garrow_union_array_class_init(GArrowUnionArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_union_array_get_field\n+ * @array: A #GArrowUnionArray.\n+ * @i: The index of the field in the union.\n+ *\n+ * Returns: (nullable) (transfer full): The i-th field values as a\n+ *   #GArrowArray or %NULL on out of range.\n+ */\n+GArrowArray *\n+garrow_union_array_get_field(GArrowUnionArray *array,\n+                             gint i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_union_array =\n+    std::static_pointer_cast<arrow::UnionArray>(arrow_array);\n+  auto n_fields = arrow_array->num_fields();\n+  if (i < 0) {\n+    i += n_fields;\n+  }\n+  if (i < 0) {\n+    return NULL;\n+  }\n+  if (i >= n_fields) {\n+    return NULL;\n+  }\n+  auto arrow_field_array = arrow_union_array->child(i);\n+  return garrow_array_new_raw(&arrow_field_array);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowSparseUnionArray,\n+              garrow_sparse_union_array,\n+              GARROW_TYPE_UNION_ARRAY)\n+\n+static void\n+garrow_sparse_union_array_init(GArrowSparseUnionArray *object)\n+{\n+}\n+\n+static void\n+garrow_sparse_union_array_class_init(GArrowSparseUnionArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_sparse_union_array_new:\n+ * @type_ids: The field type IDs for each value as #GArrowInt8Array.\n+ * @fields: (element-type GArrowArray): The arrays for each field\n+ *   as #GList of #GArrowArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowSparseUnionArray\n+ *   or %NULL on error.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowSparseUnionArray *\n+garrow_sparse_union_array_new(GArrowInt8Array *type_ids,\n+                              GList *fields,\n+                              GError **error)\n+{\n+  auto arrow_type_ids = garrow_array_get_raw(GARROW_ARRAY(type_ids));\n+  std::vector<std::shared_ptr<arrow::Array>> arrow_fields;\n+  for (auto node = fields; node; node = node->next) {\n+    auto *field = GARROW_ARRAY(node->data);\n+    arrow_fields.push_back(garrow_array_get_raw(field));\n+  }\n+  std::shared_ptr<arrow::Array> arrow_union_array;\n+  auto status = arrow::UnionArray::MakeSparse(*arrow_type_ids,\n+                                              arrow_fields,\n+                                              &arrow_union_array);\n+  if (garrow_error_check(error, status, \"[sparse-union-array][new]\")) {\n+    return GARROW_SPARSE_UNION_ARRAY(garrow_array_new_raw(&arrow_union_array));\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDenseUnionArray,\n+              garrow_dense_union_array,\n+              GARROW_TYPE_UNION_ARRAY)\n+\n+static void\n+garrow_dense_union_array_init(GArrowDenseUnionArray *object)\n+{\n+}\n+\n+static void\n+garrow_dense_union_array_class_init(GArrowDenseUnionArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dense_union_array_new:\n+ * @type_ids: The field type IDs for each value as #GArrowInt8Array.\n+ * @value_offsets: The value offsets for each value as #GArrowInt32Array.\n+ *   Each offset is counted for each type.\n+ * @fields: (element-type GArrowArray): The arrays for each field\n+ *   as #GList of #GArrowArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowDenseUnionArray\n+ *   or %NULL on error.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowDenseUnionArray *\n+garrow_dense_union_array_new(GArrowInt8Array *type_ids,\n+                             GArrowInt32Array *value_offsets,\n+                             GList *fields,\n+                             GError **error)\n+{\n+  auto arrow_type_ids = garrow_array_get_raw(GARROW_ARRAY(type_ids));\n+  auto arrow_value_offsets = garrow_array_get_raw(GARROW_ARRAY(value_offsets));\n+  std::vector<std::shared_ptr<arrow::Array>> arrow_fields;\n+  for (auto node = fields; node; node = node->next) {\n+    auto *field = GARROW_ARRAY(node->data);\n+    arrow_fields.push_back(garrow_array_get_raw(field));\n+  }\n+  std::shared_ptr<arrow::Array> arrow_union_array;\n+  auto status = arrow::UnionArray::MakeDense(*arrow_type_ids,\n+                                             *arrow_value_offsets,\n+                                             arrow_fields,\n+                                             &arrow_union_array);\n+  if (garrow_error_check(error, status, \"[dense-union-array][new]\")) {\n+    return GARROW_DENSE_UNION_ARRAY(garrow_array_new_raw(&arrow_union_array));\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+\n G_DEFINE_TYPE(GArrowDictionaryArray,\n               garrow_dictionary_array,\n               GARROW_TYPE_ARRAY)\ndiff --git a/c_glib/arrow-glib/composite-array.h b/c_glib/arrow-glib/composite-array.h\nindex ad6ad53ff9..c634dbfc3b 100644\n--- a/c_glib/arrow-glib/composite-array.h\n+++ b/c_glib/arrow-glib/composite-array.h\n@@ -123,7 +123,7 @@ GType garrow_struct_array_get_type(void) G_GNUC_CONST;\n \n GArrowStructArray *garrow_struct_array_new(GArrowDataType *data_type,\n                                            gint64 length,\n-                                           GList *children,\n+                                           GList *fields,\n                                            GArrowBuffer *null_bitmap,\n                                            gint64 n_nulls);\n \n@@ -137,6 +137,56 @@ GARROW_AVAILABLE_IN_0_10\n GList *garrow_struct_array_flatten(GArrowStructArray *array, GError **error);\n \n \n+#define GARROW_TYPE_UNION_ARRAY (garrow_union_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUnionArray,\n+                         garrow_union_array,\n+                         GARROW,\n+                         UNION_ARRAY,\n+                         GArrowArray)\n+struct _GArrowUnionArrayClass\n+{\n+  GArrowArrayClass parent_class;\n+};\n+\n+GArrowArray *\n+garrow_union_array_get_field(GArrowUnionArray *array,\n+                             gint i);\n+\n+#define GARROW_TYPE_SPARSE_UNION_ARRAY (garrow_sparse_union_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowSparseUnionArray,\n+                         garrow_sparse_union_array,\n+                         GARROW,\n+                         SPARSE_UNION_ARRAY,\n+                         GArrowUnionArray)\n+struct _GArrowSparseUnionArrayClass\n+{\n+  GArrowUnionArrayClass parent_class;\n+};\n+\n+GArrowSparseUnionArray *\n+garrow_sparse_union_array_new(GArrowInt8Array *type_ids,\n+                              GList *fields,\n+                              GError **error);\n+\n+\n+#define GARROW_TYPE_DENSE_UNION_ARRAY (garrow_dense_union_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDenseUnionArray,\n+                         garrow_dense_union_array,\n+                         GARROW,\n+                         DENSE_UNION_ARRAY,\n+                         GArrowUnionArray)\n+struct _GArrowDenseUnionArrayClass\n+{\n+  GArrowUnionArrayClass parent_class;\n+};\n+\n+GArrowDenseUnionArray *\n+garrow_dense_union_array_new(GArrowInt8Array *type_ids,\n+                             GArrowInt32Array *value_offsets,\n+                             GList *fields,\n+                             GError **error);\n+\n+\n #define GARROW_TYPE_DICTIONARY_ARRAY (garrow_dictionary_array_get_type())\n G_DECLARE_DERIVABLE_TYPE(GArrowDictionaryArray,\n                          garrow_dictionary_array,\ndiff --git a/c_glib/arrow-glib/composite-data-type.cpp b/c_glib/arrow-glib/composite-data-type.cpp\nindex 2645bead40..a4d3d84361 100644\n--- a/c_glib/arrow-glib/composite-data-type.cpp\n+++ b/c_glib/arrow-glib/composite-data-type.cpp\n@@ -40,6 +40,12 @@ G_BEGIN_DECLS\n  *\n  * #GArrowStructDataType is a class for struct data type.\n  *\n+ * #GArrowUnionDataType is a base class for union data types.\n+ *\n+ * #GArrowSparseUnionDataType is a class for sparse union data type.\n+ *\n+ * #GArrowDenseUnionDataType is a class for dense union data type.\n+ *\n  * #GArrowDictionaryDataType is a class for dictionary data type.\n  */\n \n@@ -122,18 +128,17 @@ GArrowStructDataType *\n garrow_struct_data_type_new(GList *fields)\n {\n   std::vector<std::shared_ptr<arrow::Field>> arrow_fields;\n-  for (GList *node = fields; node; node = g_list_next(node)) {\n+  for (auto *node = fields; node; node = g_list_next(node)) {\n     auto field = GARROW_FIELD(node->data);\n     auto arrow_field = garrow_field_get_raw(field);\n     arrow_fields.push_back(arrow_field);\n   }\n \n   auto arrow_data_type = std::make_shared<arrow::StructType>(arrow_fields);\n-  GArrowStructDataType *data_type =\n-    GARROW_STRUCT_DATA_TYPE(g_object_new(GARROW_TYPE_STRUCT_DATA_TYPE,\n-                                         \"data-type\", &arrow_data_type,\n-                                         NULL));\n-  return data_type;\n+  auto data_type = g_object_new(GARROW_TYPE_STRUCT_DATA_TYPE,\n+                                \"data-type\", &arrow_data_type,\n+                                NULL);\n+  return GARROW_STRUCT_DATA_TYPE(data_type);\n }\n \n /**\n@@ -189,9 +194,12 @@ garrow_struct_data_type_get_field(GArrowStructDataType *data_type,\n {\n   auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n \n-  while (i < 0) {\n+  if (i < 0) {\n     i += arrow_data_type->num_children();\n   }\n+  if (i < 0) {\n+    return NULL;\n+  }\n   if (i >= arrow_data_type->num_children()) {\n     return NULL;\n   }\n@@ -252,6 +260,222 @@ garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n }\n \n \n+G_DEFINE_ABSTRACT_TYPE(GArrowUnionDataType,\n+                       garrow_union_data_type,\n+                       GARROW_TYPE_DATA_TYPE)\n+\n+static void\n+garrow_union_data_type_init(GArrowUnionDataType *object)\n+{\n+}\n+\n+static void\n+garrow_union_data_type_class_init(GArrowUnionDataTypeClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_union_data_type_get_n_fields:\n+ * @data_type: A #GArrowUnionDataType.\n+ *\n+ * Returns: The number of fields of the union data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_union_data_type_get_n_fields(GArrowUnionDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  return arrow_data_type->num_children();\n+}\n+\n+/**\n+ * garrow_union_data_type_get_fields:\n+ * @data_type: A #GArrowUnionDataType.\n+ *\n+ * Returns: (transfer full) (element-type GArrowField):\n+ *   The fields of the union data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+GList *\n+garrow_union_data_type_get_fields(GArrowUnionDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_fields = arrow_data_type->children();\n+\n+  GList *fields = NULL;\n+  for (auto arrow_field : arrow_fields) {\n+    fields = g_list_prepend(fields, garrow_field_new_raw(&arrow_field));\n+  }\n+  return g_list_reverse(fields);\n+}\n+\n+/**\n+ * garrow_union_data_type_get_field:\n+ * @data_type: A #GArrowUnionDataType.\n+ * @i: The index of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field at the index in the union data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_union_data_type_get_field(GArrowUnionDataType *data_type,\n+                                  gint i)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+\n+  if (i < 0) {\n+    i += arrow_data_type->num_children();\n+  }\n+  if (i < 0) {\n+    return NULL;\n+  }\n+  if (i >= arrow_data_type->num_children()) {\n+    return NULL;\n+  }\n+\n+  auto arrow_field = arrow_data_type->child(i);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_union_data_type_get_type_codes:\n+ * @data_type: A #GArrowUnionDataType.\n+ * @n_type_codes: (out): The number of type codes.\n+ *\n+ * Returns: (transfer full) (array length=n_type_codes):\n+ *   The codes for each field.\n+ *\n+ *   It should be freed with g_free() when no longer needed.\n+ *\n+ * Since: 0.12.0\n+ */\n+guint8 *\n+garrow_union_data_type_get_type_codes(GArrowUnionDataType *data_type,\n+                                      gsize *n_type_codes)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_union_data_type =\n+    std::static_pointer_cast<arrow::UnionType>(arrow_data_type);\n+\n+  const auto arrow_type_codes = arrow_union_data_type->type_codes();\n+  const auto n = arrow_type_codes.size();\n+  auto type_codes = static_cast<guint8 *>(g_new(guint8, n));\n+  for (size_t i = 0; i < n; ++i) {\n+    type_codes[i] = arrow_type_codes[i];\n+  }\n+  *n_type_codes = n;\n+  return type_codes;\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowSparseUnionDataType,\n+              garrow_sparse_union_data_type,\n+              GARROW_TYPE_UNION_DATA_TYPE)\n+\n+static void\n+garrow_sparse_union_data_type_init(GArrowSparseUnionDataType *object)\n+{\n+}\n+\n+static void\n+garrow_sparse_union_data_type_class_init(GArrowSparseUnionDataTypeClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_sparse_union_data_type_new:\n+ * @fields: (element-type GArrowField): The fields of the union.\n+ * @type_codes: (array length=n_type_codes): The codes to specify each field.\n+ * @n_type_codes: The number of type codes.\n+ *\n+ * Returns: The newly created sparse union data type.\n+ */\n+GArrowSparseUnionDataType *\n+garrow_sparse_union_data_type_new(GList *fields,\n+                                  guint8 *type_codes,\n+                                  gsize n_type_codes)\n+{\n+  std::vector<std::shared_ptr<arrow::Field>> arrow_fields;\n+  for (auto node = fields; node; node = g_list_next(node)) {\n+    auto field = GARROW_FIELD(node->data);\n+    auto arrow_field = garrow_field_get_raw(field);\n+    arrow_fields.push_back(arrow_field);\n+  }\n+\n+  std::vector<uint8_t> arrow_type_codes;\n+  for (gsize i = 0; i < n_type_codes; ++i) {\n+    arrow_type_codes.push_back(type_codes[i]);\n+  }\n+\n+  auto arrow_data_type =\n+    std::make_shared<arrow::UnionType>(arrow_fields,\n+                                       arrow_type_codes,\n+                                       arrow::UnionMode::SPARSE);\n+  auto data_type = g_object_new(GARROW_TYPE_SPARSE_UNION_DATA_TYPE,\n+                                \"data-type\", &arrow_data_type,\n+                                NULL);\n+  return GARROW_SPARSE_UNION_DATA_TYPE(data_type);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDenseUnionDataType,\n+              garrow_dense_union_data_type,\n+              GARROW_TYPE_UNION_DATA_TYPE)\n+\n+static void\n+garrow_dense_union_data_type_init(GArrowDenseUnionDataType *object)\n+{\n+}\n+\n+static void\n+garrow_dense_union_data_type_class_init(GArrowDenseUnionDataTypeClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_dense_union_data_type_new:\n+ * @fields: (element-type GArrowField): The fields of the union.\n+ * @type_codes: (array length=n_type_codes): The codes to specify each field.\n+ * @n_type_codes: The number of type codes.\n+ *\n+ * Returns: The newly created dense union data type.\n+ */\n+GArrowDenseUnionDataType *\n+garrow_dense_union_data_type_new(GList *fields,\n+                                 guint8 *type_codes,\n+                                 gsize n_type_codes)\n+{\n+  std::vector<std::shared_ptr<arrow::Field>> arrow_fields;\n+  for (auto node = fields; node; node = g_list_next(node)) {\n+    auto field = GARROW_FIELD(node->data);\n+    auto arrow_field = garrow_field_get_raw(field);\n+    arrow_fields.push_back(arrow_field);\n+  }\n+\n+  std::vector<uint8_t> arrow_type_codes;\n+  for (gsize i = 0; i < n_type_codes; ++i) {\n+    arrow_type_codes.push_back(type_codes[i]);\n+  }\n+\n+  auto arrow_data_type =\n+    std::make_shared<arrow::UnionType>(arrow_fields,\n+                                       arrow_type_codes,\n+                                       arrow::UnionMode::DENSE);\n+  auto data_type = g_object_new(GARROW_TYPE_DENSE_UNION_DATA_TYPE,\n+                                \"data-type\", &arrow_data_type,\n+                                NULL);\n+  return GARROW_DENSE_UNION_DATA_TYPE(data_type);\n+}\n+\n+\n G_DEFINE_TYPE(GArrowDictionaryDataType,\n               garrow_dictionary_data_type,\n               GARROW_TYPE_FIXED_WIDTH_DATA_TYPE)\ndiff --git a/c_glib/arrow-glib/composite-data-type.h b/c_glib/arrow-glib/composite-data-type.h\nindex 7d6a02b1c7..25e1ac3d94 100644\n--- a/c_glib/arrow-glib/composite-data-type.h\n+++ b/c_glib/arrow-glib/composite-data-type.h\n@@ -96,6 +96,66 @@ gint\n garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n                                         const gchar *name);\n \n+\n+#define GARROW_TYPE_UNION_DATA_TYPE (garrow_union_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUnionDataType,\n+                         garrow_union_data_type,\n+                         GARROW,\n+                         UNION_DATA_TYPE,\n+                         GArrowDataType)\n+struct _GArrowUnionDataTypeClass\n+{\n+  GArrowDataTypeClass parent_class;\n+};\n+\n+gint\n+garrow_union_data_type_get_n_fields(GArrowUnionDataType *data_type);\n+GList *\n+garrow_union_data_type_get_fields(GArrowUnionDataType *data_type);\n+GArrowField *\n+garrow_union_data_type_get_field(GArrowUnionDataType *data_type,\n+                                 gint i);\n+guint8 *\n+garrow_union_data_type_get_type_codes(GArrowUnionDataType *data_type,\n+                                      gsize *n_type_codes);\n+\n+\n+#define GARROW_TYPE_SPARSE_UNION_DATA_TYPE      \\\n+  (garrow_sparse_union_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowSparseUnionDataType,\n+                         garrow_sparse_union_data_type,\n+                         GARROW,\n+                         SPARSE_UNION_DATA_TYPE,\n+                         GArrowUnionDataType)\n+struct _GArrowSparseUnionDataTypeClass\n+{\n+  GArrowUnionDataTypeClass parent_class;\n+};\n+\n+GArrowSparseUnionDataType *\n+garrow_sparse_union_data_type_new(GList *fields,\n+                                  guint8 *type_codes,\n+                                  gsize n_type_codes);\n+\n+\n+#define GARROW_TYPE_DENSE_UNION_DATA_TYPE       \\\n+  (garrow_dense_union_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDenseUnionDataType,\n+                         garrow_dense_union_data_type,\n+                         GARROW,\n+                         DENSE_UNION_DATA_TYPE,\n+                         GArrowUnionDataType)\n+struct _GArrowDenseUnionDataTypeClass\n+{\n+  GArrowUnionDataTypeClass parent_class;\n+};\n+\n+GArrowDenseUnionDataType *\n+garrow_dense_union_data_type_new(GList *fields,\n+                                 guint8 *type_codes,\n+                                 gsize n_type_codes);\n+\n+\n #define GARROW_TYPE_DICTIONARY_DATA_TYPE (garrow_dictionary_data_type_get_type())\n G_DECLARE_DERIVABLE_TYPE(GArrowDictionaryDataType,\n                          garrow_dictionary_data_type,\ndiff --git a/c_glib/test/test-dense-union-array.rb b/c_glib/test/test-dense-union-array.rb\nnew file mode 100644\nindex 0000000000..fa73f8d4c0\n--- /dev/null\n+++ b/c_glib/test/test-dense-union-array.rb\n@@ -0,0 +1,50 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDenseUnionArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    type_ids = build_int8_array([0, 1, nil, 1, 1])\n+    value_offsets = build_int32_array([0, 0, 0, 1, 2])\n+    fields = [\n+      build_int16_array([1]),\n+      build_string_array([\"a\", \"b\", \"c\"]),\n+    ]\n+    @array = Arrow::DenseUnionArray.new(type_ids, value_offsets, fields)\n+  end\n+\n+  def test_value_data_type\n+    fields = [\n+      Arrow::Field.new(\"0\", Arrow::Int16DataType.new),\n+      Arrow::Field.new(\"1\", Arrow::StringDataType.new),\n+    ]\n+    assert_equal(Arrow::DenseUnionDataType.new(fields, [0, 1]),\n+                 @array.value_data_type)\n+  end\n+\n+  def test_field\n+    assert_equal([\n+                   build_int16_array([1]),\n+                   build_string_array([\"a\", \"b\", \"c\"]),\n+                 ],\n+                 [\n+                   @array.get_field(0),\n+                   @array.get_field(1),\n+                 ])\n+  end\n+end\ndiff --git a/c_glib/test/test-dense-union-data-type.rb b/c_glib/test/test-dense-union-data-type.rb\nnew file mode 100644\nindex 0000000000..0d1295423e\n--- /dev/null\n+++ b/c_glib/test/test-dense-union-data-type.rb\n@@ -0,0 +1,35 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDenseUnionDataType < Test::Unit::TestCase\n+  def setup\n+    fields = [\n+      Arrow::Field.new(\"number\", Arrow::Int32DataType.new),\n+      Arrow::Field.new(\"text\", Arrow::StringDataType.new),\n+    ]\n+    @data_type = Arrow::DenseUnionDataType.new(fields, [2, 9])\n+  end\n+\n+  def test_type\n+    assert_equal(Arrow::Type::UNION, @data_type.id)\n+  end\n+\n+  def test_to_s\n+    assert_equal(\"union[dense]<number: int32=2, text: string=9>\",\n+                 @data_type.to_s)\n+  end\n+end\ndiff --git a/c_glib/test/test-sparse-union-array.rb b/c_glib/test/test-sparse-union-array.rb\nnew file mode 100644\nindex 0000000000..721f95c1fb\n--- /dev/null\n+++ b/c_glib/test/test-sparse-union-array.rb\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestSparseUnionArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    type_ids = build_int8_array([0, 1, nil, 1, 0])\n+    fields = [\n+      build_int16_array([1, nil, nil, nil, 5]),\n+      build_string_array([nil, \"b\", nil, \"d\", nil]),\n+    ]\n+    @array = Arrow::SparseUnionArray.new(type_ids, fields)\n+  end\n+\n+  def test_value_data_type\n+    fields = [\n+      Arrow::Field.new(\"0\", Arrow::Int16DataType.new),\n+      Arrow::Field.new(\"1\", Arrow::StringDataType.new),\n+    ]\n+    assert_equal(Arrow::SparseUnionDataType.new(fields, [0, 1]),\n+                 @array.value_data_type)\n+  end\n+\n+  def test_field\n+    assert_equal([\n+                   build_int16_array([1, nil, nil, nil, 5]),\n+                   build_string_array([nil, \"b\", nil, \"d\", nil]),\n+                 ],\n+                 [\n+                   @array.get_field(0),\n+                   @array.get_field(1),\n+                 ])\n+  end\n+end\ndiff --git a/c_glib/test/test-sparse-union-data-type.rb b/c_glib/test/test-sparse-union-data-type.rb\nnew file mode 100644\nindex 0000000000..ff4ce72c27\n--- /dev/null\n+++ b/c_glib/test/test-sparse-union-data-type.rb\n@@ -0,0 +1,35 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestSparseUnionDataType < Test::Unit::TestCase\n+  def setup\n+    fields = [\n+      Arrow::Field.new(\"number\", Arrow::Int32DataType.new),\n+      Arrow::Field.new(\"text\", Arrow::StringDataType.new),\n+    ]\n+    @data_type = Arrow::SparseUnionDataType.new(fields, [2, 9])\n+  end\n+\n+  def test_type\n+    assert_equal(Arrow::Type::UNION, @data_type.id)\n+  end\n+\n+  def test_to_s\n+    assert_equal(\"union[sparse]<number: int32=2, text: string=9>\",\n+                 @data_type.to_s)\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/array.rb b/ruby/red-arrow/lib/arrow/array.rb\nindex 7a0d053901..049224154d 100644\n--- a/ruby/red-arrow/lib/arrow/array.rb\n+++ b/ruby/red-arrow/lib/arrow/array.rb\n@@ -20,11 +20,13 @@ class Array\n     include Enumerable\n \n     class << self\n-      def new(values)\n+      def new(*args)\n+        return super if args.size != 1\n+\n         builder_class_name = \"#{name}Builder\"\n         if const_defined?(builder_class_name)\n           builder_class = const_get(builder_class_name)\n-          builder_class.build(values)\n+          builder_class.build(*args)\n         else\n           super\n         end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T01:25:59.710+0000",
                    "updated": "2018-12-07T01:25:59.710+0000",
                    "started": "2018-12-07T01:25:59.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172906",
                    "issueId": "13202692"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1f4fe636[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54c63fae[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17d8d87c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7206ae66[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ca46b68[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3cd58bc6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d1faf18[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2aad5943[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@750d8855[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6516b689[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7561a25c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@35469af2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Dec 07 01:25:52 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-07T01:25:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3946/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-12-06T04:39:52.000+0000",
        "updated": "2018-12-07T01:25:59.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add support for union",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13202692/comment/16712221",
                    "id": "16712221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 3112\n[https://github.com/apache/arrow/pull/3112]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-12-07T01:25:52.879+0000",
                    "updated": "2018-12-07T01:25:52.879+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s0181k:",
        "customfield_12314139": null
    }
}