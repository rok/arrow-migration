{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13297567",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567",
    "key": "ARROW-8394",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
            "name": "Blocker",
            "id": "1"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shyamalshukla",
            "name": "shyamalshukla",
            "key": "shyamalshukla",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Shyamal Shukla",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shyamalshukla",
            "name": "shyamalshukla",
            "key": "shyamalshukla",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Shyamal Shukla",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8394/votes",
            "votes": 3,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt opened a new pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216\n\n\n   * Upgrades to TypeScript 4.0.2\r\n   * Fixes typings for TypeScript versions 3.9+\r\n   \r\n   Closes https://issues.apache.org/jira/browse/ARROW-8394\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T05:28:34.363+0000",
                    "updated": "2020-09-18T05:28:34.363+0000",
                    "started": "2020-09-18T05:28:34.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486065",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#issuecomment-694661438\n\n\n   https://issues.apache.org/jira/browse/ARROW-8394\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T05:31:56.110+0000",
                    "updated": "2020-09-18T05:31:56.110+0000",
                    "started": "2020-09-18T05:31:56.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486068",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#issuecomment-695079231\n\n\n   @kszucs recent node versions changed behavior of one of the stream properties we're testing, so node 11 will fail now.\r\n   \r\n   I tried updating all the places I saw node 11 being specified, but I'm not sure how to update the `Ursabot / AMD64 Debian 9 NodeJS 11` build. Is this something we can update and include in this PR?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T20:49:05.371+0000",
                    "updated": "2020-09-18T20:49:05.371+0000",
                    "started": "2020-09-18T20:49:05.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486371",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt edited a comment on pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#issuecomment-695079231\n\n\n   @kszucs recent node versions changed behavior of one of the stream properties we're testing, so node 11 will fail now.\r\n   \r\n   I tried updating all references to node v11, but I'm not sure how to update the `Ursabot / AMD64 Debian 9 NodeJS 11` build. Is this something we can update and include in this PR?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T20:49:38.806+0000",
                    "updated": "2020-09-18T20:49:38.806+0000",
                    "started": "2020-09-18T20:49:38.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486372",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#issuecomment-695124175\n\n\n   Thanks for the update! I'll handle the ursabot builder.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T23:15:28.628+0000",
                    "updated": "2020-09-18T23:15:28.628+0000",
                    "started": "2020-09-18T23:15:28.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486430",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#issuecomment-695131625\n\n\n   Thanks Paul! I should have time to take a look over the weekend\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T23:54:32.236+0000",
                    "updated": "2020-09-18T23:54:32.236+0000",
                    "started": "2020-09-18T23:54:32.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486438",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/486980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492096757\n\n\n\n##########\nFile path: js/src/interfaces.ts\n##########\n@@ -356,48 +356,48 @@ type TypeToBuilder<T extends Type = any, TNull = any> = {\n \n /** @ignore */\n type DataTypeToBuilder<T extends DataType = any, TNull = any> = {\n-    [key: number               ]:                                                                                                  builders.Builder<any, TNull> ;\n-    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : builders.Builder<any, TNull> ;\n-    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : builders.Builder<any, TNull> ;\n-    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : builders.Builder<any, TNull> ;\n-    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : builders.Builder<any, TNull> ;\n-    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : builders.Builder<any, TNull> ;\n-    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : builders.Builder<any, TNull> ;\n-    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : builders.Builder<any, TNull> ;\n-    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : builders.Builder<any, TNull> ;\n-    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : builders.Builder<any, TNull> ;\n+    [key: number               ]:                                       builders.Builder<any, TNull>                                     ;\n+    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : never ;\n+    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : never ;\n+    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : never ;\n+    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : never ;\n+    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : never ;\n+    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : never ;\n+    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : never ;\n+    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : never ;\n+    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : never ;\n+    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : never ;\n+    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : never ;\n+    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : never ;\n+    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : never ;\n+    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : never ;\n+    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : never ;\n+    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : never ;\n+    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : never ;\n+    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : never ;\n+    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : never ;\n+    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : never ;\n+    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : never ;\n+    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : never ;\n+    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : never ;\n+    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : never ;\n+    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : never ;\n+    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : never ;\n+    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : never ;\n+    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : never ;\n+    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : never ;\n+    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : never ;\n+    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : never ;\n+    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : never ;\n+    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : never ;\n+    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : never ;\n+    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : never ;\n+    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : never ;\n+    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : never ;\n+    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : never ;\n+    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : never ;\n+    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : never ;\n+    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : never ;\n+    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : never ;\n+    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : never ;\n\nReview comment:\n       Could you explain what this change is for? It looks like it's removing a fallback but maybe I'm misremembering how this works.\n\n##########\nFile path: js/test/Arrow.ts\n##########\n@@ -27,6 +27,13 @@ require('web-stream-tools');\n (<any> global).window = (<any> global).window || global;\n \n // Fix for Jest in node v10.x\n+Object.defineProperty(Object, Symbol.hasInstance, {\n+    writable: true,\n+    configurable: true,\n+    value(inst: any) {\n+        return inst && inst.constructor && inst.constructor.name === 'Object';\n+    }\n+});\n\nReview comment:\n       Is this now \"Fixes for Jest in node v14.x\"?\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       This PR changes lots of Iterable and Iterator types to Generator, but the corresponding names still reference \"iterable\" or \"iterator\" Is that potentially misleading? I'll admit I'm out of the loop on recent changes in JS, maybe this is common practice\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       I'm a little perplexed by this. It looks like you're removing test code that's not actually verifying anything, but the test case below isn't verifying anything either. Should these tests just have some assertions instead?\n\n##########\nFile path: js/src/data.ts\n##########\n@@ -253,11 +254,11 @@ export class Data<T extends DataType = DataType> {\n         return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n         return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n\nReview comment:\n       It looks like this is just correcting an oversight?\n\n##########\nFile path: js/package.json\n##########\n@@ -100,11 +100,11 @@\n     \"source-map-loader\": \"0.2.4\",\n     \"terser-webpack-plugin\": \"1.2.1\",\n     \"trash\": \"4.3.0\",\n-    \"ts-jest\": \"24.0.2\",\n-    \"ts-node\": \"8.2.0\",\n-    \"tslint\": \"5.12.1\",\n-    \"typedoc\": \"0.15.0-0\",\n-    \"typescript\": \"3.5.1\",\n+    \"ts-jest\": \"26.3.0\",\n+    \"ts-node\": \"9.0.0\",\n+    \"tslint\": \"6.1.3\",\n+    \"typedoc\": \"0.19.1\",\n+    \"typescript\": \"4.0.2\",\n\nReview comment:\n       `npm audit` says we have 34k vulnerabilities, would you mind addressing them while we're changing deps? It looks like `npm audit fix` will correct all but 10 of them.\n\n##########\nFile path: .env\n##########\n@@ -30,7 +30,7 @@ LLVM=10\n CLANG_TOOLS=8\n RUST=nightly-2020-04-22\n GO=1.12\n-NODE=11\n+NODE=14\n\nReview comment:\n       Does this PR change the minimum supported node version?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T15:03:45.224+0000",
                    "updated": "2020-09-21T15:03:45.224+0000",
                    "started": "2020-09-21T15:03:45.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486980",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492260498\n\n\n\n##########\nFile path: .env\n##########\n@@ -30,7 +30,7 @@ LLVM=10\n CLANG_TOOLS=8\n RUST=nightly-2020-04-22\n GO=1.12\n-NODE=11\n+NODE=14\n\nReview comment:\n       No we still work on node 11, but node changed the behavior of the `stream.readable` property, which we're checking in [`streams-node-tests.ts`](https://github.com/apache/arrow/blob/63264ce2ef37e55b1561927ebb28ba9804271cfa/js/test/unit/ipc/reader/streams-node-tests.ts#L212-L213). We used to check for true, but now it's false.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:24:20.870+0000",
                    "updated": "2020-09-21T18:24:20.870+0000",
                    "started": "2020-09-21T18:24:20.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487163",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492262029\n\n\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       This is a change in the TypeScript typings for generator functions. They didn't used to have a way to capture the error and return types of generator functions, but now they do. Most places we don't care about the error or return types, but have to use the Generator interfaces because TS 3.5+ requires it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:27:05.414+0000",
                    "updated": "2020-09-21T18:27:05.414+0000",
                    "started": "2020-09-21T18:27:05.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487166",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492262537\n\n\n\n##########\nFile path: js/src/data.ts\n##########\n@@ -253,11 +254,11 @@ export class Data<T extends DataType = DataType> {\n         return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n         return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n\nReview comment:\n       Yes this argument doesn't have to be a Uint8Array (it could be null/undefined or [] too).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:28:02.412+0000",
                    "updated": "2020-09-21T18:28:02.412+0000",
                    "started": "2020-09-21T18:28:02.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487168",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492263370\n\n\n\n##########\nFile path: js/src/interfaces.ts\n##########\n@@ -356,48 +356,48 @@ type TypeToBuilder<T extends Type = any, TNull = any> = {\n \n /** @ignore */\n type DataTypeToBuilder<T extends DataType = any, TNull = any> = {\n-    [key: number               ]:                                                                                                  builders.Builder<any, TNull> ;\n-    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : builders.Builder<any, TNull> ;\n-    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : builders.Builder<any, TNull> ;\n-    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : builders.Builder<any, TNull> ;\n-    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : builders.Builder<any, TNull> ;\n-    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : builders.Builder<any, TNull> ;\n-    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : builders.Builder<any, TNull> ;\n-    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : builders.Builder<any, TNull> ;\n-    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : builders.Builder<any, TNull> ;\n-    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : builders.Builder<any, TNull> ;\n+    [key: number               ]:                                       builders.Builder<any, TNull>                                     ;\n+    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : never ;\n+    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : never ;\n+    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : never ;\n+    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : never ;\n+    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : never ;\n+    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : never ;\n+    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : never ;\n+    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : never ;\n+    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : never ;\n+    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : never ;\n+    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : never ;\n+    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : never ;\n+    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : never ;\n+    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : never ;\n+    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : never ;\n+    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : never ;\n+    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : never ;\n+    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : never ;\n+    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : never ;\n+    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : never ;\n+    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : never ;\n+    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : never ;\n+    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : never ;\n+    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : never ;\n+    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : never ;\n+    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : never ;\n+    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : never ;\n+    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : never ;\n+    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : never ;\n+    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : never ;\n+    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : never ;\n+    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : never ;\n+    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : never ;\n+    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : never ;\n+    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : never ;\n+    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : never ;\n+    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : never ;\n+    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : never ;\n+    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : never ;\n+    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : never ;\n+    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : never ;\n+    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : never ;\n+    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : never ;\n\nReview comment:\n       The newer versions of tsc to die in some kind of recursive loop, and the changes in this file seem to be the fix. Ultimately I think we can get rid of most of the definitions in this file with a larger refactor (to come later).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:29:31.355+0000",
                    "updated": "2020-09-21T18:29:31.355+0000",
                    "started": "2020-09-21T18:29:31.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487173",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492263771\n\n\n\n##########\nFile path: js/test/Arrow.ts\n##########\n@@ -27,6 +27,13 @@ require('web-stream-tools');\n (<any> global).window = (<any> global).window || global;\n \n // Fix for Jest in node v10.x\n+Object.defineProperty(Object, Symbol.hasInstance, {\n+    writable: true,\n+    configurable: true,\n+    value(inst: any) {\n+        return inst && inst.constructor && inst.constructor.name === 'Object';\n+    }\n+});\n\nReview comment:\n       This is a weird one, it only seems to be important for the ES5/UMD closure-compiler build.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:30:08.290+0000",
                    "updated": "2020-09-21T18:30:08.290+0000",
                    "started": "2020-09-21T18:30:08.290+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487175",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492264638\n\n\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       Yeah these aren't run, they're here to test the type inference/intellisense in VSCode. I manually check whether the types show up properly after any large set of changes to the type propagation, like in this PR.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-21T18:31:44.958+0000",
                    "updated": "2020-09-21T18:31:44.958+0000",
                    "started": "2020-09-21T18:31:44.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487177",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492096757\n\n\n\n##########\nFile path: js/src/interfaces.ts\n##########\n@@ -356,48 +356,48 @@ type TypeToBuilder<T extends Type = any, TNull = any> = {\n \n /** @ignore */\n type DataTypeToBuilder<T extends DataType = any, TNull = any> = {\n-    [key: number               ]:                                                                                                  builders.Builder<any, TNull> ;\n-    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : builders.Builder<any, TNull> ;\n-    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : builders.Builder<any, TNull> ;\n-    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : builders.Builder<any, TNull> ;\n-    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : builders.Builder<any, TNull> ;\n-    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : builders.Builder<any, TNull> ;\n-    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : builders.Builder<any, TNull> ;\n-    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : builders.Builder<any, TNull> ;\n-    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : builders.Builder<any, TNull> ;\n-    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : builders.Builder<any, TNull> ;\n+    [key: number               ]:                                       builders.Builder<any, TNull>                                     ;\n+    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : never ;\n+    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : never ;\n+    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : never ;\n+    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : never ;\n+    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : never ;\n+    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : never ;\n+    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : never ;\n+    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : never ;\n+    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : never ;\n+    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : never ;\n+    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : never ;\n+    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : never ;\n+    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : never ;\n+    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : never ;\n+    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : never ;\n+    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : never ;\n+    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : never ;\n+    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : never ;\n+    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : never ;\n+    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : never ;\n+    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : never ;\n+    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : never ;\n+    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : never ;\n+    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : never ;\n+    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : never ;\n+    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : never ;\n+    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : never ;\n+    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : never ;\n+    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : never ;\n+    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : never ;\n+    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : never ;\n+    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : never ;\n+    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : never ;\n+    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : never ;\n+    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : never ;\n+    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : never ;\n+    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : never ;\n+    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : never ;\n+    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : never ;\n+    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : never ;\n+    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : never ;\n+    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : never ;\n+    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : never ;\n\nReview comment:\n       Could you explain what this change is for? It looks like it's removing a fallback but maybe I'm misremembering how this works.\n\n##########\nFile path: js/test/Arrow.ts\n##########\n@@ -27,6 +27,13 @@ require('web-stream-tools');\n (<any> global).window = (<any> global).window || global;\n \n // Fix for Jest in node v10.x\n+Object.defineProperty(Object, Symbol.hasInstance, {\n+    writable: true,\n+    configurable: true,\n+    value(inst: any) {\n+        return inst && inst.constructor && inst.constructor.name === 'Object';\n+    }\n+});\n\nReview comment:\n       Is this now \"Fixes for Jest in node v14.x\"?\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       This PR changes lots of Iterable and Iterator types to Generator, but the corresponding names still reference \"iterable\" or \"iterator\" Is that potentially misleading? I'll admit I'm out of the loop on recent changes in JS, maybe this is common practice\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       I'm a little perplexed by this. It looks like you're removing test code that's not actually verifying anything, but the test case below isn't verifying anything either. Should these tests just have some assertions instead?\n\n##########\nFile path: js/src/data.ts\n##########\n@@ -253,11 +254,11 @@ export class Data<T extends DataType = DataType> {\n         return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n         return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n\nReview comment:\n       It looks like this is just correcting an oversight?\n\n##########\nFile path: js/package.json\n##########\n@@ -100,11 +100,11 @@\n     \"source-map-loader\": \"0.2.4\",\n     \"terser-webpack-plugin\": \"1.2.1\",\n     \"trash\": \"4.3.0\",\n-    \"ts-jest\": \"24.0.2\",\n-    \"ts-node\": \"8.2.0\",\n-    \"tslint\": \"5.12.1\",\n-    \"typedoc\": \"0.15.0-0\",\n-    \"typescript\": \"3.5.1\",\n+    \"ts-jest\": \"26.3.0\",\n+    \"ts-node\": \"9.0.0\",\n+    \"tslint\": \"6.1.3\",\n+    \"typedoc\": \"0.19.1\",\n+    \"typescript\": \"4.0.2\",\n\nReview comment:\n       `npm audit` says we have 34k vulnerabilities, would you mind addressing them while we're changing deps? It looks like `npm audit fix` will correct all but 10 of them.\n\n##########\nFile path: .env\n##########\n@@ -30,7 +30,7 @@ LLVM=10\n CLANG_TOOLS=8\n RUST=nightly-2020-04-22\n GO=1.12\n-NODE=11\n+NODE=14\n\nReview comment:\n       Does this PR change the minimum supported node version?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:15:44.455+0000",
                    "updated": "2020-09-22T03:15:44.455+0000",
                    "started": "2020-09-22T03:15:44.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487554",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/487676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492260498\n\n\n\n##########\nFile path: .env\n##########\n@@ -30,7 +30,7 @@ LLVM=10\n CLANG_TOOLS=8\n RUST=nightly-2020-04-22\n GO=1.12\n-NODE=11\n+NODE=14\n\nReview comment:\n       No we still work on node 11, but node changed the behavior of the `stream.readable` property, which we're checking in [`streams-node-tests.ts`](https://github.com/apache/arrow/blob/63264ce2ef37e55b1561927ebb28ba9804271cfa/js/test/unit/ipc/reader/streams-node-tests.ts#L212-L213). We used to check for true, but now it's false.\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       This is a change in the TypeScript typings for generator functions. They didn't used to have a way to capture the error and return types of generator functions, but now they do. Most places we don't care about the error or return types, but have to use the Generator interfaces because TS 3.5+ requires it.\n\n##########\nFile path: js/src/data.ts\n##########\n@@ -253,11 +254,11 @@ export class Data<T extends DataType = DataType> {\n         return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n         return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n     }\n     /** @nocollapse */\n-    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n+    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n\nReview comment:\n       Yes this argument doesn't have to be a Uint8Array (it could be null/undefined or [] too).\n\n##########\nFile path: js/src/interfaces.ts\n##########\n@@ -356,48 +356,48 @@ type TypeToBuilder<T extends Type = any, TNull = any> = {\n \n /** @ignore */\n type DataTypeToBuilder<T extends DataType = any, TNull = any> = {\n-    [key: number               ]:                                                                                                  builders.Builder<any, TNull> ;\n-    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : builders.Builder<any, TNull> ;\n-    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : builders.Builder<any, TNull> ;\n-    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : builders.Builder<any, TNull> ;\n-    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n-    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : builders.Builder<any, TNull> ;\n-    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : builders.Builder<any, TNull> ;\n-    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : builders.Builder<any, TNull> ;\n-    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n-    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : builders.Builder<any, TNull> ;\n-    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : builders.Builder<any, TNull> ;\n-    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : builders.Builder<any, TNull> ;\n-    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : builders.Builder<any, TNull> ;\n-    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : builders.Builder<any, TNull> ;\n-    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : builders.Builder<any, TNull> ;\n-    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : builders.Builder<any, TNull> ;\n-    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n-    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : builders.Builder<any, TNull> ;\n+    [key: number               ]:                                       builders.Builder<any, TNull>                                     ;\n+    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : never ;\n+    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : never ;\n+    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : never ;\n+    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : never ;\n+    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : never ;\n+    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : never ;\n+    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : never ;\n+    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : never ;\n+    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : never ;\n+    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : never ;\n+    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : never ;\n+    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : never ;\n+    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : never ;\n+    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : never ;\n+    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : never ;\n+    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : never ;\n+    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : never ;\n+    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : never ;\n+    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : never ;\n+    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : never ;\n+    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : never ;\n+    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : never ;\n+    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : never ;\n+    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : never ;\n+    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : never ;\n+    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : never ;\n+    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : never ;\n+    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : never ;\n+    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : never ;\n+    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : never ;\n+    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : never ;\n+    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : never ;\n+    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : never ;\n+    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : never ;\n+    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : never ;\n+    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : never ;\n+    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : never ;\n+    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : never ;\n+    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : never ;\n+    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : never ;\n+    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : never ;\n+    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : never ;\n+    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : never ;\n\nReview comment:\n       The newer versions of tsc to die in some kind of recursive loop, and the changes in this file seem to be the fix. Ultimately I think we can get rid of most of the definitions in this file with a larger refactor (to come later).\n\n##########\nFile path: js/test/Arrow.ts\n##########\n@@ -27,6 +27,13 @@ require('web-stream-tools');\n (<any> global).window = (<any> global).window || global;\n \n // Fix for Jest in node v10.x\n+Object.defineProperty(Object, Symbol.hasInstance, {\n+    writable: true,\n+    configurable: true,\n+    value(inst: any) {\n+        return inst && inst.constructor && inst.constructor.name === 'Object';\n+    }\n+});\n\nReview comment:\n       This is a weird one, it only seems to be important for the ES5/UMD closure-compiler build.\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       Yeah these aren't run, they're here to test the type inference/intellisense in VSCode. I manually check whether the types show up properly after any large set of changes to the type propagation, like in this PR.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T03:26:29.418+0000",
                    "updated": "2020-09-22T03:26:29.418+0000",
                    "started": "2020-09-22T03:26:29.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "487676",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/488336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492822710\n\n\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       Ah ok, thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T15:19:08.718+0000",
                    "updated": "2020-09-22T15:19:08.718+0000",
                    "started": "2020-09-22T15:19:08.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488336",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/488338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492824175\n\n\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       So why remove it now?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T15:20:55.599+0000",
                    "updated": "2020-09-22T15:20:55.599+0000",
                    "started": "2020-09-22T15:20:55.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488338",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/488604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r493036448\n\n\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       Oh the one that tests the Map type was old, and should be covered by the nested types in the Struct test here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T21:12:08.354+0000",
                    "updated": "2020-09-22T21:12:08.354+0000",
                    "started": "2020-09-22T21:12:08.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488604",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/489059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r493036448\n\n\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       Oh the one that tests the Map type was old, and should be covered by the nested types in the Struct test here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-23T04:31:45.574+0000",
                    "updated": "2020-09-23T04:31:45.574+0000",
                    "started": "2020-09-23T04:31:45.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "489059",
                    "issueId": "13297567"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/worklog/489145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #8216:\nURL: https://github.com/apache/arrow/pull/8216#discussion_r492822710\n\n\n\n##########\nFile path: js/test/unit/ipc/helpers.ts\n##########\n@@ -54,13 +54,13 @@ export abstract class ArrowIOTestHelper {\n             await testFn(await this.writer(this.table).toUint8Array());\n         };\n     }\n-    iterable(testFn: (iterable: Iterable<Uint8Array>) => void | Promise<void>) {\n+    iterable(testFn: (iterable: Generator<Uint8Array>) => void | Promise<void>) {\n         return async () => {\n             expect.hasAssertions();\n             await testFn(chunkedIterable(await this.writer(this.table).toUint8Array()));\n         };\n     }\n-    asyncIterable(testFn: (asyncIterable: AsyncIterable<Uint8Array>) => void | Promise<void>) {\n+    asyncIterable(testFn: (asyncIterable: AsyncGenerator<Uint8Array>) => void | Promise<void>) {\n\nReview comment:\n       Ah ok, thanks\n\n##########\nFile path: js/test/inference/column.ts\n##########\n@@ -33,33 +33,6 @@ const boolColumn = new Column(new Field('bool', boolType), [\n expect(typeof boolVector.get(0) === 'boolean').toBe(true);\n expect(typeof boolColumn.get(0) === 'boolean').toBe(true);\n \n-type NamedSchema = {\n-    a: Int8;\n-    b: Utf8;\n-    c: Dictionary<List<Bool>>;\n-};\n-\n-const mapChildFields = [\n-    { name: 'a', type: new Int8() },\n-    { name: 'b', type: new Utf8() },\n-    { name: 'c', type: new Dictionary<List<Bool>>(null!, null!) }\n-].map(({ name, type }) => new Field(name, type));\n-\n-const mapType = new Map_<NamedSchema>(mapChildFields);\n-\n-const mapVector = Vector.new(Data.Map(mapType, 0, 0, 0, null, []));\n-const mapColumn = new Column(new Field('map', mapType, false), [\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-    Vector.new(Data.Map(mapType, 0, 0, 0, null, [])),\n-]);\n-\n-const { a: a1, b: b1, c: c1 } = mapVector.get(0)!;\n-const { a: a2, b: b2, c: c2 } = mapColumn.get(0)!;\n-\n-console.log(a1, b1, c1);\n-console.log(a2, b2, c2);\n-\n\nReview comment:\n       So why remove it now?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-23T04:39:18.782+0000",
                    "updated": "2020-09-23T04:39:18.782+0000",
                    "started": "2020-09-23T04:39:18.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "489145",
                    "issueId": "13297567"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@670d3fba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@573926e0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d059ca1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6315abc7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53a33b94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c1b632e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d2a1898[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@632fd569[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@299a2d03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@e3f390d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@732c1e8a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6e35091b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Jan 03 00:56:27 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-05T16:55:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8394/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2020-04-10T08:17:04.000+0000",
        "updated": "2021-01-03T00:56:27.000+0000",
        "timeoriginalestimate": null,
        "description": "Attempting to use apache-arrow within a web application, but typescript compiler throws the following errors in some of arrow's .d.ts files\r\n\r\nimport \\{ Table } from \"../node_modules/@apache-arrow/es2015-esm/Arrow\";\r\nexport class SomeClass {\r\n.\r\n.\r\nconstructor() {\r\nconst t = Table.from('');\r\n}\r\n*node_modules/@apache-arrow/es2015-esm/column.d.ts:14:22* - error TS2417: Class static side 'typeof Column' incorrectly extends base class static side 'typeof Chunked'. Types of property 'new' are incompatible.\r\n\r\n*node_modules/@apache-arrow/es2015-esm/ipc/reader.d.ts:238:5* - error TS2717: Subsequent property declarations must have the same type. Property 'schema' must be of type 'Schema', but here has type 'Schema'.\r\n\r\n238 schema: Schema;\r\n\r\n*node_modules/@apache-arrow/es2015-esm/recordbatch.d.ts:17:18* - error TS2430: Interface 'RecordBatch' incorrectly extends interface 'StructVector'. The types of 'slice(...).clone' are incompatible between these types.\r\n\r\nthe tsconfig.json file looks like\r\n\r\n{\r\n \"compilerOptions\": {\r\n \"target\":\"ES6\",\r\n \"outDir\": \"dist\",\r\n \"baseUrl\": \"src/\"\r\n },\r\n \"exclude\": [\"dist\"],\r\n \"include\": [\"src/*.ts\"]\r\n}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Typescript compiler errors for arrow d.ts files, when using es2015-esm package",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17093616",
                    "id": "17093616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pprice",
                        "name": "pprice",
                        "key": "pprice",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34059",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34059",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34059",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34059"
                        },
                        "displayName": "Phil Price",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This also happens with `0.17.0` from what I can tell there are two things which I would consider adoption blockers:\r\n # apache-arrow compiles with typescript@3.5, but typescript@3.6+ has stricter type-checks, and cannot consume the output. A couple of cases I've found that are invalid:\u00a0\r\n ## Extension of static `new()` methods with different typed parameter order (column<T> derived from chunked<T> but changes the signature of `new` to takes `string | Field` as the first param over `Data`\r\n ## Not passing template types to fields (e.g. `foo: Schema` to `foo: Schema<T>`)\u00a0\r\n # Attempting to upgrade `apache-arrow` to typescript@3.8 (or 3.9-beta) falls afoul of a typescript compiler bug ([https://github.com/microsoft/TypeScript/issues/35186]); from my understanding, the compiler is on an error path anyway but bails when trying to print error detail. This makes the upgrade difficult as it's a case of whack-a-mole.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pprice",
                        "name": "pprice",
                        "key": "pprice",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34059",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34059",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34059",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34059"
                        },
                        "displayName": "Phil Price",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-04-27T15:14:32.940+0000",
                    "updated": "2020-04-27T15:15:29.180+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17119867",
                    "id": "17119867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Thanks [~pprice], I'll look into this. I had to do a bunch of weird things to trick the 3.5 compiler into propagating the types, so I'm hoping I can back some of those out to get it working in 3.9 and simplify the typedefs along the way.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-05-29T19:01:27.713+0000",
                    "updated": "2020-05-29T19:01:27.713+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17185329",
                    "id": "17185329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=timconkling",
                        "name": "timconkling",
                        "key": "timconkling",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Conkling",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Chiming in with an annoying +1 vote for this issue - is it being investigated?\r\n\r\n\u00a0\r\n\r\nI'm using Apache Arrow to ship dataframes from Python to a browser app, and would _love_ to be able to use TypeScript, but I'm unable to get the project to compile.\r\n\r\n\u00a0\r\n\r\nIncidentally, I also tried downgrading my project's TypeScript version to 3.5, but that results in different errors:\r\n\r\n\r\n```\r\nnode_modules/apache-arrow/ipc/reader.d.ts:238:5 - error TS2717: Subsequent property declarations must have the same type. Property 'schema' must be of type 'Schema<T>', but here has type 'Schema<any>'.\r\n\r\n238 schema: Schema;\r\n ~~~~~~\r\n\r\nnode_modules/apache-arrow/ipc/reader.d.ts:191:5\r\n 191 schema: Schema<T>;\r\n ~~~~~~\r\n 'schema' was also declared here.\r\n\r\nnode_modules/apache-arrow/recordbatch.d.ts:17:18 - error TS2430: Interface 'RecordBatch<T>' incorrectly extends interface 'StructVector<T>'.\r\n Types of property 'slice' are incompatible.\r\n Type '(begin?: number | undefined, end?: number | undefined) => RecordBatch<T>' is not assignable to type '(begin?: number | undefined, end?: number | undefined) => StructVector<T>'.\r\n Type 'RecordBatch<T>' is not assignable to type 'StructVector<T>'.\r\n Types of property 'clone' are incompatible.\r\n Type '(data: Data<Struct<T>>, children?: AbstractVector<any>[] | undefined) => RecordBatch<T>' is not assignable to type '<R extends DataType<Type, any> = Struct<T>>(data: Data<R>, children?: AbstractVector<R>[] | undefined) => VectorType<R>'.\r\n Types of parameters 'data' and 'data' are incompatible.\r\n Type 'Data<R>' is not assignable to type 'Data<Struct<T>>'.\r\n Type 'R' is not assignable to type 'Struct<T>'.\r\n Property 'dataTypes' is missing in type 'DataType<Type, any>' but required in type 'Struct<T>'.\r\n\r\n17 export interface RecordBatch<T extends {\r\n ~~~~~~~~~~~\r\n\r\nnode_modules/apache-arrow/type.d.ts:458:5\r\n 458 dataTypes: T;\r\n ~~~~~~~~~\r\n 'dataTypes' is declared here.\r\n\r\nnode_modules/apache-arrow/recordbatch.d.ts:24:22 - error TS2415: Class 'RecordBatch<T>' incorrectly extends base class 'StructVector<T>'.\r\n\r\n24 export declare class RecordBatch<T extends {\r\n ~~~~~~~~~~~\r\n\r\n\r\nFound 3 errors.\r\n```",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=timconkling",
                        "name": "timconkling",
                        "key": "timconkling",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Conkling",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-26T16:59:24.560+0000",
                    "updated": "2020-08-26T16:59:24.560+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17194700",
                    "id": "17194700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Costa",
                        "name": "Costa",
                        "key": "costa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi.\r\n We are also facing issues using apache arrow (@apache-arrow/ts 0.17.0) with Typescript 3.9.x and 4.0.x.\u00a0\r\n Is this being looked into?\r\n\r\nThanks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Costa",
                        "name": "Costa",
                        "key": "costa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-12T10:12:14.278+0000",
                    "updated": "2020-09-12T10:17:01.847+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17194835",
                    "id": "17194835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Don't think anyone is looking at it. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-12T19:54:03.835+0000",
                    "updated": "2020-09-12T19:54:03.835+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17195136",
                    "id": "17195136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Costa",
                        "name": "Costa",
                        "key": "costa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm sorry if this is misplaced or against the practices of the community, but would it be out of place to ask if someone would be interested in a bug bounty for this?\r\nThx",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Costa",
                        "name": "Costa",
                        "key": "costa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-13T23:00:46.652+0000",
                    "updated": "2020-09-13T23:00:46.652+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17195577",
                    "id": "17195577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=timconkling",
                        "name": "timconkling",
                        "key": "timconkling",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Conkling",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This is intended with all respect - this is a complex project, and I appreciate the work being done on it! - but I'm surprised by this response.\r\n\r\n[~wesm], if nobody is looking at this issue, does that mean that the JavaScript library is not a priority (or not being maintained anymore)?\r\n\r\n(As a user of the project, I'm trying to calibrate my expectations for its future. And as a developer on other open source projects, I recognize that it can be supremely frustrating when others feel entitled to ongoing free support - that's not my intent! :))",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=timconkling",
                        "name": "timconkling",
                        "key": "timconkling",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Conkling",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-14T16:34:08.363+0000",
                    "updated": "2020-09-14T16:35:27.927+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17195628",
                    "id": "17195628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm just stating the facts. You are welcome to raise this issue on dev@arrow.apache.org or solicit other JS developers who are making use of the project to help with maintaining it. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-14T17:16:46.036+0000",
                    "updated": "2020-09-14T17:16:46.036+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17195668",
                    "id": "17195668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I've started work on a branch in my fork here[1], but have been occupied the last few weeks (work, moving, back injury, etc.). There's not much left to do, so I think I should be able to get it finished and PR'd this week.\r\n\r\n1. https://github.com/trxcllnt/arrow/tree/fix/typescript-3.9-errors",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-09-14T18:16:29.084+0000",
                    "updated": "2020-09-18T05:30:26.889+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17198118",
                    "id": "17198118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~pprice] [~timconkling] [~Costa] PR is up @ https://github.com/apache/arrow/pull/8216",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-09-18T05:31:35.022+0000",
                    "updated": "2020-09-18T05:31:35.022+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17208185",
                    "id": "17208185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8216\n[https://github.com/apache/arrow/pull/8216]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-05T16:55:34.716+0000",
                    "updated": "2020-10-05T16:55:34.716+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297567/comment/17257623",
                    "id": "17257623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mprudhom",
                        "name": "mprudhom",
                        "key": "mprudhom",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mprudhom&avatarId=45285",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mprudhom&avatarId=45285",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mprudhom&avatarId=45285",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mprudhom&avatarId=45285"
                        },
                        "displayName": "Marc Prud'hommeaux",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I don't think this has been fixed. I am seeing the same error with 2.0.1. This is also reported elsewhere: [https://github.com/apache/arrow/issues/8812]\r\n\r\nThe particular error I'm seeing is:\r\n{code:java}\r\nnode_modules/apache-arrow/interfaces.d.ts:178:5 - error TS2502: '[Type.FixedSizeList]' is referenced directly or indirectly in its own type annotation.178     [Type.FixedSizeList]: T extends type.FixedSizeList ? vecs.FixedSizeListVector<T['valueType']> : never;\r\n        ~~~~~~~~~~~~~~~~~~~~node_modules/apache-arrow/ipc/reader.d.ts:236:5 - error TS2717: Subsequent property declarations must have the same type.  Property 'schema' must be of type 'Schema<T>', but here has type 'Schema<any>'.236     schema: Schema;\r\n        ~~~~~~  node_modules/apache-arrow/ipc/reader.d.ts:189:5\r\n    189     schema: Schema<T>;\r\n            ~~~~~~\r\n    'schema' was also declared here.node_modules/apache-arrow/recordbatch.d.ts:17:18 - error TS2430: Interface 'RecordBatch<T>' incorrectly extends interface 'StructVector<T>'.\r\n  The types of 'slice(...).clone' are incompatible between these types.\r\n    Type '(data: Data<Struct<T>>, children?: AbstractVector<any>[]) => RecordBatch<T>' is not assignable to type '<R extends DataType<Type, any> = Struct<T>>(data: Data<R>, children?: AbstractVector<R>[]) => VectorType<R>'.\r\n      Types of parameters 'data' and 'data' are incompatible.\r\n        Type 'Data<R>' is not assignable to type 'Data<Struct<T>>'.\r\n          Type 'R' is not assignable to type 'Struct<T>'.\r\n            Property 'dataTypes' is missing in type 'DataType<Type, any>' but required in type 'Struct<T>'.17 export interface RecordBatch<T extends {\r\n                    ~~~~~~~~~~~  node_modules/apache-arrow/type.d.ts:458:5\r\n    458     dataTypes: T;\r\n            ~~~~~~~~~\r\n    'dataTypes' is declared here.node_modules/apache-arrow/recordbatch.d.ts:24:22 - error TS2415: Class 'RecordBatch<T>' incorrectly extends base class 'StructVector<T>'.24 export declare class RecordBatch<T extends {\r\n                        ~~~~~~~~~~~\r\nFound 4 errors.{code}\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mprudhom",
                        "name": "mprudhom",
                        "key": "mprudhom",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mprudhom&avatarId=45285",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mprudhom&avatarId=45285",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mprudhom&avatarId=45285",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mprudhom&avatarId=45285"
                        },
                        "displayName": "Marc Prud'hommeaux",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-01-03T00:56:27.672+0000",
                    "updated": "2021-01-03T00:56:27.672+0000"
                }
            ],
            "maxResults": 12,
            "total": 12,
            "startAt": 0
        },
        "customfield_12311820": "0|z0dhs0:",
        "customfield_12314139": null
    }
}