{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13251405",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405",
    "key": "ARROW-6285",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6285/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113\n \n \n   This PR add support `LargeBinary` and `LargeString` types.\r\n   These support the functions of `#GArrowString{Array, DataType}`, `#GArrowBinary{Array, DataType}`.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T17:42:28.579+0000",
                    "updated": "2019-08-17T17:42:28.579+0000",
                    "started": "2019-08-17T17:42:28.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296810",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960251\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n \n Review comment:\n   We can also do the same change to `garrow_string_array_builder_append_value()` in another pull request.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.671+0000",
                    "updated": "2019-08-17T22:07:33.671+0000",
                    "started": "2019-08-17T22:07:33.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296842",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960510\n \n \n\n ##########\n File path: c_glib/arrow-glib/basic-data-type.h\n ##########\n @@ -312,6 +327,21 @@ struct _GArrowStringDataTypeClass\n GArrowStringDataType *garrow_string_data_type_new      (void);\n \n \n+#define GARROW_TYPE_LARGE_STRING_DATA_TYPE (garrow_large_string_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowLargeStringDataType,\n+                         garrow_large_string_data_type,\n+                         GARROW,\n+                         LARGE_STRING_DATA_TYPE,\n+                         GArrowDataType)\n \n Review comment:\n   Could you use `GArrowLargeBinaryDataType` as parent?\r\n   (We need to fix the parent of `GArrowStringDataType` too.)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.690+0000",
                    "updated": "2019-08-17T22:07:33.690+0000",
                    "started": "2019-08-17T22:07:33.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296843",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960239\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n \n Review comment:\n   Could you also add `gint64 length`?\r\n   `strlen()` for large `value` is costful. Users should be able to pass size.\r\n   If users passes `-1` as `length`, we can call `length = strlen(value)` internally for usability.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.695+0000",
                    "updated": "2019-08-17T22:07:33.695+0000",
                    "started": "2019-08-17T22:07:33.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296844",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960429\n \n \n\n ##########\n File path: c_glib/arrow-glib/basic-array.cpp\n ##########\n @@ -1585,6 +1705,80 @@ garrow_string_array_get_string(GArrowStringArray *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArray,\n+              garrow_large_string_array,\n+              GARROW_TYPE_BINARY_ARRAY)\n \n Review comment:\n   Could you use `GARROW_TYPE_LARGE_BINARY_ARRAY` as parent?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.708+0000",
                    "updated": "2019-08-17T22:07:33.708+0000",
                    "started": "2019-08-17T22:07:33.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296845",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960560\n \n \n\n ##########\n File path: c_glib/arrow-glib/type.h\n ##########\n @@ -85,7 +87,9 @@ typedef enum {\n   GARROW_TYPE_LIST,\n   GARROW_TYPE_STRUCT,\n   GARROW_TYPE_UNION,\n-  GARROW_TYPE_DICTIONARY\n+  GARROW_TYPE_DICTIONARY,\n+  GARROW_TYPE_LARGE_STRING,\n+  GARROW_TYPE_LARGE_BINARY\n \n Review comment:\n   Could you also add `GARROW_TYPE_MAP`, `GARROW_TYPE_EXTENSION`, `GARROW_TYPE_FIXED_SIZE_LIST` and `GARROW_TYPE_DURATION` to use the same enum values as `arrow::Type::type`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.710+0000",
                    "updated": "2019-08-17T22:07:33.710+0000",
                    "started": "2019-08-17T22:07:33.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296846",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/296847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r314960693\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   Ah, we also need to support value length here.\r\n   How about the following API?\r\n   \r\n   ```c\r\n   /* Length of each value is computed by strlen(). Easy to use but performance penalty if users know lengthts of values. (Ruby bindings case) */\r\n   gboolean\r\n   garrow_large_string_array_builder_append_strings(GArrowLargeStringArrayBuilder *builder,\r\n                                                   const gchar **values,\r\n                                                   gint64 values_length,\r\n                                                   const gboolean *is_valids,\r\n                                                   gint64 is_valids_length,\r\n                                                   GError **error);\r\n   \r\n   /* GBytes has data and length pair. So we don't need to compute value's length by strlen(). */\r\n   gboolean\r\n   garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\r\n                                                   const GBytes **values,\r\n                                                   gint64 values_length,\r\n                                                   const gboolean *is_valids,\r\n                                                   gint64 is_valids_length,\r\n                                                   GError **error);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T22:07:33.738+0000",
                    "updated": "2019-08-17T22:07:33.738+0000",
                    "started": "2019-08-17T22:07:33.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296847",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/297940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r315739542\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   Either way do we use `AppendValues()`?\r\n   I don't know how to pass the length there.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-20T14:58:20.165+0000",
                    "updated": "2019-08-20T14:58:20.165+0000",
                    "started": "2019-08-20T14:58:20.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "297940",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/297941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r315739982\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n \n Review comment:\n   > If users passes -1 as length, we can call length = strlen(value) internally for usability.\r\n   \r\n   Is my understanding below  correct?\r\n   \r\n   ```cpp\r\n   -  auto status = arrow_builder->Append(value,\r\n   -                                      static_cast<gint64>(strlen(value)));\r\n   +  arrow::Status status;\r\n   +  if (length == -1) {\r\n   +    status = arrow_builder->Append(value,\r\n   +                                   strlen(value));\r\n   +  } else {\r\n   +    status = arrow_builder->Append(value,\r\n   +                                   length);\r\n   +  }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-20T14:59:04.580+0000",
                    "updated": "2019-08-20T14:59:04.580+0000",
                    "started": "2019-08-20T14:59:04.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "297941",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r315922517\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n \n Review comment:\n   ```cpp\r\n   if (length < 0) {\r\n     length = strlen(value);\r\n   }\r\n   auto status = arrow_builder->Append(value, length);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-20T22:00:07.368+0000",
                    "updated": "2019-08-20T22:00:07.368+0000",
                    "started": "2019-08-20T22:00:07.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298221",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r315923605\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   `AppendValues()` accepts `std::vector<std::string>`. We can set length into `std::string`.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-20T22:03:08.165+0000",
                    "updated": "2019-08-20T22:03:08.165+0000",
                    "started": "2019-08-20T22:03:08.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298223",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r316352506\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n \n Review comment:\n   Thanks! I'll add `gint64 length`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-21T19:00:53.685+0000",
                    "updated": "2019-08-21T19:00:53.685+0000",
                    "started": "2019-08-21T19:00:53.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298901",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r316352611\n \n \n\n ##########\n File path: c_glib/arrow-glib/basic-array.cpp\n ##########\n @@ -1585,6 +1705,80 @@ garrow_string_array_get_string(GArrowStringArray *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArray,\n+              garrow_large_string_array,\n+              GARROW_TYPE_BINARY_ARRAY)\n \n Review comment:\n   Yes. I'll fix it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-21T19:01:01.242+0000",
                    "updated": "2019-08-21T19:01:01.242+0000",
                    "started": "2019-08-21T19:01:01.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298903",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r316352691\n \n \n\n ##########\n File path: c_glib/arrow-glib/basic-data-type.h\n ##########\n @@ -312,6 +327,21 @@ struct _GArrowStringDataTypeClass\n GArrowStringDataType *garrow_string_data_type_new      (void);\n \n \n+#define GARROW_TYPE_LARGE_STRING_DATA_TYPE (garrow_large_string_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowLargeStringDataType,\n+                         garrow_large_string_data_type,\n+                         GARROW,\n+                         LARGE_STRING_DATA_TYPE,\n+                         GArrowDataType)\n \n Review comment:\n   Yes. I'll fix it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-21T19:01:10.622+0000",
                    "updated": "2019-08-21T19:01:10.622+0000",
                    "started": "2019-08-21T19:01:10.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298904",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/298905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r316352713\n \n \n\n ##########\n File path: c_glib/arrow-glib/type.h\n ##########\n @@ -85,7 +87,9 @@ typedef enum {\n   GARROW_TYPE_LIST,\n   GARROW_TYPE_STRUCT,\n   GARROW_TYPE_UNION,\n-  GARROW_TYPE_DICTIONARY\n+  GARROW_TYPE_DICTIONARY,\n+  GARROW_TYPE_LARGE_STRING,\n+  GARROW_TYPE_LARGE_BINARY\n \n Review comment:\n   Yes. I'll add them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-21T19:01:14.681+0000",
                    "updated": "2019-08-21T19:01:14.681+0000",
                    "started": "2019-08-21T19:01:14.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298905",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/300583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r317323148\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   @kou I've tried the following.\r\n   \r\n   ```cpp\r\n   gboolean\r\n   garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\r\n                                                   GBytes **values,\r\n                                                   gint64 values_length,\r\n                                                   const gboolean *is_valids,\r\n                                                   gint64 is_valids_length,\r\n                                                   GError **error)\r\n   {\r\n     std::vector<std::string> strings;\r\n     for (gsize i = 0; i < values_length; ++i) {\r\n       auto value = values[i];\r\n       size_t data_size;\r\n       auto raw_data = g_bytes_get_data(value, &data_size);\r\n       strings.push_back(std::string(static_cast<const char *>(raw_data),\r\n                         data_size));\r\n     }\r\n   \r\n   ```\r\n   \r\n   But when I run test, it seems to be Segmentation fault in `g_bytes_get_data(value, &data_size)` . \r\n   \r\n   <details><summary>Crash Report log</summary><div>\r\n   \r\n   ```\r\n   Process:               ruby [11764]\r\n   Path:                  /Users/USER/*/ruby\r\n   Identifier:            ruby\r\n   Version:               0\r\n   Code Type:             X86-64 (Native)\r\n   Parent Process:        zsh [11540]\r\n   Responsible:           ruby [11764]\r\n   User ID:               501\r\n   \r\n   Date/Time:             2019-08-24 06:58:15.224 +0900\r\n   OS Version:            Mac OS X 10.14.4 (18E226)\r\n   Report Version:        12\r\n   Bridge OS Version:     3.0 (14Y677)\r\n   Anonymous UUID:        8B626633-A7F1-E769-0911-56A951ECDC39\r\n   \r\n   Sleep/Wake UUID:       2F18CB89-46FF-4F4C-97D8-577825397959\r\n   \r\n   Time Awake Since Boot: 590000 seconds\r\n   Time Since Wake:       4000 seconds\r\n   \r\n   System Integrity Protection: enabled\r\n   \r\n   Crashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n   \r\n   Exception Type:        EXC_BAD_ACCESS (SIGABRT)\r\n   Exception Codes:       EXC_I386_GPFLT\r\n   Exception Note:        EXC_CORPSE_NOTIFY\r\n   \r\n   Application Specific Information:\r\n   abort() called\r\n   \r\n   Thread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n   0   libsystem_kernel.dylib        \t0x00007fff600ee2c6 __pthread_kill + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a3bf1 pthread_kill + 284\r\n   2   libsystem_c.dylib             \t0x00007fff600586a6 abort + 127\r\n   3   ruby                          \t0x0000000106eea1f9 die + 9\r\n   4   ruby                          \t0x0000000106eea434 rb_bug_context + 564\r\n   5   ruby                          \t0x0000000107001181 sigsegv + 81\r\n   6   libsystem_platform.dylib      \t0x00007fff60198b5d _sigtramp + 29\r\n   7   ???                           \t000000000000000000 0 + 0\r\n   8   libffi.6.dylib                \t0x0000000109661914 ffi_call_unix64 + 76\r\n   9   libffi.6.dylib                \t0x00000001096612cd ffi_call + 797\r\n   10  libgirepository-1.0.1.dylib   \t0x000000010970d993 g_callable_info_invoke + 811\r\n   11  libgirepository-1.0.1.dylib   \t0x000000010970ead8 g_function_info_invoke + 150\r\n   12  gobject_introspection.bundle  \t0x00000001096f4713 rb_gi_function_info_invoke_raw + 2099\r\n   13  gobject_introspection.bundle  \t0x00000001096eb278 rg_invoke + 56\r\n   14  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   15  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   16  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   17  ruby                          \t0x0000000107087a04 rb_vm_invoke_bmethod + 1860\r\n   18  ruby                          \t0x000000010708ffb4 vm_call_bmethod + 180\r\n   19  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   20  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   21  ruby                          \t0x0000000107084019 rb_f_eval + 729\r\n   22  ruby                          \t0x0000000106faadf2 bind_eval + 114\r\n   23  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   24  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   25  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   26  ruby                          \t0x0000000107098a4e catch_i + 94\r\n   27  ruby                          \t0x0000000107085765 vm_catch_protect + 213\r\n   28  ruby                          \t0x0000000107085f77 rb_f_catch + 87\r\n   29  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   30  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   31  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   32  ruby                          \t0x0000000107098a4e catch_i + 94\r\n   33  ruby                          \t0x0000000107085765 vm_catch_protect + 213\r\n   34  ruby                          \t0x0000000107085f77 rb_f_catch + 87\r\n   35  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   36  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   37  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   38  ruby                          \t0x0000000107098ac3 loop_i + 35\r\n   39  ruby                          \t0x0000000106ef5b15 rb_rescue2 + 341\r\n   40  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   41  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   42  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   43  ruby                          \t0x0000000107098a4e catch_i + 94\r\n   44  ruby                          \t0x0000000107085765 vm_catch_protect + 213\r\n   45  ruby                          \t0x0000000107085f77 rb_f_catch + 87\r\n   46  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   47  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   48  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   49  ruby                          \t0x000000010707ebf0 rb_funcallv + 624\r\n   50  ruby                          \t0x000000010709afc3 rb_debug_inspector_open + 947\r\n   51  ruby                          \t0x0000000106ef5f69 rb_ensure + 249\r\n   52  byebug.bundle                 \t0x00000001093330e6 line_event + 678\r\n   53  ruby                          \t0x000000010709e5e5 exec_hooks_protected + 341\r\n   54  ruby                          \t0x000000010709e304 rb_exec_event_hooks + 100\r\n   55  ruby                          \t0x0000000107096c76 vm_trace_hook + 406\r\n   56  ruby                          \t0x000000010709607f vm_trace + 335\r\n   57  ruby                          \t0x000000010707b8be vm_exec_core + 35774\r\n   58  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   59  ruby                          \t0x0000000107098a4e catch_i + 94\r\n   60  ruby                          \t0x0000000107085765 vm_catch_protect + 213\r\n   61  ruby                          \t0x0000000107085f77 rb_f_catch + 87\r\n   62  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   63  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   64  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   65  ruby                          \t0x0000000107098a4e catch_i + 94\r\n   66  ruby                          \t0x0000000107085765 vm_catch_protect + 213\r\n   67  ruby                          \t0x0000000107085f77 rb_f_catch + 87\r\n   68  ruby                          \t0x000000010708f7c1 vm_call_cfunc + 353\r\n   69  ruby                          \t0x0000000107075cdf vm_exec_core + 12255\r\n   70  ruby                          \t0x000000010708a23e rb_vm_exec + 2670\r\n   71  ruby                          \t0x0000000106ef5418 ruby_exec_internal + 232\r\n   72  ruby                          \t0x0000000106ef5289 ruby_run_node + 73\r\n   73  ruby                          \t0x0000000106e66f6d main + 93\r\n   74  libdyld.dylib                 \t0x00007fff5ffb33d5 start + 1\r\n   \r\n   Thread 1:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600f036e poll + 10\r\n   1   ruby                          \t0x0000000107047b00 timer_pthread_fn + 112\r\n   2   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   3   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   4   libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 2:: gmain\r\n   0   libsystem_kernel.dylib        \t0x00007fff600f036e poll + 10\r\n   1   libglib-2.0.0.dylib           \t0x0000000109542c66 g_main_context_iterate + 422\r\n   2   libglib-2.0.0.dylib           \t0x0000000109542d74 g_main_context_iteration + 100\r\n   3   libglib-2.0.0.dylib           \t0x0000000109544956 glib_worker_main + 54\r\n   4   libglib-2.0.0.dylib           \t0x000000010956d9a2 g_thread_proxy + 66\r\n   5   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   6   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   7   libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 3:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 4:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 5:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 6:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 7:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 8:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 9:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 10:\r\n   0   libsystem_kernel.dylib        \t0x00007fff600eb86a __psynch_cvwait + 10\r\n   1   libsystem_pthread.dylib       \t0x00007fff601a456e _pthread_cond_wait + 722\r\n   2   libc++.1.dylib                \t0x00007fff5cfc2a0a std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n   3   libarrow.15.dylib             \t0x000000010c8a7ee6 arrow::internal::WorkerLoop(std::__1::shared_ptr<arrow::internal::ThreadPool::State>, std::__1::__list_iterator<std::__1::thread, void*>) + 774 (thread_pool.cc:72)\r\n   4   libarrow.15.dylib             \t0x000000010c8a7ba1 arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1::operator()() const + 65 (thread_pool.cc:225)\r\n   5   libarrow.15.dylib             \t0x000000010c8a7b1d decltype(std::__1::forward<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(fp)()) std::__1::__invoke<arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1&&) + 29 (type_traits:4339)\r\n   6   libarrow.15.dylib             \t0x000000010c8a7a85 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1>&, std::__1::__tuple_indices<>) + 37 (thread:343)\r\n   7   libarrow.15.dylib             \t0x000000010c8a7266 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_1> >(void*) + 118 (thread:352)\r\n   8   libsystem_pthread.dylib       \t0x00007fff601a12eb _pthread_body + 126\r\n   9   libsystem_pthread.dylib       \t0x00007fff601a4249 _pthread_start + 66\r\n   10  libsystem_pthread.dylib       \t0x00007fff601a040d thread_start + 13\r\n   \r\n   Thread 0 crashed with X86 Thread State (64-bit):\r\n     rax: 0x0000000000000000  rbx: 0x000000010c3d75c0  rcx: 0x00007fab4682bbe8  rdx: 0x0000000000000000\r\n     rdi: 0x0000000000000307  rsi: 0x0000000000000006  rbp: 0x00007fab4682bc20  rsp: 0x00007fab4682bbe8\r\n      r8: 0x00000000000130a8   r9: 0x00007fff92fad048  r10: 0x0000000000000000  r11: 0x0000000000000206\r\n     r12: 0x0000000000000307  r13: 0x0000000000000061  r14: 0x0000000000000006  r15: 0x000000000000002d\r\n     rip: 0x00007fff600ee2c6  rfl: 0x0000000000000206  cr2: 0x00007fff92fab188\r\n     \r\n   Logical CPU:     0\r\n   Error Code:      0x02000148\r\n   Trap Number:     133\r\n   \r\n   \r\n   Binary Images:\r\n          0x106e66000 -        0x10713bff3 +ruby (0) <3145C4C6-5FEB-392B-9014-3E68FD325F4F> /Users/USER/*/ruby\r\n          0x109330000 -        0x109335fff +byebug.bundle (0) <22DCC219-506D-3BA2-821D-BF0085DDCADB> /Users/USER/*/byebug.bundle\r\n          0x10933c000 -        0x10933dffb +encdb.bundle (0) <0C635F7F-C92E-3757-944C-466CC750C8E2> /Users/USER/*/encdb.bundle\r\n          0x109340000 -        0x109341fff +transdb.bundle (0) <5E4C0222-2C7F-368D-836C-EC87F8B425D7> /Users/USER/*/transdb.bundle\r\n          0x1093d9000 -        0x1093deff3 +stringio.bundle (0) <1A178E79-179D-391D-B8D8-655B05194A34> /Users/USER/*/stringio.bundle\r\n          0x1093e3000 -        0x1093e8fff +pathname.bundle (0) <081BA4EF-718C-30A9-BBB9-6B98728F5E17> /Users/USER/*/pathname.bundle\r\n          0x10944c000 -        0x10947efff +glib2.bundle (0) <80B6F41B-052B-36CA-8685-2F6D00AFB4F3> /Users/USER/*/glib2.bundle\r\n          0x1094a1000 -        0x1094dbffb +libgobject-2.0.0.dylib (0) <FC4A8CC9-2E0A-31FE-84ED-458AAE0143A3> /usr/local/opt/glib/lib/libgobject-2.0.0.dylib\r\n          0x109506000 -        0x1095f5fff +libglib-2.0.0.dylib (0) <44BA5764-0570-3A06-9AC7-72520F0F4BCD> /usr/local/opt/glib/lib/libglib-2.0.0.dylib\r\n          0x10964b000 -        0x109653ffb +libintl.8.dylib (0) <CD236902-DB50-39BB-86BB-E9F0D22E5649> /usr/local/opt/gettext/lib/libintl.8.dylib\r\n          0x109658000 -        0x10965aff3 +libgthread-2.0.0.dylib (0) <8604D366-F3B0-3FCE-B671-1B34F9AC3D1D> /usr/local/opt/glib/lib/libgthread-2.0.0.dylib\r\n          0x10965d000 -        0x109661fff +libffi.6.dylib (0) <E9868842-D4B2-36D7-A7C4-C3F9F6651B6C> /usr/local/opt/libffi/lib/libffi.6.dylib\r\n          0x109665000 -        0x1096cffff +libpcre.1.dylib (0) <56C30BD0-9132-3FFB-AD2B-2D995132F810> /usr/local/opt/pcre/lib/libpcre.1.dylib\r\n          0x1096e9000 -        0x1096fafff +gobject_introspection.bundle (0) <74C212E2-27A2-3127-BB94-DA44494D7E09> /Users/USER/*/gobject_introspection.bundle\r\n          0x109708000 -        0x10972affb +libgirepository-1.0.1.dylib (0) <0E1F2941-C8D9-3002-B7E1-3FD54A03BF23> /usr/local/opt/gobject-introspection/lib/libgirepository-1.0.1.dylib\r\n          0x109736000 -        0x109739ff7 +libgmodule-2.0.0.dylib (0) <B9344F42-437A-3413-868F-145F3401E788> /usr/local/opt/glib/lib/libgmodule-2.0.0.dylib\r\n          0x10973c000 -        0x109882ffb +libgio-2.0.0.dylib (0) <CC1535EA-16B8-3475-AD06-85AC2BA21B87> /usr/local/opt/glib/lib/libgio-2.0.0.dylib\r\n          0x109a3c000 -        0x109b14fff +libarrow-glib.15.dylib (0) <FFFA578C-2D73-3861-9BC2-F2D89F9EC613> /usr/local/lib/libarrow-glib.15.dylib\r\n          0x109e4a000 -        0x109f9cf6f +libcrypto.1.0.0.dylib (0) <FB2AAB04-4DC3-382E-9BCE-18DF7DAB8A30> /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib\r\n          0x10a014000 -        0x10a052fff +libssl.1.0.0.dylib (0) <C2EA8DA8-75B7-3FDF-B657-A067B1D5DDBE> /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n          0x10a06f000 -        0x10a19eff7 +libprotobuf.18.dylib (0) <21426D21-5A40-3432-AA91-B6E0100FEBDC> /usr/local/opt/protobuf/lib/libprotobuf.18.dylib\r\n          0x10a2ad000 -        0x10a2beff3 +libglog.0.dylib (0) <5357BE03-E8D4-3451-8930-416B473A12C9> /usr/local/opt/glog/lib/libglog.0.dylib\r\n          0x10a2e4000 -        0x10a2f5ff3 +liburiparser.1.dylib (0) <62484A54-DFF1-341D-B775-B2AEA440404E> /usr/local/opt/uriparser/lib/liburiparser.1.dylib\r\n          0x10a2fa000 -        0x10a315fff +liblz4.1.dylib (0) <A535907E-0628-32D8-9705-E0CCF54B60E5> /usr/local/opt/lz4/lib/liblz4.1.dylib\r\n          0x10a31a000 -        0x10a31efeb +libsnappy.1.dylib (0) <12A38208-34C5-3599-BD68-BC842E9FEBF5> /usr/local/opt/snappy/lib/libsnappy.1.dylib\r\n          0x10a323000 -        0x10a3bafff +libzstd.1.dylib (0) <867A7382-9CBC-39DD-BC03-032199112E84> /usr/local/opt/zstd/lib/libzstd.1.dylib\r\n          0x10a3c6000 -        0x10a3c6fff +libboost_system-mt.dylib (0) <6B19EE84-CC90-36DC-A5CA-A51D2003BF61> /usr/local/opt/boost/lib/libboost_system-mt.dylib\r\n          0x10a3c8000 -        0x10a3d7ff7 +libboost_filesystem-mt.dylib (0) <8B0771E3-90D0-32A2-8729-E3A349F39485> /usr/local/opt/boost/lib/libboost_filesystem-mt.dylib\r\n          0x10a3e9000 -        0x10a3fcff7 +libgflags.2.2.dylib (0) <0E6580C9-7028-3AB5-B1A5-1FD8311D9EE4> /usr/local/opt/gflags/lib/libgflags.2.2.dylib\r\n          0x10a41f000 -        0x10a436fff +libgandiva-glib.15.dylib (0) <1D6C5A46-EAD7-3D4B-8F8B-E17BAE20F5F5> /usr/local/lib/libgandiva-glib.15.dylib\r\n          0x10a4a1000 -        0x10a4d7ff3 +libre2.0.dylib (0) <37204298-AA6A-3EBF-A1EC-1F7EA9E5584B> /usr/local/opt/re2/lib/libre2.0.dylib\r\n          0x10a4f6000 -        0x10a4fcfff +libparquet-glib.15.dylib (0) <58A0D838-0FE5-382F-A11C-F0EA21A0D1B9> /usr/local/lib/libparquet-glib.15.dylib\r\n          0x10a50b000 -        0x10a557ff3 +libthrift-0.12.0.dylib (0) <05DC99E7-2446-3F77-AD68-5B77E9D529C3> /usr/local/opt/thrift/lib/libthrift-0.12.0.dylib\r\n          0x10a5b2000 -        0x10a5bcfff +libplasma-glib.15.dylib (0) <3C957F29-F393-3F12-B170-D908ED12C377> /usr/local/lib/libplasma-glib.15.dylib\r\n          0x10a5f4000 -        0x10a5f7ffb +etc.bundle (0) <5B97772A-C15D-3D5D-A0B6-E4424BE0E9F9> /Users/USER/*/etc.bundle\r\n          0x10a5fb000 -        0x10a5fcffb +console.bundle (0) <D16E8311-8007-334C-A2FB-59B23EF4C854> /Users/USER/*/console.bundle\r\n          0x10ac00000 -        0x10af3fff7 +libparquet.15.dylib (0) <80240D56-ADDD-3EB0-887A-C60BD768F831> /usr/local/lib/libparquet.15.dylib\r\n          0x10bb3a000 -        0x10bb9cfff +libplasma.15.dylib (0) <302BF5A4-BD64-3369-A803-26D34479E267> /usr/local/lib/libplasma.15.dylib\r\n          0x10bd4c000 -        0x10bd57fff +zlib.bundle (0) <82C7949B-6057-357B-AAF0-A487C07083F5> /Users/USER/*/zlib.bundle\r\n          0x10bdcc000 -        0x10be01ff3 +ripper.bundle (0) <3530415D-2E5A-33E1-AF93-5DC525DD354D> /Users/USER/*/ripper.bundle\r\n          0x10becc000 -        0x10becfff7 +readline.bundle (0) <7DB1D417-6995-3275-9C64-AF9516EB7E13> /Users/USER/*/readline.bundle\r\n          0x10bed5000 -        0x10bef9fff +libreadline.8.dylib (0) <F248F262-732F-3DFD-889C-6793E44E03E2> /usr/local/opt/readline/lib/libreadline.8.dylib\r\n          0x10bf11000 -        0x10bf31fff +psych.bundle (0) <6461EC92-6989-3309-8641-13ADA93181F4> /Users/USER/*/psych.bundle\r\n          0x10c315000 -        0x10c316ffb +windows_31j.bundle (0) <B8D332B9-5486-3A49-8E64-D703F755A253> /Users/USER/*/windows_31j.bundle\r\n          0x10c335000 -        0x10c39f6ef  dyld (655.1.1) <F217F7F8-A795-3109-B77F-B1E2277F3E3B> /usr/lib/dyld\r\n          0x10c400000 -        0x10d450ff7 +libarrow.15.dylib (0) <2F1BE8A6-317D-392C-9AAA-0A733A245166> /usr/local/lib/libarrow.15.dylib\r\n          0x110c5d000 -        0x111fa9fff +libgandiva.15.dylib (0) <C66DF5D8-0C2D-3B83-AC04-B0FB1CACD2FE> /usr/local/lib/libgandiva.15.dylib\r\n          0x1131a9000 -        0x1131ccff3 +japanese_sjis.bundle (0) <356BF7BC-EDDA-31B6-9678-A2D18658E587> /Users/USER/*/japanese_sjis.bundle\r\n          0x113ccd000 -        0x113ce0ffb +single_byte.bundle (0) <C4A120AC-4EC2-3B24-B538-D856615FF7B4> /Users/USER/*/single_byte.bundle\r\n          0x113ce8000 -        0x113cebfff +strscan.bundle (0) <8EDBB682-5597-390A-8D5C-24CE8FF66EB8> /Users/USER/*/strscan.bundle\r\n          0x113cef000 -        0x113cf3ffb +parser.bundle (0) <F87E92B8-D787-3908-8BCE-B5BE4A35CE89> /Users/USER/*/parser.bundle\r\n          0x113cf7000 -        0x113cfdfff +generator.bundle (0) <27415394-3FCE-358F-B49C-DF58341D2FA6> /Users/USER/*/generator.bundle\r\n          0x113d01000 -        0x113d21fff +socket.bundle (0) <C9DD2F77-93B3-3746-8D5F-B1CF6250EB43> /Users/USER/*/socket.bundle\r\n          0x113d2b000 -        0x113d2bffb +wait.bundle (0) <32830497-779B-3508-821E-50ACC972520E> /Users/USER/*/wait.bundle\r\n       0x7fff2ff72000 -     0x7fff2ff72fff  com.apple.Accelerate (1.11 - Accelerate 1.11) <762942CB-CFC9-3A0C-9645-A56523A06426> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate\r\n       0x7fff2ff8a000 -     0x7fff30623fef  com.apple.vImage (8.1 - ???) <F9C4B95C-7BE9-30A4-98D4-FD9996EE5E81> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage\r\n       0x7fff30624000 -     0x7fff3089dff3  libBLAS.dylib (1243.200.4) <F2B8340C-4147-3EE4-9BDF-1C259F9CB76E> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\r\n       0x7fff3089e000 -     0x7fff30910ffb  libBNNS.dylib (38.250.1) <95A91B57-17B8-389F-B324-3AD42BBEA3E6> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib\r\n       0x7fff30911000 -     0x7fff30cbaff3  libLAPACK.dylib (1243.200.4) <92175DF4-863A-3780-909A-A3E5C410F2E9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\r\n       0x7fff30cbb000 -     0x7fff30cd0feb  libLinearAlgebra.dylib (1243.200.4) <BD6B8E28-C982-3002-868C-C96A18175030> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib\r\n       0x7fff30cd1000 -     0x7fff30cd6ff3  libQuadrature.dylib (3.200.2) <354D7970-0570-32E0-ABAE-222DAAF1F7A9> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib\r\n       0x7fff30cd7000 -     0x7fff30d53ff3  libSparse.dylib (79.200.5) <DCC01AE4-FC16-3C7B-9010-999411448164> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib\r\n       0x7fff30d54000 -     0x7fff30d67fe3  libSparseBLAS.dylib (1243.200.4) <95B6FFFD-CDD5-3ABB-B862-6A86720DCD77> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib\r\n       0x7fff30d68000 -     0x7fff30f4fff7  libvDSP.dylib (671.250.4) <7B110627-A9C1-3FB7-A077-0C7741BA25D8> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib\r\n       0x7fff30f50000 -     0x7fff31003ff7  libvMisc.dylib (671.250.4) <41FB4684-9DC8-3C19-8E2D-3BB7E6F74AAA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib\r\n       0x7fff31004000 -     0x7fff31004fff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <74288115-EF61-30B6-843F-0593B31D4929> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib\r\n       0x7fff311a6000 -     0x7fff31f5bfff  com.apple.AppKit (6.9 - 1671.40.119) <0A857684-99C7-30A9-8E23-D3015C6B24A3> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\r\n       0x7fff31fad000 -     0x7fff31fadfff  com.apple.ApplicationServices (50.1 - 50.1) <E57E6BAC-3CA7-3EFB-9A6B-ACF662E07FAC> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices\r\n       0x7fff31fae000 -     0x7fff32019fff  com.apple.ApplicationServices.ATS (377 - 453.11.2.2) <5B30E86D-B3AB-3346-A19F-F2CABF342465> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS\r\n       0x7fff320b2000 -     0x7fff321c9fff  libFontParser.dylib (228.6.2.3) <BBB2EECE-7C24-3D43-A902-EB473A70EDED> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib\r\n       0x7fff321ca000 -     0x7fff3220cfff  libFontRegistry.dylib (228.12.2.3) <DEA7AE34-2FA6-336E-BF00-00CA2BDC7584> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib\r\n       0x7fff322fd000 -     0x7fff32301ff3  com.apple.ColorSyncLegacy (4.13.0 - 1) <6EDD928D-BC75-385E-AB04-3CB63EAEBF96> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy\r\n       0x7fff3239c000 -     0x7fff323eeff7  com.apple.HIServices (1.22 - 627.15) <1B4C3D08-1DBA-365B-9362-C6708D8844AA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices\r\n       0x7fff323ef000 -     0x7fff323fefff  com.apple.LangAnalysis (1.7.0 - 1.7.0) <76B698A9-18B9-3089-9570-4FC3F754D56D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis\r\n       0x7fff323ff000 -     0x7fff32448ff7  com.apple.print.framework.PrintCore (14.2 - 503.8) <885645E0-D760-35EC-B506-7FC2763390DF> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore\r\n       0x7fff32449000 -     0x7fff32482ff7  com.apple.QD (3.12 - 407.2) <A414332F-72EC-393B-B2BC-7285268A19BD> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD\r\n       0x7fff32483000 -     0x7fff3248ffff  com.apple.speech.synthesis.framework (8.1.2 - 8.1.2) <1F910DC7-410A-391B-A03D-17605E50B688> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis\r\n       0x7fff32490000 -     0x7fff32707ff7  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <1C76AD80-1106-312E-B2C0-126A8D62F192> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox\r\n       0x7fff32709000 -     0x7fff32709fff  com.apple.audio.units.AudioUnit (1.14 - 1.14) <6AFA15D5-1886-3EBF-ADC9-90421375DB30> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit\r\n       0x7fff32a61000 -     0x7fff32e02fff  com.apple.CFNetwork (978.0.7 - 978.0.7) <EFB91439-6953-3CD4-8A14-3E7DC90DDF7E> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork\r\n       0x7fff32e17000 -     0x7fff32e17fff  com.apple.Carbon (158 - 158) <080ECFD9-9C4B-3038-9F4B-BE111473E1DE> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon\r\n       0x7fff32e18000 -     0x7fff32e1bffb  com.apple.CommonPanels (1.2.6 - 98) <D56205C5-F466-3B28-9FE3-5B5E1F1ECEF3> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels\r\n       0x7fff32e1c000 -     0x7fff33112fff  com.apple.HIToolbox (2.1.1 - 918.4) <CBD6613A-C5A5-3CF3-866A-B8A8C6FD64B5> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\r\n       0x7fff33113000 -     0x7fff33116ff3  com.apple.help (1.3.8 - 66) <80B6EAF2-4745-3C04-AC10-4FC3EB08CB8D> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help\r\n       0x7fff33117000 -     0x7fff3311cff7  com.apple.ImageCapture (9.0 - 1534.2) <B02BE202-793D-3609-8E60-694A39D75CD0> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture\r\n       0x7fff3311d000 -     0x7fff331b2ff3  com.apple.ink.framework (10.9 - 225) <091165EE-D540-3978-9B0C-2FAB5CB185A8> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink\r\n       0x7fff331b3000 -     0x7fff331cbff7  com.apple.openscripting (1.7 - 179.1) <ED25E087-6A14-32E3-9344-3907541ED9A1> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting\r\n       0x7fff331eb000 -     0x7fff331ecff7  com.apple.print.framework.Print (14.2 - 267.4) <3E310F68-2BC7-365B-B36C-AAC243C7FFC4> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print\r\n       0x7fff331ed000 -     0x7fff331efff7  com.apple.securityhi (9.0 - 55006) <9A3E5426-CAC6-3B28-A3B7-C97A1B5CE9BC> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI\r\n       0x7fff331f0000 -     0x7fff331f6ff7  com.apple.speech.recognition.framework (6.0.3 - 6.0.3) <E38A62C5-31EE-3BE7-83E5-CF126ECF4F51> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition\r\n       0x7fff33326000 -     0x7fff333f2ff7  com.apple.ColorSync (4.13.0 - 3340.7) <3ABFA780-F46A-3F0A-8504-005ADDA0662E> /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync\r\n       0x7fff3357e000 -     0x7fff33604fff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <7D8A5C9A-3F58-38C2-A1DC-20765150C742> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n       0x7fff33668000 -     0x7fff33692ffb  com.apple.CoreBluetooth (1.0 - 1) <D0C72748-F75A-3C27-9620-C7973C4D365D> /System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth\r\n       0x7fff33693000 -     0x7fff33a17fe3  com.apple.CoreData (120 - 866.5) <7A8DBE88-C7D4-39B4-87E6-508DA68BDAA8> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData\r\n       0x7fff33a18000 -     0x7fff33affff7  com.apple.CoreDisplay (101.3 - 108.11) <373AC375-0178-3721-8FFB-248D96E6AB05> /System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay\r\n       0x7fff33b00000 -     0x7fff33f43fff  com.apple.CoreFoundation (6.9 - 1570.16) <F3DFF269-6705-35AD-9F01-66D77DD1B518> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n       0x7fff33f45000 -     0x7fff345d4fe7  com.apple.CoreGraphics (2.0 - 1251.12) <58D98B52-5BEF-3345-B8DD-AAE476234FC1> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics\r\n       0x7fff345d6000 -     0x7fff348f6fff  com.apple.CoreImage (14.2.0 - 720.0.130) <D09743D4-3B21-367D-8C4A-3DB0F1C1E36D> /System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage\r\n       0x7fff34d51000 -     0x7fff34d51fff  com.apple.CoreServices (944.3 - 944.3) <364A9C3B-6841-3E34-A02A-8227FB5C9030> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices\r\n       0x7fff34d52000 -     0x7fff34dceff7  com.apple.AE (773 - 773) <3E32B3FF-0A2E-39F6-BBE0-F2E9607AB83A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE\r\n       0x7fff34dcf000 -     0x7fff350a6fff  com.apple.CoreServices.CarbonCore (1178.32 - 1178.32) <B5B61DE0-93F8-3A9F-8AA6-ACAAD04B3547> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore\r\n       0x7fff350a7000 -     0x7fff350efff7  com.apple.DictionaryServices (1.2 - 284.16.3) <3EE59BD1-FCDD-3DE2-A7D6-6C503564E1AC> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices\r\n       0x7fff350f0000 -     0x7fff350f8ffb  com.apple.CoreServices.FSEvents (1239.200.12 - 1239.200.12) <727151AB-D38F-39B8-B7B3-F0039DBD45D0> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents\r\n       0x7fff350f9000 -     0x7fff352abfff  com.apple.LaunchServices (944.3 - 944.3) <7BB5AEC5-A509-3188-9884-619E0DF8EED6> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices\r\n       0x7fff352ac000 -     0x7fff3534aff7  com.apple.Metadata (10.7.0 - 1191.56) <8DD9AC75-7D3E-3607-BEA0-556E98C30765> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata\r\n       0x7fff3534b000 -     0x7fff35395ff7  com.apple.CoreServices.OSServices (944.3 - 944.3) <B631283D-9B71-3BF0-B0E7-65F8D444179F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices\r\n       0x7fff35396000 -     0x7fff353fdff7  com.apple.SearchKit (1.4.0 - 1.4.0) <FB1A5F99-FB2F-3533-9658-EB0C82BA2705> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit\r\n       0x7fff353fe000 -     0x7fff3541fff3  com.apple.coreservices.SharedFileList (71.28 - 71.28) <B8B5D959-4236-369D-847D-E696A8293420> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList\r\n       0x7fff3572a000 -     0x7fff3588cff3  com.apple.CoreText (352.0 - 584.26.2.7) <C7E919A8-5840-39C9-A9E7-0E686F486109> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText\r\n       0x7fff3588d000 -     0x7fff358caff3  com.apple.CoreVideo (1.8 - 0.0) <0376A7EC-8C71-3F26-9599-4CA7AB7924EA> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo\r\n       0x7fff358cb000 -     0x7fff35959ffb  com.apple.framework.CoreWLAN (13.0 - 1370.8) <68770CCD-9C7F-31AB-8BBB-0DE4577D5F61> /System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN\r\n       0x7fff35bb0000 -     0x7fff35bb5ffb  com.apple.DiskArbitration (2.7 - 2.7) <F30DF62A-0BE9-371D-8D86-96554FF45811> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration\r\n       0x7fff35d74000 -     0x7fff36121ff3  com.apple.Foundation (6.9 - 1570.16) <84055403-9921-3EFC-B593-8F0600EBEE80> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\r\n       0x7fff36190000 -     0x7fff361bfffb  com.apple.GSS (4.0 - 2.0) <F5E9FADD-D2DF-3A27-A08B-C74C9F7DB98D> /System/Library/Frameworks/GSS.framework/Versions/A/GSS\r\n       0x7fff362bf000 -     0x7fff363c7ff7  com.apple.Bluetooth (6.0.11 - 6.0.11f4) <D695F37C-27CE-3231-8136-49124F367418> /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth\r\n       0x7fff36429000 -     0x7fff364b8fff  com.apple.framework.IOKit (2.0.2 - 1483.250.15) <1170EC49-1912-3657-9C71-991653959191> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\r\n       0x7fff364ba000 -     0x7fff364c9ff3  com.apple.IOSurface (255.4.2 - 255.4.2) <9025E034-7D75-36E3-B71B-96E91FAE109B> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface\r\n       0x7fff3651d000 -     0x7fff366a8fef  com.apple.ImageIO.framework (3.3.0 - 1824.6) <81BA6C12-123A-3FD8-9E88-0698100471A6> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO\r\n       0x7fff366a9000 -     0x7fff366adffb  libGIF.dylib (1824.6) <4B7B283B-84C8-38D1-BED4-B507C3EF6E7E> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\r\n       0x7fff366ae000 -     0x7fff3678afef  libJP2.dylib (1824.6) <E2161CB0-E1B7-351D-9FF3-4CF68A538976> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib\r\n       0x7fff3678b000 -     0x7fff367b0feb  libJPEG.dylib (1824.6) <0968BAF1-5E5A-3AA0-A971-3B3FFC4A4B66> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib\r\n       0x7fff36a73000 -     0x7fff36a99feb  libPng.dylib (1824.6) <661821A6-4BF5-31C6-AFDB-7874A446756C> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib\r\n       0x7fff36a9a000 -     0x7fff36a9cffb  libRadiance.dylib (1824.6) <0154D539-DF89-3F75-A8F1-92EF147422AF> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib\r\n       0x7fff36a9d000 -     0x7fff36aeafe7  libTIFF.dylib (1824.6) <D608EAA9-4159-347E-A449-0A8CAB85DC02> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib\r\n       0x7fff37c60000 -     0x7fff37c79fff  com.apple.Kerberos (3.0 - 1) <39F3F99E-036E-3406-80D9-8A845D820D4D> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos\r\n       0x7fff3868d000 -     0x7fff3871cff7  com.apple.Metal (161.7.1 - 161.7.1) <18BEB663-0D31-3255-9710-50BC5C3D2A0F> /System/Library/Frameworks/Metal.framework/Versions/A/Metal\r\n       0x7fff38738000 -     0x7fff38757ff7  com.apple.MetalPerformanceShaders.MPSCore (1.0 - 1) <BE0FF8B9-2DBA-3276-A293-C8B0F62BFFC4> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore\r\n       0x7fff38758000 -     0x7fff387d4fe7  com.apple.MetalPerformanceShaders.MPSImage (1.0 - 1) <7E94924C-1648-3AE2-A32E-FC0AFCA433C6> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage\r\n       0x7fff387d5000 -     0x7fff387fcfff  com.apple.MetalPerformanceShaders.MPSMatrix (1.0 - 1) <E878F04A-43F8-3AA4-B9D8-0401F5F98653> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix\r\n       0x7fff387fd000 -     0x7fff38928ff7  com.apple.MetalPerformanceShaders.MPSNeuralNetwork (1.0 - 1) <4866922C-9732-3FCE-9419-402E5DD22639> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork\r\n       0x7fff38929000 -     0x7fff38943fff  com.apple.MetalPerformanceShaders.MPSRayIntersector (1.0 - 1) <80CB3AF2-4401-3B3C-8941-7DEB648DD001> /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector\r\n       0x7fff38944000 -     0x7fff38945ff7  com.apple.MetalPerformanceShaders.MetalPerformanceShaders (1.0 - 1) <A589BBEA-93C6-325C-A695-6E7371B8477C> /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders\r\n       0x7fff3973c000 -     0x7fff39748ff7  com.apple.NetFS (6.0 - 4.0) <7278E8E5-1583-3964-91DA-FB2127DFD63A> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS\r\n       0x7fff3c1e6000 -     0x7fff3c23dff7  com.apple.opencl (2.15.3 - 2.15.3) <F558A6A7-3B33-320E-83C0-CF16220A150F> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL\r\n       0x7fff3c23e000 -     0x7fff3c259ff7  com.apple.CFOpenDirectory (10.14 - 207.200.4) <386A02AB-0BFA-3847-A56A-2E0EEC5E5D33> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory\r\n       0x7fff3c25a000 -     0x7fff3c265ffb  com.apple.OpenDirectory (10.14 - 207.200.4) <0BD19D17-7F00-3D56-8734-2EE52992B118> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory\r\n       0x7fff3cbb5000 -     0x7fff3cbb7fff  libCVMSPluginSupport.dylib (17.5.4) <36EB7FAE-4E66-36BF-9B39-623B19486B3B> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib\r\n       0x7fff3cbb8000 -     0x7fff3cbbdff3  libCoreFSCache.dylib (166.2) <1AD45004-2625-3351-8087-77878B95348F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib\r\n       0x7fff3cbbe000 -     0x7fff3cbc2fff  libCoreVMClient.dylib (166.2) <E7FBDAEF-BC56-3662-8D59-71FF88D95F8C> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib\r\n       0x7fff3cbc3000 -     0x7fff3cbcbff7  libGFXShared.dylib (17.5.4) <E3B4FD28-FF4B-3174-AEB3-9EA12EF88100> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib\r\n       0x7fff3cbcc000 -     0x7fff3cbd7fff  libGL.dylib (17.5.4) <F6D39828-B5D0-3F8D-8DE0-3683A17042E2> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib\r\n       0x7fff3cbd8000 -     0x7fff3cc12fe7  libGLImage.dylib (17.5.4) <7EE3273C-41C2-387F-A4B7-793EFAA67769> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib\r\n       0x7fff3cd86000 -     0x7fff3cdc4fff  libGLU.dylib (17.5.4) <B56C2FEC-CB14-3B61-ADEB-FD4A92931F16> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib\r\n       0x7fff3d761000 -     0x7fff3d770ffb  com.apple.opengl (17.5.4 - 17.5.4) <34FA5E8C-0FAF-3708-836B-E8ACB67EF4F4> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\r\n       0x7fff3e571000 -     0x7fff3e7c6fff  com.apple.QuartzCore (1.11 - 697.24.4.2) <BB1034F0-B791-3AF1-B166-6532B2AB54FE> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore\r\n       0x7fff3effa000 -     0x7fff3f2f8ff7  com.apple.security (7.0 - 58286.251.4) <2084C515-AD64-3A48-BE3E-811CAA5A0E41> /System/Library/Frameworks/Security.framework/Versions/A/Security\r\n       0x7fff3f2f9000 -     0x7fff3f385fff  com.apple.securityfoundation (6.0 - 55185.251.1) <4A36D3BA-02B5-3C52-8B49-08EC290E1924> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation\r\n       0x7fff3f3b7000 -     0x7fff3f3bbff3  com.apple.xpc.ServiceManagement (1.0 - 1) <139D85D7-C356-36FA-B8F4-696FD37FD1EA> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement\r\n       0x7fff3f753000 -     0x7fff3f7c0fff  com.apple.SystemConfiguration (1.17 - 1.17) <90F4626B-F9F6-377C-AA62-B8C23E857244> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration\r\n       0x7fff42bd5000 -     0x7fff42c7afe7  com.apple.APFS (1.0 - 1) <BA5A03A1-09AF-3859-AA38-BD24C4225E23> /System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS\r\n       0x7fff4367a000 -     0x7fff4367bff7  com.apple.AggregateDictionary (1.0 - 1) <49B5FD7F-A50C-3D67-BFAB-1C25E60F685A> /System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary\r\n       0x7fff43c75000 -     0x7fff43ca1ff7  com.apple.framework.Apple80211 (13.0 - 1376.3) <9D32EF36-80E0-35DA-9270-2865C91F1020> /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Apple80211\r\n       0x7fff43f79000 -     0x7fff43f88fc7  com.apple.AppleFSCompression (96.200.3 - 1.0) <5D6A617C-999A-3D51-8350-109D55E9428A> /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression\r\n       0x7fff44082000 -     0x7fff4408dfff  com.apple.AppleIDAuthSupport (1.0 - 1) <91975ABC-B2EB-3630-A81E-69A1B95E4D19> /System/Library/PrivateFrameworks/AppleIDAuthSupport.framework/Versions/A/AppleIDAuthSupport\r\n       0x7fff440ce000 -     0x7fff44117ff3  com.apple.AppleJPEG (1.0 - 1) <EED8C42F-AF5B-355F-BC86-66A6458513C7> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG\r\n       0x7fff4436b000 -     0x7fff4438dfff  com.apple.applesauce (1.0 - ???) <48562D0B-1A1D-3D62-8BC2-61C55D0DCECE> /System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce\r\n       0x7fff444ec000 -     0x7fff44500ffb  com.apple.AssertionServices (1.0 - 1) <F64A3177-294E-320C-A0E1-25C4322B98E9> /System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices\r\n       0x7fff448cb000 -     0x7fff44b68ff7  com.apple.AuthKit (1.0 - 1) <5BC0D7C7-A46A-3B1A-BDC9-7E9150B5A876> /System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/AuthKit\r\n       0x7fff44d2a000 -     0x7fff44d32fff  com.apple.coreservices.BackgroundTaskManagement (1.0 - 57.1) <7F48D9BD-17A8-3A76-8828-EC49245735EE> /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement\r\n       0x7fff44d33000 -     0x7fff44dc8fff  com.apple.backup.framework (1.10.4 - ???) <8247B1BE-DF97-31DC-BCC2-1A15797352D3> /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup\r\n       0x7fff44dc9000 -     0x7fff44e36fff  com.apple.BaseBoard (360.27 - 360.27) <215A242E-BD57-3A4B-BCA4-FCC9D674CE7B> /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard\r\n       0x7fff46a9b000 -     0x7fff46aa4ffb  com.apple.CommonAuth (4.0 - 2.0) <55CEF8E6-A659-3D68-BEE0-1236F36E494C> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth\r\n       0x7fff4777a000 -     0x7fff4778bff7  com.apple.CoreEmoji (1.0 - 69.19.9) <90ACD3F0-1542-3094-A1F6-FF2F508A8561> /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji\r\n       0x7fff47d34000 -     0x7fff47d9aff7  com.apple.CoreNLP (1.0 - 130.15.22) <5191A681-5DF3-359A-B401-C29109EA420A> /System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP\r\n       0x7fff48047000 -     0x7fff4804fff7  com.apple.CorePhoneNumbers (1.0 - 1) <01CAC5E2-B6B1-3444-8939-595A9301399C> /System/Library/PrivateFrameworks/CorePhoneNumbers.framework/Versions/A/CorePhoneNumbers\r\n       0x7fff485c2000 -     0x7fff48646fff  com.apple.CoreSymbolication (10.2 - 64490.25.1) <CBA82F08-26CC-3FB4-9539-B0B55B35C5E1> /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication\r\n       0x7fff486d5000 -     0x7fff48800ff7  com.apple.coreui (2.1 - 499.10) <50A90628-5400-3EBC-A1FE-87D68BC59377> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI\r\n       0x7fff48801000 -     0x7fff4899dffb  com.apple.CoreUtils (5.7.6 - 576.49) <60FF6102-EEBB-302E-8DE4-6DCBB689ACC8> /System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils\r\n       0x7fff489f1000 -     0x7fff48a54ff7  com.apple.framework.CoreWiFi (13.0 - 1370.8) <F8634D22-1AD4-36B0-848C-BA60CC88BDAE> /System/Library/PrivateFrameworks/CoreWiFi.framework/Versions/A/CoreWiFi\r\n       0x7fff48a55000 -     0x7fff48a66ff7  com.apple.CrashReporterSupport (10.13 - 938.25) <AB842AE0-8594-3530-ABB7-30E583F82FC5> /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport\r\n       0x7fff48af5000 -     0x7fff48b04fff  com.apple.framework.DFRFoundation (1.0 - 211.1) <201CCA68-44E4-3E09-8604-7D8833AC803B> /System/Library/PrivateFrameworks/DFRFoundation.framework/Versions/A/DFRFoundation\r\n       0x7fff48b05000 -     0x7fff48b09fff  com.apple.DSExternalDisplay (3.1 - 380) <6AC4F805-7AAF-31D3-B614-C78B61907EE3> /System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay\r\n       0x7fff48b8a000 -     0x7fff48bffff3  com.apple.datadetectorscore (7.0 - 590.24) <2A591F27-0FEE-3CE1-B6C3-7A3B56C9D18D> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore\r\n       0x7fff48c4b000 -     0x7fff48c88ff7  com.apple.DebugSymbols (190 - 190) <F2269F7B-5FCC-3187-8F13-A15F2C9D21E5> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols\r\n       0x7fff48c89000 -     0x7fff48dc4fff  com.apple.desktopservices (1.13.1 - ???) <420CC09F-7C18-3644-A024-DA8997FECA02> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv\r\n       0x7fff49cff000 -     0x7fff4a11afff  com.apple.vision.FaceCore (3.3.4 - 3.3.4) <D642D5E1-C7C5-3EBF-9D0A-397BDE2A5723> /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore\r\n       0x7fff4f06f000 -     0x7fff4f074fff  com.apple.GPUWrangler (3.30.14 - 3.30.14) <5D15F5B8-9D7B-356D-A224-A86CF809BFBF> /System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler\r\n       0x7fff4fe79000 -     0x7fff4fe88fff  com.apple.GraphVisualizer (1.0 - 5) <C261C18C-C66F-39BA-A640-727434ADBEB7> /System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer\r\n       0x7fff4ffd5000 -     0x7fff50049ffb  com.apple.Heimdal (4.0 - 2.0) <05B753FE-8F65-3764-8E18-F31902064BA1> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal\r\n       0x7fff51333000 -     0x7fff5133affb  com.apple.IOAccelerator (404.8 - 404.8) <FB11472D-74D7-31D4-8DF6-9A668BB08D4F> /System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator\r\n       0x7fff5133e000 -     0x7fff51356fff  com.apple.IOPresentment (1.0 - 42.6) <B3365E07-6FC3-3AAA-884D-D6EE7ACDAE16> /System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment\r\n       0x7fff516fe000 -     0x7fff5172bff7  com.apple.IconServices (379 - 379) <189807AC-4BB1-3C37-B6EC-D4F0B645902D> /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices\r\n       0x7fff519bd000 -     0x7fff519cfff3  com.apple.security.KeychainCircle.KeychainCircle (1.0 - 1) <731EEEC5-1613-3725-B33C-B38BBD55FA96> /System/Library/PrivateFrameworks/KeychainCircle.framework/Versions/A/KeychainCircle\r\n       0x7fff519ea000 -     0x7fff51ac5ff7  com.apple.LanguageModeling (1.0 - 159.15.15) <229A8E92-CCB6-3BC7-BCD3-B2309FA744B3> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling\r\n       0x7fff51ac6000 -     0x7fff51b02ff7  com.apple.Lexicon-framework (1.0 - 33.15.10) <30D3EEF3-31E5-3DE8-8158-40627C358AF6> /System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon\r\n       0x7fff51b09000 -     0x7fff51b0efff  com.apple.LinguisticData (1.0 - 238.24.1) <E155D8DF-8AC1-34B2-B143-BBD3408C8D19> /System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData\r\n       0x7fff527fd000 -     0x7fff52825ff7  com.apple.spotlight.metadata.utilities (1.0 - 1191.56) <550876F2-D905-3D65-8FA6-3366D857437B> /System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities\r\n       0x7fff52826000 -     0x7fff528b0fff  com.apple.gpusw.MetalTools (1.0 - 1) <09394594-A80D-3D8B-99E8-E71693909FA1> /System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools\r\n       0x7fff52a5c000 -     0x7fff52a76fff  com.apple.MobileKeyBag (2.0 - 1.0) <A38DB402-7EB2-3D81-A9FA-4C95748FFC2D> /System/Library/PrivateFrameworks/MobileKeyBag.framework/Versions/A/MobileKeyBag\r\n       0x7fff52afe000 -     0x7fff52b28ffb  com.apple.MultitouchSupport.framework (2440.7 - 2440.7) <FAE48832-BB56-35C9-B433-F0D03EF50FCD> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport\r\n       0x7fff52d64000 -     0x7fff52d6efff  com.apple.NetAuth (6.2 - 6.2) <216DF366-7A3E-39E7-896C-7CDFD2A9BD3D> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth\r\n       0x7fff535cf000 -     0x7fff53620ff3  com.apple.OTSVG (1.0 - ???) <AF7D1285-08EE-3EEB-B8B7-6C358768473D> /System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG\r\n       0x7fff546d4000 -     0x7fff546e3ff7  com.apple.PerformanceAnalysis (1.218.2 - 218.2) <DAF9D379-F0E9-3929-829E-7B2FAFC7DC64> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis\r\n       0x7fff56573000 -     0x7fff56591ff7  com.apple.ProtocolBuffer (1 - 263) <DBBA73C9-E9AE-3CF5-88A4-7E4262BDE34E> /System/Library/PrivateFrameworks/ProtocolBuffer.framework/Versions/A/ProtocolBuffer\r\n       0x7fff56729000 -     0x7fff56779fff  com.apple.ROCKit (27.6 - 27.6) <A8116AFC-F78F-32BF-A66C-ED3B5E9FF1D9> /System/Library/PrivateFrameworks/ROCKit.framework/Versions/A/ROCKit\r\n       0x7fff568c6000 -     0x7fff568e8fff  com.apple.RemoteViewServices (2.0 - 128) <E22D4E74-7B87-31ED-86D2-D63258D1B792> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices\r\n       0x7fff580e7000 -     0x7fff58201fff  com.apple.Sharing (1288.25 - 1288.25) <E4C2CE6D-757D-322F-AA8D-52A0993E02D6> /System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing\r\n       0x7fff58fa9000 -     0x7fff59252fff  com.apple.SkyLight (1.600.0 - 340.9) <A962D996-6561-3993-B470-EFD6EE4BFA9C> /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight\r\n       0x7fff599f4000 -     0x7fff59a00fff  com.apple.SpeechRecognitionCore (5.0.21 - 5.0.21) <08222836-F14B-3B9D-BCB9-3167505438E4> /System/Library/PrivateFrameworks/SpeechRecognitionCore.framework/Versions/A/SpeechRecognitionCore\r\n       0x7fff5a151000 -     0x7fff5a1dcfc7  com.apple.Symbolication (10.2 - 64490.38.1) <15A1DF22-3EE2-359A-8F94-B27F89F35ECE> /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication\r\n       0x7fff5a6c3000 -     0x7fff5a6cfffb  com.apple.TCC (1.0 - 1) <95D4B7DF-78F3-3948-AA63-6425AF2C00CD> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC\r\n       0x7fff5a935000 -     0x7fff5a9fdff3  com.apple.TextureIO (3.8.4 - 3.8.1) <29383676-6133-3EB4-8CAC-5A6F25FE2F4D> /System/Library/PrivateFrameworks/TextureIO.framework/Versions/A/TextureIO\r\n       0x7fff5aaba000 -     0x7fff5ac70ff7  com.apple.UIFoundation (1.0 - 551) <5359E30D-AF76-3013-8B50-0A93DB97BB8F> /System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation\r\n       0x7fff5c19c000 -     0x7fff5c19ffff  com.apple.dt.XCTTargetBootstrap (1.0 - 14490.46.2) <7763C799-CE25-302D-96D7-2A4DD9BEEE9A> /System/Library/PrivateFrameworks/XCTTargetBootstrap.framework/Versions/A/XCTTargetBootstrap\r\n       0x7fff5c5a0000 -     0x7fff5c5a2ffb  com.apple.loginsupport (1.0 - 1) <F9C63D6B-5191-3D95-B5C7-B998FA148AA6> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport\r\n       0x7fff5c869000 -     0x7fff5c89dfff  libCRFSuite.dylib (41.15.4) <43D02A64-2A7B-3825-8097-A6747AF914EE> /usr/lib/libCRFSuite.dylib\r\n       0x7fff5c8a0000 -     0x7fff5c8aaff7  libChineseTokenizer.dylib (28.15.3) <BE41A678-907E-3031-B2BA-ECDB81282499> /usr/lib/libChineseTokenizer.dylib\r\n       0x7fff5c938000 -     0x7fff5c939ffb  libDiagnosticMessagesClient.dylib (107) <B5675E8C-2F34-3E0A-B7E8-6F2373589038> /usr/lib/libDiagnosticMessagesClient.dylib\r\n       0x7fff5c970000 -     0x7fff5cbc7ffb  libFosl_dynamic.dylib (18.3.2) <C46C13F6-2799-39A0-BB32-126C2259194A> /usr/lib/libFosl_dynamic.dylib\r\n       0x7fff5cc18000 -     0x7fff5cc36fff  libMobileGestalt.dylib (645.250.13) <6B4E26AD-D712-360B-904C-877C24D89393> /usr/lib/libMobileGestalt.dylib\r\n       0x7fff5cc37000 -     0x7fff5cc37fff  libOpenScriptingUtil.dylib (179.1) <5C6CFA80-CBCD-35EB-A69C-72C3B2E8FF50> /usr/lib/libOpenScriptingUtil.dylib\r\n       0x7fff5cd77000 -     0x7fff5cd78ffb  libSystem.B.dylib (1252.250.1) <72841192-B0C9-36A0-8E55-ED651EADEF08> /usr/lib/libSystem.B.dylib\r\n       0x7fff5cdf4000 -     0x7fff5cdf5fff  libThaiTokenizer.dylib (2.15.1) <3D80A800-D49A-305E-9DF0-E6FB11D4FD65> /usr/lib/libThaiTokenizer.dylib\r\n       0x7fff5ce07000 -     0x7fff5ce1dffb  libapple_nghttp2.dylib (1.24.1) <96F6DF29-D31C-3097-9C3E-63B1D62D756C> /usr/lib/libapple_nghttp2.dylib\r\n       0x7fff5ce1e000 -     0x7fff5ce47ffb  libarchive.2.dylib (54.250.1) <D6370CDB-920D-37A3-A9C0-6C1FC95F2F99> /usr/lib/libarchive.2.dylib\r\n       0x7fff5ce48000 -     0x7fff5cec7fff  libate.dylib (1.13.8) <D4150381-557F-3E9D-9119-ED4F2A8878A1> /usr/lib/libate.dylib\r\n       0x7fff5cecb000 -     0x7fff5cecbff3  libauto.dylib (187) <4E260A46-13BB-3A8F-A037-D89748837B2A> /usr/lib/libauto.dylib\r\n       0x7fff5cf9b000 -     0x7fff5cfabffb  libbsm.0.dylib (39.200.18) <CF0C09D6-FCED-3B48-A617-768A0B5B9DEB> /usr/lib/libbsm.0.dylib\r\n       0x7fff5cfac000 -     0x7fff5cfb9fff  libbz2.1.0.dylib (38.200.3) <62019AC3-20C9-3DDC-9C83-189C1F258073> /usr/lib/libbz2.1.0.dylib\r\n       0x7fff5cfba000 -     0x7fff5d00dff7  libc++.1.dylib (400.9.4) <446DAE5E-4E97-3E4B-B2A3-AC0A74C0E453> /usr/lib/libc++.1.dylib\r\n       0x7fff5d00e000 -     0x7fff5d023ff7  libc++abi.dylib (400.17) <A2D1FDAD-E10F-3E53-958F-CB6BC8485767> /usr/lib/libc++abi.dylib\r\n       0x7fff5d024000 -     0x7fff5d024ff3  libcharset.1.dylib (51.200.6) <0D3A5F4C-8800-33E3-AFE5-307E8BEE462C> /usr/lib/libcharset.1.dylib\r\n       0x7fff5d025000 -     0x7fff5d035ffb  libcmph.dylib (6.15.1) <740A788E-FD92-36F3-B678-E7D510B1E2A1> /usr/lib/libcmph.dylib\r\n       0x7fff5d036000 -     0x7fff5d04effb  libcompression.dylib (52.250.2) <9E125D43-CE4E-34F8-ACBA-C0835E5F8062> /usr/lib/libcompression.dylib\r\n       0x7fff5d2c3000 -     0x7fff5d2d9fff  libcoretls.dylib (155.220.1) <FF7EA01E-9A26-36F9-A6FF-9665B501B536> /usr/lib/libcoretls.dylib\r\n       0x7fff5d2da000 -     0x7fff5d2dbff3  libcoretls_cfhelpers.dylib (155.220.1) <51572EB9-D154-348B-9934-3CA9444FAE5E> /usr/lib/libcoretls_cfhelpers.dylib\r\n       0x7fff5d94d000 -     0x7fff5d9a3ff7  libcups.2.dylib (462.10) <83EF6851-07F6-35B4-AA80-690EF026C706> /usr/lib/libcups.2.dylib\r\n       0x7fff5dad7000 -     0x7fff5dad7fff  libenergytrace.dylib (17.200.1) <F0A35E72-B772-359B-81AC-0C94B8A621CA> /usr/lib/libenergytrace.dylib\r\n       0x7fff5db09000 -     0x7fff5db0eff7  libgermantok.dylib (17.15.2) <A78E0BF5-0038-35C7-A8E7-05AEDF86D6D5> /usr/lib/libgermantok.dylib\r\n       0x7fff5db0f000 -     0x7fff5db14ff7  libheimdal-asn1.dylib (520.250.1) <DE1C4650-FDFE-3A31-98AD-597B57C947E5> /usr/lib/libheimdal-asn1.dylib\r\n       0x7fff5db3f000 -     0x7fff5dc2ffff  libiconv.2.dylib (51.200.6) <E767B418-3531-3BB0-B58D-9ECB203407B7> /usr/lib/libiconv.2.dylib\r\n       0x7fff5dc30000 -     0x7fff5de90ff3  libicucore.A.dylib (62123.0.1) <3936C798-1978-3C6C-9050-3BBD57CDA53E> /usr/lib/libicucore.A.dylib\r\n       0x7fff5dedd000 -     0x7fff5dedefff  liblangid.dylib (128.15.1) <1ED2EB78-3891-3DBA-8CB7-BA1A100CFC8F> /usr/lib/liblangid.dylib\r\n       0x7fff5dedf000 -     0x7fff5def7ff3  liblzma.5.dylib (10.200.3) <E6CA9433-904B-3804-82FF-B328E2047368> /usr/lib/liblzma.5.dylib\r\n       0x7fff5df0f000 -     0x7fff5dfb3ff7  libmecab.1.0.0.dylib (779.24.1) <0C57BF6E-A713-3AE8-8AD3-80F65D4CCC15> /usr/lib/libmecab.1.0.0.dylib\r\n       0x7fff5dfb4000 -     0x7fff5e1b8fff  libmecabra.dylib (779.24.1) <A658B79D-4071-3EC1-9344-ADA438E43FB4> /usr/lib/libmecabra.dylib\r\n       0x7fff5e1bd000 -     0x7fff5e1edfff  libncurses.5.4.dylib (53.200.3) <710A5A0A-8501-384F-8F0A-722B56CC6016> /usr/lib/libncurses.5.4.dylib\r\n       0x7fff5e390000 -     0x7fff5e6e1ff7  libnetwork.dylib (1229.250.15) <D8F52B1D-1AD9-3D33-8D59-2D631A3CBFEC> /usr/lib/libnetwork.dylib\r\n       0x7fff5e771000 -     0x7fff5eef6fdf  libobjc.A.dylib (756.2) <4F86FC7C-496B-3E68-8A74-1EA2BA22FBCC> /usr/lib/libobjc.A.dylib\r\n       0x7fff5ef08000 -     0x7fff5ef0cffb  libpam.2.dylib (22.200.1) <3AEB13DB-8DE2-3FD9-97D5-D9DB206E0693> /usr/lib/libpam.2.dylib\r\n       0x7fff5ef0f000 -     0x7fff5ef44fff  libpcap.A.dylib (79.250.1) <FA490ABF-6C15-336A-818F-0C14A8C090DB> /usr/lib/libpcap.A.dylib\r\n       0x7fff5f05d000 -     0x7fff5f075ffb  libresolv.9.dylib (65.200.2) <DB6CA331-BB44-306D-8528-023EADE54BF7> /usr/lib/libresolv.9.dylib\r\n       0x7fff5f0c8000 -     0x7fff5f2a5fe7  libsqlite3.dylib (274.22) <378D7B48-4661-3BA6-AC55-0B3A64F8C7E3> /usr/lib/libsqlite3.dylib\r\n       0x7fff5f525000 -     0x7fff5f528ff7  libutil.dylib (51.200.4) <336F9184-A739-3770-ACFA-4659DFEEACC4> /usr/lib/libutil.dylib\r\n       0x7fff5f529000 -     0x7fff5f536fff  libxar.1.dylib (417.1) <D7AC80EE-D974-33E6-ACA7-87B398ACEDD7> /usr/lib/libxar.1.dylib\r\n       0x7fff5f53b000 -     0x7fff5f61dff3  libxml2.2.dylib (32.8) <064C2F49-C054-38F9-A6B2-032C4AC9738B> /usr/lib/libxml2.2.dylib\r\n       0x7fff5f61e000 -     0x7fff5f646ff3  libxslt.1.dylib (16.1) <FB93A727-731D-313F-AF6B-4518FE830FFB> /usr/lib/libxslt.1.dylib\r\n       0x7fff5f647000 -     0x7fff5f659ff7  libz.1.dylib (70.200.4) <FDF169F3-F992-3E8E-B3F7-D4134FEBAE41> /usr/lib/libz.1.dylib\r\n       0x7fff5fe36000 -     0x7fff5fe3aff3  libcache.dylib (81) <9A8C27B0-49C9-337F-8BE2-37171ED2D8EE> /usr/lib/system/libcache.dylib\r\n       0x7fff5fe3b000 -     0x7fff5fe45ff3  libcommonCrypto.dylib (60118.250.2) <17C4F395-9FF0-331F-8167-5E85AA3588E9> /usr/lib/system/libcommonCrypto.dylib\r\n       0x7fff5fe46000 -     0x7fff5fe4dff7  libcompiler_rt.dylib (63.4) <8CB2B2B6-2C55-3733-9842-0E037AE3F46A> /usr/lib/system/libcompiler_rt.dylib\r\n       0x7fff5fe4e000 -     0x7fff5fe57ff7  libcopyfile.dylib (146.250.1) <24905E41-9E2F-3DD1-A255-5A17F9FCDAD7> /usr/lib/system/libcopyfile.dylib\r\n       0x7fff5fe58000 -     0x7fff5fedcfc7  libcorecrypto.dylib (602.250.23) <3A6CBD41-AFFE-3E06-B1EC-3E95BC79BAC5> /usr/lib/system/libcorecrypto.dylib\r\n       0x7fff5ff63000 -     0x7fff5ff9cff7  libdispatch.dylib (1008.250.7) <50235FCE-B399-3319-90DC-88F530D4FC5C> /usr/lib/system/libdispatch.dylib\r\n       0x7fff5ff9d000 -     0x7fff5ffc9ff7  libdyld.dylib (655.1.1) <54C6B494-4A3D-3EEC-B083-636A76AAD649> /usr/lib/system/libdyld.dylib\r\n       0x7fff5ffca000 -     0x7fff5ffcaffb  libkeymgr.dylib (30) <BEA04E04-FCF1-3A70-810F-08D0FF54CA36> /usr/lib/system/libkeymgr.dylib\r\n       0x7fff5ffcb000 -     0x7fff5ffd7ff3  libkxld.dylib (4903.251.3) <649F5829-6AA8-32EE-9A33-B1244378C319> /usr/lib/system/libkxld.dylib\r\n       0x7fff5ffd8000 -     0x7fff5ffd8ff7  liblaunch.dylib (1336.251.2) <30E6424E-4640-3DBA-9B64-D5F725263C6E> /usr/lib/system/liblaunch.dylib\r\n       0x7fff5ffd9000 -     0x7fff5ffdefff  libmacho.dylib (927.0.2) <D8515A20-ED7B-3B13-9ADA-4BD7E19E38C4> /usr/lib/system/libmacho.dylib\r\n       0x7fff5ffdf000 -     0x7fff5ffe1ffb  libquarantine.dylib (86.220.1) <8A9BF971-DB7D-311A-B131-6C5025E82F8F> /usr/lib/system/libquarantine.dylib\r\n       0x7fff5ffe2000 -     0x7fff5ffe3ff7  libremovefile.dylib (45.200.2) <950036B7-B91E-3B5D-853C-8C551E5B6A32> /usr/lib/system/libremovefile.dylib\r\n       0x7fff5ffe4000 -     0x7fff5fffbff3  libsystem_asl.dylib (356.200.4) <16F632AD-FADA-3DE9-85E8-EBC7D619A1DA> /usr/lib/system/libsystem_asl.dylib\r\n       0x7fff5fffc000 -     0x7fff5fffcff7  libsystem_blocks.dylib (73) <0CD6861B-EC5F-3345-9C24-B21EEB85E44F> /usr/lib/system/libsystem_blocks.dylib\r\n       0x7fff5fffd000 -     0x7fff60084fff  libsystem_c.dylib (1272.250.1) <F3AA9047-EEDD-3D80-8CC1-023FB312EC8B> /usr/lib/system/libsystem_c.dylib\r\n       0x7fff60085000 -     0x7fff60088ffb  libsystem_configuration.dylib (963.250.1) <02C7A973-014A-31D7-B7D2-247D384CB0D2> /usr/lib/system/libsystem_configuration.dylib\r\n       0x7fff60089000 -     0x7fff6008cff7  libsystem_coreservices.dylib (66) <4CF1C89B-FA6C-3DF3-B1F8-79F549849534> /usr/lib/system/libsystem_coreservices.dylib\r\n       0x7fff6008d000 -     0x7fff60093fff  libsystem_darwin.dylib (1272.250.1) <6983A268-20F4-3F98-A3F5-D63848933B02> /usr/lib/system/libsystem_darwin.dylib\r\n       0x7fff60094000 -     0x7fff6009aff7  libsystem_dnssd.dylib (878.250.4) <9FC5724C-DD03-3E14-A6E1-2DD009D79E0A> /usr/lib/system/libsystem_dnssd.dylib\r\n       0x7fff6009b000 -     0x7fff600e6ffb  libsystem_info.dylib (517.200.9) <F617D3CF-5A4A-36D0-8CBB-4A7C7CDB67AF> /usr/lib/system/libsystem_info.dylib\r\n       0x7fff600e7000 -     0x7fff6010fff7  libsystem_kernel.dylib (4903.251.3) <84EF0290-6CB5-36E5-A273-692A7E437B36> /usr/lib/system/libsystem_kernel.dylib\r\n       0x7fff60110000 -     0x7fff6015bff7  libsystem_m.dylib (3158.200.7) <33105665-CCC3-36D5-82C9-9B21730CB3DF> /usr/lib/system/libsystem_m.dylib\r\n       0x7fff6015c000 -     0x7fff60180fff  libsystem_malloc.dylib (166.251.2) <90DA09E3-1276-3FCF-8F5F-C9AA61AB9B6D> /usr/lib/system/libsystem_malloc.dylib\r\n       0x7fff60181000 -     0x7fff6018bff7  libsystem_networkextension.dylib (767.250.2) <4575D797-B793-3D18-9E93-8696CF0B133B> /usr/lib/system/libsystem_networkextension.dylib\r\n       0x7fff6018c000 -     0x7fff60193fff  libsystem_notify.dylib (172.200.21) <679E9132-1A46-326E-9A11-D3FF9C86041C> /usr/lib/system/libsystem_notify.dylib\r\n       0x7fff60194000 -     0x7fff6019dfef  libsystem_platform.dylib (177.250.1) <3CC59141-5365-3848-94C3-D65E6FCA1E74> /usr/lib/system/libsystem_platform.dylib\r\n       0x7fff6019e000 -     0x7fff601a8ff7  libsystem_pthread.dylib (330.250.2) <4344198A-A1A3-3C52-97B4-F168D56E9789> /usr/lib/system/libsystem_pthread.dylib\r\n       0x7fff601a9000 -     0x7fff601acff7  libsystem_sandbox.dylib (851.250.12) <66E91015-F62A-3365-BB81-AA88707E8F12> /usr/lib/system/libsystem_sandbox.dylib\r\n       0x7fff601ad000 -     0x7fff601afff3  libsystem_secinit.dylib (30.220.1) <F054DCB0-68CE-35E7-8B8C-D648C42124EC> /usr/lib/system/libsystem_secinit.dylib\r\n       0x7fff601b0000 -     0x7fff601b7ff3  libsystem_symptoms.dylib (820.257.1) <C8517F35-E9DA-3649-B07D-2B38349C6730> /usr/lib/system/libsystem_symptoms.dylib\r\n       0x7fff601b8000 -     0x7fff601cdfff  libsystem_trace.dylib (906.250.5) <AE77ACC7-488F-3AE1-BB0C-1ACFC7E1CE77> /usr/lib/system/libsystem_trace.dylib\r\n       0x7fff601cf000 -     0x7fff601d4ffb  libunwind.dylib (35.4) <8F0BC197-B97C-3DDC-92B0-6A7D3CB72FD8> /usr/lib/system/libunwind.dylib\r\n       0x7fff601d5000 -     0x7fff60204ff7  libxpc.dylib (1336.251.2) <49138829-09C8-355C-B558-97E070B84EC5> /usr/lib/system/libxpc.dylib\r\n   \r\n   External Modification Summary:\r\n     Calls made by other processes targeting this process:\r\n       task_for_pid: 0\r\n       thread_create: 0\r\n       thread_set_state: 0\r\n     Calls made by this process:\r\n       task_for_pid: 0\r\n       thread_create: 0\r\n       thread_set_state: 0\r\n     Calls made by all processes on this machine:\r\n       task_for_pid: 578281\r\n       thread_create: 0\r\n       thread_set_state: 0\r\n   \r\n   VM Region Summary:\r\n   ReadOnly portion of Libraries: Total=508.3M resident=0K(0%) swapped_out_or_unallocated=508.3M(100%)\r\n   Writable regions: Total=172.3M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=172.3M(100%)\r\n    \r\n                                   VIRTUAL   REGION \r\n   REGION TYPE                        SIZE    COUNT (non-coalesced) \r\n   ===========                     =======  ======= \r\n   Activity Tracing                   256K        1 \r\n   Kernel Alloc Once                    8K        1 \r\n   MALLOC                           127.6M       39 \r\n   MALLOC guard page                   16K        4 \r\n   STACK GUARD                         40K       10 \r\n   Stack                             13.1M       11 \r\n   Stack Guard                       56.0M        1 \r\n   VM_ALLOCATE                       29.0M       15 \r\n   __DATA                            28.2M      287 \r\n   __FONT_DATA                          4K        1 \r\n   __LINKEDIT                       310.5M       55 \r\n   __TEXT                           197.8M      282 \r\n   __UNICODE                          564K        1 \r\n   mapped file                       5812K       14 \r\n   shared memory                       12K        3 \r\n   ===========                     =======  ======= \r\n   TOTAL                            768.8M      725\r\n   ```\r\n   </div></details>\r\n   \r\n   FYI: \r\n   It works well with `auto value = g_bytes_new(\"Hello\", 5)`  instead of `auto value = values[i]`.\r\n   \r\n   The test code:\r\n   ```rb\r\n   builder = Arrow::LargeStringArrayBuilder.new\r\n   bytes_data = GLib::Bytes.new(\"Hello\")\r\n   builder.append_values([bytes_data])\r\n   ```\r\n   Do you know what the cause is?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-23T22:42:04.508+0000",
                    "updated": "2019-08-23T22:42:04.508+0000",
                    "started": "2019-08-23T22:42:04.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "300583",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/300770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r317376402\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   Could you commit it?\r\n   I'll try it on my local environment.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-24T22:33:22.698+0000",
                    "updated": "2019-08-24T22:33:22.698+0000",
                    "started": "2019-08-24T22:33:22.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "300770",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/300899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r317410871\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   I've commited https://github.com/apache/arrow/pull/5113/commits/fb06078c14495fbb5f956a172ce928150fbe0ae4.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-25T19:06:29.128+0000",
                    "updated": "2019-08-25T19:06:29.128+0000",
                    "started": "2019-08-25T19:06:29.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "300899",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/301070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r317494439\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   Thanks.\r\n   This is a problem of gobject-introspection gem.\r\n   I'll fix it.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-26T08:06:19.004+0000",
                    "updated": "2019-08-26T08:06:19.004+0000",
                    "started": "2019-08-26T08:06:19.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301070",
                    "issueId": "13251405"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/worklog/301316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #5113: ARROW-6285: [GLib] Add support for LargeBinary and LargeString types\nURL: https://github.com/apache/arrow/pull/5113#discussion_r317673255\n \n \n\n ##########\n File path: c_glib/arrow-glib/array-builder.cpp\n ##########\n @@ -2648,6 +2731,101 @@ garrow_string_array_builder_append_values(GArrowStringArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowLargeStringArrayBuilder,\n+              garrow_large_string_array_builder,\n+              GARROW_TYPE_LARGE_BINARY_ARRAY_BUILDER)\n+\n+static void\n+garrow_large_string_array_builder_init(GArrowLargeStringArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_large_string_array_builder_class_init(GArrowLargeStringArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowLargeStringArrayBuilder.\n+ *\n+ * Since: 0.15.0\n+ */\n+GArrowLargeStringArrayBuilder *\n+garrow_large_string_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::large_utf8(),\n+                                          NULL,\n+                                          \"[large-string-array-builder][new]\");\n+  return GARROW_LARGE_STRING_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_value:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @value: A string value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_value(GArrowLargeStringArrayBuilder *builder,\n+                                               const gchar *value,\n+                                               GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::LargeStringBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  auto status = arrow_builder->Append(value,\n+                                      static_cast<gint64>(strlen(value)));\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[large-string-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_large_string_array_builder_append_values:\n+ * @builder: A #GArrowLargeStringArrayBuilder.\n+ * @values: (array length=values_length): The array of\n+ *   strings.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append()` and `append_null()` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.15.0\n+ */\n+gboolean\n+garrow_large_string_array_builder_append_values(GArrowLargeStringArrayBuilder *builder,\n+                                                const gchar **values,\n+                                                gint64 values_length,\n+                                                const gboolean *is_valids,\n+                                                gint64 is_valids_length,\n+                                                GError **error)\n \n Review comment:\n   I see. Thank you for confirming.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-26T16:00:19.960+0000",
                    "updated": "2019-08-26T16:00:19.960+0000",
                    "started": "2019-08-26T16:00:19.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301316",
                    "issueId": "13251405"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68df53cc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28d610c0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b563b6e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@339e7ed4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20441c10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@33a73eef[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29b0eebe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@69985d82[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@693c683d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@63e673b3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d8db46f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@66528411[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 18 14:53:42 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-18T14:53:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6285/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-08-17T17:14:59.000+0000",
        "updated": "2019-10-18T14:53:42.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add support for LargeBinary and LargeString types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251405/comment/16954670",
                    "id": "16954670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 5113\n[https://github.com/apache/arrow/pull/5113]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-10-18T14:53:42.753+0000",
                    "updated": "2019-10-18T14:53:42.753+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z05rlk:",
        "customfield_12314139": null
    }
}