{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13148573",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573",
    "key": "ARROW-2361",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2361/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@160ca636[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9e086b2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@686e0827[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6536c68e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64b634e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e8f3324[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66b833e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@35e99b0d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60ade025[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@673cf907[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@403cf121[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@39f43bd8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Mar 31 17:37:56 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-31T17:37:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2361/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-28T13:42:52.000+0000",
        "updated": "2018-03-31T17:38:02.000+0000",
        "timeoriginalestimate": null,
        "description": "I'm creating this Jira to track work to donate an work-in-progress native Rust implementation of Arrow.\r\n\r\nI am actively developing this and relying on it for the memory model of my DataFusion project. I would like to donate the code I have now and start working on it under the Apache Arrow project.\r\n\r\nHere is the PR: https://github.com/apache/arrow/pull/1804\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Start native Rust Implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16418425",
                    "id": "16418425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377119109\n \n \n   I'm sorta ambivalent on the package name -- I looked at crates.io and there are some other ASF projects with packages that just use the Foo in Apache Foo. If \"arrow\" is shorter and sweeter, that's no problem\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T04:38:53.400+0000",
                    "updated": "2018-03-29T04:38:53.400+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16419018",
                    "id": "16419018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on a change in pull request #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#discussion_r178062462\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -0,0 +1,248 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::convert::From;\n+use std::iter::Iterator;\n+use std::rc::Rc;\n+use std::str;\n+use std::string::String;\n+\n+use super::bitmap::Bitmap;\n+\n+use bytes::{Bytes, BytesMut, BufMut};\n \n Review comment:\n   For memory allocation I think we should do what @jihoonson did in iron-arrow and use libc since it lets us have aligned memory without requiring nightly rust.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T13:52:59.540+0000",
                    "updated": "2018-03-29T13:52:59.540+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16419277",
                    "id": "16419277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377289711\n \n \n   I've converted the code to use macros to add consistent functionality for all the primitive types that are supported so far. The code is much cleaner now. Also, arrays are now correctly memory-aligned and immutable.\r\n   \r\n   I'm thinking this is good point for another review and maybe merge this PR?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T16:19:25.431+0000",
                    "updated": "2018-03-29T16:19:25.431+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16419333",
                    "id": "16419333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377297581\n \n \n   @pacman82 This may be of interest for you ;)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T16:44:23.852+0000",
                    "updated": "2018-03-29T16:44:23.852+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16420656",
                    "id": "16420656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377559218\n \n \n   I just implemented the ability to compare two same-typed arrays using closures. For example:\r\n   \r\n   ```\r\n       fn test_array_eq() {\r\n           let a = Array::from(vec![1,2,3,4,5]);\r\n           let b = Array::from(vec![5,4,3,2,1]);\r\n           let c = a.compare_array(&b, &|a: i32,b: i32| a == b).unwrap();\r\n           assert_eq!(c, vec![false,false,true,false,false]);\r\n       }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-30T16:10:25.558+0000",
                    "updated": "2018-03-30T16:10:25.558+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421035",
                    "id": "16421035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377640392\n \n \n   If there are no objections I can go ahead and merge this so subsequent work can happen in new PRs. I'll wait an hour or so from now before merging\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-30T22:48:32.804+0000",
                    "updated": "2018-03-30T22:48:32.804+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421336",
                    "id": "16421336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "fsaintjacques commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377694997\n \n \n   I'd like to see the `Buffer` concept from C++ ported here. The main reason is `mmap`. I'd also refactor the `Bitmap` struct to use a Buffer.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T13:58:57.074+0000",
                    "updated": "2018-03-31T13:58:57.074+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421339",
                    "id": "16421339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "fsaintjacques commented on a change in pull request #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#discussion_r178432870\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -0,0 +1,412 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::convert::From;\n+use std::iter::Iterator;\n+use std::mem;\n+use std::rc::Rc;\n+use std::str;\n+use std::string::String;\n+\n+use super::bitmap::Bitmap;\n+use super::error::*;\n+use super::memory::*;\n+\n+use bytes::{Bytes, BytesMut, BufMut};\n+use libc;\n+\n+pub enum ArrayData {\n+    Boolean(*const bool),\n+    Float32(*const f32),\n+    Float64(*const f64),\n+    Int8(*const i8),\n+    Int16(*const i16),\n+    Int32(*const i32),\n+    Int64(*const i64),\n+    UInt8(*const u8),\n+    UInt16(*const u16),\n+    UInt32(*const u32),\n+    UInt64(*const u64),\n+    Utf8(ListData),\n+    Struct(Vec<Rc<Array>>)\n \n Review comment:\n   Should be `Field` instead of `Array`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T14:13:58.472+0000",
                    "updated": "2018-03-31T14:13:58.472+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421355",
                    "id": "16421355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377699808\n \n \n   Hi @fsaintjacques .. thanks for the review. I have added type-safe Buffer<T> type and updated ArrayData to use that. Also Bitmap now uses Buffer too.\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T15:12:33.423+0000",
                    "updated": "2018-03-31T15:12:33.423+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421357",
                    "id": "16421357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on a change in pull request #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#discussion_r178434156\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -0,0 +1,412 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::convert::From;\n+use std::iter::Iterator;\n+use std::mem;\n+use std::rc::Rc;\n+use std::str;\n+use std::string::String;\n+\n+use super::bitmap::Bitmap;\n+use super::error::*;\n+use super::memory::*;\n+\n+use bytes::{Bytes, BytesMut, BufMut};\n+use libc;\n+\n+pub enum ArrayData {\n+    Boolean(*const bool),\n+    Float32(*const f32),\n+    Float64(*const f64),\n+    Int8(*const i8),\n+    Int16(*const i16),\n+    Int32(*const i32),\n+    Int64(*const i64),\n+    UInt8(*const u8),\n+    UInt16(*const u16),\n+    UInt32(*const u32),\n+    UInt64(*const u64),\n+    Utf8(ListData),\n+    Struct(Vec<Rc<Array>>)\n \n Review comment:\n   We have Schema/Field for defining types including structs (I was wrong about this in our slack chat earlier). I added a test with an example for defining a struct.\r\n   \r\n   ```\r\n           let _person = Schema::new(vec![\r\n               Field::new(\"first_name\", DataType::Utf8, false),\r\n               Field::new(\"last_name\", DataType::Utf8, false),\r\n               Field::new(\"address\", DataType::Struct(vec![\r\n                   Field::new(\"street\", DataType::Utf8, false),\r\n                   Field::new(\"zip\", DataType::UInt16, false),\r\n               ]), false),\r\n           ]);\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T15:16:25.518+0000",
                    "updated": "2018-03-31T15:16:25.518+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421385",
                    "id": "16421385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804#issuecomment-377705680\n \n \n   I have now also re-implemented List support so that there is a type-safe `List<T>` which uses `Buffer<T>` and `ArrayData::Utf8` now is just a wrapper for `List<u8>`.\r\n   \r\n   @fsaintjacques I think this is ready for merge now?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T16:36:21.324+0000",
                    "updated": "2018-03-31T16:36:21.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421414",
                    "id": "16421414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1804\n[https://github.com/apache/arrow/pull/1804]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-31T17:37:55.797+0000",
                    "updated": "2018-03-31T17:37:55.797+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148573/comment/16421415",
                    "id": "16421415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1804: ARROW-2361: [Rust] Starting point for a native Rust implementation of Arrow\nURL: https://github.com/apache/arrow/pull/1804\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/.gitignore b/rust/.gitignore\nnew file mode 100644\nindex 000000000..fa8d85ac5\n--- /dev/null\n+++ b/rust/.gitignore\n@@ -0,0 +1,2 @@\n+Cargo.lock\n+target\ndiff --git a/rust/Cargo.toml b/rust/Cargo.toml\nnew file mode 100644\nindex 000000000..9b7b3102f\n--- /dev/null\n+++ b/rust/Cargo.toml\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+[package]\n+name = \"arrow\"\n+version = \"0.1.0\"\n+description = \"Rust implementation of Apache Arrow\"\n+homepage = \"https://github.com/apache/arrow\"\n+repository = \"https://github.com/apache/arrow\"\n+authors = [\"Apache Arrow <dev@arrow.apache.org>\"]\n+license = \"Apache-2.0\"\n+keywords = [ \"arrow\" ]\n+include = [\n+    \"src/**/*.rs\",\n+    \"Cargo.toml\",\n+]\n+\n+[lib]\n+name = \"arrow\"\n+path = \"src/lib.rs\"\n+\n+[dependencies]\n+bytes = \"0.4\"\n+libc = \"0.2\"\n\\ No newline at end of file\ndiff --git a/rust/README.md b/rust/README.md\nnew file mode 100644\nindex 000000000..cc50e80cb\n--- /dev/null\n+++ b/rust/README.md\n@@ -0,0 +1,47 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Native Rust implementation of Apache Arrow\n+\n+## Status\n+\n+This is a starting point for a native Rust implementation of Arrow.\n+\n+The current code demonstrates arrays of primitive types and structs.\n+\n+Contiguous memory buffers are used but they are not aligned at 8-byte boundaries yet.\n+\n+## Example\n+\n+```rust\n+let _schema = Schema::new(vec![\n+    Field::new(\"a\", DataType::Int32, false),\n+    Field::new(\"b\", DataType::Float32, false),\n+]);\n+\n+let a = Rc::new(Array::from(vec![1,2,3,4,5]));\n+let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\n+let _ = Rc::new(Array::from(vec![a,b]));\n+```\n+\n+## Run Tests\n+\n+```bash\n+cargo test\n+```\n\\ No newline at end of file\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nnew file mode 100644\nindex 000000000..15d89c3ab\n--- /dev/null\n+++ b/rust/src/array.rs\n@@ -0,0 +1,373 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::convert::From;\n+use std::iter::Iterator;\n+use std::rc::Rc;\n+use std::str;\n+use std::string::String;\n+\n+use super::bitmap::Bitmap;\n+use super::buffer::Buffer;\n+use super::list::List;\n+use super::error::*;\n+\n+pub enum ArrayData {\n+    Boolean(Buffer<bool>),\n+    Float32(Buffer<f32>),\n+    Float64(Buffer<f64>),\n+    Int8(Buffer<i8>),\n+    Int16(Buffer<i16>),\n+    Int32(Buffer<i32>),\n+    Int64(Buffer<i64>),\n+    UInt8(Buffer<u8>),\n+    UInt16(Buffer<u16>),\n+    UInt32(Buffer<u32>),\n+    UInt64(Buffer<u64>),\n+    Utf8(List<u8>),\n+    Struct(Vec<Rc<Array>>)\n+}\n+\n+macro_rules! arraydata_from_primitive {\n+    ($DT:ty, $AT:ident) => {\n+        impl From<Vec<$DT>> for ArrayData {\n+            fn from(v: Vec<$DT>) -> Self {\n+                ArrayData::$AT(Buffer::from(v))\n+            }\n+        }\n+\n+    }\n+}\n+\n+arraydata_from_primitive!(bool, Boolean);\n+arraydata_from_primitive!(f32, Float32);\n+arraydata_from_primitive!(f64, Float64);\n+arraydata_from_primitive!(i8, Int8);\n+arraydata_from_primitive!(i16, Int16);\n+arraydata_from_primitive!(i32, Int32);\n+arraydata_from_primitive!(i64, Int64);\n+arraydata_from_primitive!(u8, UInt8);\n+arraydata_from_primitive!(u16, UInt16);\n+arraydata_from_primitive!(u32, UInt32);\n+arraydata_from_primitive!(u64, UInt64);\n+\n+pub struct Array {\n+    pub len: i32,\n+    pub null_count: i32,\n+    pub validity_bitmap: Option<Bitmap>,\n+    pub data: ArrayData\n+}\n+\n+impl Array {\n+\n+    /// Create a new array where there are no null values\n+    pub fn new(len: usize, data: ArrayData) -> Self {\n+        Array { len: len as i32, data, validity_bitmap: None, null_count: 0 }\n+    }\n+\n+    pub fn data(&self) -> &ArrayData {\n+        &self.data\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.len as usize\n+    }\n+\n+}\n+\n+/// type-safe array operations\n+trait ArrayOps<T> {\n+    /// Get one element from an array. Note that this is an expensive call since it\n+    /// will pattern match the type of the array on every invocation. We should add\n+    /// other efficient iterator and map methods so we can perform columnar operations\n+    /// instead.\n+    fn get(&self, i: usize) -> Result<T,Error>;\n+\n+    /// Compare two same-typed arrays using a boolean closure e.g. eq, gt, lt, and so on\n+    fn compare(&self, other: &Array, f: &Fn(T,T) -> bool) -> Result<Vec<bool>, Error>;\n+\n+    /// Perform a computation on two same-typed arrays and produce a result of the same type e.g. c = a + b\n+    fn compute(&self, other: &Array, f: &Fn(T,T) -> T) -> Result<Vec<T>, Error>;\n+}\n+\n+macro_rules! array_ops {\n+    ($DT:ty, $AT:ident) => {\n+        impl ArrayOps<$DT> for Array {\n+            fn get(&self, i: usize) -> Result<$DT,Error> {\n+                match self.data() {\n+                    &ArrayData::$AT(ref buf) => Ok(unsafe {*buf.data().offset(i as isize)}),\n+                    _ => Err(Error::from(\"Request for $DT but array is not $DT\"))\n+                }\n+            }\n+            fn compare(&self, other: &Array, f: &Fn($DT,$DT) -> bool) -> Result<Vec<bool>, Error> {\n+                match (&self.data, &other.data) {\n+                    (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n+                        let mut b: Vec<bool> = Vec::with_capacity(self.len as usize);\n+                        for i in 0..self.len as isize {\n+                            let lv : $DT = unsafe { *l.data().offset(i) };\n+                            let rv : $DT = unsafe { *r.data().offset(i) };\n+                            b.push(f(lv,rv));\n+                        }\n+                        Ok(b)\n+                    },\n+                    _ => Err(Error::from(\"Cannot compare arrays of this type\"))\n+                }\n+            }\n+            fn compute(&self, other: &Array, f: &Fn($DT,$DT) -> $DT) -> Result<Vec<$DT>, Error> {\n+                match (&self.data, &other.data) {\n+                    (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n+                        let mut b: Vec<$DT> = Vec::with_capacity(self.len as usize);\n+                        for i in 0..self.len as isize {\n+                            let lv : $DT = unsafe { *l.data().offset(i) };\n+                            let rv : $DT = unsafe { *r.data().offset(i) };\n+                            b.push(f(lv,rv));\n+                        }\n+                        Ok(b)\n+                    },\n+                    _ => Err(Error::from(\"Cannot compare arrays of this type\"))\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+array_ops!(bool, Boolean);\n+array_ops!(f64, Float64);\n+array_ops!(f32, Float32);\n+array_ops!(u8, UInt8);\n+array_ops!(u16, UInt16);\n+array_ops!(u32, UInt32);\n+array_ops!(u64, UInt64);\n+array_ops!(i8, Int8);\n+array_ops!(i16, Int16);\n+array_ops!(i32, Int32);\n+array_ops!(i64, Int64);\n+\n+macro_rules! array_from_primitive {\n+    ($DT:ty) => {\n+        impl From<Vec<$DT>> for Array {\n+            fn from(v: Vec<$DT>) -> Self {\n+                Array { len: v.len() as i32, null_count: 0, validity_bitmap: None, data: ArrayData::from(v) }\n+            }\n+        }\n+    }\n+\n+}\n+\n+array_from_primitive!(bool);\n+array_from_primitive!(f32);\n+array_from_primitive!(f64);\n+array_from_primitive!(u16);\n+array_from_primitive!(u32);\n+array_from_primitive!(u64);\n+array_from_primitive!(i8);\n+array_from_primitive!(i16);\n+array_from_primitive!(i32);\n+array_from_primitive!(i64);\n+\n+macro_rules! array_from_optional_primitive {\n+    ($DT:ty, $DEFAULT:expr) => {\n+        impl From<Vec<Option<$DT>>> for Array {\n+            fn from(v: Vec<Option<$DT>>) -> Self {\n+                let mut null_count = 0;\n+                let mut validity_bitmap = Bitmap::new(v.len());\n+                for i in 0 .. v.len() {\n+                    if v[i].is_none() {\n+                        null_count+=1;\n+                        validity_bitmap.clear(i);\n+                    }\n+                }\n+                let values = v.iter().map(|x| x.unwrap_or($DEFAULT)).collect::<Vec<$DT>>();\n+                Array { len: values.len() as i32, null_count, validity_bitmap: Some(validity_bitmap), data: ArrayData::from(values) }\n+            }\n+        }\n+    }\n+\n+}\n+\n+array_from_optional_primitive!(bool, false);\n+array_from_optional_primitive!(f32, 0_f32);\n+array_from_optional_primitive!(f64, 0_f64);\n+array_from_optional_primitive!(u16, 0_u16);\n+array_from_optional_primitive!(u32, 0_u32);\n+array_from_optional_primitive!(u64, 0_u64);\n+array_from_optional_primitive!(i8, 0_i8);\n+array_from_optional_primitive!(i16, 0_i16);\n+array_from_optional_primitive!(i32, 0_i32);\n+array_from_optional_primitive!(i64, 0_i64);\n+\n+/// This method mostly just used for unit tests\n+impl From<Vec<&'static str>> for Array {\n+    fn from(v: Vec<&'static str>) -> Self {\n+        Array::from(v.iter().map(|s| s.to_string()).collect::<Vec<String>>())\n+    }\n+}\n+\n+impl From<Vec<String>> for Array {\n+    fn from(v: Vec<String>) -> Self {\n+        Array {\n+            len: v.len() as i32,\n+            null_count: 0,\n+            validity_bitmap: None,\n+            data: ArrayData::Utf8(List::from(v))\n+        }\n+    }\n+}\n+\n+impl From<Vec<Rc<Array>>> for Array {\n+    fn from(v: Vec<Rc<Array>>) -> Self {\n+        Array {\n+            len: v.len() as i32,\n+            null_count: 0,\n+            validity_bitmap: None,\n+            data: ArrayData::Struct(v.iter().map(|a| a.clone()).collect())\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use super::super::datatypes::*;\n+\n+    #[test]\n+    fn test_utf8_offsets() {\n+        let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n+        assert_eq!(4, a.len());\n+        match a.data() {\n+            &ArrayData::Utf8(List{ ref data, ref offsets }) => {\n+                assert_eq!(11, data.len());\n+                assert_eq!(0, *offsets.get(0));\n+                assert_eq!(4, *offsets.get(1));\n+                assert_eq!(6, *offsets.get(2));\n+                assert_eq!(7, *offsets.get(3));\n+                assert_eq!(11, *offsets.get(4));\n+            },\n+            _ => panic!()\n+        }\n+    }\n+\n+    #[test]\n+    fn test_utf8_slices() {\n+        let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n+        match a.data() {\n+            &ArrayData::Utf8(ref d) => {\n+                assert_eq!(4, d.len());\n+                assert_eq!(\"this\", str::from_utf8(d.slice(0)).unwrap());\n+                assert_eq!(\"is\", str::from_utf8(d.slice(1)).unwrap());\n+                assert_eq!(\"a\", str::from_utf8(d.slice(2)).unwrap());\n+                assert_eq!(\"test\", str::from_utf8(d.slice(3)).unwrap());\n+            },\n+            _ => panic!()\n+        }\n+    }\n+\n+    #[test]\n+    fn test_from_bool() {\n+        let a = Array::from(vec![false, false, true, false]);\n+        assert_eq!(4, a.len());\n+    }\n+\n+    #[test]\n+    fn test_from_f32() {\n+        let a = Array::from(vec![1.23, 2.34, 3.45, 4.56]);\n+        assert_eq!(4, a.len());\n+    }\n+\n+    #[test]\n+    fn test_from_i32() {\n+\n+        let a = Array::from(vec![15, 14, 13, 12, 11]);\n+        assert_eq!(5, a.len());\n+\n+        assert_eq!(15, a.get(0).unwrap());\n+        assert_eq!(14, a.get(1).unwrap());\n+        assert_eq!(13, a.get(2).unwrap());\n+        assert_eq!(12, a.get(3).unwrap());\n+        assert_eq!(11, a.get(4).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_from_optional_i32() {\n+        let a = Array::from(vec![Some(1), None, Some(2), Some(3), None]);\n+        assert_eq!(5, a.len());\n+        // 1 == not null\n+        let validity_bitmap = a.validity_bitmap.unwrap();\n+        assert_eq!(true, validity_bitmap.is_set(0));\n+        assert_eq!(false, validity_bitmap.is_set(1));\n+        assert_eq!(true, validity_bitmap.is_set(2));\n+        assert_eq!(true, validity_bitmap.is_set(3));\n+        assert_eq!(false, validity_bitmap.is_set(4));\n+    }\n+\n+    #[test]\n+    fn test_struct() {\n+\n+        let _schema = Schema::new(vec![\n+            Field::new(\"a\", DataType::Int32, false),\n+            Field::new(\"b\", DataType::Float32, false),\n+        ]);\n+\n+        let a = Rc::new(Array::from(vec![1,2,3,4,5]));\n+        let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\n+        let _ = Rc::new(Array::from(vec![a,b]));\n+    }\n+\n+    #[test]\n+    fn test_array_eq() {\n+        let a = Array::from(vec![1,2,3,4,5]);\n+        let b = Array::from(vec![5,4,3,2,1]);\n+        let c = a.compare(&b, &|a: i32,b: i32| a == b).unwrap();\n+        assert_eq!(c, vec![false,false,true,false,false]);\n+    }\n+\n+    #[test]\n+    fn test_array_lt() {\n+        let a = Array::from(vec![1,2,3,4,5]);\n+        let b = Array::from(vec![5,4,3,2,1]);\n+        let c = a.compare(&b, &|a: i32,b: i32| a < b).unwrap();\n+        assert_eq!(c, vec![true,true,false,false,false]);\n+    }\n+\n+    #[test]\n+    fn test_array_gt() {\n+        let a = Array::from(vec![1,2,3,4,5]);\n+        let b = Array::from(vec![5,4,3,2,1]);\n+        let c = a.compare(&b, &|a: i32,b: i32| a > b).unwrap();\n+        assert_eq!(c, vec![false,false,false,true,true]);\n+    }\n+\n+    #[test]\n+    fn test_array_add() {\n+        let a = Array::from(vec![1,2,3,4,5]);\n+        let b = Array::from(vec![5,4,3,2,1]);\n+        let c = a.compute(&b, &|a: i32,b: i32| a + b).unwrap();\n+        assert_eq!(c, vec![6,6,6,6,6]);\n+    }\n+\n+    #[test]\n+    fn test_array_multiply() {\n+        let a = Array::from(vec![1,2,3,4,5]);\n+        let b = Array::from(vec![5,4,3,2,1]);\n+        let c = a.compute(&b, &|a: i32,b: i32| a * b).unwrap();\n+        assert_eq!(c, vec![5,8,9,8,5]);\n+    }\n+}\n+\n+\n+\n+\ndiff --git a/rust/src/bitmap.rs b/rust/src/bitmap.rs\nnew file mode 100644\nindex 000000000..94c513a98\n--- /dev/null\n+++ b/rust/src/bitmap.rs\n@@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use super::buffer::Buffer;\n+\n+pub struct Bitmap {\n+    bits: Buffer<u8>\n+}\n+\n+impl Bitmap {\n+\n+    pub fn new(num_bits: usize) -> Self {\n+        let num_bytes = num_bits/8 + if num_bits%8 > 0 { 1 } else { 0 };\n+        let r = num_bytes % 64;\n+        let len = if r==0 { num_bytes } else { num_bytes + 64-r };\n+        let mut v = Vec::with_capacity(len);\n+        for _ in 0 .. len {\n+            v.push(255); // 1 is not null\n+        }\n+        Bitmap { bits: Buffer::from(v) }\n+    }\n+\n+    pub fn len(&self) -> i32 {\n+        self.bits.len()\n+    }\n+\n+    pub fn is_set(&self, i: usize) -> bool {\n+        let byte_offset = i / 8;\n+        self.bits.get(byte_offset) & (1_u8 << ((i % 8) as u8)) > 0\n+    }\n+\n+    pub fn set(&mut self, i: usize) {\n+        let byte_offset = i / 8;\n+        let v : u8 = {\n+            self.bits.get(byte_offset) | (1_u8 << ((i % 8) as u8))\n+        };\n+        self.bits.set(byte_offset, v);\n+    }\n+\n+    pub fn clear(&mut self, i: usize) {\n+        let byte_offset = i / 8;\n+        let v : u8 = self.bits.get(byte_offset) ^ (1_u8 << ((i % 8) as u8));\n+        self.bits.set(byte_offset, v);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_bitmap_length() {\n+        assert_eq!(64, Bitmap::new(63*8).len());\n+        assert_eq!(64, Bitmap::new(64*8).len());\n+        assert_eq!(128, Bitmap::new(65*8).len());\n+    }\n+\n+    #[test]\n+    fn test_set_clear_bit() {\n+        let mut b = Bitmap::new(64*8);\n+        assert_eq!(true, b.is_set(12));\n+        b.clear(12);\n+        assert_eq!(false, b.is_set(12));\n+        b.set(12);\n+        assert_eq!(true, b.is_set(12));\n+    }\n+\n+}\n+\n+\n+\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nnew file mode 100644\nindex 000000000..f70e0e2cd\n--- /dev/null\n+++ b/rust/src/buffer.rs\n@@ -0,0 +1,101 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::mem;\n+use std::slice;\n+use libc;\n+\n+use super::memory::*;\n+\n+pub struct Buffer<T> {\n+    data: *const T,\n+    len: i32\n+}\n+\n+impl<T> Buffer<T> {\n+\n+    pub fn new(data: *const T, len: i32) -> Self {\n+        Buffer { data, len }\n+    }\n+\n+    pub fn len(&self) -> i32 {\n+        self.len\n+    }\n+\n+    pub fn data(&self) -> *const T {\n+        self.data\n+    }\n+\n+    pub fn slice(&self, start: usize, end: usize) -> &[T] {\n+        unsafe { slice::from_raw_parts(self.data.offset(start as isize), (end-start) as usize) }\n+    }\n+\n+    pub fn get(&self, i: usize) -> &T {\n+        unsafe { &(*self.data.offset(i as isize)) }\n+    }\n+\n+    pub fn set(&mut self, i: usize, v: T) {\n+        unsafe {\n+            let p = mem::transmute::<*const T, *mut T>(self.data);\n+            *p.offset(i as isize) = v;\n+        }\n+    }\n+}\n+\n+macro_rules! array_from_primitive {\n+    ($DT:ty) => {\n+        impl From<Vec<$DT>> for Buffer<$DT> {\n+            fn from(v: Vec<$DT>) -> Self {\n+                // allocate aligned memory buffer\n+                let len = v.len();\n+                let sz = mem::size_of::<$DT>();\n+                let buffer = allocate_aligned((len * sz) as i64).unwrap();\n+                Buffer {\n+                    len: len as i32,\n+                    data: unsafe {\n+                        let dst = mem::transmute::<*const u8, *mut libc::c_void>(buffer);\n+                        libc::memcpy(dst, mem::transmute::<*const $DT, *const libc::c_void>(v.as_ptr()), len * sz);\n+                        mem::transmute::<*mut libc::c_void, *const $DT>(dst)\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+array_from_primitive!(bool);\n+array_from_primitive!(f32);\n+array_from_primitive!(f64);\n+array_from_primitive!(u8);\n+array_from_primitive!(u16);\n+array_from_primitive!(u32);\n+array_from_primitive!(u64);\n+array_from_primitive!(i8);\n+array_from_primitive!(i16);\n+array_from_primitive!(i32);\n+array_from_primitive!(i64);\n+\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    #[test]\n+    fn test_buffer_i32() {\n+        let b: Buffer<i32> = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        assert_eq!(5, b.len);\n+    }\n+}\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nnew file mode 100644\nindex 000000000..cf104f372\n--- /dev/null\n+++ b/rust/src/datatypes.rs\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#[derive(Debug,Clone)]\n+pub enum DataType {\n+    Boolean,\n+    Int8,\n+    Int16,\n+    Int32,\n+    Int64,\n+    UInt8,\n+    UInt16,\n+    UInt32,\n+    UInt64,\n+    Float32,\n+    Float64,\n+    Utf8,\n+    Struct(Vec<Field>)\n+}\n+\n+#[derive(Debug,Clone)]\n+pub struct Field {\n+    pub name: String,\n+    pub data_type: DataType,\n+    pub nullable: bool\n+}\n+\n+impl Field {\n+\n+    pub fn new(name: &str, data_type: DataType, nullable: bool) -> Self {\n+        Field {\n+            name: name.to_string(),\n+            data_type: data_type,\n+            nullable: nullable\n+        }\n+    }\n+\n+    pub fn to_string(&self) -> String {\n+        format!(\"{}: {:?}\", self.name, self.data_type)\n+    }\n+}\n+\n+#[derive(Debug,Clone)]\n+pub struct Schema {\n+    pub columns: Vec<Field>\n+}\n+\n+impl Schema {\n+\n+    /// create an empty schema\n+    pub fn empty() -> Self { Schema { columns: vec![] } }\n+\n+    pub fn new(columns: Vec<Field>) -> Self { Schema { columns: columns } }\n+\n+    /// look up a column by name and return a reference to the column along with it's index\n+    pub fn column(&self, name: &str) -> Option<(usize, &Field)> {\n+        self.columns.iter()\n+            .enumerate()\n+            .find(|&(_,c)| c.name == name)\n+    }\n+\n+    pub fn to_string(&self) -> String {\n+        let s : Vec<String> = self.columns.iter()\n+            .map(|c| c.to_string())\n+            .collect();\n+        s.join(\",\")\n+    }\n+\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_define_schema() {\n+        let _person = Schema::new(vec![\n+            Field::new(\"first_name\", DataType::Utf8, false),\n+            Field::new(\"last_name\", DataType::Utf8, false),\n+            Field::new(\"address\", DataType::Struct(vec![\n+                Field::new(\"street\", DataType::Utf8, false),\n+                Field::new(\"zip\", DataType::UInt16, false),\n+            ]), false),\n+        ]);\n+    }\n+}\ndiff --git a/rust/src/error.rs b/rust/src/error.rs\nnew file mode 100644\nindex 000000000..837978049\n--- /dev/null\n+++ b/rust/src/error.rs\n@@ -0,0 +1,29 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::convert::*;\n+\n+#[derive(Debug,Clone)]\n+pub struct Error {\n+    msg: String\n+}\n+\n+impl From<&'static str> for Error where {\n+    fn from(msg: &'static str) -> Self {\n+        Error { msg: String::from(msg) }\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nnew file mode 100644\nindex 000000000..b2caa6190\n--- /dev/null\n+++ b/rust/src/lib.rs\n@@ -0,0 +1,28 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate bytes;\n+extern crate libc;\n+\n+pub mod array;\n+pub mod bitmap;\n+pub mod buffer;\n+pub mod datatypes;\n+pub mod list;\n+pub mod error;\n+pub mod memory;\n+\ndiff --git a/rust/src/list.rs b/rust/src/list.rs\nnew file mode 100644\nindex 000000000..a3a4e76fd\n--- /dev/null\n+++ b/rust/src/list.rs\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::str;\n+\n+use bytes::{BytesMut, BufMut};\n+\n+use super::buffer::Buffer;\n+\n+pub struct List<T> {\n+    pub data: Buffer<T>,\n+    pub offsets: Buffer<i32>\n+}\n+\n+impl<T> List<T> {\n+\n+    pub fn len(&self) -> i32 {\n+        self.offsets.len()-1\n+    }\n+\n+    pub fn slice(&self, index: usize) -> &[T] {\n+        let start = *self.offsets.get(index) as usize;\n+        let end = *self.offsets.get(index+1) as usize;\n+        &self.data.slice(start, end)\n+    }\n+}\n+\n+impl From<Vec<String>> for List<u8> {\n+    fn from(v: Vec<String>) -> Self {\n+        let mut offsets : Vec<i32> = Vec::with_capacity(v.len() + 1);\n+        let mut buf = BytesMut::with_capacity(v.len() * 32);\n+        offsets.push(0_i32);\n+        v.iter().for_each(|s| {\n+            buf.put(s.as_bytes());\n+            offsets.push(buf.len() as i32);\n+        });\n+        let bytes = buf.freeze();\n+        let buffer = Buffer::new(bytes.as_ptr(), bytes.len() as i32);\n+\n+        List { data: buffer, offsets: Buffer::from(offsets) }\n+    }\n+}\n+\n+/// This method mostly just used for unit tests\n+impl From<Vec<&'static str>> for List<u8> {\n+    fn from(v: Vec<&'static str>) -> Self {\n+        List::from(v.iter().map(|s| s.to_string()).collect::<Vec<String>>())\n+    }\n+}\n+\n+\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_utf8_slices() {\n+        let list = List::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n+        assert_eq!(4, list.len());\n+        assert_eq!(\"this\", str::from_utf8(list.slice(0)).unwrap());\n+        assert_eq!(\"is\", str::from_utf8(list.slice(1)).unwrap());\n+        assert_eq!(\"a\", str::from_utf8(list.slice(2)).unwrap());\n+        assert_eq!(\"test\", str::from_utf8(list.slice(3)).unwrap());\n+    }\n+\n+}\n\\ No newline at end of file\ndiff --git a/rust/src/memory.rs b/rust/src/memory.rs\nnew file mode 100644\nindex 000000000..5cecaa13d\n--- /dev/null\n+++ b/rust/src/memory.rs\n@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::mem;\n+use libc;\n+\n+use super::error::Error;\n+\n+const ALIGNMENT: usize = 64;\n+\n+pub fn allocate_aligned(size: i64) -> Result<*const u8, Error> {\n+    unsafe {\n+        let mut page: *mut libc::c_void = mem::uninitialized();\n+        let result = libc::posix_memalign(&mut page, ALIGNMENT, size as usize);\n+        match result {\n+            0 => Ok(mem::transmute::<*mut libc::c_void, *const u8>(page)),\n+            _ => Err(Error::from(\"Failed to allocate memory\")),\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_allocate() {\n+        let _ = allocate_aligned(32 * 1024).unwrap();\n+    }\n+\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-31T17:37:56.023+0000",
                    "updated": "2018-03-31T17:37:56.023+0000"
                }
            ],
            "maxResults": 13,
            "total": 13,
            "startAt": 0
        },
        "customfield_12311820": "0|i3rw3r:",
        "customfield_12314139": null
    }
}