{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13284377",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377",
    "key": "ARROW-7824",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7824/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/389146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449\n \n \n   First draft of writing Fragments to disk. Writing a fragment to disk requires a FileFormat (in which the batches will be written) and a destination FileSource.\r\n   \r\n   FileSystemSource::Write is provided as a convenience method: it preserves partition information while minimally changing file names.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T22:34:48.483+0000",
                    "updated": "2020-02-18T22:34:48.483+0000",
                    "started": "2020-02-18T22:34:48.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389146",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/389153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#issuecomment-587942717\n \n \n   https://issues.apache.org/jira/browse/ARROW-7824\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-18T22:46:44.295+0000",
                    "updated": "2020-02-18T22:46:44.295+0000",
                    "started": "2020-02-18T22:46:44.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389153",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/391720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#issuecomment-590349694\n \n \n   @bkietz requires a rebase\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T14:35:07.283+0000",
                    "updated": "2020-02-24T14:35:07.283+0000",
                    "started": "2020-02-24T14:35:07.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391720",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390601276\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n \n Review comment:\n   This should just return Status, e.g. if we write to an odbc table or any stream service (kafka, kynesis) there's not much to return. I don't doubt a second users will want to write to kafka.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.262+0000",
                    "updated": "2020-03-11T01:14:58.262+0000",
                    "started": "2020-03-11T01:14:58.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401102",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390692853\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n+\n+  virtual ~WriteTask() = default;\n+\n+  const FileSource& destination() const;\n+  const std::shared_ptr<FileFormat>& format() const { return format_; }\n+\n+ protected:\n+  WriteTask(FileSource destination, std::shared_ptr<FileFormat> format)\n+      : destination_(std::move(destination)), format_(std::move(format)) {}\n+\n+  Status CreateDestinationParentDir() const;\n+\n+  FileSource destination_;\n+  std::shared_ptr<FileFormat> format_;\n+};\n+\n+/// \\brief A declarative plan for writing fragments to a partitioned directory structure.\n+class ARROW_DS_EXPORT WritePlan {\n+ public:\n+  /// The partitioning with which paths were generated\n+  std::shared_ptr<Partitioning> partitioning;\n+\n+  /// The schema of the Dataset which will be written\n+  std::shared_ptr<Schema> schema;\n+\n+  /// The format into which fragments will be written\n+  std::shared_ptr<FileFormat> format;\n+\n+  /// The FileSystem and base directory for partitioned writing\n+  std::shared_ptr<fs::FileSystem> filesystem;\n+  std::string partition_base_dir;\n+\n+  using FragmentOrPartitionExpression =\n+      util::variant<std::shared_ptr<Expression>, std::shared_ptr<Fragment>>;\n+\n+  /// If fragment_or_partition_expressions[i] is a Fragment, that Fragment will be\n+  /// written to paths[i]. If it is an Expression, a directory representing that partition\n+  /// expression will be created at paths[i] instead.\n+  std::vector<FragmentOrPartitionExpression> fragment_or_partition_expressions;\n \n Review comment:\n   Do you need partitions for directories, why not the equivalent of `mkdir -p`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.484+0000",
                    "updated": "2020-03-11T01:14:58.484+0000",
                    "started": "2020-03-11T01:14:58.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401103",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390601664\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n+\n+  virtual ~WriteTask() = default;\n+\n+  const FileSource& destination() const;\n+  const std::shared_ptr<FileFormat>& format() const { return format_; }\n+\n+ protected:\n+  WriteTask(FileSource destination, std::shared_ptr<FileFormat> format)\n+      : destination_(std::move(destination)), format_(std::move(format)) {}\n+\n+  Status CreateDestinationParentDir() const;\n+\n+  FileSource destination_;\n+  std::shared_ptr<FileFormat> format_;\n+};\n+\n+/// \\brief A declarative plan for writing fragments to a partitioned directory structure.\n \n Review comment:\n   This class should be in file_base.h since it's very highly coupled with the notion of file/filesystem.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.487+0000",
                    "updated": "2020-03-11T01:14:58.487+0000",
                    "started": "2020-03-11T01:14:58.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401104",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390693935\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -40,6 +41,90 @@ using internal::checked_pointer_cast;\n \n bool Scalar::Equals(const Scalar& other) const { return ScalarEquals(*this, other); }\n \n+struct ScalarHashImpl {\n+  static std::hash<std::string> string_hash;\n+\n+  Status Visit(const NullScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return BufferHash(*s.value); }\n+\n+  template <typename T>\n+  Status Visit(const TemporalScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const DayTimeIntervalScalar& s) {\n+    return StdHash(s.value.days) & StdHash(s.value.days);\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    return StdHash(s.value.low_bits()) & StdHash(s.value.high_bits());\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ArrayHash(*s.value); }\n+\n+  Status Visit(const StructScalar& s) {\n+    for (const auto& child : s.value) {\n+      AccumulateHashFrom(*child);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // TODO(bkietz) implement less wimpy hashing when these have ValueType\n+  Status Visit(const UnionScalar& s) { return Status::OK(); }\n+  Status Visit(const DictionaryScalar& s) { return Status::OK(); }\n+  Status Visit(const ExtensionScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status StdHash(const T& t) {\n+    static std::hash<T> hash;\n+    hash_ ^= hash(t);\n+    return Status::OK();\n+  }\n+\n+  template <typename S>\n+  Status ValueHash(const S& s) {\n+    return StdHash(s.value);\n+  }\n+\n+  Status BufferHash(const Buffer& b) {\n+    hash_ ^= internal::ComputeStringHash<1>(b.data(), b.size());\n+    return Status::OK();\n+  }\n+\n+  Status ArrayHash(const Array& a) { return ArrayHash(*a.data()); }\n+\n+  Status ArrayHash(const ArrayData& a) {\n+    RETURN_NOT_OK(StdHash(a.length) & StdHash(a.GetNullCount()));\n+    for (const auto& buffer : a.buffers) {\n+      if (buffer != nullptr) {\n+        // FIXME(bkietz) this relies on values under nulls\n \n Review comment:\n   This will make valgrind/ubsan unhappy.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.487+0000",
                    "updated": "2020-03-11T01:14:58.487+0000",
                    "started": "2020-03-11T01:14:58.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401105",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390694883\n \n \n\n ##########\n File path: cpp/src/arrow/scalar_test.cc\n ##########\n @@ -81,6 +82,20 @@ TYPED_TEST(TestNumericScalar, Basics) {\n   ASSERT_EQ(*null_value, *dyn_null_value);\n }\n \n+TYPED_TEST(TestNumericScalar, Hashing) {\n+  using T = typename TypeParam::c_type;\n+  using ScalarType = typename TypeTraits<TypeParam>::ScalarType;\n+\n+  std::unordered_set<std::shared_ptr<Scalar>, Scalar::Hash, Scalar::PtrsEqual> set;\n \n Review comment:\n   Good to know.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.487+0000",
                    "updated": "2020-03-11T01:14:58.487+0000",
                    "started": "2020-03-11T01:14:58.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401106",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r390695097\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -40,6 +41,90 @@ using internal::checked_pointer_cast;\n \n bool Scalar::Equals(const Scalar& other) const { return ScalarEquals(*this, other); }\n \n+struct ScalarHashImpl {\n+  static std::hash<std::string> string_hash;\n+\n+  Status Visit(const NullScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return BufferHash(*s.value); }\n+\n+  template <typename T>\n+  Status Visit(const TemporalScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const DayTimeIntervalScalar& s) {\n+    return StdHash(s.value.days) & StdHash(s.value.days);\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    return StdHash(s.value.low_bits()) & StdHash(s.value.high_bits());\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ArrayHash(*s.value); }\n+\n+  Status Visit(const StructScalar& s) {\n+    for (const auto& child : s.value) {\n+      AccumulateHashFrom(*child);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // TODO(bkietz) implement less wimpy hashing when these have ValueType\n+  Status Visit(const UnionScalar& s) { return Status::OK(); }\n+  Status Visit(const DictionaryScalar& s) { return Status::OK(); }\n+  Status Visit(const ExtensionScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status StdHash(const T& t) {\n+    static std::hash<T> hash;\n+    hash_ ^= hash(t);\n+    return Status::OK();\n+  }\n+\n+  template <typename S>\n+  Status ValueHash(const S& s) {\n+    return StdHash(s.value);\n+  }\n+\n+  Status BufferHash(const Buffer& b) {\n+    hash_ ^= internal::ComputeStringHash<1>(b.data(), b.size());\n+    return Status::OK();\n+  }\n+\n+  Status ArrayHash(const Array& a) { return ArrayHash(*a.data()); }\n+\n+  Status ArrayHash(const ArrayData& a) {\n+    RETURN_NOT_OK(StdHash(a.length) & StdHash(a.GetNullCount()));\n+    for (const auto& buffer : a.buffers) {\n+      if (buffer != nullptr) {\n+        // FIXME(bkietz) this relies on values under nulls\n+        RETURN_NOT_OK(BufferHash(*buffer));\n+      }\n+    }\n+    for (const auto& child : a.child_data) {\n+      RETURN_NOT_OK(ArrayHash(*child));\n+    }\n+    return Status::OK();\n+  }\n+\n+  explicit ScalarHashImpl(const Scalar& scalar) { AccumulateHashFrom(scalar); }\n+\n+  void AccumulateHashFrom(const Scalar& scalar) {\n+    DCHECK_OK(StdHash(scalar.type->fingerprint()));\n \n Review comment:\n   Just ensure that this doesn't take the metadata into account.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T01:14:58.580+0000",
                    "updated": "2020-03-11T01:14:58.580+0000",
                    "started": "2020-03-11T01:14:58.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401107",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391137307\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -40,6 +41,90 @@ using internal::checked_pointer_cast;\n \n bool Scalar::Equals(const Scalar& other) const { return ScalarEquals(*this, other); }\n \n+struct ScalarHashImpl {\n+  static std::hash<std::string> string_hash;\n+\n+  Status Visit(const NullScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return BufferHash(*s.value); }\n+\n+  template <typename T>\n+  Status Visit(const TemporalScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const DayTimeIntervalScalar& s) {\n+    return StdHash(s.value.days) & StdHash(s.value.days);\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    return StdHash(s.value.low_bits()) & StdHash(s.value.high_bits());\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ArrayHash(*s.value); }\n+\n+  Status Visit(const StructScalar& s) {\n+    for (const auto& child : s.value) {\n+      AccumulateHashFrom(*child);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // TODO(bkietz) implement less wimpy hashing when these have ValueType\n+  Status Visit(const UnionScalar& s) { return Status::OK(); }\n+  Status Visit(const DictionaryScalar& s) { return Status::OK(); }\n+  Status Visit(const ExtensionScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status StdHash(const T& t) {\n+    static std::hash<T> hash;\n+    hash_ ^= hash(t);\n+    return Status::OK();\n+  }\n+\n+  template <typename S>\n+  Status ValueHash(const S& s) {\n+    return StdHash(s.value);\n+  }\n+\n+  Status BufferHash(const Buffer& b) {\n+    hash_ ^= internal::ComputeStringHash<1>(b.data(), b.size());\n+    return Status::OK();\n+  }\n+\n+  Status ArrayHash(const Array& a) { return ArrayHash(*a.data()); }\n+\n+  Status ArrayHash(const ArrayData& a) {\n+    RETURN_NOT_OK(StdHash(a.length) & StdHash(a.GetNullCount()));\n+    for (const auto& buffer : a.buffers) {\n+      if (buffer != nullptr) {\n+        // FIXME(bkietz) this relies on values under nulls\n+        RETURN_NOT_OK(BufferHash(*buffer));\n+      }\n+    }\n+    for (const auto& child : a.child_data) {\n+      RETURN_NOT_OK(ArrayHash(*child));\n+    }\n+    return Status::OK();\n+  }\n+\n+  explicit ScalarHashImpl(const Scalar& scalar) { AccumulateHashFrom(scalar); }\n+\n+  void AccumulateHashFrom(const Scalar& scalar) {\n+    DCHECK_OK(StdHash(scalar.type->fingerprint()));\n \n Review comment:\n   It doesn't; there's a separate `metadata_fingerprint()` method\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T17:23:36.428+0000",
                    "updated": "2020-03-11T17:23:36.428+0000",
                    "started": "2020-03-11T17:23:36.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401603",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391137447\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n+\n+  virtual ~WriteTask() = default;\n+\n+  const FileSource& destination() const;\n+  const std::shared_ptr<FileFormat>& format() const { return format_; }\n+\n+ protected:\n+  WriteTask(FileSource destination, std::shared_ptr<FileFormat> format)\n+      : destination_(std::move(destination)), format_(std::move(format)) {}\n+\n+  Status CreateDestinationParentDir() const;\n+\n+  FileSource destination_;\n+  std::shared_ptr<FileFormat> format_;\n+};\n+\n+/// \\brief A declarative plan for writing fragments to a partitioned directory structure.\n \n Review comment:\n   will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T17:23:47.763+0000",
                    "updated": "2020-03-11T17:23:47.763+0000",
                    "started": "2020-03-11T17:23:47.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401604",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391141234\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n \n Review comment:\n   okay\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T17:29:09.485+0000",
                    "updated": "2020-03-11T17:29:09.485+0000",
                    "started": "2020-03-11T17:29:09.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401605",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391207301\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n+\n+  virtual ~WriteTask() = default;\n+\n+  const FileSource& destination() const;\n+  const std::shared_ptr<FileFormat>& format() const { return format_; }\n+\n+ protected:\n+  WriteTask(FileSource destination, std::shared_ptr<FileFormat> format)\n+      : destination_(std::move(destination)), format_(std::move(format)) {}\n+\n+  Status CreateDestinationParentDir() const;\n+\n+  FileSource destination_;\n+  std::shared_ptr<FileFormat> format_;\n+};\n+\n+/// \\brief A declarative plan for writing fragments to a partitioned directory structure.\n+class ARROW_DS_EXPORT WritePlan {\n+ public:\n+  /// The partitioning with which paths were generated\n+  std::shared_ptr<Partitioning> partitioning;\n+\n+  /// The schema of the Dataset which will be written\n+  std::shared_ptr<Schema> schema;\n+\n+  /// The format into which fragments will be written\n+  std::shared_ptr<FileFormat> format;\n+\n+  /// The FileSystem and base directory for partitioned writing\n+  std::shared_ptr<fs::FileSystem> filesystem;\n+  std::string partition_base_dir;\n+\n+  using FragmentOrPartitionExpression =\n+      util::variant<std::shared_ptr<Expression>, std::shared_ptr<Fragment>>;\n+\n+  /// If fragment_or_partition_expressions[i] is a Fragment, that Fragment will be\n+  /// written to paths[i]. If it is an Expression, a directory representing that partition\n+  /// expression will be created at paths[i] instead.\n+  std::vector<FragmentOrPartitionExpression> fragment_or_partition_expressions;\n \n Review comment:\n   The result of executing a `WritePlan` is a `FileSystemDataset`. My assumption is that when performing an extraction of a subset the extracted data is going to be used almost immediately as a dataset, so going through discovery again would be unnecessary. Thus all of the elements necessary to construct a Dataset around the written data are kept around.\r\n   \r\n   FileSystemDataset must be constructed with directories as well as file names to correctly handle partition column materialization and fragment pruning. The directory `/base_dir/a=3` serves as a holder for the partition expression `\"a\"_ == 3`, which is applied to child directories and fragments.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T19:22:21.897+0000",
                    "updated": "2020-03-11T19:22:21.897+0000",
                    "started": "2020-03-11T19:22:21.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401702",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391207362\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -40,6 +41,90 @@ using internal::checked_pointer_cast;\n \n bool Scalar::Equals(const Scalar& other) const { return ScalarEquals(*this, other); }\n \n+struct ScalarHashImpl {\n+  static std::hash<std::string> string_hash;\n+\n+  Status Visit(const NullScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return BufferHash(*s.value); }\n+\n+  template <typename T>\n+  Status Visit(const TemporalScalar<T>& s) {\n+    return ValueHash(s);\n+  }\n+\n+  Status Visit(const DayTimeIntervalScalar& s) {\n+    return StdHash(s.value.days) & StdHash(s.value.days);\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    return StdHash(s.value.low_bits()) & StdHash(s.value.high_bits());\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ArrayHash(*s.value); }\n+\n+  Status Visit(const StructScalar& s) {\n+    for (const auto& child : s.value) {\n+      AccumulateHashFrom(*child);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // TODO(bkietz) implement less wimpy hashing when these have ValueType\n+  Status Visit(const UnionScalar& s) { return Status::OK(); }\n+  Status Visit(const DictionaryScalar& s) { return Status::OK(); }\n+  Status Visit(const ExtensionScalar& s) { return Status::OK(); }\n+\n+  template <typename T>\n+  Status StdHash(const T& t) {\n+    static std::hash<T> hash;\n+    hash_ ^= hash(t);\n+    return Status::OK();\n+  }\n+\n+  template <typename S>\n+  Status ValueHash(const S& s) {\n+    return StdHash(s.value);\n+  }\n+\n+  Status BufferHash(const Buffer& b) {\n+    hash_ ^= internal::ComputeStringHash<1>(b.data(), b.size());\n+    return Status::OK();\n+  }\n+\n+  Status ArrayHash(const Array& a) { return ArrayHash(*a.data()); }\n+\n+  Status ArrayHash(const ArrayData& a) {\n+    RETURN_NOT_OK(StdHash(a.length) & StdHash(a.GetNullCount()));\n+    for (const auto& buffer : a.buffers) {\n+      if (buffer != nullptr) {\n+        // FIXME(bkietz) this relies on values under nulls\n \n Review comment:\n   Will fix\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T19:22:28.228+0000",
                    "updated": "2020-03-11T19:22:28.228+0000",
                    "started": "2020-03-11T19:22:28.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401703",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r391207828\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/writer.h\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n+#include \"arrow/dataset/visibility.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// XXX does this merit its own header? Maybe this should just be folded into file_base.h\n+\n+/// \\brief Write a fragment to a single OutputStream.\n+class ARROW_DS_EXPORT WriteTask {\n+ public:\n+  virtual Result<std::shared_ptr<FileFragment>> Execute() = 0;\n+\n+  virtual ~WriteTask() = default;\n+\n+  const FileSource& destination() const;\n+  const std::shared_ptr<FileFormat>& format() const { return format_; }\n+\n+ protected:\n+  WriteTask(FileSource destination, std::shared_ptr<FileFormat> format)\n+      : destination_(std::move(destination)), format_(std::move(format)) {}\n+\n+  Status CreateDestinationParentDir() const;\n+\n+  FileSource destination_;\n+  std::shared_ptr<FileFormat> format_;\n+};\n+\n+/// \\brief A declarative plan for writing fragments to a partitioned directory structure.\n+class ARROW_DS_EXPORT WritePlan {\n+ public:\n+  /// The partitioning with which paths were generated\n+  std::shared_ptr<Partitioning> partitioning;\n+\n+  /// The schema of the Dataset which will be written\n+  std::shared_ptr<Schema> schema;\n+\n+  /// The format into which fragments will be written\n+  std::shared_ptr<FileFormat> format;\n+\n+  /// The FileSystem and base directory for partitioned writing\n+  std::shared_ptr<fs::FileSystem> filesystem;\n+  std::string partition_base_dir;\n+\n+  using FragmentOrPartitionExpression =\n+      util::variant<std::shared_ptr<Expression>, std::shared_ptr<Fragment>>;\n+\n+  /// If fragment_or_partition_expressions[i] is a Fragment, that Fragment will be\n+  /// written to paths[i]. If it is an Expression, a directory representing that partition\n+  /// expression will be created at paths[i] instead.\n+  std::vector<FragmentOrPartitionExpression> fragment_or_partition_expressions;\n \n Review comment:\n   (the same logic applies to WriteTask::Execute returning a Result<Fragment> rather than just Status)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T19:23:23.032+0000",
                    "updated": "2020-03-11T19:23:23.032+0000",
                    "started": "2020-03-11T19:23:23.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401705",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/401739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#issuecomment-597838358\n \n \n   @fsaintjacques I have addressed your comments, PTAL\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T19:59:54.298+0000",
                    "updated": "2020-03-11T19:59:54.298+0000",
                    "started": "2020-03-11T19:59:54.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401739",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/404803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r393725818\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.cc\n ##########\n @@ -192,10 +282,232 @@ class DirectoryPartitioningFactory : public PartitioningFactory {\n     return std::make_shared<DirectoryPartitioning>(std::move(out_schema));\n   }\n \n+  struct MakeWritePlanImpl;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments) override;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments,\n+                                  const std::shared_ptr<Schema>& schema) override;\n+\n  private:\n   std::vector<std::string> field_names_;\n };\n \n+struct DirectoryPartitioningFactory::MakeWritePlanImpl {\n \n Review comment:\n   I would not expect any code to be touched in Partition, why is this required?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T15:47:43.716+0000",
                    "updated": "2020-03-17T15:47:43.716+0000",
                    "started": "2020-03-17T15:47:43.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404803",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/404804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r393725818\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.cc\n ##########\n @@ -192,10 +282,232 @@ class DirectoryPartitioningFactory : public PartitioningFactory {\n     return std::make_shared<DirectoryPartitioning>(std::move(out_schema));\n   }\n \n+  struct MakeWritePlanImpl;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments) override;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments,\n+                                  const std::shared_ptr<Schema>& schema) override;\n+\n  private:\n   std::vector<std::string> field_names_;\n };\n \n+struct DirectoryPartitioningFactory::MakeWritePlanImpl {\n \n Review comment:\n   Can you document this, I had a hard time following.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T15:48:06.331+0000",
                    "updated": "2020-03-17T15:48:06.331+0000",
                    "started": "2020-03-17T15:48:06.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404804",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/404826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r393789397\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.cc\n ##########\n @@ -192,10 +282,232 @@ class DirectoryPartitioningFactory : public PartitioningFactory {\n     return std::make_shared<DirectoryPartitioning>(std::move(out_schema));\n   }\n \n+  struct MakeWritePlanImpl;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments) override;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments,\n+                                  const std::shared_ptr<Schema>& schema) override;\n+\n  private:\n   std::vector<std::string> field_names_;\n };\n \n+struct DirectoryPartitioningFactory::MakeWritePlanImpl {\n \n Review comment:\n   Will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T16:01:09.762+0000",
                    "updated": "2020-03-17T16:01:09.762+0000",
                    "started": "2020-03-17T16:01:09.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404826",
                    "issueId": "13284377"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/worklog/405605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6449: ARROW-7824: [C++][Dataset] WriteFragments to disk\nURL: https://github.com/apache/arrow/pull/6449#discussion_r394511823\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/partition.cc\n ##########\n @@ -192,10 +282,232 @@ class DirectoryPartitioningFactory : public PartitioningFactory {\n     return std::make_shared<DirectoryPartitioning>(std::move(out_schema));\n   }\n \n+  struct MakeWritePlanImpl;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments) override;\n+\n+  Result<WritePlan> MakeWritePlan(FragmentIterator fragments,\n+                                  const std::shared_ptr<Schema>& schema) override;\n+\n  private:\n   std::vector<std::string> field_names_;\n };\n \n+struct DirectoryPartitioningFactory::MakeWritePlanImpl {\n \n Review comment:\n   @fsaintjacques PTAL\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T17:16:17.679+0000",
                    "updated": "2020-03-18T17:16:17.679+0000",
                    "started": "2020-03-18T17:16:17.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405605",
                    "issueId": "13284377"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@27e31195[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bf9c989[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76cdd976[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@636df3a7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fe8b3c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1e67548c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f9285f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@a8513ec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7089f7f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@54ee1e50[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b9a7f42[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@392205ae[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 19 16:54:16 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-19T16:54:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7824/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-02-10T17:20:59.000+0000",
        "updated": "2020-04-10T15:31:55.000+0000",
        "timeoriginalestimate": null,
        "description": "Begin with writing to IPC format since it is simpler than parquet and to efficiently support the \"locally cached extract\" workflow.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Provide Dataset writing to IPC format",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284377/comment/17062759",
                    "id": "17062759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6449\n[https://github.com/apache/arrow/pull/6449]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-19T16:54:16.329+0000",
                    "updated": "2020-03-19T16:54:16.329+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0bc5s:",
        "customfield_12314139": null
    }
}