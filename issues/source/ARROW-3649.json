{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13195050",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050",
    "key": "ARROW-3649",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
            "name": "csun",
            "key": "csun",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
            },
            "displayName": "Chao Sun",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
            "name": "csun",
            "key": "csun",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
            },
            "displayName": "Chao Sun",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
            "name": "csun",
            "key": "csun",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
            },
            "displayName": "Chao Sun",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3649/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/160444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao opened a new pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T07:47:15.831+0000",
                    "updated": "2018-10-30T07:47:15.831+0000",
                    "started": "2018-10-30T07:47:15.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160444",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/160987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#issuecomment-434570183\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=h1) Report\n   > Merging [#2868](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1a6545aa51f5f41f0233ee0a11ef87d21127c5ed?src=pr&el=desc) will **increase** coverage by `2.49%`.\n   > The diff coverage is `90.38%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2868/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2868      +/-   ##\n   ==========================================\n   + Coverage   87.56%   90.05%   +2.49%     \n   ==========================================\n     Files         411       13     -398     \n     Lines       63818     1981   -61837     \n   ==========================================\n   - Hits        55881     1784   -54097     \n   + Misses       7867      197    -7670     \n   + Partials       70        0      -70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVmZmVyLnJz) | `93.53% <100%> (+0.65%)` | :arrow_up: |\n   | [rust/src/builder.rs](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVpbGRlci5ycw==) | `97.2% <44.44%> (+1.5%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/ipc/metadata-internal.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuaA==) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | [python/pyarrow/hdfs.py](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaGRmcy5weQ==) | | |\n   | ... and [392 more](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=footer). Last update [1a6545a...e9769cb](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T05:55:57.384+0000",
                    "updated": "2018-10-31T05:55:57.384+0000",
                    "started": "2018-10-31T05:55:57.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160987",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#discussion_r229744893\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -196,23 +187,43 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Adjust the capacity of this buffer to be at least `new_capacity`.\n+    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n+    /// also ensure the new capacity will be a multiple of 64 bytes.\n+    ///\n+    /// Returns the new capacity for this buffer.\n+    pub fn reserve(&mut self, capacity: usize) -> Result<usize> {\n+        if capacity > self.capacity {\n+            let new_capacity = bit_util::round_upto_multiple_of_64(capacity as i64);\n+            let new_capacity = cmp::max(new_capacity, self.capacity as i64 * 2) as usize;\n+            let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n+            self.data = new_data as *mut u8;\n+            self.capacity = new_capacity;\n+        }\n+        Ok(self.capacity)\n+    }\n+\n+    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n     ///\n-    /// If the `new_capacity` is less than the current capacity, nothing is done and `Ok`\n-    /// will be returned. Otherwise, the new capacity value will be chosen between the\n-    /// larger one of the incoming `new_capacity` (after rounding up to the nearest 64)\n-    /// and the doubled value of the existing capacity, the capacity added is returned.\n-    pub fn resize(&mut self, new_capacity: usize) -> Result<usize> {\n-        if new_capacity <= self.capacity {\n-            return Ok(0);\n+    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n+    /// the former, optionally extending the capacity. The data between `len` and\n+    /// `new_len` will remain unchanged.\n+    ///\n+    /// If `new_len` is less than `len`, the buffer will be truncated.\n+    pub fn resize(&mut self, new_len: usize) -> Result<()> {\n+        if new_len > self.len {\n \n Review comment:\n   I think this check is redundant as the call to `reserve` will check `new_len` against `self.capacity`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T15:34:12.465+0000",
                    "updated": "2018-10-31T15:34:12.465+0000",
                    "started": "2018-10-31T15:34:12.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161183",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#discussion_r229747288\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -61,37 +61,28 @@ macro_rules! impl_buffer_builder {\n                 (byte_capacity / mem::size_of::<$native_ty>()) as i64\n             }\n \n-            /// Push a value into the builder, growing the internal buffer as needed\n+            /// Pushes a value into the builder, growing the internal buffer as needed.\n             pub fn push(&mut self, v: $native_ty) -> Result<()> {\n                 self.reserve(1)?;\n                 self.write_bytes(v.to_byte_slice(), 1)\n             }\n \n-            /// Push a slice of type T, growing the internal buffer as needed\n+            /// Pushes a slice of type `T`, growing the internal buffer as needed.\n             pub fn push_slice(&mut self, slice: &[$native_ty]) -> Result<()> {\n                 let array_slots = slice.len() as i64;\n                 self.reserve(array_slots)?;\n                 self.write_bytes(slice.to_byte_slice(), array_slots)\n             }\n \n-            /// Reserve memory for n elements of type T\n+            /// Reserves memory for `n` elements of type `T`.\n             pub fn reserve(&mut self, n: i64) -> Result<()> {\n                 let new_capacity = self.len + n;\n-                if new_capacity > self.capacity() {\n-                    return self.grow(new_capacity);\n-                }\n-                Ok(())\n-            }\n-\n-            /// Grow the internal buffer to `new_capacity`, where `new_capacity` is the capacity in\n-            /// elements of type T\n-            fn grow(&mut self, new_capacity: i64) -> Result<()> {\n                 let byte_capacity = mem::size_of::<$native_ty>() * new_capacity as usize;\n-                self.buffer.resize(byte_capacity)?;\n+                self.buffer.reserve(byte_capacity)?;\n                 Ok(())\n             }\n \n-            /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+            /// Consumes this and returns an immutable `Buffer`.\n \n Review comment:\n   Is there a missing word here?  i.e. Consumes this `BufferBuilder` and...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T15:34:12.558+0000",
                    "updated": "2018-10-31T15:34:12.558+0000",
                    "started": "2018-10-31T15:34:12.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161184",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#discussion_r229748613\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -196,23 +187,43 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Adjust the capacity of this buffer to be at least `new_capacity`.\n+    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n+    /// also ensure the new capacity will be a multiple of 64 bytes.\n+    ///\n+    /// Returns the new capacity for this buffer.\n+    pub fn reserve(&mut self, capacity: usize) -> Result<usize> {\n+        if capacity > self.capacity {\n+            let new_capacity = bit_util::round_upto_multiple_of_64(capacity as i64);\n+            let new_capacity = cmp::max(new_capacity, self.capacity as i64 * 2) as usize;\n+            let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n+            self.data = new_data as *mut u8;\n+            self.capacity = new_capacity;\n+        }\n+        Ok(self.capacity)\n+    }\n+\n+    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n     ///\n-    /// If the `new_capacity` is less than the current capacity, nothing is done and `Ok`\n-    /// will be returned. Otherwise, the new capacity value will be chosen between the\n-    /// larger one of the incoming `new_capacity` (after rounding up to the nearest 64)\n-    /// and the doubled value of the existing capacity, the capacity added is returned.\n-    pub fn resize(&mut self, new_capacity: usize) -> Result<usize> {\n-        if new_capacity <= self.capacity {\n-            return Ok(0);\n+    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n+    /// the former, optionally extending the capacity. The data between `len` and\n+    /// `new_len` will remain unchanged.\n+    ///\n+    /// If `new_len` is less than `len`, the buffer will be truncated.\n+    pub fn resize(&mut self, new_len: usize) -> Result<()> {\n+        if new_len > self.len {\n \n Review comment:\n   I marked the wrong line, I mean this check:\r\n   `if new_len > self.capacity {`\r\n   on line 214 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T15:36:30.383+0000",
                    "updated": "2018-10-31T15:36:30.383+0000",
                    "started": "2018-10-31T15:36:30.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161187",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#discussion_r229937908\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -196,23 +187,43 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Adjust the capacity of this buffer to be at least `new_capacity`.\n+    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n+    /// also ensure the new capacity will be a multiple of 64 bytes.\n+    ///\n+    /// Returns the new capacity for this buffer.\n+    pub fn reserve(&mut self, capacity: usize) -> Result<usize> {\n+        if capacity > self.capacity {\n+            let new_capacity = bit_util::round_upto_multiple_of_64(capacity as i64);\n+            let new_capacity = cmp::max(new_capacity, self.capacity as i64 * 2) as usize;\n+            let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n+            self.data = new_data as *mut u8;\n+            self.capacity = new_capacity;\n+        }\n+        Ok(self.capacity)\n+    }\n+\n+    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n     ///\n-    /// If the `new_capacity` is less than the current capacity, nothing is done and `Ok`\n-    /// will be returned. Otherwise, the new capacity value will be chosen between the\n-    /// larger one of the incoming `new_capacity` (after rounding up to the nearest 64)\n-    /// and the doubled value of the existing capacity, the capacity added is returned.\n-    pub fn resize(&mut self, new_capacity: usize) -> Result<usize> {\n-        if new_capacity <= self.capacity {\n-            return Ok(0);\n+    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n+    /// the former, optionally extending the capacity. The data between `len` and\n+    /// `new_len` will remain unchanged.\n+    ///\n+    /// If `new_len` is less than `len`, the buffer will be truncated.\n+    pub fn resize(&mut self, new_len: usize) -> Result<()> {\n+        if new_len > self.len {\n \n Review comment:\n   Good point. Removed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T04:37:26.243+0000",
                    "updated": "2018-11-01T04:37:26.243+0000",
                    "started": "2018-11-01T04:37:26.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161442",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#discussion_r229937914\n \n \n\n ##########\n File path: rust/src/builder.rs\n ##########\n @@ -61,37 +61,28 @@ macro_rules! impl_buffer_builder {\n                 (byte_capacity / mem::size_of::<$native_ty>()) as i64\n             }\n \n-            /// Push a value into the builder, growing the internal buffer as needed\n+            /// Pushes a value into the builder, growing the internal buffer as needed.\n             pub fn push(&mut self, v: $native_ty) -> Result<()> {\n                 self.reserve(1)?;\n                 self.write_bytes(v.to_byte_slice(), 1)\n             }\n \n-            /// Push a slice of type T, growing the internal buffer as needed\n+            /// Pushes a slice of type `T`, growing the internal buffer as needed.\n             pub fn push_slice(&mut self, slice: &[$native_ty]) -> Result<()> {\n                 let array_slots = slice.len() as i64;\n                 self.reserve(array_slots)?;\n                 self.write_bytes(slice.to_byte_slice(), array_slots)\n             }\n \n-            /// Reserve memory for n elements of type T\n+            /// Reserves memory for `n` elements of type `T`.\n             pub fn reserve(&mut self, n: i64) -> Result<()> {\n                 let new_capacity = self.len + n;\n-                if new_capacity > self.capacity() {\n-                    return self.grow(new_capacity);\n-                }\n-                Ok(())\n-            }\n-\n-            /// Grow the internal buffer to `new_capacity`, where `new_capacity` is the capacity in\n-            /// elements of type T\n-            fn grow(&mut self, new_capacity: i64) -> Result<()> {\n                 let byte_capacity = mem::size_of::<$native_ty>() * new_capacity as usize;\n-                self.buffer.resize(byte_capacity)?;\n+                self.buffer.reserve(byte_capacity)?;\n                 Ok(())\n             }\n \n-            /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+            /// Consumes this and returns an immutable `Buffer`.\n \n Review comment:\n   Done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T04:37:30.812+0000",
                    "updated": "2018-11-01T04:37:30.812+0000",
                    "started": "2018-11-01T04:37:30.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161443",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868#issuecomment-434570183\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=h1) Report\n   > Merging [#2868](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1a6545aa51f5f41f0233ee0a11ef87d21127c5ed?src=pr&el=desc) will **increase** coverage by `2.48%`.\n   > The diff coverage is `90.19%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2868/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2868      +/-   ##\n   ==========================================\n   + Coverage   87.56%   90.05%   +2.48%     \n   ==========================================\n     Files         411       13     -398     \n     Lines       63818     1980   -61838     \n   ==========================================\n   - Hits        55881     1783   -54098     \n   + Misses       7867      197    -7670     \n   + Partials       70        0      -70\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVmZmVyLnJz) | `93.51% <100%> (+0.63%)` | :arrow_up: |\n   | [rust/src/builder.rs](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVpbGRlci5ycw==) | `97.2% <44.44%> (+1.5%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/ipc/metadata-internal.h](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuaA==) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | [python/pyarrow/hdfs.py](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaGRmcy5weQ==) | | |\n   | ... and [392 more](https://codecov.io/gh/apache/arrow/pull/2868/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=footer). Last update [1a6545a...ab803ac](https://codecov.io/gh/apache/arrow/pull/2868?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T04:56:49.262+0000",
                    "updated": "2018-11-01T04:56:49.262+0000",
                    "started": "2018-11-01T04:56:49.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161456",
                    "issueId": "13195050"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/worklog/161613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs closed pull request #2868: ARROW-3649: [Rust] Refactor MutableBuffer's resize\nURL: https://github.com/apache/arrow/pull/2868\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex dd6069a988..cec38dbcff 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -176,15 +176,6 @@ impl MutableBuffer {\n         self\n     }\n \n-    /// Manually sets the `len` of this buffer\n-    pub fn set_len(&mut self, new_len: usize) {\n-        assert!(\n-            new_len <= self.capacity,\n-            \"Unable to set len outside capacity\"\n-        );\n-        self.len = new_len;\n-    }\n-\n     /// Ensure that `count` bytes from `start` contain zero bits\n     ///\n     /// This is used to initialize the bits in a buffer, however, it has no impact on the `len`\n@@ -196,23 +187,41 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Adjust the capacity of this buffer to be at least `new_capacity`.\n+    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n+    /// also ensure the new capacity will be a multiple of 64 bytes.\n+    ///\n+    /// Returns the new capacity for this buffer.\n+    pub fn reserve(&mut self, capacity: usize) -> Result<usize> {\n+        if capacity > self.capacity {\n+            let new_capacity = bit_util::round_upto_multiple_of_64(capacity as i64);\n+            let new_capacity = cmp::max(new_capacity, self.capacity as i64 * 2) as usize;\n+            let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n+            self.data = new_data as *mut u8;\n+            self.capacity = new_capacity;\n+        }\n+        Ok(self.capacity)\n+    }\n+\n+    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n     ///\n-    /// If the `new_capacity` is less than the current capacity, nothing is done and `Ok`\n-    /// will be returned. Otherwise, the new capacity value will be chosen between the\n-    /// larger one of the incoming `new_capacity` (after rounding up to the nearest 64)\n-    /// and the doubled value of the existing capacity, the capacity added is returned.\n-    pub fn resize(&mut self, new_capacity: usize) -> Result<usize> {\n-        if new_capacity <= self.capacity {\n-            return Ok(0);\n+    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n+    /// the former, optionally extending the capacity. The data between `len` and\n+    /// `new_len` will remain unchanged.\n+    ///\n+    /// If `new_len` is less than `len`, the buffer will be truncated.\n+    pub fn resize(&mut self, new_len: usize) -> Result<()> {\n+        if new_len > self.len {\n+            self.reserve(new_len)?;\n+        } else {\n+            let new_capacity = bit_util::round_upto_multiple_of_64(new_len as i64) as usize;\n+            if new_capacity < self.capacity {\n+                let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n+                self.data = new_data as *mut u8;\n+                self.capacity = new_capacity;\n+            }\n         }\n-        let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity as i64);\n-        let new_capacity = cmp::max(new_capacity, self.capacity as i64 * 2) as usize;\n-        let new_data = memory::reallocate(self.capacity, new_capacity, self.data)?;\n-        self.data = new_data as *mut u8;\n-        let capacity_added = new_capacity - self.capacity;\n-        self.capacity = new_capacity;\n-        Ok(capacity_added)\n+        self.len = new_len;\n+        Ok(())\n     }\n \n     /// Returns whether this buffer is empty or not.\n@@ -450,17 +459,46 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_mutable_reserve() {\n+        let mut buf = MutableBuffer::new(1);\n+        assert_eq!(64, buf.capacity());\n+\n+        // Reserving a smaller capacity should have no effect.\n+        let mut new_cap = buf.reserve(10).expect(\"reserve should be OK\");\n+        assert_eq!(64, new_cap);\n+        assert_eq!(64, buf.capacity());\n+\n+        new_cap = buf.reserve(100).expect(\"reserve should be OK\");\n+        assert_eq!(128, new_cap);\n+        assert_eq!(128, buf.capacity());\n+    }\n+\n     #[test]\n     fn test_mutable_resize() {\n         let mut buf = MutableBuffer::new(1);\n         assert_eq!(64, buf.capacity());\n+        assert_eq!(0, buf.len());\n+\n+        buf.resize(20).expect(\"resize should be OK\");\n+        assert_eq!(64, buf.capacity());\n+        assert_eq!(20, buf.len());\n \n-        // resizing to a smaller value should have no effect.\n         buf.resize(10).expect(\"resize should be OK\");\n         assert_eq!(64, buf.capacity());\n+        assert_eq!(10, buf.len());\n \n         buf.resize(100).expect(\"resize should be OK\");\n         assert_eq!(128, buf.capacity());\n+        assert_eq!(100, buf.len());\n+\n+        buf.resize(30).expect(\"resize should be OK\");\n+        assert_eq!(64, buf.capacity());\n+        assert_eq!(30, buf.len());\n+\n+        buf.resize(0).expect(\"resize should be OK\");\n+        assert_eq!(0, buf.capacity());\n+        assert_eq!(0, buf.len());\n     }\n \n     #[test]\ndiff --git a/rust/src/builder.rs b/rust/src/builder.rs\nindex 2f694b033e..90ab606715 100644\n--- a/rust/src/builder.rs\n+++ b/rust/src/builder.rs\n@@ -61,37 +61,28 @@ macro_rules! impl_buffer_builder {\n                 (byte_capacity / mem::size_of::<$native_ty>()) as i64\n             }\n \n-            /// Push a value into the builder, growing the internal buffer as needed\n+            /// Pushes a value into the builder, growing the internal buffer as needed.\n             pub fn push(&mut self, v: $native_ty) -> Result<()> {\n                 self.reserve(1)?;\n                 self.write_bytes(v.to_byte_slice(), 1)\n             }\n \n-            /// Push a slice of type T, growing the internal buffer as needed\n+            /// Pushes a slice of type `T`, growing the internal buffer as needed.\n             pub fn push_slice(&mut self, slice: &[$native_ty]) -> Result<()> {\n                 let array_slots = slice.len() as i64;\n                 self.reserve(array_slots)?;\n                 self.write_bytes(slice.to_byte_slice(), array_slots)\n             }\n \n-            /// Reserve memory for n elements of type T\n+            /// Reserves memory for `n` elements of type `T`.\n             pub fn reserve(&mut self, n: i64) -> Result<()> {\n                 let new_capacity = self.len + n;\n-                if new_capacity > self.capacity() {\n-                    return self.grow(new_capacity);\n-                }\n-                Ok(())\n-            }\n-\n-            /// Grow the internal buffer to `new_capacity`, where `new_capacity` is the capacity in\n-            /// elements of type T\n-            fn grow(&mut self, new_capacity: i64) -> Result<()> {\n                 let byte_capacity = mem::size_of::<$native_ty>() * new_capacity as usize;\n-                self.buffer.resize(byte_capacity)?;\n+                self.buffer.reserve(byte_capacity)?;\n                 Ok(())\n             }\n \n-            /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+            /// Consumes this builder and returns an immutable `Buffer`.\n             pub fn finish(self) -> Buffer {\n                 self.buffer.freeze()\n             }\n@@ -127,7 +118,7 @@ impl_buffer_builder!(f32);\n impl_buffer_builder!(f64);\n \n impl BufferBuilder<bool> {\n-    /// Creates a builder with a fixed initial capacity\n+    /// Creates a builder with a fixed initial capacity.\n     pub fn new(capacity: i64) -> Self {\n         let byte_capacity = bit_util::ceil(capacity, 8);\n         let actual_capacity = bit_util::round_upto_multiple_of_64(byte_capacity) as usize;\n@@ -140,23 +131,23 @@ impl BufferBuilder<bool> {\n         }\n     }\n \n-    /// Returns the number of array elements (slots) in the builder\n+    /// Returns the number of array elements (slots) in the builder.\n     pub fn len(&self) -> i64 {\n         self.len\n     }\n \n-    /// Returns the current capacity of the builder (number of elements)\n+    /// Returns the current capacity of the builder (number of elements).\n     pub fn capacity(&self) -> i64 {\n         let byte_capacity = self.buffer.capacity() as i64;\n         byte_capacity * 8\n     }\n \n-    /// Push a value into the builder, growing the internal buffer as needed\n+    /// Pushes a value into the builder, growing the internal buffer as needed.\n     pub fn push(&mut self, v: bool) -> Result<()> {\n         self.reserve(1)?;\n         if v {\n             // For performance the `len` of the buffer is not updated on each push but\n-            // is updated in the `freeze` method instead\n+            // is updated in the `freeze` method instead.\n             unsafe {\n                 bit_util::set_bit_raw(self.buffer.raw_data() as *mut u8, (self.len) as usize);\n             }\n@@ -165,7 +156,7 @@ impl BufferBuilder<bool> {\n         Ok(())\n     }\n \n-    /// Push a slice of type T, growing the internal buffer as needed\n+    /// Pushes a slice of type `T`, growing the internal buffer as needed.\n     pub fn push_slice(&mut self, slice: &[bool]) -> Result<()> {\n         let array_slots = slice.len();\n         for i in 0..array_slots {\n@@ -174,30 +165,25 @@ impl BufferBuilder<bool> {\n         Ok(())\n     }\n \n-    /// Reserve memory for n elements of type T\n+    /// Reserves memory for `n` elements of type `T`.\n     pub fn reserve(&mut self, n: i64) -> Result<()> {\n         let new_capacity = self.len + n;\n         if new_capacity > self.capacity() {\n-            return self.grow(new_capacity);\n+            let new_byte_capacity = bit_util::ceil(new_capacity, 8) as usize;\n+            let existing_capacity = self.buffer.capacity();\n+            let new_capacity = self.buffer.reserve(new_byte_capacity)?;\n+            self.buffer\n+                .set_null_bits(existing_capacity, new_capacity - existing_capacity);\n         }\n         Ok(())\n     }\n \n-    /// Grow the internal buffer to `new_capacity`, where `new_capacity` is the capacity in\n-    /// elements of type T\n-    fn grow(&mut self, new_capacity: i64) -> Result<()> {\n-        let new_byte_capacity = bit_util::ceil(new_capacity, 8) as usize;\n-        let existing_capacity = self.buffer.capacity();\n-        let capacity_added = self.buffer.resize(new_byte_capacity)?;\n-        self.buffer.set_null_bits(existing_capacity, capacity_added);\n-        Ok(())\n-    }\n-\n-    /// Build an immutable `Buffer` from the existing internal `MutableBuffer`'s memory\n+    /// Consumes this and returns an immutable `Buffer`.\n     pub fn finish(mut self) -> Buffer {\n-        // `push` does not update the buffer's `len` to it is done before `freeze` is called\n-        let new_buffer_len = bit_util::ceil(self.len, 8);\n-        self.buffer.set_len(new_buffer_len as usize);\n+        // `push` does not update the buffer's `len` so do it before `freeze` is called.\n+        let new_buffer_len = bit_util::ceil(self.len, 8) as usize;\n+        debug_assert!(new_buffer_len >= self.buffer.len());\n+        self.buffer.resize(new_buffer_len).unwrap();\n         self.buffer.freeze()\n     }\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T16:01:59.748+0000",
                    "updated": "2018-11-01T16:01:59.748+0000",
                    "started": "2018-11-01T16:01:59.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161613",
                    "issueId": "13195050"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@514fdfd7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57a3f84f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6de620c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@25cfccb7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2887716e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2d0b4be3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71b7ae86[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2a467e73[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39597654[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4e7a76cf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2752218[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1bd961c3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 01 16:01:45 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-01T16:01:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3649/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-30T07:44:54.000+0000",
        "updated": "2018-11-01T16:01:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently `MutableBuffer#resize` adjust the buffer's capacity. This is slightly confusing, and is not conforming with Rust's\u00a0as [vector|https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize], as well as C++'s buffer impl. \r\n\r\nThis proposes to rename the `resize` to `reserve`, and modify the current `set_len` to `resize`. We'll also allow `resize` to shrink the buffer so as to free up unnecessary space.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Refactor MutableBuffer's resize",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195050/comment/16671799",
                    "id": "16671799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 2868\n[https://github.com/apache/arrow/pull/2868]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-11-01T16:01:45.824+0000",
                    "updated": "2018-11-01T16:01:45.824+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zsfj:",
        "customfield_12314139": null
    }
}