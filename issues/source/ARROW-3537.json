{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192112",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112",
    "key": "ARROW-3537",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3537/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/157937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran opened a new pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T01:57:13.172+0000",
                    "updated": "2018-10-24T01:57:13.172+0000",
                    "started": "2018-10-24T01:57:13.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157937",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/158078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#issuecomment-432605812\n \n \n   The CI failure is R related, @kszucs @crepererum @sunchao @andygrove could you review when you get a chance.  Thanks\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T10:39:55.652+0000",
                    "updated": "2018-10-24T10:39:55.652+0000",
                    "started": "2018-10-24T10:39:55.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158078",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/159899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r228846349\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,381 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>() as i64;\n+    for i in shape {\n+        remaining_bytes *= i;\n \n Review comment:\n   here you should probably check for overflows using [`checked_mul`](https://doc.rust-lang.org/std/primitive.usize.html#method.checked_mul)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T09:21:30.934+0000",
                    "updated": "2018-10-29T09:21:30.934+0000",
                    "started": "2018-10-29T09:21:30.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159899",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/159900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r228846654\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,381 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>() as i64;\n+    for i in shape {\n+        remaining_bytes *= i;\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= i;\n+        strides.push(remaining_bytes);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>() as i64;\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes);\n+        remaining_bytes *= i;\n \n Review comment:\n   `checked_mul` (see above)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T09:21:31.010+0000",
                    "updated": "2018-10-29T09:21:31.010+0000",
                    "started": "2018-10-29T09:21:31.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159900",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#issuecomment-433980255\n \n \n   Thanks @crepererum, all comments addressed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T16:31:48.850+0000",
                    "updated": "2018-10-29T16:31:48.850+0000",
                    "started": "2018-10-29T16:31:48.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160045",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on issue #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#issuecomment-434221958\n \n \n   Looks good, thank you! :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T09:03:24.900+0000",
                    "updated": "2018-10-30T09:03:24.900+0000",
                    "started": "2018-10-30T09:03:24.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160470",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r229554381\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n+                        names\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(\n+                                    s.len(),\n+                                    i.len(),\n+                                    \"number of dimensions and number of dimension names differ\"\n+                                )\n+                            }).next();\n+                    }\n+                };\n+                Self {\n+                    data_type: $data_ty,\n+                    buffer,\n+                    shape,\n+                    strides,\n+                    names,\n+                    _marker: PhantomData,\n+                }\n+            }\n+\n+            /// Creates a new Tensor using row major memory layout\n+            pub fn new_row_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// Creates a new Tensor using column major memory layout\n+            pub fn new_column_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_column_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// The data type of the `Tensor`\n+            pub fn data_type(&self) -> &DataType {\n+                &self.data_type\n+            }\n+\n+            /// The sizes of the dimensions\n+            pub fn shape(&self) -> Option<&Vec<i64>> {\n+                self.shape.as_ref()\n+            }\n+\n+            /// Returns a reference to the underlying `Buffer`\n+            pub fn data(&self) -> &Buffer {\n+                &self.buffer\n+            }\n+\n+            /// The number of bytes between elements in each dimension\n+            pub fn strides(&self) -> Option<&Vec<i64>> {\n+                self.strides.as_ref()\n+            }\n+\n+            /// The names of the dimensions\n+            pub fn names(&self) -> Option<&Vec<&'a str>> {\n+                self.names.as_ref()\n+            }\n+\n+            /// The number of dimensions\n+            pub fn ndim(&self) -> i64 {\n+                match &self.shape {\n+                    None => 0,\n+                    Some(v) => v.len() as i64,\n+                }\n+            }\n+\n+            /// The name of dimension i\n+            pub fn dim_name(&self, i: i64) -> Option<&'a str> {\n+                match &self.names {\n+                    None => None,\n+                    Some(ref names) => Some(&names[i as usize]),\n+                }\n+            }\n+\n+            /// The total number of elements in the `Tensor`\n+            pub fn size(&self) -> i64 {\n+                (self.buffer.len() / mem::size_of::<$native_ty>()) as i64\n+            }\n+\n+            /// Indicates if the data is laid out contiguously in memory\n+            pub fn is_contiguous(&self) -> bool {\n+                self.is_row_major() || self.is_column_major()\n+            }\n+\n+            /// Indicates if the memory layout row major\n+            pub fn is_row_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(s)) == self.strides,\n+                }\n+            }\n+\n+            /// Indicates if the memory layout column major\n+            pub fn is_column_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => {\n+                        Some(compute_column_major_strides::<$native_ty>(s)) == self.strides\n+                    }\n \n Review comment:\n   Should we omit `{}` like we do in `is_row_major`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T03:34:52.713+0000",
                    "updated": "2018-10-31T03:34:52.713+0000",
                    "started": "2018-10-31T03:34:52.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160960",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r229554212\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n \n Review comment:\n   Is it better that we use `for_each()` instead of `map().next()` to reduce temporary `std::iter::Map`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T03:34:52.748+0000",
                    "updated": "2018-10-31T03:34:52.748+0000",
                    "started": "2018-10-31T03:34:52.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160961",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#issuecomment-434549656\n \n \n   CI failure is unrelated.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T03:35:12.120+0000",
                    "updated": "2018-10-31T03:35:12.120+0000",
                    "started": "2018-10-31T03:35:12.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160962",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/160963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nindex aea6952ccf..52f6763b00 100644\n--- a/rust/src/lib.rs\n+++ b/rust/src/lib.rs\n@@ -32,4 +32,5 @@ pub mod datatypes;\n pub mod error;\n pub mod memory;\n pub mod record_batch;\n+pub mod tensor;\n pub mod util;\ndiff --git a/rust/src/tensor.rs b/rust/src/tensor.rs\nnew file mode 100644\nindex 0000000000..933946fcf0\n--- /dev/null\n+++ b/rust/src/tensor.rs\n@@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n+                        names\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(\n+                                    s.len(),\n+                                    i.len(),\n+                                    \"number of dimensions and number of dimension names differ\"\n+                                )\n+                            }).next();\n+                    }\n+                };\n+                Self {\n+                    data_type: $data_ty,\n+                    buffer,\n+                    shape,\n+                    strides,\n+                    names,\n+                    _marker: PhantomData,\n+                }\n+            }\n+\n+            /// Creates a new Tensor using row major memory layout\n+            pub fn new_row_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// Creates a new Tensor using column major memory layout\n+            pub fn new_column_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_column_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// The data type of the `Tensor`\n+            pub fn data_type(&self) -> &DataType {\n+                &self.data_type\n+            }\n+\n+            /// The sizes of the dimensions\n+            pub fn shape(&self) -> Option<&Vec<i64>> {\n+                self.shape.as_ref()\n+            }\n+\n+            /// Returns a reference to the underlying `Buffer`\n+            pub fn data(&self) -> &Buffer {\n+                &self.buffer\n+            }\n+\n+            /// The number of bytes between elements in each dimension\n+            pub fn strides(&self) -> Option<&Vec<i64>> {\n+                self.strides.as_ref()\n+            }\n+\n+            /// The names of the dimensions\n+            pub fn names(&self) -> Option<&Vec<&'a str>> {\n+                self.names.as_ref()\n+            }\n+\n+            /// The number of dimensions\n+            pub fn ndim(&self) -> i64 {\n+                match &self.shape {\n+                    None => 0,\n+                    Some(v) => v.len() as i64,\n+                }\n+            }\n+\n+            /// The name of dimension i\n+            pub fn dim_name(&self, i: i64) -> Option<&'a str> {\n+                match &self.names {\n+                    None => None,\n+                    Some(ref names) => Some(&names[i as usize]),\n+                }\n+            }\n+\n+            /// The total number of elements in the `Tensor`\n+            pub fn size(&self) -> i64 {\n+                (self.buffer.len() / mem::size_of::<$native_ty>()) as i64\n+            }\n+\n+            /// Indicates if the data is laid out contiguously in memory\n+            pub fn is_contiguous(&self) -> bool {\n+                self.is_row_major() || self.is_column_major()\n+            }\n+\n+            /// Indicates if the memory layout row major\n+            pub fn is_row_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(s)) == self.strides,\n+                }\n+            }\n+\n+            /// Indicates if the memory layout column major\n+            pub fn is_column_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => {\n+                        Some(compute_column_major_strides::<$native_ty>(s)) == self.strides\n+                    }\n+                }\n+            }\n+        }\n+    };\n+}\n+\n+impl_tensor!(DataType::UInt8, u8);\n+impl_tensor!(DataType::UInt16, u16);\n+impl_tensor!(DataType::UInt32, u32);\n+impl_tensor!(DataType::UInt64, u64);\n+impl_tensor!(DataType::Int8, i8);\n+impl_tensor!(DataType::Int16, i16);\n+impl_tensor!(DataType::Int32, i32);\n+impl_tensor!(DataType::Int64, i64);\n+impl_tensor!(DataType::Float32, f32);\n+impl_tensor!(DataType::Float64, f64);\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use buffer::Buffer;\n+    use builder::BufferBuilder;\n+\n+    #[test]\n+    fn test_compute_row_major_strides() {\n+        assert_eq!(\n+            vec![48, 8],\n+            compute_row_major_strides::<i64>(&vec![4_i64, 6])\n+        );\n+        assert_eq!(\n+            vec![24, 4],\n+            compute_row_major_strides::<i32>(&vec![4_i64, 6])\n+        );\n+        assert_eq!(vec![6, 1], compute_row_major_strides::<i8>(&vec![4_i64, 6]));\n+    }\n+\n+    #[test]\n+    fn test_compute_column_major_strides() {\n+        assert_eq!(\n+            vec![8, 32],\n+            compute_column_major_strides::<i64>(&vec![4_i64, 6])\n+        );\n+        assert_eq!(\n+            vec![4, 16],\n+            compute_column_major_strides::<i32>(&vec![4_i64, 6])\n+        );\n+        assert_eq!(\n+            vec![1, 4],\n+            compute_column_major_strides::<i8>(&vec![4_i64, 6])\n+        );\n+    }\n+\n+    #[test]\n+    fn test_zero_dim() {\n+        let buf = Buffer::from(&[1]);\n+        let tensor = Tensor::<u8>::new(buf, None, None, None);\n+        assert_eq!(1, tensor.size());\n+        assert_eq!(None, tensor.shape());\n+        assert_eq!(None, tensor.names());\n+        assert_eq!(0, tensor.ndim());\n+        assert_eq!(false, tensor.is_row_major());\n+        assert_eq!(false, tensor.is_column_major());\n+        assert_eq!(false, tensor.is_contiguous());\n+\n+        let buf = Buffer::from(&[1, 2, 2, 2]);\n+        let tensor = Tensor::<i32>::new(buf, None, None, None);\n+        assert_eq!(1, tensor.size());\n+        assert_eq!(None, tensor.shape());\n+        assert_eq!(None, tensor.names());\n+        assert_eq!(0, tensor.ndim());\n+        assert_eq!(false, tensor.is_row_major());\n+        assert_eq!(false, tensor.is_column_major());\n+        assert_eq!(false, tensor.is_contiguous());\n+    }\n+\n+    #[test]\n+    fn test_tensor() {\n+        let mut builder = BufferBuilder::<i32>::new(16);\n+        for i in 0..16 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        let tensor = Tensor::<i32>::new(buf, Some(vec![2, 8]), None, None);\n+        assert_eq!(16, tensor.size());\n+        assert_eq!(Some(vec![2_i64, 8]).as_ref(), tensor.shape());\n+        assert_eq!(None, tensor.strides());\n+        assert_eq!(2, tensor.ndim());\n+        assert_eq!(None, tensor.names());\n+    }\n+\n+    #[test]\n+    fn test_new_row_major() {\n+        let mut builder = BufferBuilder::<i32>::new(16);\n+        for i in 0..16 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        let tensor = Tensor::<i32>::new_row_major(buf, Some(vec![2, 8]), None);\n+        assert_eq!(16, tensor.size());\n+        assert_eq!(Some(vec![2_i64, 8]).as_ref(), tensor.shape());\n+        assert_eq!(Some(vec![32_i64, 4]).as_ref(), tensor.strides());\n+        assert_eq!(None, tensor.names());\n+        assert_eq!(2, tensor.ndim());\n+        assert_eq!(true, tensor.is_row_major());\n+        assert_eq!(false, tensor.is_column_major());\n+        assert_eq!(true, tensor.is_contiguous());\n+    }\n+\n+    #[test]\n+    fn test_new_column_major() {\n+        let mut builder = BufferBuilder::<i32>::new(16);\n+        for i in 0..16 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        let tensor = Tensor::<i32>::new_column_major(buf, Some(vec![2, 8]), None);\n+        assert_eq!(16, tensor.size());\n+        assert_eq!(Some(vec![2_i64, 8]).as_ref(), tensor.shape());\n+        assert_eq!(Some(vec![4_i64, 8]).as_ref(), tensor.strides());\n+        assert_eq!(None, tensor.names());\n+        assert_eq!(2, tensor.ndim());\n+        assert_eq!(false, tensor.is_row_major());\n+        assert_eq!(true, tensor.is_column_major());\n+        assert_eq!(true, tensor.is_contiguous());\n+    }\n+\n+    #[test]\n+    fn test_with_names() {\n+        let mut builder = BufferBuilder::<i64>::new(8);\n+        for i in 0..8 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        let names = vec![\"Dim 1\", \"Dim 2\"];\n+        let tensor = Tensor::<i64>::new_column_major(buf, Some(vec![2, 4]), Some(names));\n+        assert_eq!(8, tensor.size());\n+        assert_eq!(Some(vec![2_i64, 4]).as_ref(), tensor.shape());\n+        assert_eq!(Some(vec![8_i64, 16]).as_ref(), tensor.strides());\n+        assert_eq!(\"Dim 1\", tensor.dim_name(0).unwrap());\n+        assert_eq!(\"Dim 2\", tensor.dim_name(1).unwrap());\n+        assert_eq!(2, tensor.ndim());\n+        assert_eq!(false, tensor.is_row_major());\n+        assert_eq!(true, tensor.is_column_major());\n+        assert_eq!(true, tensor.is_contiguous());\n+    }\n+\n+    #[test]\n+    #[should_panic(expected = \"shape and stride dimensions differ\")]\n+    fn test_inconsistent_strides() {\n+        let mut builder = BufferBuilder::<i32>::new(16);\n+        for i in 0..16 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        Tensor::<i32>::new(buf, Some(vec![2, 8]), Some(vec![2, 8, 1]), None);\n+    }\n+\n+    #[test]\n+    #[should_panic(expected = \"number of dimensions and number of dimension names differ\")]\n+    fn test_inconsistent_names() {\n+        let mut builder = BufferBuilder::<i32>::new(16);\n+        for i in 0..16 {\n+            builder.push(i).unwrap();\n+        }\n+        let buf = builder.finish();\n+        Tensor::<i32>::new(\n+            buf,\n+            Some(vec![2, 8]),\n+            Some(vec![4, 8]),\n+            Some(vec![\"1\", \"2\", \"3\"]),\n+        );\n+    }\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T03:37:01.307+0000",
                    "updated": "2018-10-31T03:37:01.307+0000",
                    "started": "2018-10-31T03:37:01.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160963",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/161415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cosmo0920 commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r229921822\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n+                        names\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(\n+                                    s.len(),\n+                                    i.len(),\n+                                    \"number of dimensions and number of dimension names differ\"\n+                                )\n+                            }).next();\n+                    }\n+                };\n+                Self {\n+                    data_type: $data_ty,\n+                    buffer,\n+                    shape,\n+                    strides,\n+                    names,\n+                    _marker: PhantomData,\n+                }\n+            }\n+\n+            /// Creates a new Tensor using row major memory layout\n+            pub fn new_row_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// Creates a new Tensor using column major memory layout\n+            pub fn new_column_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_column_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// The data type of the `Tensor`\n+            pub fn data_type(&self) -> &DataType {\n+                &self.data_type\n+            }\n+\n+            /// The sizes of the dimensions\n+            pub fn shape(&self) -> Option<&Vec<i64>> {\n+                self.shape.as_ref()\n+            }\n+\n+            /// Returns a reference to the underlying `Buffer`\n+            pub fn data(&self) -> &Buffer {\n+                &self.buffer\n+            }\n+\n+            /// The number of bytes between elements in each dimension\n+            pub fn strides(&self) -> Option<&Vec<i64>> {\n+                self.strides.as_ref()\n+            }\n+\n+            /// The names of the dimensions\n+            pub fn names(&self) -> Option<&Vec<&'a str>> {\n+                self.names.as_ref()\n+            }\n+\n+            /// The number of dimensions\n+            pub fn ndim(&self) -> i64 {\n+                match &self.shape {\n+                    None => 0,\n+                    Some(v) => v.len() as i64,\n+                }\n+            }\n+\n+            /// The name of dimension i\n+            pub fn dim_name(&self, i: i64) -> Option<&'a str> {\n+                match &self.names {\n+                    None => None,\n+                    Some(ref names) => Some(&names[i as usize]),\n+                }\n+            }\n+\n+            /// The total number of elements in the `Tensor`\n+            pub fn size(&self) -> i64 {\n+                (self.buffer.len() / mem::size_of::<$native_ty>()) as i64\n+            }\n+\n+            /// Indicates if the data is laid out contiguously in memory\n+            pub fn is_contiguous(&self) -> bool {\n+                self.is_row_major() || self.is_column_major()\n+            }\n+\n+            /// Indicates if the memory layout row major\n+            pub fn is_row_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(s)) == self.strides,\n+                }\n+            }\n+\n+            /// Indicates if the memory layout column major\n+            pub fn is_column_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => {\n+                        Some(compute_column_major_strides::<$native_ty>(s)) == self.strides\n+                    }\n \n Review comment:\n   `rustfmt` or perhaps `cargo fmt` usually suggests to use this style.\r\n   `cargo fmt` does not complain in this case.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T02:18:46.556+0000",
                    "updated": "2018-11-01T02:18:46.556+0000",
                    "started": "2018-11-01T02:18:46.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161415",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/161715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r230171397\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n+                        names\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(\n+                                    s.len(),\n+                                    i.len(),\n+                                    \"number of dimensions and number of dimension names differ\"\n+                                )\n+                            }).next();\n+                    }\n+                };\n+                Self {\n+                    data_type: $data_ty,\n+                    buffer,\n+                    shape,\n+                    strides,\n+                    names,\n+                    _marker: PhantomData,\n+                }\n+            }\n+\n+            /// Creates a new Tensor using row major memory layout\n+            pub fn new_row_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// Creates a new Tensor using column major memory layout\n+            pub fn new_column_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_column_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// The data type of the `Tensor`\n+            pub fn data_type(&self) -> &DataType {\n+                &self.data_type\n+            }\n+\n+            /// The sizes of the dimensions\n+            pub fn shape(&self) -> Option<&Vec<i64>> {\n+                self.shape.as_ref()\n+            }\n+\n+            /// Returns a reference to the underlying `Buffer`\n+            pub fn data(&self) -> &Buffer {\n+                &self.buffer\n+            }\n+\n+            /// The number of bytes between elements in each dimension\n+            pub fn strides(&self) -> Option<&Vec<i64>> {\n+                self.strides.as_ref()\n+            }\n+\n+            /// The names of the dimensions\n+            pub fn names(&self) -> Option<&Vec<&'a str>> {\n+                self.names.as_ref()\n+            }\n+\n+            /// The number of dimensions\n+            pub fn ndim(&self) -> i64 {\n+                match &self.shape {\n+                    None => 0,\n+                    Some(v) => v.len() as i64,\n+                }\n+            }\n+\n+            /// The name of dimension i\n+            pub fn dim_name(&self, i: i64) -> Option<&'a str> {\n+                match &self.names {\n+                    None => None,\n+                    Some(ref names) => Some(&names[i as usize]),\n+                }\n+            }\n+\n+            /// The total number of elements in the `Tensor`\n+            pub fn size(&self) -> i64 {\n+                (self.buffer.len() / mem::size_of::<$native_ty>()) as i64\n+            }\n+\n+            /// Indicates if the data is laid out contiguously in memory\n+            pub fn is_contiguous(&self) -> bool {\n+                self.is_row_major() || self.is_column_major()\n+            }\n+\n+            /// Indicates if the memory layout row major\n+            pub fn is_row_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(s)) == self.strides,\n+                }\n+            }\n+\n+            /// Indicates if the memory layout column major\n+            pub fn is_column_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => {\n+                        Some(compute_column_major_strides::<$native_ty>(s)) == self.strides\n+                    }\n \n Review comment:\n   Yea, we check code format in our CI, in this case it's just that the the extra 3 characters made `cargo fmt` complain about the length of the line...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T19:40:13.351+0000",
                    "updated": "2018-11-01T19:40:13.351+0000",
                    "started": "2018-11-01T19:40:13.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161715",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/161805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r230244189\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n+                        names\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(\n+                                    s.len(),\n+                                    i.len(),\n+                                    \"number of dimensions and number of dimension names differ\"\n+                                )\n+                            }).next();\n+                    }\n+                };\n+                Self {\n+                    data_type: $data_ty,\n+                    buffer,\n+                    shape,\n+                    strides,\n+                    names,\n+                    _marker: PhantomData,\n+                }\n+            }\n+\n+            /// Creates a new Tensor using row major memory layout\n+            pub fn new_row_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// Creates a new Tensor using column major memory layout\n+            pub fn new_column_major(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                let strides = match &shape {\n+                    None => None,\n+                    Some(ref s) => Some(compute_column_major_strides::<$native_ty>(&s)),\n+                };\n+                Self::new(buffer, shape, strides, names)\n+            }\n+\n+            /// The data type of the `Tensor`\n+            pub fn data_type(&self) -> &DataType {\n+                &self.data_type\n+            }\n+\n+            /// The sizes of the dimensions\n+            pub fn shape(&self) -> Option<&Vec<i64>> {\n+                self.shape.as_ref()\n+            }\n+\n+            /// Returns a reference to the underlying `Buffer`\n+            pub fn data(&self) -> &Buffer {\n+                &self.buffer\n+            }\n+\n+            /// The number of bytes between elements in each dimension\n+            pub fn strides(&self) -> Option<&Vec<i64>> {\n+                self.strides.as_ref()\n+            }\n+\n+            /// The names of the dimensions\n+            pub fn names(&self) -> Option<&Vec<&'a str>> {\n+                self.names.as_ref()\n+            }\n+\n+            /// The number of dimensions\n+            pub fn ndim(&self) -> i64 {\n+                match &self.shape {\n+                    None => 0,\n+                    Some(v) => v.len() as i64,\n+                }\n+            }\n+\n+            /// The name of dimension i\n+            pub fn dim_name(&self, i: i64) -> Option<&'a str> {\n+                match &self.names {\n+                    None => None,\n+                    Some(ref names) => Some(&names[i as usize]),\n+                }\n+            }\n+\n+            /// The total number of elements in the `Tensor`\n+            pub fn size(&self) -> i64 {\n+                (self.buffer.len() / mem::size_of::<$native_ty>()) as i64\n+            }\n+\n+            /// Indicates if the data is laid out contiguously in memory\n+            pub fn is_contiguous(&self) -> bool {\n+                self.is_row_major() || self.is_column_major()\n+            }\n+\n+            /// Indicates if the memory layout row major\n+            pub fn is_row_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => Some(compute_row_major_strides::<$native_ty>(s)) == self.strides,\n+                }\n+            }\n+\n+            /// Indicates if the memory layout column major\n+            pub fn is_column_major(&self) -> bool {\n+                match self.shape {\n+                    None => false,\n+                    Some(ref s) => {\n+                        Some(compute_column_major_strides::<$native_ty>(s)) == self.strides\n+                    }\n \n Review comment:\n   I see!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-02T00:50:42.672+0000",
                    "updated": "2018-11-02T00:50:42.672+0000",
                    "started": "2018-11-02T00:50:42.671+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161805",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/161806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r230244415\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n \n Review comment:\n   I think you might be right about this one, I'll have to look into it when I get a chance...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-02T00:52:26.266+0000",
                    "updated": "2018-11-02T00:52:26.266+0000",
                    "started": "2018-11-02T00:52:26.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161806",
                    "issueId": "13192112"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/worklog/161807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2824: ARROW-3537: [Rust] Implement Tensor Type\nURL: https://github.com/apache/arrow/pull/2824#discussion_r230244442\n \n \n\n ##########\n File path: rust/src/tensor.rs\n ##########\n @@ -0,0 +1,385 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Arrow Tensor Type\n+use std::marker::PhantomData;\n+use std::mem;\n+\n+use buffer::Buffer;\n+use datatypes::{ArrowPrimitiveType, DataType};\n+\n+/// Computes the strides required assuming a row major memory layout\n+fn compute_row_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    for i in shape {\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing row major strides.\");\n+    }\n+\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        remaining_bytes /= *i as usize;\n+        strides.push(remaining_bytes as i64);\n+    }\n+    strides\n+}\n+\n+/// Computes the strides required assuming a column major memory layout\n+fn compute_column_major_strides<T>(shape: &Vec<i64>) -> Vec<i64>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    let mut remaining_bytes = mem::size_of::<T>();\n+    let mut strides = Vec::<i64>::new();\n+    for i in shape {\n+        strides.push(remaining_bytes as i64);\n+        remaining_bytes = remaining_bytes\n+            .checked_mul(*i as usize)\n+            .expect(\"Overflow occurred when computing column major strides.\");\n+    }\n+    strides\n+}\n+\n+/// Tensor of primitive types\n+pub struct Tensor<'a, T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    data_type: DataType,\n+    buffer: Buffer,\n+    shape: Option<Vec<i64>>,\n+    strides: Option<Vec<i64>>,\n+    names: Option<Vec<&'a str>>,\n+    _marker: PhantomData<T>,\n+}\n+\n+macro_rules! impl_tensor {\n+    ($data_ty:path, $native_ty:ident) => {\n+        impl<'a> Tensor<'a, $native_ty> {\n+            /// Creates a new `Tensor`\n+            pub fn new(\n+                buffer: Buffer,\n+                shape: Option<Vec<i64>>,\n+                strides: Option<Vec<i64>>,\n+                names: Option<Vec<&'a str>>,\n+            ) -> Self {\n+                match &shape {\n+                    None => {\n+                        assert_eq!(\n+                            buffer.len(),\n+                            mem::size_of::<$native_ty>(),\n+                            \"underlying buffer should only contain a single tensor element\"\n+                        );\n+                        assert_eq!(None, strides);\n+                        assert_eq!(None, names);\n+                    }\n+                    Some(ref s) => {\n+                        strides\n+                            .iter()\n+                            .map(|i| {\n+                                assert_eq!(s.len(), i.len(), \"shape and stride dimensions differ\")\n+                            }).next();\n \n Review comment:\n   Thanks @kou \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-02T00:52:40.622+0000",
                    "updated": "2018-11-02T00:52:40.622+0000",
                    "started": "2018-11-02T00:52:40.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161807",
                    "issueId": "13192112"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@30e64d5e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64bc91a4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c75b0c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4c442959[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17ea017c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5c44717[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@645604cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@9b5f7ff[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e93f654[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@69c8ec6e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3decfdf6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1b40ffbb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 31 03:51:10 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-31T03:51:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3537/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-17T03:30:01.000+0000",
        "updated": "2018-11-02T00:52:40.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement Tensor Type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192112/comment/16669569",
                    "id": "16669569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 2824\n[https://github.com/apache/arrow/pull/2824]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-10-31T03:51:10.086+0000",
                    "updated": "2018-10-31T03:51:10.086+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zad3:",
        "customfield_12314139": null
    }
}