{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13389426",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426",
    "key": "ARROW-13327",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619216",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619216",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13388335",
                    "key": "ARROW-13288",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388335",
                    "fields": {
                        "summary": "[Python] Missing default values of kernel options in PyArrow",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13327/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 39,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147\n\n\n   This PR updates PyArrow compute bindings for FunctionOptions and makes their implementation consistent.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T23:13:09.958+0000",
                    "updated": "2021-09-13T23:13:09.958+0000",
                    "started": "2021-09-13T23:13:09.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650261",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#issuecomment-918652127\n\n\n   https://issues.apache.org/jira/browse/ARROW-13327\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T23:13:24.769+0000",
                    "updated": "2021-09-13T23:13:24.769+0000",
                    "started": "2021-09-13T23:13:24.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650262",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r707962252\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       I would keep this (it's to force `boundscheck` to be a keyword argument, and never positional argument)\r\n   \r\n   (and the same for some cases below)\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -690,99 +700,91 @@ class CastOptions(_CastOptions):\n \n \n cdef class _ElementWiseAggregateOptions(FunctionOptions):\n-    def _set_options(self, bint skip_nulls):\n+    def _set_options(self, skip_nulls):\n         self.wrapped.reset(new CElementWiseAggregateOptions(skip_nulls))\n \n \n class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):\n-    def __init__(self, bint skip_nulls=True):\n+    def __init__(self, skip_nulls=True):\n         self._set_options(skip_nulls)\n \n \n cdef CRoundMode unwrap_round_mode(round_mode) except *:\n-    if round_mode == 'down':\n-        return CRoundMode_DOWN\n-    elif round_mode == 'up':\n-        return CRoundMode_UP\n-    elif round_mode == 'towards_zero':\n-        return CRoundMode_TOWARDS_ZERO\n-    elif round_mode == 'towards_infinity':\n-        return CRoundMode_TOWARDS_INFINITY\n-    elif round_mode == 'half_down':\n-        return CRoundMode_HALF_DOWN\n-    elif round_mode == 'half_up':\n-        return CRoundMode_HALF_UP\n-    elif round_mode == 'half_towards_zero':\n-        return CRoundMode_HALF_TOWARDS_ZERO\n-    elif round_mode == 'half_towards_infinity':\n-        return CRoundMode_HALF_TOWARDS_INFINITY\n-    elif round_mode == 'half_to_even':\n-        return CRoundMode_HALF_TO_EVEN\n-    elif round_mode == 'half_to_odd':\n-        return CRoundMode_HALF_TO_ODD\n-    else:\n-        raise ValueError('\"{}\" is not a valid round mode'.format(round_mode))\n+    round_mode_dict = {\n+        \"down\": CRoundMode_DOWN,\n+        \"up\": CRoundMode_UP,\n+        \"towards_zero\": CRoundMode_TOWARDS_ZERO,\n+        \"towards_infinity\": CRoundMode_TOWARDS_INFINITY,\n+        \"half_down\": CRoundMode_HALF_DOWN,\n+        \"half_up\": CRoundMode_HALF_UP,\n+        \"half_towards_zero\": CRoundMode_HALF_TOWARDS_ZERO,\n+        \"half_towards_infinity\": CRoundMode_HALF_TOWARDS_INFINITY,\n+        \"half_to_even\": CRoundMode_HALF_TO_EVEN,\n+        \"half_to_odd\": CRoundMode_HALF_TO_ODD,\n+    }\n+\n+    if round_mode not in round_mode_dict:\n+        raise ValueError(f'\"{round_mode}\" is not a valid round mode')\n \n\nReview comment:\n       Is there missing a return value here?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +846,52 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n\nReview comment:\n       Is there a reason to remove them both here and in the init just below?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +846,52 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n         self.wrapped.reset(new CSliceOptions(start, stop, step))\n \n \n class SliceOptions(_SliceOptions):\n-    def __init__(self, int64_t start, int64_t stop=sys.maxsize,\n-                 int64_t step=1):\n+    def __init__(self, start, stop=sys.maxsize, step=1):\n         self._set_options(start, stop, step)\n \n \n cdef class _FilterOptions(FunctionOptions):\n-    def _set_options(self, null_selection_behavior):\n-        if null_selection_behavior == 'drop':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_DROP))\n-        elif null_selection_behavior == 'emit_null':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_EMIT_NULL))\n-        else:\n+    null_selection_dict = {\n+        \"drop\": CFilterNullSelectionBehavior_DROP,\n+        \"emit_null\": CFilterNullSelectionBehavior_EMIT_NULL,\n+    }\n+\n+    def _set_options(self, null_selection):\n+        if null_selection not in null_selection_dict:\n             raise ValueError(\n-                '\"{}\" is not a valid null_selection_behavior'\n-                .format(null_selection_behavior))\n+                f'\"{null_selection}\" is not a valid null_selection_behavior')\n+        self.wrapped.reset(\n+            new CFilterOptions(null_selection_dict[null_selection])\n+        )\n \n \n class FilterOptions(_FilterOptions):\n-    def __init__(self, null_selection_behavior='drop'):\n-        self._set_options(null_selection_behavior)\n+    def __init__(self, null_selection=\"drop\"):\n\nReview comment:\n       This is changing the name of the keyword in the public function?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T06:54:55.395+0000",
                    "updated": "2021-09-14T06:54:55.395+0000",
                    "started": "2021-09-14T06:54:55.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650377",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708306876\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -690,99 +700,91 @@ class CastOptions(_CastOptions):\n \n \n cdef class _ElementWiseAggregateOptions(FunctionOptions):\n-    def _set_options(self, bint skip_nulls):\n+    def _set_options(self, skip_nulls):\n         self.wrapped.reset(new CElementWiseAggregateOptions(skip_nulls))\n \n \n class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):\n-    def __init__(self, bint skip_nulls=True):\n+    def __init__(self, skip_nulls=True):\n         self._set_options(skip_nulls)\n \n \n cdef CRoundMode unwrap_round_mode(round_mode) except *:\n-    if round_mode == 'down':\n-        return CRoundMode_DOWN\n-    elif round_mode == 'up':\n-        return CRoundMode_UP\n-    elif round_mode == 'towards_zero':\n-        return CRoundMode_TOWARDS_ZERO\n-    elif round_mode == 'towards_infinity':\n-        return CRoundMode_TOWARDS_INFINITY\n-    elif round_mode == 'half_down':\n-        return CRoundMode_HALF_DOWN\n-    elif round_mode == 'half_up':\n-        return CRoundMode_HALF_UP\n-    elif round_mode == 'half_towards_zero':\n-        return CRoundMode_HALF_TOWARDS_ZERO\n-    elif round_mode == 'half_towards_infinity':\n-        return CRoundMode_HALF_TOWARDS_INFINITY\n-    elif round_mode == 'half_to_even':\n-        return CRoundMode_HALF_TO_EVEN\n-    elif round_mode == 'half_to_odd':\n-        return CRoundMode_HALF_TO_ODD\n-    else:\n-        raise ValueError('\"{}\" is not a valid round mode'.format(round_mode))\n+    round_mode_dict = {\n+        \"down\": CRoundMode_DOWN,\n+        \"up\": CRoundMode_UP,\n+        \"towards_zero\": CRoundMode_TOWARDS_ZERO,\n+        \"towards_infinity\": CRoundMode_TOWARDS_INFINITY,\n+        \"half_down\": CRoundMode_HALF_DOWN,\n+        \"half_up\": CRoundMode_HALF_UP,\n+        \"half_towards_zero\": CRoundMode_HALF_TOWARDS_ZERO,\n+        \"half_towards_infinity\": CRoundMode_HALF_TOWARDS_INFINITY,\n+        \"half_to_even\": CRoundMode_HALF_TO_EVEN,\n+        \"half_to_odd\": CRoundMode_HALF_TO_ODD,\n+    }\n+\n+    if round_mode not in round_mode_dict:\n+        raise ValueError(f'\"{round_mode}\" is not a valid round mode')\n \n\nReview comment:\n       Yes, it is missing. Thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T14:06:42.963+0000",
                    "updated": "2021-09-14T14:06:42.963+0000",
                    "started": "2021-09-14T14:06:42.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650584",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708416214\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +846,52 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n\nReview comment:\n       Yes, they were removed deliberately. The option values are passed to the constructors of the corresponding FunctionOptions which are defined in [includes/libarrow.pxd](https://github.com/apache/arrow/blob/master/python/pyarrow/includes/libarrow.pxd) and expose the explicit C types. Invalid types from public functions in .pyx get \"validated\" during initialization in constructors. If the types are included in the `cdef _XXXOptions`, then inputs would be \"validated\" here, basically one line of code earlier. Duplicating types in the `_FunctionOptions` methods in `_compute.pyx` does not adds any different functionality, but requires developers/maintainers to ensure consistency between these files and the C++ option definitions. I think removing them from .pyx file is a better approach.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T15:58:11.802+0000",
                    "updated": "2021-09-14T15:58:11.802+0000",
                    "started": "2021-09-14T15:58:11.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650652",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708417579\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +846,52 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n         self.wrapped.reset(new CSliceOptions(start, stop, step))\n \n \n class SliceOptions(_SliceOptions):\n-    def __init__(self, int64_t start, int64_t stop=sys.maxsize,\n-                 int64_t step=1):\n+    def __init__(self, start, stop=sys.maxsize, step=1):\n         self._set_options(start, stop, step)\n \n \n cdef class _FilterOptions(FunctionOptions):\n-    def _set_options(self, null_selection_behavior):\n-        if null_selection_behavior == 'drop':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_DROP))\n-        elif null_selection_behavior == 'emit_null':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_EMIT_NULL))\n-        else:\n+    null_selection_dict = {\n+        \"drop\": CFilterNullSelectionBehavior_DROP,\n+        \"emit_null\": CFilterNullSelectionBehavior_EMIT_NULL,\n+    }\n+\n+    def _set_options(self, null_selection):\n+        if null_selection not in null_selection_dict:\n             raise ValueError(\n-                '\"{}\" is not a valid null_selection_behavior'\n-                .format(null_selection_behavior))\n+                f'\"{null_selection}\" is not a valid null_selection_behavior')\n+        self.wrapped.reset(\n+            new CFilterOptions(null_selection_dict[null_selection])\n+        )\n \n \n class FilterOptions(_FilterOptions):\n-    def __init__(self, null_selection_behavior='drop'):\n-        self._set_options(null_selection_behavior)\n+    def __init__(self, null_selection=\"drop\"):\n\nReview comment:\n       Yes, for symmetry it would have been better to not include the `_behavior` part but given that this was existing code and there might already be users expecting this API, I will revert this change to how it was before this PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T15:59:45.725+0000",
                    "updated": "2021-09-14T15:59:45.725+0000",
                    "started": "2021-09-14T15:59:45.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650653",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708418292\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       I remove all the keyword arguments simply to get a code review like yours. How do we decide what options should be positional and which ones should be keyword-only?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T16:00:41.499+0000",
                    "updated": "2021-09-14T16:00:41.499+0000",
                    "started": "2021-09-14T16:00:41.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650654",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708418292\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       I removed all the keyword arguments simply to get a code review like yours. How do we decide what options should be positional and which ones should be keyword-only?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T17:13:53.298+0000",
                    "updated": "2021-09-14T17:13:53.298+0000",
                    "started": "2021-09-14T17:13:53.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650703",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/650704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r708418292\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       I removed all the keyword arguments simply to get a code review like yours. How do we decide which options should be positional and which ones should be keyword-only?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T17:21:43.921+0000",
                    "updated": "2021-09-14T17:21:43.921+0000",
                    "started": "2021-09-14T17:21:43.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650704",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/651118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r709241402\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +846,52 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n\nReview comment:\n       OK, I see, thanks for the explanation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:24:50.317+0000",
                    "updated": "2021-09-15T14:24:50.317+0000",
                    "started": "2021-09-15T14:24:50.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651118",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/651128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r709256716\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       Using the rule of @westonpace to have keywords that are optional / have a default as keyword-only, is probably a good start. We can see if that gives any changes compared to the current situation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:40:07.724+0000",
                    "updated": "2021-09-15T14:40:07.724+0000",
                    "started": "2021-09-15T14:40:07.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651128",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/651154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r709283521\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -899,26 +900,26 @@ cdef class _TakeOptions(FunctionOptions):\n \n \n class TakeOptions(_TakeOptions):\n-    def __init__(self, *, boundscheck=True):\n+    def __init__(self, boundscheck=True):\n\nReview comment:\n       Ok, I started doing that (still WIP), but also noticed that in C++ FunctionOptions, there are inconsistencies between the number of constructors, the availability of a `Defaults()` method, and data members. I am looking into this (need to reach out to other developers) to check what changes we are allowed to make at this time.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T15:07:48.593+0000",
                    "updated": "2021-09-15T15:07:48.593+0000",
                    "started": "2021-09-15T15:07:48.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651154",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/651549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r709915241\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -284,18 +283,9 @@ cdef class Function(_Weakrefable):\n         The function kind.\n         \"\"\"\n         cdef FunctionKind c_kind = self.base_func.kind()\n-        if c_kind == FunctionKind_SCALAR:\n-            return 'scalar'\n-        elif c_kind == FunctionKind_VECTOR:\n-            return 'vector'\n-        elif c_kind == FunctionKind_SCALAR_AGGREGATE:\n-            return 'scalar_aggregate'\n-        elif c_kind == FunctionKind_HASH_AGGREGATE:\n-            return 'hash_aggregate'\n-        elif c_kind == FunctionKind_META:\n-            return 'meta'\n-        else:\n+        if c_kind not in type(self).kind_dict:\n             raise NotImplementedError(\"Unknown Function::Kind\")\n+        return type(self).kind_dict[c_kind]\n\nReview comment:\n       ```python\r\n   try:\r\n       return self.kind_dict[c_kind]\r\n   except KeyError:\r\n       raise NotImplementedError(\"Unknown Function::Kind\")\r\n   ```\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -792,7 +775,7 @@ cdef class _PadOptions(FunctionOptions):\n \n \n class PadOptions(_PadOptions):\n-    def __init__(self, width, padding=' '):\n+    def __init__(self, width, *, padding=\" \"):\n\nReview comment:\n       Similarly, this doesn't seem desirable. I don't think there's any ambiguity as to what the second argument is.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -690,99 +678,94 @@ class CastOptions(_CastOptions):\n \n \n cdef class _ElementWiseAggregateOptions(FunctionOptions):\n-    def _set_options(self, bint skip_nulls):\n+    def _set_options(self, skip_nulls):\n         self.wrapped.reset(new CElementWiseAggregateOptions(skip_nulls))\n \n \n class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):\n-    def __init__(self, bint skip_nulls=True):\n+    def __init__(self, *, skip_nulls=True):\n         self._set_options(skip_nulls)\n \n \n cdef CRoundMode unwrap_round_mode(round_mode) except *:\n-    if round_mode == 'down':\n+    # Explicit if-else since Cython does not supports storing C++ enum classes\n+    # as dictionary values because they do not resolve to integers.\n+    if round_mode == \"down\":\n         return CRoundMode_DOWN\n-    elif round_mode == 'up':\n+    elif round_mode == \"up\":\n         return CRoundMode_UP\n-    elif round_mode == 'towards_zero':\n+    elif round_mode == \"towards_zero\":\n         return CRoundMode_TOWARDS_ZERO\n-    elif round_mode == 'towards_infinity':\n+    elif round_mode == \"towards_infinity\":\n         return CRoundMode_TOWARDS_INFINITY\n-    elif round_mode == 'half_down':\n+    elif round_mode == \"half_down\":\n         return CRoundMode_HALF_DOWN\n-    elif round_mode == 'half_up':\n+    elif round_mode == \"half_up\":\n         return CRoundMode_HALF_UP\n-    elif round_mode == 'half_towards_zero':\n+    elif round_mode == \"half_towards_zero\":\n         return CRoundMode_HALF_TOWARDS_ZERO\n-    elif round_mode == 'half_towards_infinity':\n+    elif round_mode == \"half_towards_infinity\":\n         return CRoundMode_HALF_TOWARDS_INFINITY\n-    elif round_mode == 'half_to_even':\n+    elif round_mode == \"half_to_even\":\n         return CRoundMode_HALF_TO_EVEN\n-    elif round_mode == 'half_to_odd':\n+    elif round_mode == \"half_to_odd\":\n         return CRoundMode_HALF_TO_ODD\n     else:\n-        raise ValueError('\"{}\" is not a valid round mode'.format(round_mode))\n+        raise ValueError(f\"\\\"{round_mode}\\\" is not a valid 'round mode'\")\n \n \n cdef class _RoundOptions(FunctionOptions):\n-    def _set_options(self, int64_t ndigits, round_mode):\n-        cdef:\n-            CRoundMode c_round_mode = CRoundMode_HALF_TO_EVEN\n-        c_round_mode = unwrap_round_mode(round_mode)\n-        self.wrapped.reset(new CRoundOptions(ndigits, c_round_mode))\n+    def _set_options(self, ndigits, round_mode):\n+        self.wrapped.reset(new CRoundOptions(ndigits,\n+                                             unwrap_round_mode(round_mode)))\n \n \n class RoundOptions(_RoundOptions):\n-    def __init__(self, ndigits=0, round_mode='half_to_even'):\n+    def __init__(self, *, ndigits=0, round_mode=\"half_to_even\"):\n\nReview comment:\n       This change doesn't look desirable to me. The Python build-in [round](https://docs.python.org/3/library/functions.html#round) function takes  positional arguments.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -236,10 +226,19 @@ cdef class Function(_Weakrefable):\n \n     * \"meta\" functions dispatch to other functions.\n     \"\"\"\n+\n     cdef:\n         shared_ptr[CFunction] sp_func\n         CFunction* base_func\n \n+    kind_dict = {\n\nReview comment:\n       Call this `_kind_dict`? This isn't a public API.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +823,53 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n         self.wrapped.reset(new CSliceOptions(start, stop, step))\n \n \n class SliceOptions(_SliceOptions):\n-    def __init__(self, int64_t start, int64_t stop=sys.maxsize,\n-                 int64_t step=1):\n+    def __init__(self, start, *, stop=sys.maxsize, step=1):\n\nReview comment:\n       Same here. Why would `stop` be a keyword-only parameter?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -690,99 +678,94 @@ class CastOptions(_CastOptions):\n \n \n cdef class _ElementWiseAggregateOptions(FunctionOptions):\n-    def _set_options(self, bint skip_nulls):\n+    def _set_options(self, skip_nulls):\n         self.wrapped.reset(new CElementWiseAggregateOptions(skip_nulls))\n \n \n class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):\n-    def __init__(self, bint skip_nulls=True):\n+    def __init__(self, *, skip_nulls=True):\n         self._set_options(skip_nulls)\n \n \n cdef CRoundMode unwrap_round_mode(round_mode) except *:\n-    if round_mode == 'down':\n+    # Explicit if-else since Cython does not supports storing C++ enum classes\n+    # as dictionary values because they do not resolve to integers.\n+    if round_mode == \"down\":\n         return CRoundMode_DOWN\n-    elif round_mode == 'up':\n+    elif round_mode == \"up\":\n         return CRoundMode_UP\n-    elif round_mode == 'towards_zero':\n+    elif round_mode == \"towards_zero\":\n         return CRoundMode_TOWARDS_ZERO\n-    elif round_mode == 'towards_infinity':\n+    elif round_mode == \"towards_infinity\":\n         return CRoundMode_TOWARDS_INFINITY\n-    elif round_mode == 'half_down':\n+    elif round_mode == \"half_down\":\n         return CRoundMode_HALF_DOWN\n-    elif round_mode == 'half_up':\n+    elif round_mode == \"half_up\":\n         return CRoundMode_HALF_UP\n-    elif round_mode == 'half_towards_zero':\n+    elif round_mode == \"half_towards_zero\":\n         return CRoundMode_HALF_TOWARDS_ZERO\n-    elif round_mode == 'half_towards_infinity':\n+    elif round_mode == \"half_towards_infinity\":\n         return CRoundMode_HALF_TOWARDS_INFINITY\n-    elif round_mode == 'half_to_even':\n+    elif round_mode == \"half_to_even\":\n         return CRoundMode_HALF_TO_EVEN\n-    elif round_mode == 'half_to_odd':\n+    elif round_mode == \"half_to_odd\":\n         return CRoundMode_HALF_TO_ODD\n     else:\n-        raise ValueError('\"{}\" is not a valid round mode'.format(round_mode))\n+        raise ValueError(f\"\\\"{round_mode}\\\" is not a valid 'round mode'\")\n \n \n cdef class _RoundOptions(FunctionOptions):\n-    def _set_options(self, int64_t ndigits, round_mode):\n-        cdef:\n-            CRoundMode c_round_mode = CRoundMode_HALF_TO_EVEN\n-        c_round_mode = unwrap_round_mode(round_mode)\n-        self.wrapped.reset(new CRoundOptions(ndigits, c_round_mode))\n+    def _set_options(self, ndigits, round_mode):\n+        self.wrapped.reset(new CRoundOptions(ndigits,\n+                                             unwrap_round_mode(round_mode)))\n \n \n class RoundOptions(_RoundOptions):\n-    def __init__(self, ndigits=0, round_mode='half_to_even'):\n+    def __init__(self, *, ndigits=0, round_mode=\"half_to_even\"):\n         self._set_options(ndigits, round_mode)\n \n \n cdef class _RoundToMultipleOptions(FunctionOptions):\n-    def _set_options(self, double multiple, round_mode):\n-        cdef:\n-            CRoundMode c_round_mode = CRoundMode_HALF_TO_EVEN\n-        c_round_mode = unwrap_round_mode(round_mode)\n-        self.wrapped.reset(new CRoundToMultipleOptions(multiple, c_round_mode))\n+    def _set_options(self, multiple, round_mode):\n+        self.wrapped.reset(\n+            new CRoundToMultipleOptions(multiple,\n+                                        unwrap_round_mode(round_mode)))\n \n \n class RoundToMultipleOptions(_RoundToMultipleOptions):\n-    def __init__(self, multiple=1.0, round_mode='half_to_even'):\n+    def __init__(self, *, multiple=1.0, round_mode=\"half_to_even\"):\n\nReview comment:\n       Similarly, this change doesn't look desirable.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -980,51 +958,43 @@ cdef class _ModeOptions(FunctionOptions):\n \n \n class ModeOptions(_ModeOptions):\n-    def __init__(self, n=1, skip_nulls=True, min_count=0):\n+    def __init__(self, *, n=1, skip_nulls=True, min_count=0):\n\nReview comment:\n       `n` could very well be positional.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +823,53 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n         self.wrapped.reset(new CSliceOptions(start, stop, step))\n \n \n class SliceOptions(_SliceOptions):\n-    def __init__(self, int64_t start, int64_t stop=sys.maxsize,\n-                 int64_t step=1):\n+    def __init__(self, start, *, stop=sys.maxsize, step=1):\n         self._set_options(start, stop, step)\n \n \n cdef class _FilterOptions(FunctionOptions):\n+    null_selection_dict = {\n+        \"drop\": CFilterNullSelectionBehavior_DROP,\n+        \"emit_null\": CFilterNullSelectionBehavior_EMIT_NULL,\n+    }\n+\n     def _set_options(self, null_selection_behavior):\n-        if null_selection_behavior == 'drop':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_DROP))\n-        elif null_selection_behavior == 'emit_null':\n-            self.wrapped.reset(\n-                new CFilterOptions(CFilterNullSelectionBehavior_EMIT_NULL))\n-        else:\n-            raise ValueError(\n-                '\"{}\" is not a valid null_selection_behavior'\n-                .format(null_selection_behavior))\n+        if null_selection_behavior not in type(self).null_selection_dict:\n+            raise ValueError(f\"\\\"{null_selection_behavior}\\\"\"\n+                             \"is not a valid 'null selection behavior'\")\n+        self.wrapped.reset(\n+            new CFilterOptions(\n+                type(self).null_selection_dict[null_selection_behavior]))\n \n \n class FilterOptions(_FilterOptions):\n-    def __init__(self, null_selection_behavior='drop'):\n+    def __init__(self, *, null_selection_behavior=\"drop\"):\n\nReview comment:\n       Having to type `null_selection_behavior` is rather annoying... \n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -844,53 +823,53 @@ class ExtractRegexOptions(_ExtractRegexOptions):\n \n \n cdef class _SliceOptions(FunctionOptions):\n-    def _set_options(self, int64_t start, int64_t stop, int64_t step):\n+    def _set_options(self, start, stop, step):\n         self.wrapped.reset(new CSliceOptions(start, stop, step))\n \n \n class SliceOptions(_SliceOptions):\n-    def __init__(self, int64_t start, int64_t stop=sys.maxsize,\n-                 int64_t step=1):\n+    def __init__(self, start, *, stop=sys.maxsize, step=1):\n         self._set_options(start, stop, step)\n \n \n cdef class _FilterOptions(FunctionOptions):\n+    null_selection_dict = {\n\nReview comment:\n       `_null_selection_dict`\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -929,34 +907,34 @@ class MakeStructOptions(_MakeStructOptions):\n \n cdef class _ScalarAggregateOptions(FunctionOptions):\n     def _set_options(self, skip_nulls, min_count):\n-        self.wrapped.reset(\n-            new CScalarAggregateOptions(skip_nulls, min_count))\n+        self.wrapped.reset(new CScalarAggregateOptions(skip_nulls, min_count))\n \n \n class ScalarAggregateOptions(_ScalarAggregateOptions):\n-    def __init__(self, skip_nulls=True, min_count=1):\n+    def __init__(self, *, skip_nulls=True, min_count=1):\n         self._set_options(skip_nulls, min_count)\n \n \n cdef class _CountOptions(FunctionOptions):\n+    mode_dict = {\n+        \"only_valid\": CCountMode_ONLY_VALID,\n+        \"only_null\": CCountMode_ONLY_NULL,\n+        \"all\": CCountMode_ALL,\n+    }\n+\n     def _set_options(self, mode):\n-        if mode == 'only_valid':\n-            self.wrapped.reset(new CCountOptions(CCountMode_ONLY_VALID))\n-        elif mode == 'only_null':\n-            self.wrapped.reset(new CCountOptions(CCountMode_ONLY_NULL))\n-        elif mode == 'all':\n-            self.wrapped.reset(new CCountOptions(CCountMode_ALL))\n-        else:\n-            raise ValueError(f'\"{mode}\" is not a valid mode')\n+        if mode not in type(self).mode_dict:\n+            raise ValueError(f\"\\\"{mode}\\\" is not a valid 'count mode'\")\n+        self.wrapped.reset(new CCountOptions(type(self).mode_dict[mode]))\n \n \n class CountOptions(_CountOptions):\n-    def __init__(self, mode='only_valid'):\n+    def __init__(self, *, mode=\"only_valid\"):\n\nReview comment:\n       Making this keyword-only doesn't seem useful, IMHO.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1131,106 +1092,83 @@ cdef class _SplitPatternOptions(FunctionOptions):\n \n \n class SplitPatternOptions(_SplitPatternOptions):\n-    def __init__(self, *, pattern, max_splits=-1, reverse=False):\n+    def __init__(self, pattern, *, max_splits=-1, reverse=False):\n         self._set_options(pattern, max_splits, reverse)\n \n \n+cdef CSortOrder unwrap_sort_order(order) except *:\n+    # Explicit if-else since Cython does not supports storing C++ enum classes\n+    # as dictionary values because they do not resolve to integers.\n+    if order == \"ascending\":\n+        return CSortOrder_Ascending\n+    elif order == \"descending\":\n+        return CSortOrder_Descending\n+    else:\n+        raise ValueError(f'\"{order}\" is not a valid order')\n+\n+\n cdef class _ArraySortOptions(FunctionOptions):\n     def _set_options(self, order):\n-        if order == \"ascending\":\n-            self.wrapped.reset(new CArraySortOptions(CSortOrder_Ascending))\n-        elif order == \"descending\":\n-            self.wrapped.reset(new CArraySortOptions(CSortOrder_Descending))\n-        else:\n-            raise ValueError(\n-                \"{!r} is not a valid order\".format(order)\n-            )\n+        self.wrapped.reset(new CArraySortOptions(unwrap_sort_order(order)))\n \n \n class ArraySortOptions(_ArraySortOptions):\n-    def __init__(self, *, order='ascending'):\n+    def __init__(self, *, order=\"ascending\"):\n         self._set_options(order)\n \n \n cdef class _SortOptions(FunctionOptions):\n     def _set_options(self, sort_keys):\n-        cdef:\n-            vector[CSortKey] c_sort_keys\n-            c_string c_name\n-            CSortOrder c_order\n-\n+        cdef vector[CSortKey] c_sort_keys\n         for name, order in sort_keys:\n-            if order == \"ascending\":\n-                c_order = CSortOrder_Ascending\n-            elif order == \"descending\":\n-                c_order = CSortOrder_Descending\n-            else:\n-                raise ValueError(\n-                    \"{!r} is not a valid order\".format(order)\n-                )\n-            c_name = tobytes(name)\n-            c_sort_keys.push_back(CSortKey(c_name, c_order))\n-\n+            c_sort_keys.push_back(CSortKey(tobytes(name),\n+                                  unwrap_sort_order(order)))\n         self.wrapped.reset(new CSortOptions(c_sort_keys))\n \n \n class SortOptions(_SortOptions):\n-    def __init__(self, sort_keys=None):\n+    def __init__(self, *, sort_keys=None):\n         if sort_keys is None:\n             sort_keys = []\n         self._set_options(sort_keys)\n \n \n cdef class _SelectKOptions(FunctionOptions):\n     def _set_options(self, k, sort_keys):\n-        cdef:\n-            c_string c_name\n-            vector[CSortKey] c_sort_keys\n-            CSortOrder c_order\n-\n+        cdef vector[CSortKey] c_sort_keys\n         for name, order in sort_keys:\n-            if order == \"ascending\":\n-                c_order = CSortOrder_Ascending\n-            elif order == \"descending\":\n-                c_order = CSortOrder_Descending\n-            else:\n-                raise ValueError(\n-                    \"{!r} is not a valid order\".format(order)\n-                )\n-            c_name = tobytes(name)\n-            c_sort_keys.push_back(CSortKey(c_name, c_order))\n-\n+            c_sort_keys.push_back(CSortKey(tobytes(name),\n+                                  unwrap_sort_order(order)))\n         self.wrapped.reset(new CSelectKOptions(k, c_sort_keys))\n \n \n class SelectKOptions(_SelectKOptions):\n-    def __init__(self, k, sort_keys=None):\n+    def __init__(self, *, k=-1, sort_keys=None):\n\nReview comment:\n       Well, it should be clear that the first argument to `select_k` is the `k` number, no?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1131,106 +1092,83 @@ cdef class _SplitPatternOptions(FunctionOptions):\n \n \n class SplitPatternOptions(_SplitPatternOptions):\n-    def __init__(self, *, pattern, max_splits=-1, reverse=False):\n+    def __init__(self, pattern, *, max_splits=-1, reverse=False):\n         self._set_options(pattern, max_splits, reverse)\n \n \n+cdef CSortOrder unwrap_sort_order(order) except *:\n+    # Explicit if-else since Cython does not supports storing C++ enum classes\n+    # as dictionary values because they do not resolve to integers.\n+    if order == \"ascending\":\n+        return CSortOrder_Ascending\n+    elif order == \"descending\":\n+        return CSortOrder_Descending\n+    else:\n+        raise ValueError(f'\"{order}\" is not a valid order')\n+\n+\n cdef class _ArraySortOptions(FunctionOptions):\n     def _set_options(self, order):\n-        if order == \"ascending\":\n-            self.wrapped.reset(new CArraySortOptions(CSortOrder_Ascending))\n-        elif order == \"descending\":\n-            self.wrapped.reset(new CArraySortOptions(CSortOrder_Descending))\n-        else:\n-            raise ValueError(\n-                \"{!r} is not a valid order\".format(order)\n-            )\n+        self.wrapped.reset(new CArraySortOptions(unwrap_sort_order(order)))\n \n \n class ArraySortOptions(_ArraySortOptions):\n-    def __init__(self, *, order='ascending'):\n+    def __init__(self, *, order=\"ascending\"):\n         self._set_options(order)\n \n \n cdef class _SortOptions(FunctionOptions):\n     def _set_options(self, sort_keys):\n-        cdef:\n-            vector[CSortKey] c_sort_keys\n-            c_string c_name\n-            CSortOrder c_order\n-\n+        cdef vector[CSortKey] c_sort_keys\n         for name, order in sort_keys:\n-            if order == \"ascending\":\n-                c_order = CSortOrder_Ascending\n-            elif order == \"descending\":\n-                c_order = CSortOrder_Descending\n-            else:\n-                raise ValueError(\n-                    \"{!r} is not a valid order\".format(order)\n-                )\n-            c_name = tobytes(name)\n-            c_sort_keys.push_back(CSortKey(c_name, c_order))\n-\n+            c_sort_keys.push_back(CSortKey(tobytes(name),\n+                                  unwrap_sort_order(order)))\n         self.wrapped.reset(new CSortOptions(c_sort_keys))\n \n \n class SortOptions(_SortOptions):\n-    def __init__(self, sort_keys=None):\n+    def __init__(self, *, sort_keys=None):\n\nReview comment:\n       Similarly, this doesn't seem to increase usability or readability.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T08:57:06.310+0000",
                    "updated": "2021-09-16T08:57:06.310+0000",
                    "started": "2021-09-16T08:57:06.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651549",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/652833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#issuecomment-922733817\n\n\n   The FunctionOptions that were modified w.r.t. to positional/keyword-only args are:\r\n   ```python\r\n   MatchSubstringOptions(self, pattern, *, ignore_case)\r\n   ReplaceSubstringOptions(self, pattern, replacement, *, max_replacements)\r\n   ScalarAggregateOptions(self, *, skip_nulls, min_count)\r\n   ModeOptions(self, n, *, skip_nulls, min_count)\r\n   SetLookupOptions(self, value_set, *, skip_nulls)\r\n   DayOfWeekOptions(self, *, one_based_numbering, week_start)\r\n   NullOptions(self, *, nan_is_null)\r\n   SplitPatternOptions(self, pattern, *, max_splits, reverse)\r\n   ArraySortOptions(self, order)\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T08:42:55.610+0000",
                    "updated": "2021-09-20T08:42:55.610+0000",
                    "started": "2021-09-20T08:42:55.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652833",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/652912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712113784\n\n\n\n##########\nFile path: python/pyarrow/includes/libarrow.pxd\n##########\n@@ -2069,10 +2076,15 @@ cdef extern from \"arrow/compute/api.h\" namespace \"arrow::compute\" nogil:\n \n     cdef cppclass CMakeStructOptions \\\n             \"arrow::compute::MakeStructOptions\"(CFunctionOptions):\n-        CMakeStructOptions(vector[c_string] field_names)\n+        CMakeStructOptions(vector[c_string] n,\n+                           vector[c_bool] r,\n+                           vector[shared_ptr[const CKeyValueMetadata]] m)\n+        CMakeStructOptions(vector[c_string] n)\n         vector[c_string] field_names\n+        vector[c_bool] field_nullability\n+        vector[shared_ptr[const CKeyValueMetadata]] field_metadata\n \n-    ctypedef enum CSortOrder\" arrow::compute::SortOrder\":\n+    cdef enum CSortOrder\" arrow::compute::SortOrder\":\n\nReview comment:\n       It seems these `cdef` changes may have broken AppVeyor. Can you take a look?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T12:20:18.077+0000",
                    "updated": "2021-09-20T12:20:18.077+0000",
                    "started": "2021-09-20T12:20:18.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652912",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/652913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712115155\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -569,6 +543,10 @@ cdef class FunctionOptions(_Weakrefable):\n         return self.get_options().Equals(deref(other.get_options()))\n \n \n+def raise_invalid_function_option(value, description, *, error=\"keyword\"):\n\nReview comment:\n       This is a private function, prefix it with an underscore?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T12:22:22.132+0000",
                    "updated": "2021-09-20T12:22:22.132+0000",
                    "started": "2021-09-20T12:22:22.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652913",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/652914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712115997\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -690,99 +677,96 @@ class CastOptions(_CastOptions):\n \n \n cdef class _ElementWiseAggregateOptions(FunctionOptions):\n-    def _set_options(self, bint skip_nulls):\n+    def _set_options(self, skip_nulls):\n         self.wrapped.reset(new CElementWiseAggregateOptions(skip_nulls))\n \n \n class ElementWiseAggregateOptions(_ElementWiseAggregateOptions):\n-    def __init__(self, bint skip_nulls=True):\n+    def __init__(self, skip_nulls=True):\n\nReview comment:\n       Should this one become keyword-only? `ElementWiseAggregateOptions(true)` isn't very explicit.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T12:23:35.766+0000",
                    "updated": "2021-09-20T12:23:35.766+0000",
                    "started": "2021-09-20T12:23:35.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652914",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/652916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712117470\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1921,9 +1937,9 @@ def validate_select_k(select_k_indices, tbl, sort_keys, stable_sort=False):\n \n     with pytest.raises(ValueError, match=\"select_k_unstable requires \"\n                        \"a non-empty `sort_keys`\"):\n-        pc.select_k_unstable(table, k=2)\n+        pc.select_k_unstable(table, k=2, sort_keys=[])\n \n-    with pytest.raises(ValueError, match=\"not a valid order\"):\n+    with pytest.raises(ValueError, match=\"not a valid 'sort order'\"):\n\nReview comment:\n       Nit, but the quotes around \"sort order\" look a bit gratuitous?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T12:25:50.687+0000",
                    "updated": "2021-09-20T12:25:50.687+0000",
                    "started": "2021-09-20T12:25:50.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652916",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/653145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712428399\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -569,6 +543,10 @@ cdef class FunctionOptions(_Weakrefable):\n         return self.get_options().Equals(deref(other.get_options()))\n \n \n+def raise_invalid_function_option(value, description, *, error=\"keyword\"):\n\nReview comment:\n       Do you think we should include it as a private method of `FunctionOptions` or leave it as a free standing function? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T18:50:32.328+0000",
                    "updated": "2021-09-20T18:50:32.328+0000",
                    "started": "2021-09-20T18:50:32.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653145",
                    "issueId": "13389426"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/worklog/653146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11147:\nURL: https://github.com/apache/arrow/pull/11147#discussion_r712429961\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -569,6 +543,10 @@ cdef class FunctionOptions(_Weakrefable):\n         return self.get_options().Equals(deref(other.get_options()))\n \n \n+def raise_invalid_function_option(value, description, *, error=\"keyword\"):\n\nReview comment:\n       Can leave it as a free standing function.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T18:52:47.417+0000",
                    "updated": "2021-09-20T18:52:47.417+0000",
                    "started": "2021-09-20T18:52:47.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653146",
                    "issueId": "13389426"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 23400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6bed5222[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@751a700d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67a9474c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4195d9ac[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@eb398d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4b0db725[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66330a2f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@984f7fc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b639b04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3df1a3d2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43eda431[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6df890a7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 23400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 22 13:43:10 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-22T13:43:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13327/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-13T16:46:54.000+0000",
        "updated": "2021-09-22T13:43:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Cython files (.pyx) in PyArrow make inconsistent use of explicit C++ typing. Some methods/functions use explicit types for their parameters and others do not.\r\n\r\nAlso, definition files (.pxd) are not consistent in the use of the reference operator (&) and may not be up-to-date w.r.t. to C++ API.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 23400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Improve consistency of explicit C++ types in PyArrow files",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/comment/17380135",
                    "id": "17380135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Actually, the description files (.pxd) contain the explicit types of the function options' parameters (e.g., [SliceOptions in libarrow.pxd|https://github.com/apache/arrow/blob/master/python/pyarrow/includes/libarrow.pxd#L1849-L1854]), so I do not think it is necessary to add explicit types to the implementation files (.pyx) as currently done for some cases (e.g., [SliceOptions in _compute.pyx|https://github.com/apache/arrow/blob/master/python/pyarrow/_compute.pyx#L795-L803]).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-13T19:48:58.357+0000",
                    "updated": "2021-07-13T19:52:55.553+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/comment/17380495",
                    "id": "17380495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It seems that Cython considers pass-by-reference as default for *object* types. For example, *shared_ptr[T]* as *shared_ptr[T]&*. The ampersand seems to not be required. Nevertheless, it does supports and parses the ampersand so it is best to be consistent with C++ parameter types.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-14T10:44:19.180+0000",
                    "updated": "2021-07-14T10:44:19.180+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389426/comment/17418604",
                    "id": "17418604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11147\n[https://github.com/apache/arrow/pull/11147]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-09-22T13:43:10.749+0000",
                    "updated": "2021-09-22T13:43:10.749+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0sws8:",
        "customfield_12314139": null
    }
}