{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13352923",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923",
    "key": "ARROW-11291",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11291/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235\n\n\n   # Rational\r\n   \r\n   Rust forbids safely accessing uninitialized memory because it is undefined behavior. However, when building `Buffer`s, it is important to be able to _write_ to uninitialized memory regions, thereby avoiding the need to write _something_ to it before using it.\r\n   \r\n   Currently, all our initializations are zeroed, which is expensive. #9076 modifies our allocator to allocate uninitialized regions. However, by itself, this is not useful if we do not offer any methods to write to those (uninitialized) regions.\r\n   \r\n   # This PR\r\n   \r\n   This PR is built on top of #9076 and introduces methods to extend a `MutableBuffer` from an iterator (and an `ExactSizedIterator` when it is possible) to build a `MutableBuffer`, thereby offering a `safe` API to efficiently grow `MutableBuffer` without having to initialize memory regions with zeros (i.e. without `with_bitset` and the like).\r\n   \r\n   The design is heavily inspired in `Vec`, with the catch that we use stable Rust (i.e. no trait specialization), and thus have to expose a bit more methods than what `Vec` exposes. Also, unfortunately Rust does not support `collect()` for `ExactSizedIterator` and `TrustedLen` is `unstable`, which means that we can't use that (nicer) API for sized iterators based on `collect()`.\r\n   \r\n   The first commit is just a fix to a bench, that was taking the creation of an array into account. The second commit is the most important and contains the new APIs. The last 2 commits are examples of what this API looks like and what it can achieve (benches below).\r\n   \r\n   PS: using `ExactSizedIterator` is 2x faster than the `Iterator`. I have been fighting the compiler to try to have the same performance in both (as it is only a branch on the if), but the compiler is not being very friendly to me (related to https://github.com/rust-lang/rust/issues/32155).\r\n   \r\n   ```bash\r\n   git checkout master\r\n   cargo bench --bench arithmetic_kernels\r\n   git checkout length_faster\r\n   cargo bench --bench arithmetic_kernels\r\n   \r\n   git checkout 557e728b201ccb301b05e0cb1470782d37c6994c\r\n   cargo bench --bench length_kernel\r\n   git checkout length_faster\r\n   ```\r\n   \r\n   ```\r\n      Compiling arrow v3.0.0-SNAPSHOT (/Users/jorgecarleitao/projects/arrow/rust/arrow)\r\n       Finished bench [optimized] target(s) in 1m 00s\r\n        Running /Users/jorgecarleitao/projects/arrow/rust/target/release/deps/arithmetic_kernels-ec2cc20ce07d9b83\r\n   Gnuplot not found, using plotters backend\r\n   add 512                 time:   [509.72 ns 510.21 ns 510.69 ns]                     \r\n                           change: [-24.729% -24.227% -23.740%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     2 (2.00%) high mild\r\n     6 (6.00%) high severe\r\n   \r\n   subtract 512            time:   [498.20 ns 499.79 ns 501.36 ns]                          \r\n                           change: [-25.168% -24.543% -23.948%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   multiply 512            time:   [498.28 ns 501.10 ns 504.14 ns]                          \r\n                           change: [-32.237% -29.733% -27.551%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   divide 512              time:   [1.8751 us 1.8771 us 1.8790 us]                        \r\n                           change: [-21.101% -20.410% -19.729%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   limit 512, 512          time:   [360.62 ns 362.85 ns 365.08 ns]                           \r\n                           change: [-4.0917% -2.8282% -1.6589%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   add_nulls_512           time:   [523.34 ns 525.34 ns 527.35 ns]                           \r\n                           change: [-19.810% -19.242% -18.654%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   divide_nulls_512        time:   [1.8594 us 1.8606 us 1.8617 us]                              \r\n                           change: [-21.900% -21.444% -20.974%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     2 (2.00%) high mild\r\n     6 (6.00%) high severe\r\n   ```\r\n   \r\n   Length (against the commit that fixes the bench, `16bc7200f3baa6e526aea7135c60dcc949c9b592`, not master):\r\n   \r\n   ```\r\n   length                  time:   [1.5379 us 1.5408 us 1.5437 us]                    \r\n                           change: [-97.311% -97.295% -97.278%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 12 outliers among 100 measurements (12.00%)\r\n     1 (1.00%) low severe\r\n     4 (4.00%) low mild\r\n     3 (3.00%) high mild\r\n     4 (4.00%) high severe\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-17T18:57:06.097+0000",
                    "updated": "2021-01-17T18:57:06.097+0000",
                    "started": "2021-01-17T18:57:06.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537116",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-761861730\n\n\n   https://issues.apache.org/jira/browse/ARROW-11291\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-17T18:57:19.463+0000",
                    "updated": "2021-01-17T18:57:19.463+0000",
                    "started": "2021-01-17T18:57:19.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537117",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r559224772\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/length.rs\n##########\n@@ -30,16 +29,16 @@ where\n     OffsetSize: OffsetSizeTrait,\n {\n     // note: offsets are stored as u8, but they can be interpreted as OffsetSize\n-    let offsets = array.data_ref().clone().buffers()[0].clone();\n+    let offsets = &array.data_ref().buffers()[0];\n     // this is a 30% improvement over iterating over u8s and building OffsetSize, which\n     // justifies the usage of `unsafe`.\n     let slice: &[OffsetSize] =\n         &unsafe { offsets.typed_data::<OffsetSize>() }[array.offset()..];\n \n-    let lengths: Vec<OffsetSize> = slice\n-        .windows(2)\n-        .map(|offset| offset[1] - offset[0])\n-        .collect();\n+    let lengths = slice.windows(2).map(|offset| offset[1] - offset[0]);\n+\n+    let mut buffer = MutableBuffer::new(0);\n+    buffer.extend_from_exact_iter(lengths);\n \n\nReview comment:\n       This is the main difference in this PR for the length: we extend from the iterator instead of extending a vector and then memcopying the data.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-17T19:10:27.644+0000",
                    "updated": "2021-01-17T19:10:27.644+0000",
                    "started": "2021-01-17T19:10:27.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537125",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r559224860\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/arithmetic.rs\n##########\n@@ -147,16 +143,17 @@ where\n         .values()\n         .iter()\n         .zip(right.values().iter())\n-        .map(|(l, r)| op(*l, *r))\n-        .collect::<Vec<T::Native>>();\n+        .map(|(l, r)| op(*l, *r));\n+    let mut buffer = MutableBuffer::new(0);\n+    buffer.extend_from_exact_iter(values);\n\nReview comment:\n       This is the main difference in this PR for the arithmetics: extend from the iterator instead of extending a vector and then memcopying the data.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-17T19:11:01.769+0000",
                    "updated": "2021-01-17T19:11:01.769+0000",
                    "started": "2021-01-17T19:11:01.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537126",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-761864117\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=h1) Report\n   > Merging [#9235](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=desc) (23b99df) into [master](https://codecov.io/gh/apache/arrow/commit/08cccd68802c9ddc3ca0a5d4bad6e4ba382d74b4?el=desc) (08cccd6) will **decrease** coverage by `0.27%`.\n   > The diff coverage is `88.00%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9235/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9235      +/-   ##\n   ==========================================\n   - Coverage   81.81%   81.54%   -0.28%     \n   ==========================================\n     Files         214      215       +1     \n     Lines       51373    51861     +488     \n   ==========================================\n   + Hits        42033    42289     +256     \n   - Misses       9340     9572     +232     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/array/equal/utils.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvZXF1YWwvdXRpbHMucnM=) | `74.50% <0.00%> (-0.25%)` | :arrow_down: |\n   | [rust/arrow/src/bytes.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnl0ZXMucnM=) | `53.12% <\u00f8> (-5.21%)` | :arrow_down: |\n   | [rust/arrow/src/compute/kernels/aggregate.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FnZ3JlZ2F0ZS5ycw==) | `74.93% <\u00f8> (-0.07%)` | :arrow_down: |\n   | [rust/arrow/src/datatypes.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvZGF0YXR5cGVzLnJz) | `78.47% <\u00f8> (-0.28%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `71.30% <0.00%> (-0.40%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/record\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9yZWNvcmRfcmVhZGVyLnJz) | `94.26% <46.15%> (-2.01%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/boolean.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2Jvb2xlYW4ucnM=) | `76.92% <50.00%> (\u00f8)` | |\n   | [rust/arrow/src/array/transform/fixed\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2ZpeGVkX2JpbmFyeS5ycw==) | `78.94% <50.00%> (-5.27%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/list.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2xpc3QucnM=) | `86.20% <66.66%> (+2.33%)` | :arrow_up: |\n   | [rust/arrow/src/array/transform/utils.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL3V0aWxzLnJz) | `95.00% <75.00%> (-5.00%)` | :arrow_down: |\n   | ... and [96 more](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=footer). Last update [08cccd6...23b99df](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-17T19:13:15.100+0000",
                    "updated": "2021-01-17T19:13:15.100+0000",
                    "started": "2021-01-17T19:13:15.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537127",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r559460523\n\n\n\n##########\nFile path: rust/arrow/src/array/array_primitive.rs\n##########\n@@ -295,20 +295,21 @@ impl<T: ArrowPrimitiveType, Ptr: Borrow<Option<<T as ArrowPrimitiveType>::Native\n         let data_len = data_len.expect(\"Iterator must be sized\"); // panic if no upper bound.\n \n         let num_bytes = bit_util::ceil(data_len, 8);\n-        let mut null_buf = MutableBuffer::new(num_bytes).with_bitset(num_bytes, false);\n+        let mut null_buf = MutableBuffer::from_len_zeroed(num_bytes);\n         let mut val_buf = MutableBuffer::new(\n             data_len * mem::size_of::<<T as ArrowPrimitiveType>::Native>(),\n         );\n \n-        let null = vec![0; mem::size_of::<<T as ArrowPrimitiveType>::Native>()];\n-\n         let null_slice = null_buf.as_slice_mut();\n         iter.enumerate().for_each(|(i, item)| {\n             if let Some(a) = item.borrow() {\n                 bit_util::set_bit(null_slice, i);\n-                val_buf.extend_from_slice(a.to_byte_slice());\n+                val_buf.push(*a);\n             } else {\n-                val_buf.extend_from_slice(&null);\n+                // this ensures that null items on the buffer are not arbitrary.\n+                // This is important because falible operations can use null values (e.g. a vectorized \"add\")\n\nReview comment:\n       falible -> fallible\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -758,39 +793,54 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n-    /// also ensure the new capacity will be a multiple of 64 bytes.\n-    ///\n-    /// Returns the new capacity for this buffer.\n-    pub fn reserve(&mut self, capacity: usize) -> usize {\n-        if capacity > self.capacity {\n-            let new_capacity = bit_util::round_upto_multiple_of_64(capacity);\n-            let new_capacity = cmp::max(new_capacity, self.capacity * 2);\n-            self.data =\n-                unsafe { memory::reallocate(self.data, self.capacity, new_capacity) };\n-            self.capacity = new_capacity;\n+    fn reserve_at_least(&mut self, capacity: usize) {\n+        let new_capacity = bit_util::round_upto_multiple_of_64(capacity);\n+        let new_capacity = std::cmp::max(new_capacity, self.capacity * 2);\n+        self.data = unsafe { memory::reallocate(self.data, self.capacity, new_capacity) };\n+        self.capacity = new_capacity;\n+    }\n+\n+    /// Ensures that this buffer has at least `self.len + additional` bytes. This re-allocates iff\n+    /// `self.len + additional > capacity`.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::{Buffer, MutableBuffer};\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.reserve(253); // allocates for the first time\n+    /// (0..253u8).for_each(|i| buffer.push(i)); // no reallocation\n+    /// let buffer: Buffer = buffer.into();\n+    /// assert_eq!(buffer.len(), 253);\n+    /// ```\n+    // For performance reasons, this must be inlined so that the `if` is executed inside the caller, and not as an extra call that just\n+    // exits.\n+    #[inline(always)]\n+    pub fn reserve(&mut self, additional: usize) {\n+        let required_cap = self.len + additional;\n+        if required_cap > self.capacity {\n+            self.reserve_at_least(required_cap)\n         }\n-        self.capacity\n     }\n \n-    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n-    ///\n-    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n-    /// the former, optionally extending the capacity. The data between `len` and\n-    /// `new_len` will be zeroed out.\n-    ///\n-    /// If `new_len` is less than `len`, the buffer will be truncated.\n-    pub fn resize(&mut self, new_len: usize) {\n+    /// Resizes the buffer, either truncating its contents (with no change in capacity), or\n\nReview comment:\n       In order to reduce the memory pressure in some scenarios, perhaps it's sound to make the `grow-only(no shrink cap) behavior` configurable with an additional boolean argument (default true).\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -861,49 +913,147 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// View buffer as typed slice.\n+    /// View this buffer asa slice of a specific type.\n+    /// # Safety\n+    /// This function must only be used when this buffer was extended with items of type `T`.\n+    /// Failure to do so results in undefined behavior.\n     pub fn typed_data_mut<T: ArrowNativeType>(&mut self) -> &mut [T] {\n-        assert_eq!(self.len() % mem::size_of::<T>(), 0);\n-        assert!(memory::is_ptr_aligned::<T>(self.data.cast()));\n-        // JUSTIFICATION\n-        //  Benefit\n-        //      Many of the buffers represent specific types, and consumers of `Buffer` often need to re-interpret them.\n-        //  Soundness\n-        //      * The pointer is non-null by construction\n-        //      * alignment asserted above\n         unsafe {\n-            std::slice::from_raw_parts_mut(\n-                self.as_ptr() as *mut T,\n-                self.len() / mem::size_of::<T>(),\n-            )\n+            let (prefix, offsets, suffix) = self.as_slice_mut().align_to_mut::<T>();\n+            assert!(prefix.is_empty() && suffix.is_empty());\n+            offsets\n         }\n     }\n \n-    /// Extends the buffer from a byte slice, incrementing its capacity if needed.\n-    #[inline]\n-    pub fn extend_from_slice(&mut self, bytes: &[u8]) {\n-        let new_len = self.len + bytes.len();\n-        if new_len > self.capacity {\n-            self.reserve(new_len);\n+    /// Extends this buffer from a slice of items that can be represented in bytes, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.extend_from_slice(&[2u32, 0]);\n+    /// assert_eq!(buffer.len(), 8) // u32 has 4 bytes\n+    /// ```\n+    pub fn extend_from_slice<T: ToByteSlice>(&mut self, items: &[T]) {\n+        let len = items.len();\n+        let additional = len * std::mem::size_of::<T>();\n+        self.reserve(additional);\n+        unsafe {\n+            let dst = self.data.as_ptr().add(self.len);\n+            let src = items.as_ptr() as *const u8;\n+            std::ptr::copy_nonoverlapping(src, dst, additional)\n         }\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer with a new item, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.push(256u32);\n+    /// assert_eq!(buffer.len(), 4) // u32 has 4 bytes\n+    /// ```\n+    #[inline]\n+    pub fn push<T: ToByteSlice>(&mut self, item: T) {\n+        let additional = std::mem::size_of::<T>();\n+        self.reserve(additional);\n         unsafe {\n-            let dst = NonNull::new_unchecked(self.data.as_ptr().add(self.len));\n-            let src = NonNull::new_unchecked(bytes.as_ptr() as *mut u8);\n-            memory::memcpy(dst, src, bytes.len());\n+            let dst = self.data.as_ptr().add(self.len) as *mut T;\n+            std::ptr::write(dst, item);\n         }\n-        self.len = new_len;\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n+    #[inline]\n+    pub fn extend_zeros(&mut self, additional: usize) {\n+        self.resize(self.len + additional, 0);\n     }\n+}\n \n-    /// Extends the buffer by `len` with all bytes equal to `0u8`, incrementing its capacity if needed.\n-    pub fn extend(&mut self, len: usize) {\n-        let remaining_capacity = self.capacity - self.len;\n-        if len > remaining_capacity {\n-            self.reserve(self.len + len);\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    /// Extends [`MutableBuffer`] from an [`Iterator`]. If the iterator is an [`ExactSizeIterator`],\n+    /// use [`extend_from_exact_iter`] as it is faster.\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+// This implementation is required for two reasons:\n+// 1. In stable rust, there is no trait specialization and therefore\n+//    we can't specialize `extend_from_iter` for `ExactSizeIterator` like `Vec` does.\n+// 2. Extend for `ExactSizeIterator` is at least 2x faster (different scaling).\n+// Unfortunately, there is no \"FromExactSizeIterator\", only `FromIterator`,\n+// which means that `collect` is slow and we should avoid it to build a Buffer. This should\n\nReview comment:\n       \"This should\" what :D\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -861,49 +913,147 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// View buffer as typed slice.\n+    /// View this buffer asa slice of a specific type.\n+    /// # Safety\n+    /// This function must only be used when this buffer was extended with items of type `T`.\n+    /// Failure to do so results in undefined behavior.\n     pub fn typed_data_mut<T: ArrowNativeType>(&mut self) -> &mut [T] {\n-        assert_eq!(self.len() % mem::size_of::<T>(), 0);\n-        assert!(memory::is_ptr_aligned::<T>(self.data.cast()));\n-        // JUSTIFICATION\n-        //  Benefit\n-        //      Many of the buffers represent specific types, and consumers of `Buffer` often need to re-interpret them.\n-        //  Soundness\n-        //      * The pointer is non-null by construction\n-        //      * alignment asserted above\n         unsafe {\n-            std::slice::from_raw_parts_mut(\n-                self.as_ptr() as *mut T,\n-                self.len() / mem::size_of::<T>(),\n-            )\n+            let (prefix, offsets, suffix) = self.as_slice_mut().align_to_mut::<T>();\n+            assert!(prefix.is_empty() && suffix.is_empty());\n+            offsets\n         }\n     }\n \n-    /// Extends the buffer from a byte slice, incrementing its capacity if needed.\n-    #[inline]\n-    pub fn extend_from_slice(&mut self, bytes: &[u8]) {\n-        let new_len = self.len + bytes.len();\n-        if new_len > self.capacity {\n-            self.reserve(new_len);\n+    /// Extends this buffer from a slice of items that can be represented in bytes, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.extend_from_slice(&[2u32, 0]);\n+    /// assert_eq!(buffer.len(), 8) // u32 has 4 bytes\n+    /// ```\n+    pub fn extend_from_slice<T: ToByteSlice>(&mut self, items: &[T]) {\n+        let len = items.len();\n+        let additional = len * std::mem::size_of::<T>();\n+        self.reserve(additional);\n+        unsafe {\n+            let dst = self.data.as_ptr().add(self.len);\n+            let src = items.as_ptr() as *const u8;\n+            std::ptr::copy_nonoverlapping(src, dst, additional)\n         }\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer with a new item, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.push(256u32);\n+    /// assert_eq!(buffer.len(), 4) // u32 has 4 bytes\n+    /// ```\n+    #[inline]\n+    pub fn push<T: ToByteSlice>(&mut self, item: T) {\n+        let additional = std::mem::size_of::<T>();\n+        self.reserve(additional);\n         unsafe {\n-            let dst = NonNull::new_unchecked(self.data.as_ptr().add(self.len));\n-            let src = NonNull::new_unchecked(bytes.as_ptr() as *mut u8);\n-            memory::memcpy(dst, src, bytes.len());\n+            let dst = self.data.as_ptr().add(self.len) as *mut T;\n+            std::ptr::write(dst, item);\n         }\n-        self.len = new_len;\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n+    #[inline]\n+    pub fn extend_zeros(&mut self, additional: usize) {\n+        self.resize(self.len + additional, 0);\n     }\n+}\n \n-    /// Extends the buffer by `len` with all bytes equal to `0u8`, incrementing its capacity if needed.\n-    pub fn extend(&mut self, len: usize) {\n-        let remaining_capacity = self.capacity - self.len;\n-        if len > remaining_capacity {\n-            self.reserve(self.len + len);\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    /// Extends [`MutableBuffer`] from an [`Iterator`]. If the iterator is an [`ExactSizeIterator`],\n+    /// use [`extend_from_exact_iter`] as it is faster.\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+// This implementation is required for two reasons:\n+// 1. In stable rust, there is no trait specialization and therefore\n+//    we can't specialize `extend_from_iter` for `ExactSizeIterator` like `Vec` does.\n+// 2. Extend for `ExactSizeIterator` is at least 2x faster (different scaling).\n+// Unfortunately, there is no \"FromExactSizeIterator\", only `FromIterator`,\n+// which means that `collect` is slow and we should avoid it to build a Buffer. This should\n+impl MutableBuffer {\n+    /// This method is private because the public interface is [`extend`]\n+    /// It is here because it is similar to `extend_from_exact_iter`.\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        let (lower, _) = iterator.size_hint();\n+\n+        self.reserve(lower * size);\n+        let mut dst = unsafe { self.data.as_ptr().add(self.len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if self.len >= self.capacity() {\n+                let (lower, _) = iterator.size_hint();\n+                let additional = (lower + 1) * size;\n+                self.reserve_at_least(self.len + additional);\n\nReview comment:\n       `reserve_at_least` may be called many times, any chance to calculating the total additional before calling to `reserve_at_least`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T13:03:24.237+0000",
                    "updated": "2021-01-18T13:03:24.237+0000",
                    "started": "2021-01-18T13:03:24.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537375",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r559729105\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -758,39 +793,54 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// Ensures that this buffer has at least `capacity` slots in this buffer. This will\n-    /// also ensure the new capacity will be a multiple of 64 bytes.\n-    ///\n-    /// Returns the new capacity for this buffer.\n-    pub fn reserve(&mut self, capacity: usize) -> usize {\n-        if capacity > self.capacity {\n-            let new_capacity = bit_util::round_upto_multiple_of_64(capacity);\n-            let new_capacity = cmp::max(new_capacity, self.capacity * 2);\n-            self.data =\n-                unsafe { memory::reallocate(self.data, self.capacity, new_capacity) };\n-            self.capacity = new_capacity;\n+    fn reserve_at_least(&mut self, capacity: usize) {\n+        let new_capacity = bit_util::round_upto_multiple_of_64(capacity);\n+        let new_capacity = std::cmp::max(new_capacity, self.capacity * 2);\n+        self.data = unsafe { memory::reallocate(self.data, self.capacity, new_capacity) };\n+        self.capacity = new_capacity;\n+    }\n+\n+    /// Ensures that this buffer has at least `self.len + additional` bytes. This re-allocates iff\n+    /// `self.len + additional > capacity`.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::{Buffer, MutableBuffer};\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.reserve(253); // allocates for the first time\n+    /// (0..253u8).for_each(|i| buffer.push(i)); // no reallocation\n+    /// let buffer: Buffer = buffer.into();\n+    /// assert_eq!(buffer.len(), 253);\n+    /// ```\n+    // For performance reasons, this must be inlined so that the `if` is executed inside the caller, and not as an extra call that just\n+    // exits.\n+    #[inline(always)]\n+    pub fn reserve(&mut self, additional: usize) {\n+        let required_cap = self.len + additional;\n+        if required_cap > self.capacity {\n+            self.reserve_at_least(required_cap)\n         }\n-        self.capacity\n     }\n \n-    /// Resizes the buffer so that the `len` will equal to the `new_len`.\n-    ///\n-    /// If `new_len` is greater than `len`, the buffer's length is simply adjusted to be\n-    /// the former, optionally extending the capacity. The data between `len` and\n-    /// `new_len` will be zeroed out.\n-    ///\n-    /// If `new_len` is less than `len`, the buffer will be truncated.\n-    pub fn resize(&mut self, new_len: usize) {\n+    /// Resizes the buffer, either truncating its contents (with no change in capacity), or\n\nReview comment:\n       I opted for not doing so for the following reasons:\r\n   \r\n   * `Vec::resize` has no such argument\r\n   * `Vec::resize` does not reallocate itself when `new_len < len`\r\n   \r\n   I.e. my general goal is to have `MutableBuffer`'s API as close as possible to `Vec` so that it can serve as a drop-in replacement that people can easily relate to.\r\n   \r\n   What could make sense would be to offer a `shrink_to_fit` method (which typically triggers a reallocation).\r\n   I haven't seen a use case where `shrink_to_fit` was needed on a `MutableBuffer`, though. My understanding is that because Arrow buffers are immutable, people only use `MutableBuffer` to build new arrays, and, when building arrays, there is typically no use-case to shrink the buffer (i.e. in 100% of the cases in the crates so far we just grow them as needed).\r\n   \r\n   My understanding is that such memory pressure typically emerges in long-living mutable containers.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T18:01:24.358+0000",
                    "updated": "2021-01-18T18:01:24.358+0000",
                    "started": "2021-01-18T18:01:24.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537483",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-762400218\n\n\n   On my computer this is now faster than simd in master \ud83e\udd23\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T18:05:59.380+0000",
                    "updated": "2021-01-18T18:05:59.380+0000",
                    "started": "2021-01-18T18:05:59.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537484",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/537487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r559736271\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -861,49 +913,147 @@ impl MutableBuffer {\n         }\n     }\n \n-    /// View buffer as typed slice.\n+    /// View this buffer asa slice of a specific type.\n+    /// # Safety\n+    /// This function must only be used when this buffer was extended with items of type `T`.\n+    /// Failure to do so results in undefined behavior.\n     pub fn typed_data_mut<T: ArrowNativeType>(&mut self) -> &mut [T] {\n-        assert_eq!(self.len() % mem::size_of::<T>(), 0);\n-        assert!(memory::is_ptr_aligned::<T>(self.data.cast()));\n-        // JUSTIFICATION\n-        //  Benefit\n-        //      Many of the buffers represent specific types, and consumers of `Buffer` often need to re-interpret them.\n-        //  Soundness\n-        //      * The pointer is non-null by construction\n-        //      * alignment asserted above\n         unsafe {\n-            std::slice::from_raw_parts_mut(\n-                self.as_ptr() as *mut T,\n-                self.len() / mem::size_of::<T>(),\n-            )\n+            let (prefix, offsets, suffix) = self.as_slice_mut().align_to_mut::<T>();\n+            assert!(prefix.is_empty() && suffix.is_empty());\n+            offsets\n         }\n     }\n \n-    /// Extends the buffer from a byte slice, incrementing its capacity if needed.\n-    #[inline]\n-    pub fn extend_from_slice(&mut self, bytes: &[u8]) {\n-        let new_len = self.len + bytes.len();\n-        if new_len > self.capacity {\n-            self.reserve(new_len);\n+    /// Extends this buffer from a slice of items that can be represented in bytes, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.extend_from_slice(&[2u32, 0]);\n+    /// assert_eq!(buffer.len(), 8) // u32 has 4 bytes\n+    /// ```\n+    pub fn extend_from_slice<T: ToByteSlice>(&mut self, items: &[T]) {\n+        let len = items.len();\n+        let additional = len * std::mem::size_of::<T>();\n+        self.reserve(additional);\n+        unsafe {\n+            let dst = self.data.as_ptr().add(self.len);\n+            let src = items.as_ptr() as *const u8;\n+            std::ptr::copy_nonoverlapping(src, dst, additional)\n         }\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer with a new item, increasing its capacity if needed.\n+    /// # Example\n+    /// ```\n+    /// # use arrow::buffer::MutableBuffer;\n+    /// let mut buffer = MutableBuffer::new(0);\n+    /// buffer.push(256u32);\n+    /// assert_eq!(buffer.len(), 4) // u32 has 4 bytes\n+    /// ```\n+    #[inline]\n+    pub fn push<T: ToByteSlice>(&mut self, item: T) {\n+        let additional = std::mem::size_of::<T>();\n+        self.reserve(additional);\n         unsafe {\n-            let dst = NonNull::new_unchecked(self.data.as_ptr().add(self.len));\n-            let src = NonNull::new_unchecked(bytes.as_ptr() as *mut u8);\n-            memory::memcpy(dst, src, bytes.len());\n+            let dst = self.data.as_ptr().add(self.len) as *mut T;\n+            std::ptr::write(dst, item);\n         }\n-        self.len = new_len;\n+        self.len += additional;\n+    }\n+\n+    /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n+    #[inline]\n+    pub fn extend_zeros(&mut self, additional: usize) {\n+        self.resize(self.len + additional, 0);\n     }\n+}\n \n-    /// Extends the buffer by `len` with all bytes equal to `0u8`, incrementing its capacity if needed.\n-    pub fn extend(&mut self, len: usize) {\n-        let remaining_capacity = self.capacity - self.len;\n-        if len > remaining_capacity {\n-            self.reserve(self.len + len);\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    /// Extends [`MutableBuffer`] from an [`Iterator`]. If the iterator is an [`ExactSizeIterator`],\n+    /// use [`extend_from_exact_iter`] as it is faster.\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+// This implementation is required for two reasons:\n+// 1. In stable rust, there is no trait specialization and therefore\n+//    we can't specialize `extend_from_iter` for `ExactSizeIterator` like `Vec` does.\n+// 2. Extend for `ExactSizeIterator` is at least 2x faster (different scaling).\n+// Unfortunately, there is no \"FromExactSizeIterator\", only `FromIterator`,\n+// which means that `collect` is slow and we should avoid it to build a Buffer. This should\n+impl MutableBuffer {\n+    /// This method is private because the public interface is [`extend`]\n+    /// It is here because it is similar to `extend_from_exact_iter`.\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        let (lower, _) = iterator.size_hint();\n+\n+        self.reserve(lower * size);\n+        let mut dst = unsafe { self.data.as_ptr().add(self.len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if self.len >= self.capacity() {\n+                let (lower, _) = iterator.size_hint();\n+                let additional = (lower + 1) * size;\n+                self.reserve_at_least(self.len + additional);\n\nReview comment:\n       I am sorry, I did not understand your question.\r\n   \r\n   This is being called here because iterators do not have a reliable `size_hint` (thus the `+ 1`). This code is spiritually equal to `extend_desugared`  in the standard lib.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-18T18:19:51.781+0000",
                    "updated": "2021-01-18T18:19:51.781+0000",
                    "started": "2021-01-18T18:19:51.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537487",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-763314319\n\n\n   I am drafting this because there is room for improvement in the API and soundness, details here https://users.rust-lang.org/t/collect-for-exactsizediterator/54367/15\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T04:03:08.662+0000",
                    "updated": "2021-01-20T04:03:08.662+0000",
                    "started": "2021-01-20T04:03:08.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538202",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-761864117\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=h1) Report\n   > Merging [#9235](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=desc) (cb02e45) into [master](https://codecov.io/gh/apache/arrow/commit/a7633c7567947ad945011711bfb312497c0f1f94?el=desc) (a7633c7) will **decrease** coverage by `0.00%`.\n   > The diff coverage is `81.11%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9235/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9235      +/-   ##\n   ==========================================\n   - Coverage   81.62%   81.62%   -0.01%     \n   ==========================================\n     Files         215      215              \n     Lines       52522    52591      +69     \n   ==========================================\n   + Hits        42872    42925      +53     \n   - Misses       9650     9666      +16     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/array/transform/fixed\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2ZpeGVkX2JpbmFyeS5ycw==) | `78.94% <50.00%> (\u00f8)` | |\n   | [rust/arrow/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnVmZmVyLnJz) | `92.62% <78.37%> (-2.81%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/primitive.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL3ByaW1pdGl2ZS5ycw==) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `89.55% <100.00%> (+0.12%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/length.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2xlbmd0aC5ycw==) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `94.86% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/converter.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9jb252ZXJ0ZXIucnM=) | `73.04% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `71.84% <0.00%> (+0.13%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_writer.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd193cml0ZXIucnM=) | `95.73% <0.00%> (+0.15%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=footer). Last update [a7633c7...98b4a9c](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T06:44:28.926+0000",
                    "updated": "2021-01-20T06:44:28.926+0000",
                    "started": "2021-01-20T06:44:28.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538224",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-761864117\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=h1) Report\n   > Merging [#9235](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=desc) (98b4a9c) into [master](https://codecov.io/gh/apache/arrow/commit/a7633c7567947ad945011711bfb312497c0f1f94?el=desc) (a7633c7) will **decrease** coverage by `0.00%`.\n   > The diff coverage is `81.11%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9235/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9235      +/-   ##\n   ==========================================\n   - Coverage   81.62%   81.62%   -0.01%     \n   ==========================================\n     Files         215      215              \n     Lines       52522    52591      +69     \n   ==========================================\n   + Hits        42872    42925      +53     \n   - Misses       9650     9666      +16     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/array/transform/fixed\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL2ZpeGVkX2JpbmFyeS5ycw==) | `78.94% <50.00%> (\u00f8)` | |\n   | [rust/arrow/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnVmZmVyLnJz) | `92.62% <78.37%> (-2.81%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/primitive.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL3ByaW1pdGl2ZS5ycw==) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `89.55% <100.00%> (+0.12%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/length.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2xlbmd0aC5ycw==) | `100.00% <100.00%> (\u00f8)` | |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `94.86% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/converter.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9jb252ZXJ0ZXIucnM=) | `73.04% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/arrow/array\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJheV9yZWFkZXIucnM=) | `71.84% <0.00%> (+0.13%)` | :arrow_up: |\n   | [rust/parquet/src/arrow/arrow\\_writer.rs](https://codecov.io/gh/apache/arrow/pull/9235/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd193cml0ZXIucnM=) | `95.73% <0.00%> (+0.15%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=footer). Last update [a7633c7...d175722](https://codecov.io/gh/apache/arrow/pull/9235?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T06:48:07.794+0000",
                    "updated": "2021-01-20T06:48:07.794+0000",
                    "started": "2021-01-20T06:48:07.793+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538225",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-763651758\n\n\n   Looks like there is an error in the SIMD tests https://github.com/apache/arrow/pull/9235/checks?check_run_id=1733044845\r\n   \r\n   ```\r\n   \r\n   failures:\r\n   \r\n   ---- src/buffer.rs - buffer::MutableBuffer::extend_from_trusted_len_iter (line 1036) stdout ----\r\n   error[E0716]: temporary value dropped while borrowed\r\n    --> src/buffer.rs:1038:12\r\n     |\r\n   5 | let iter = vec![1u32].iter().map(|x| x * 2);\r\n     |            ^^^^^^^^^^                      - temporary value is freed at the end of this statement\r\n     |            |\r\n     |            creates a temporary which is freed while still in use\r\n   6 | let mut buffer = MutableBuffer::new(0);\r\n   7 | unsafe { buffer.extend_from_trusted_len_iter(iter) };\r\n     |                                              ---- borrow later used here\r\n     |\r\n     = note: consider using a `let` binding to create a longer lived value\r\n     = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\r\n   \r\n   error: aborting due to previous error\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T14:41:41.355+0000",
                    "updated": "2021-01-20T14:41:41.355+0000",
                    "started": "2021-01-20T14:41:41.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538470",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561038192\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -963,11 +968,130 @@ impl MutableBuffer {\n \n     /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n     #[inline]\n-    pub fn extend(&mut self, additional: usize) {\n+    pub fn extend_zeros(&mut self, additional: usize) {\n         self.resize(self.len + additional, 0);\n     }\n }\n \n+/// # Safety\n+/// `ptr` must be allocated for `old_capacity`.\n+#[inline]\n+unsafe fn reallocate(\n+    ptr: NonNull<u8>,\n+    old_capacity: usize,\n+    new_capacity: usize,\n+) -> (NonNull<u8>, usize) {\n+    let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity);\n+    let new_capacity = std::cmp::max(new_capacity, old_capacity * 2);\n+    let ptr = memory::reallocate(ptr, old_capacity, new_capacity);\n+    (ptr, new_capacity)\n+}\n+\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+impl MutableBuffer {\n+    #[inline]\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        // this is necessary because of https://github.com/rust-lang/rust/issues/32155\n+        let (mut ptr, mut capacity, mut len) = (self.data, self.capacity, self.len);\n+        let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if len >= capacity {\n\nReview comment:\n       @jorgecarleitao Line 1011, the test condition may cause overflow, perhaps should increase `len` by `size` before the comparison. The following test verified this problem:\r\n   \r\n       #[test]\r\n       fn mutable_extend_from_iter_write_overflow() {\r\n           let mut buf = MutableBuffer::new(0);\r\n   \r\n           buf.extend(vec![1_u8; 63]);\r\n           assert_eq!(63, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n   \r\n           buf.extend(vec![1_u16; 1]);\r\n           assert_eq!(65, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n       }\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T15:10:35.754+0000",
                    "updated": "2021-01-20T15:10:35.754+0000",
                    "started": "2021-01-20T15:10:35.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538491",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561038192\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -963,11 +968,130 @@ impl MutableBuffer {\n \n     /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n     #[inline]\n-    pub fn extend(&mut self, additional: usize) {\n+    pub fn extend_zeros(&mut self, additional: usize) {\n         self.resize(self.len + additional, 0);\n     }\n }\n \n+/// # Safety\n+/// `ptr` must be allocated for `old_capacity`.\n+#[inline]\n+unsafe fn reallocate(\n+    ptr: NonNull<u8>,\n+    old_capacity: usize,\n+    new_capacity: usize,\n+) -> (NonNull<u8>, usize) {\n+    let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity);\n+    let new_capacity = std::cmp::max(new_capacity, old_capacity * 2);\n+    let ptr = memory::reallocate(ptr, old_capacity, new_capacity);\n+    (ptr, new_capacity)\n+}\n+\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+impl MutableBuffer {\n+    #[inline]\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        // this is necessary because of https://github.com/rust-lang/rust/issues/32155\n+        let (mut ptr, mut capacity, mut len) = (self.data, self.capacity, self.len);\n+        let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if len >= capacity {\n\nReview comment:\n       @jorgecarleitao Line 1011, the test condition may cause overflow, perhaps should increase `len` by `size` before the comparison. The following test shows this problem:\r\n   \r\n   ```rust\r\n       #[test]\r\n       fn mutable_extend_from_iter_write_overflow() {\r\n           let mut buf = MutableBuffer::new(0);\r\n   \r\n           buf.extend(vec![1_u8; 63]);\r\n           assert_eq!(63, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n   \r\n           buf.extend(vec![1_u16; 1]);\r\n           assert_eq!(65, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n       }\r\n   ```\r\n   \r\n    I ran it my computer for several times, all passed, but you can see the `len` is bigger than `capacity`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T15:14:06.808+0000",
                    "updated": "2021-01-20T15:14:06.808+0000",
                    "started": "2021-01-20T15:14:06.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538493",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561038192\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -963,11 +968,130 @@ impl MutableBuffer {\n \n     /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n     #[inline]\n-    pub fn extend(&mut self, additional: usize) {\n+    pub fn extend_zeros(&mut self, additional: usize) {\n         self.resize(self.len + additional, 0);\n     }\n }\n \n+/// # Safety\n+/// `ptr` must be allocated for `old_capacity`.\n+#[inline]\n+unsafe fn reallocate(\n+    ptr: NonNull<u8>,\n+    old_capacity: usize,\n+    new_capacity: usize,\n+) -> (NonNull<u8>, usize) {\n+    let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity);\n+    let new_capacity = std::cmp::max(new_capacity, old_capacity * 2);\n+    let ptr = memory::reallocate(ptr, old_capacity, new_capacity);\n+    (ptr, new_capacity)\n+}\n+\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+impl MutableBuffer {\n+    #[inline]\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        // this is necessary because of https://github.com/rust-lang/rust/issues/32155\n+        let (mut ptr, mut capacity, mut len) = (self.data, self.capacity, self.len);\n+        let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if len >= capacity {\n\nReview comment:\n       @jorgecarleitao Line 1011, the test condition may cause overflow, perhaps should increase `len` by `size` before the comparison. The following test shows this problem:\r\n   \r\n   ```rust\r\n       #[test]\r\n       fn mutable_extend_from_iter_write_overflow() {\r\n           let mut buf = MutableBuffer::new(0);\r\n   \r\n           buf.extend(vec![1_u8; 63]);\r\n           assert_eq!(63, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n   \r\n           buf.extend(vec![1_u16; 1]);\r\n           assert_eq!(65, buf.len());\r\n           assert_eq!(64, buf.capacity());\r\n       }\r\n   ```\r\n   \r\n    I had run this test for several times, all passed, but you can see the `len` is bigger than `capacity`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T15:15:05.823+0000",
                    "updated": "2021-01-20T15:15:05.823+0000",
                    "started": "2021-01-20T15:15:05.823+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538495",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#issuecomment-763763668\n\n\n   > Looks like there is an error in the SIMD tests https://github.com/apache/arrow/pull/9235/checks?\r\n   \r\n   `cargo test --doc --package arrow -- buffer::MutableBuffer::extend_from_trusted_len_iter --nocapture`  reproduces this error.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T16:29:22.579+0000",
                    "updated": "2021-01-20T16:29:22.579+0000",
                    "started": "2021-01-20T16:29:22.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538537",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrubeck commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561128399\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -963,11 +968,131 @@ impl MutableBuffer {\n \n     /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n     #[inline]\n-    pub fn extend(&mut self, additional: usize) {\n+    pub fn extend_zeros(&mut self, additional: usize) {\n         self.resize(self.len + additional, 0);\n     }\n }\n \n+/// # Safety\n+/// `ptr` must be allocated for `old_capacity`.\n+#[inline]\n+unsafe fn reallocate(\n+    ptr: NonNull<u8>,\n+    old_capacity: usize,\n+    new_capacity: usize,\n+) -> (NonNull<u8>, usize) {\n+    let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity);\n+    let new_capacity = std::cmp::max(new_capacity, old_capacity * 2);\n+    let ptr = memory::reallocate(ptr, old_capacity, new_capacity);\n+    (ptr, new_capacity)\n+}\n+\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+impl MutableBuffer {\n+    #[inline]\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        // this is necessary because of https://github.com/rust-lang/rust/issues/32155\n+        let (mut ptr, mut capacity, mut len) = (self.data, self.capacity, self.len);\n+        let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if len + size >= capacity {\n+                let (lower, _) = iterator.size_hint();\n+                let additional = (lower + 1) * size;\n+                let (new_ptr, new_capacity) =\n+                    unsafe { reallocate(ptr, capacity, len + additional) };\n\nReview comment:\n       This is unsound if unwinding is enabled, because `Iterator::next` may panic on a future iteration of the loop, causing `self` to be dropped while its `ptr` and `capacity` are incorrect.  This is why a drop guard like `SetLenOnDrop` is needed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T17:03:29.051+0000",
                    "updated": "2021-01-20T17:03:29.051+0000",
                    "started": "2021-01-20T17:03:29.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538549",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mqy commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561133856\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -1008,7 +1008,7 @@ impl MutableBuffer {\n         let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n \n         while let Some(item) = iterator.next() {\n-            if len >= capacity {\n+            if len + size >= capacity {\n\nReview comment:\n       change >= to >?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T17:11:52.753+0000",
                    "updated": "2021-01-20T17:11:52.753+0000",
                    "started": "2021-01-20T17:11:52.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538558",
                    "issueId": "13352923"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/worklog/538581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9235:\nURL: https://github.com/apache/arrow/pull/9235#discussion_r561163855\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -963,11 +968,131 @@ impl MutableBuffer {\n \n     /// Extends the buffer by `additional` bytes equal to `0u8`, incrementing its capacity if needed.\n     #[inline]\n-    pub fn extend(&mut self, additional: usize) {\n+    pub fn extend_zeros(&mut self, additional: usize) {\n         self.resize(self.len + additional, 0);\n     }\n }\n \n+/// # Safety\n+/// `ptr` must be allocated for `old_capacity`.\n+#[inline]\n+unsafe fn reallocate(\n+    ptr: NonNull<u8>,\n+    old_capacity: usize,\n+    new_capacity: usize,\n+) -> (NonNull<u8>, usize) {\n+    let new_capacity = bit_util::round_upto_multiple_of_64(new_capacity);\n+    let new_capacity = std::cmp::max(new_capacity, old_capacity * 2);\n+    let ptr = memory::reallocate(ptr, old_capacity, new_capacity);\n+    (ptr, new_capacity)\n+}\n+\n+impl<A: ArrowNativeType> Extend<A> for MutableBuffer {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n+        self.extend_from_iter(iterator)\n+    }\n+}\n+\n+impl MutableBuffer {\n+    #[inline]\n+    fn extend_from_iter<T: ArrowNativeType, I: Iterator<Item = T>>(\n+        &mut self,\n+        mut iterator: I,\n+    ) {\n+        let size = std::mem::size_of::<T>();\n+\n+        // this is necessary because of https://github.com/rust-lang/rust/issues/32155\n+        let (mut ptr, mut capacity, mut len) = (self.data, self.capacity, self.len);\n+        let mut dst = unsafe { ptr.as_ptr().add(len) as *mut T };\n+\n+        while let Some(item) = iterator.next() {\n+            if len + size >= capacity {\n+                let (lower, _) = iterator.size_hint();\n+                let additional = (lower + 1) * size;\n+                let (new_ptr, new_capacity) =\n+                    unsafe { reallocate(ptr, capacity, len + additional) };\n\nReview comment:\n       Thanks a lot. I do agree that this is unsound atm.\r\n   \r\n   Note that arrow does not support complex structs on its buffers, which means that we never need to call `drop` on the elements. Under this, do we still need a valid `len`? I understood that the `len` was only needed because we could have to call drop on the elements up to `len`.\r\n   \r\n   With `SetLenOnDrop`, we borrow a mutable reference to `self.len`, which wont allow us to call `self.reserve` inside the `if`. Could this be the reason why `SetLenOnDrop` is not being used on the `extend_desugared` (which in my understanding this part of the code is reproducing)?\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-20T17:58:14.365+0000",
                    "updated": "2021-01-20T17:58:14.365+0000",
                    "started": "2021-01-20T17:58:14.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "538581",
                    "issueId": "13352923"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3d64cc8a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@799e48d2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35503826[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3e033e86[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32e9dcb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@41dee77e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75fb666b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@52ab915c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e5bc3fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1888345c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36eec118[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@384187e8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Jan 23 11:04:45 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-23T11:04:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11291/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-17T18:27:54.000+0000",
        "updated": "2021-01-23T11:04:52.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] implement extend for MutableBuffer (from iterator)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13352923/comment/17270623",
                    "id": "17270623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9235\n[https://github.com/apache/arrow/pull/9235]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-01-23T11:04:45.243+0000",
                    "updated": "2021-01-23T11:04:45.243+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0mp9c:",
        "customfield_12314139": null
    }
}