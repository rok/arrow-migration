{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13425015",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015",
    "key": "ARROW-15471",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15471/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/729898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467\n\n\n   This PR implements extension type support and registration in the R bindings (as has been possible in the Python bindings for some time). The details still need to be worked out, but we at least have a working pattern:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(R6)\r\n   \r\n   SomeExtensionTypeSubclass <- R6Class(\r\n     \"SomeExtensionTypeSubclass\", inherit = arrow:::ExtensionType,\r\n     public = list(\r\n       some_custom_method = function() {\r\n         private$some_custom_field\r\n       },\r\n       \r\n       .Deserialize = function(storage_type, extension_name, extension_metadata) {\r\n         private$some_custom_field <- head(extension_metadata, 5)\r\n       }\r\n     ),\r\n     private = list(\r\n       some_custom_field = NULL\r\n     )\r\n   )\r\n   \r\n   SomeExtensionArraySubclass <- R6Class(\r\n     \"SomeExtensionArraySubclass\", inherit = arrow:::ExtensionArray,\r\n     public = list(\r\n       some_custom_method = function() {\r\n         self$type$some_custom_method()\r\n       }\r\n     )\r\n   )\r\n   \r\n   type <- arrow:::MakeExtensionType(\r\n     int32(),\r\n     \"some_extension_subclass\",\r\n     charToRaw(\"some custom metadata\"),\r\n     type_class = SomeExtensionTypeSubclass,\r\n     array_class = SomeExtensionArraySubclass\r\n   )\r\n   \r\n   \r\n   arrow:::RegisterExtensionType(type)\r\n   \r\n   # survives the C API round trip\r\n   ptr_type <- arrow:::allocate_arrow_schema()\r\n   type$export_to_c(ptr_type)\r\n   type2 <- arrow:::DataType$import_from_c(ptr_type)\r\n   \r\n   \r\n   type2\r\n   #> SomeExtensionTypeSubclass\r\n   #> SomeExtensionTypeSubclass <some custom metadata>\r\n   type2$some_custom_method()\r\n   #> [1] 73 6f 6d 65 20\r\n   \r\n   (array <- type$WrapArray(Array$create(1:10)))\r\n   #> SomeExtensionArraySubclass\r\n   #> <SomeExtensionTypeSubclass <some custom metadata>>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5,\r\n   #>   6,\r\n   #>   7,\r\n   #>   8,\r\n   #>   9,\r\n   #>   10\r\n   #> ]\r\n   array$some_custom_method()\r\n   #> [1] 73 6f 6d 65 20\r\n   \r\n   ptr_array <- arrow:::allocate_arrow_array()\r\n   array$export_to_c(ptr_array, ptr_type)\r\n   (array2 <- Array$import_from_c(ptr_array, ptr_type))\r\n   #> SomeExtensionArraySubclass\r\n   #> <SomeExtensionTypeSubclass <some custom metadata>>\r\n   #> [\r\n   #>   1,\r\n   #>   2,\r\n   #>   3,\r\n   #>   4,\r\n   #>   5,\r\n   #>   6,\r\n   #>   7,\r\n   #>   8,\r\n   #>   9,\r\n   #>   10\r\n   #> ]\r\n   \r\n   arrow:::delete_arrow_schema(ptr_type)\r\n   arrow:::delete_arrow_array(ptr_array)\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-18 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T22:23:37.820+0000",
                    "updated": "2022-02-18T22:23:37.820+0000",
                    "started": "2022-02-18T22:23:37.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729898",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/729899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1045274054\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T22:23:50.352+0000",
                    "updated": "2022-02-18T22:23:50.352+0000",
                    "started": "2022-02-18T22:23:50.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729899",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/735053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r817235734\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,154 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+ExtensionArray <- R6Class(\"ExtensionArray\",\n+  inherit = Array,\n+  public = list(\n+    storage = function() {\n+      ExtensionArray__storage(self)\n+    }\n+  )\n+)\n+\n+ExtensionArray$.default_new <- ExtensionArray$new\n+ExtensionArray$new <- function(xp) {\n+  superclass <- ExtensionArray$.default_new(xp)\n+  registered_type <- extension_type_registry[[superclass$type$extension_name()]]\n+  if (is.null(registered_type)) {\n+    return(superclass)\n+  }\n+\n+  class <- registered_type$.__enclos_env__$private$array_class\n+  if (inherits(superclass, class$classname)) {\n+    return(superclass)\n+  }\n+\n+  class$new(xp)\n+}\n+\n+ExtensionType <- R6Class(\"ExtensionType\",\n+  inherit = DataType,\n+  public = list(\n+    initialize = function(xp) {\n+      super$initialize(xp)\n+      self$.Deserialize(\n+        self$storage_type(),\n+        self$extension_name(),\n+        self$Serialize()\n+      )\n+    },\n+\n+    .set_r6_constructors = function(type_class, array_class) {\n+      private$type_class <- type_class\n+      private$array_class <- array_class\n+    },\n+\n+    storage_type = function() {\n+      ExtensionType__storage_type(self)\n+    },\n+\n+    storage_id = function() {\n+      self$storage_type()$id\n+    },\n+\n+    extension_name = function() {\n+      ExtensionType__extension_name(self)\n+    },\n+\n+    Serialize = function() {\n+      ExtensionType__Serialize(self)\n+    },\n+\n+    MakeArray = function(data) {\n+      assert_is(data, \"ArrayData\")\n+      ExtensionType__MakeArray(self, data)\n+    },\n+\n+    WrapArray = function(array) {\n+      assert_is(array, \"Array\")\n+      self$MakeArray(array$data())\n+    },\n+\n+    ToString = function() {\n+      metadata_utf8 <- rawToChar(self$Serialize())\n+      Encoding(metadata_utf8) <- \"UTF-8\"\n+      paste0(class(self)[1], \" <\", metadata_utf8, \">\")\n+    },\n+\n+    .Deserialize = function(storage_type, extension_name, extension_metadata) {\n+      # Do nothing by default but allow other classes to override this method\n+      # to populate R6 class members.\n+    }\n+  ),\n+\n+  private = list(\n+    type_class = NULL,\n+    array_class = NULL\n+  )\n+)\n+\n+ExtensionType$.default_new <- ExtensionType$new\n+ExtensionType$new <- function(xp) {\n+  superclass <- ExtensionType$.default_new(xp)\n+  registered_type <- extension_type_registry[[superclass$extension_name()]]\n+  if (is.null(registered_type)) {\n+    return(superclass)\n+  }\n+\n+  registered_type$.__enclos_env__$private$type_class$new(xp)\n+}\n+\n+\n+MakeExtensionType <- function(storage_type,\n+                              extension_name, extension_metadata,\n\nReview comment:\n       Very minor\r\n   \r\n   ```suggestion\r\n                                 extension_name, \r\n                                 extension_metadata,\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-02T00:03:51.227+0000",
                    "updated": "2022-03-02T00:03:51.227+0000",
                    "started": "2022-03-02T00:03:51.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735053",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/744342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r830264810\n\n\n\n##########\nFile path: r/R/arrow-package.R\n##########\n@@ -95,6 +100,7 @@\n   }\n }\n \n+\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   \r\n   Nit pick: undo whitespace change\n\n##########\nFile path: r/R/arrow-tabular.R\n##########\n@@ -98,6 +98,40 @@ ArrowTabular <- R6Class(\"ArrowTabular\",\n   )\n )\n \n+tabular_as_data_frame_common <- function(x, base) {\n\nReview comment:\n       `base` here is a function that is either `Table__to_dataframe ` or `RecordBatch__to_dataframe` yeah? Basically the constructor to be used if this isn't an extension type? \r\n   \r\n   It might be nice to have a slightly more descriptive name for that?\r\n   \n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n\nReview comment:\n       ```suggestion\r\n   #' @include arrow-package.R\r\n   \r\n   #' @title class arrow::ExtensionArray\r\n   ```\r\n   \r\n   These should be separate, yeah?\n\n##########\nFile path: r/R/arrow-tabular.R\n##########\n@@ -98,6 +98,40 @@ ArrowTabular <- R6Class(\"ArrowTabular\",\n   )\n )\n \n+tabular_as_data_frame_common <- function(x, base) {\n+  x_cols <- names(x)\n+  col_is_extension <- vapply(\n+    x_cols,\n+    function(col) inherits(x$schema[[col]]$type, \"ExtensionType\"),\n+    logical(1)\n+  )\n+\n+  if (!any(col_is_extension)) {\n\nReview comment:\n       ```suggestion\r\n     # If no columns are ExtensionTypes, we use our standard constructor\r\n     if (!any(col_is_extension)) {\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T19:04:36.541+0000",
                    "updated": "2022-03-18T19:04:36.541+0000",
                    "started": "2022-03-18T19:04:36.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744342",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r829146168\n\n\n\n##########\nFile path: r/R/arrow-tabular.R\n##########\n@@ -98,6 +98,40 @@ ArrowTabular <- R6Class(\"ArrowTabular\",\n   )\n )\n \n+tabular_as_data_frame_common <- function(x, base) {\n\nReview comment:\n       I'm worried about this implementation because it's unintuitive...this gets used by `Table$to_data_frame()` and `RecordBatch$to_data_frame()` because both of those call into C++ to do their thing (but the C++ implementation doesn't know about extension types. Maybe it should?). Pretty much everwhere else we avoid looping over columns in R but that might be better than added complexity at the C++ level?\n\n##########\nFile path: r/src/extension.cpp\n##########\n@@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <thread>\n+\n+#include <arrow/array.h>\n+#include <arrow/extension_type.h>\n+#include <arrow/type.h>\n+\n+// A wrapper around arrow::ExtensionType that allows R to register extension\n+// types whose Deserialize, ExtensionEquals, and Serialize methods are\n+// in meanintfully handled at the R level. At the C++ level, the type is\n+// already serialized to minimize calls to R from C++.\n+//\n+// Using a std::shared_ptr<> to wrap a cpp11::sexp type is unusual, but we\n+// need it here to avoid calling the copy constructor from another thread,\n+// since this might call into the R API. If we don't do this, we get crashes\n+// when reading a multi-file Dataset.\n\nReview comment:\n       It's true that I need to use `std::shared_ptr<cpp11::environment>` to store a the `r6_class_` field here instead of `cpp11::environment` to avoid a crash, but I'm not entirely sure I'm using `std::shared_ptr` correctly.\n\n##########\nFile path: r/src/extension.cpp\n##########\n@@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <thread>\n+\n+#include <arrow/array.h>\n+#include <arrow/extension_type.h>\n+#include <arrow/type.h>\n+\n+// A wrapper around arrow::ExtensionType that allows R to register extension\n+// types whose Deserialize, ExtensionEquals, and Serialize methods are\n+// in meanintfully handled at the R level. At the C++ level, the type is\n+// already serialized to minimize calls to R from C++.\n+//\n+// Using a std::shared_ptr<> to wrap a cpp11::sexp type is unusual, but we\n+// need it here to avoid calling the copy constructor from another thread,\n+// since this might call into the R API. If we don't do this, we get crashes\n+// when reading a multi-file Dataset.\n+class RExtensionType : public arrow::ExtensionType {\n+ public:\n+  RExtensionType(const std::shared_ptr<arrow::DataType> storage_type,\n+                 std::string extension_name, std::string extension_metadata,\n+                 std::shared_ptr<cpp11::environment> r6_class,\n+                 std::thread::id creation_thread)\n+      : arrow::ExtensionType(storage_type),\n+        extension_name_(extension_name),\n+        extension_metadata_(extension_metadata),\n+        r6_class_(r6_class),\n+        creation_thread_(creation_thread) {}\n+\n+  std::string extension_name() const { return extension_name_; }\n+\n+  bool ExtensionEquals(const arrow::ExtensionType& other) const;\n+\n+  std::shared_ptr<arrow::Array> MakeArray(std::shared_ptr<arrow::ArrayData> data) const;\n+\n+  arrow::Result<std::shared_ptr<arrow::DataType>> Deserialize(\n+      std::shared_ptr<arrow::DataType> storage_type,\n+      const std::string& serialized_data) const;\n+\n+  std::string Serialize() const { return extension_metadata_; }\n+\n+  std::string ToString() const;\n+\n+  std::unique_ptr<RExtensionType> Clone() const;\n+\n+  cpp11::environment r6_class() const { return *r6_class_; }\n+\n+  cpp11::environment r6_instance(std::shared_ptr<arrow::DataType> storage_type,\n+                                 const std::string& serialized_data) const;\n+\n+  cpp11::environment r6_instance() const {\n+    return r6_instance(storage_type(), Serialize());\n+  }\n+\n+ private:\n+  std::string extension_name_;\n+  std::string extension_metadata_;\n+  std::string cached_to_string_;\n+  std::shared_ptr<cpp11::environment> r6_class_;\n+  std::thread::id creation_thread_;\n+\n+  arrow::Status assert_r_thread() const {\n+    if (std::this_thread::get_id() == creation_thread_) {\n+      return arrow::Status::OK();\n+    } else {\n+      return arrow::Status::ExecutionError(\"RExtensionType <\", extension_name_,\n+                                           \"> attempted to call into R \",\n+                                           \"from a non-R thread\");\n+    }\n+  }\n+};\n+\n+bool RExtensionType::ExtensionEquals(const arrow::ExtensionType& other) const {\n+  // Avoid materializing the R6 instance if at all possible, since this is slow\n+  // and in some cases not possible due to threading\n+  if (other.extension_name() != extension_name()) {\n+    return false;\n+  }\n+\n+  if (other.Serialize() == Serialize()) {\n+    return true;\n+  }\n+\n+  // With any ambiguity, we need to materialize the R6 instance and call its\n+  // ExtensionEquals method. We can't do this on the non-R thread.\n+  arrow::Status is_r_thread = assert_r_thread();\n+  if (!assert_r_thread().ok()) {\n+    throw std::runtime_error(is_r_thread.message());\n+  }\n+\n+  cpp11::environment instance = r6_instance();\n+  cpp11::function instance_ExtensionEquals(instance[\".ExtensionEquals\"]);\n+\n+  std::shared_ptr<DataType> other_shared =\n+      ValueOrStop(other.Deserialize(other.storage_type(), other.Serialize()));\n+  cpp11::sexp other_r6 = cpp11::to_r6<DataType>(other_shared, \"ExtensionType\");\n+\n+  cpp11::logicals result(instance_ExtensionEquals(other_r6));\n+  return cpp11::as_cpp<bool>(result);\n+}\n+\n+std::shared_ptr<arrow::Array> RExtensionType::MakeArray(\n+    std::shared_ptr<arrow::ArrayData> data) const {\n+  std::shared_ptr<arrow::ArrayData> new_data = data->Copy();\n+  std::unique_ptr<RExtensionType> cloned = Clone();\n+  new_data->type = std::shared_ptr<RExtensionType>(cloned.release());\n+  return std::make_shared<arrow::ExtensionArray>(new_data);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::DataType>> RExtensionType::Deserialize(\n+    std::shared_ptr<arrow::DataType> storage_type,\n+    const std::string& serialized_data) const {\n+  std::unique_ptr<RExtensionType> cloned = Clone();\n+  cloned->storage_type_ = storage_type;\n+  cloned->extension_metadata_ = serialized_data;\n+\n+  // We probably should create an ephemeral R6 instance here, which will call\n+  // the R6 instance's .Deserialize() method, possibly erroring when the metadata is\n+  // invalid or the deserialized values are invalid. When there is an error it will be\n+  // confusing, since it will only occur when the result surfaces to R\n+  // (which might be much later). Unfortunately, the Deserialize() method gets\n+  // called from other threads frequently (e.g., when reading a multi-file Dataset),\n+  // and we get crashes if we try this. As a compromise, we call this method when we can\n+  // to maximize the likelihood an error is surfaced.\n+  if (assert_r_thread().ok()) {\n+    cloned->r6_instance();\n+  }\n\nReview comment:\n       This is the main threading concern...the `Deserialize()` method gets called from other threads frequently but unless it's been passed through an R6 instance in R, we don't know if the metadata is valid or not.\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n+#'\n+#' @usage NULL\n+#' @format NULL\n+#' @docType class\n+#'\n+#' @section Methods:\n+#'\n+#' The `ExtensionArray` class inherits from `Array`, but also provides\n+#' access to the underlying storage of the extension.\n+#'\n+#' - `$storage()`: Returns the underlying [Array] used to store\n+#'   values.\n+#'\n+#' The `ExtensionArray` is not intended to be subclassed for extension\n+#' types.\n+#'\n+#' @rdname ExtensionArray\n+#' @name ExtensionArray\n+ExtensionArray <- R6Class(\"ExtensionArray\",\n+  inherit = Array,\n+  public = list(\n+    storage = function() {\n+      ExtensionArray__storage(self)\n+    },\n+\n+    as_vector = function() {\n+      self$type$.array_as_vector(self)\n+    }\n+  )\n+)\n+\n+ExtensionArray$create <- function(x, type) {\n+  assert_is(type, \"ExtensionType\")\n+  if (inheritx(x, \"ExtensionArray\") && type$Equals(x$type)) {\n+    return(x)\n+  }\n+\n+  storage <- Array$create(x, type = type$storage_type())\n+  type$WrapArray(storage)\n+}\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionType\n+#'\n+#' @usage NULL\n+#' @format NULL\n+#' @docType class\n+#'\n+#' @section Methods:\n+#'\n+#' The `ExtensionType` class inherits from `DataType`, but also defines\n+#' extra methods specific to extension types:\n+#'\n+#' - `$storage_type()`: Returns the underlying [DataType] used to store\n+#'   values.\n+#' - `$storage_id()`: Returns the [Type] identifier corresponding to the\n+#'   `$storage_type()`.\n+#' - `$extension_name()`: Returns the extension name.\n+#' - `$Serialize()`: Returns the serialized version of the extension metadata\n+#'   as a [raw()] vector.\n+#' - `$WrapArray(array)`: Wraps a storage [Array] into an [ExtensionArray]\n+#'   with this extension type.\n+#'\n+#' In addition, subclasses may override the following methos to customize\n+#' the behaviour of extension classes.\n+#'\n+#' - `$.Deserialize(storage_type, extension_name, extension_metadata)`\n+#'   This method is called when a new [ExtensionType]\n+#'   is initialized and is responsible for parsing and validating\n+#'   the serialized `extension_metadata` (a [raw()] vector)\n+#'   such that its contents can be inspected by fields and/or methods\n+#'   of the R6 ExtensionType subclass. Implementations must also check the\n+#'   `storage_type` to make sure it is compatible with the extension type.\n+#' - `$.array_as_vector(extension_array)`: Convert an [Array] to an R\n+#'   vector. This method is called by [as.vector()] on [ExtensionArray]\n+#'   objects or when a [RecordBatch] containing an [ExtensionArray] is\n+#'   converted to a [data.frame()]. The default method returns the converted\n+#'   storage array.\n+#' - `$.chunked_array_as_vector(chunked_array)`: Convert a [ChunkedArray]\n+#'   to an R vector. This method is called by [as.vector()] on a [ChunkedArray]\n+#'   whose type matches this extension type or when a [Table] containing\n+#'   such a column is converted to a [data.frame()]. The default method\n+#'   returns the converted version of the equivalent storage arrays\n+#'   as a [ChunkedArray].\n+#' - `$.ToString()` Return a string representation that will be printed\n+#'   to the console when this type or an Array of this type is printed.\n+#'\n+#' @rdname ExtensionType\n+#' @name ExtensionType\n+#' @export\n+ExtensionType <- R6Class(\"ExtensionType\",\n+  inherit = DataType,\n+  public = list(\n+\n+    # In addition to the initialization that occurs for all\n+    # ArrowObject instances, we call .Deserialize(), which can\n+    # be overridden to populate custom fields\n+    initialize = function(xp) {\n+      super$initialize(xp)\n+      self$.Deserialize(\n+        self$storage_type(),\n+        self$extension_name(),\n+        self$Serialize()\n+      )\n+    },\n+\n+    # Because of how C++ shared_ptr<> objects are converted to R objects,\n+    # the initial object that is instantiated will be of this class\n+    # (ExtensionType), but the R6Class object that was registered is\n+    # available from C++. We need this in order to produce the correct\n+    # R6 subclass when a shared_ptr<ExtensionType> is returned to R.\n+    r6_class = function() {\n+      ExtensionType__r6_class(self)\n+    },\n+\n+    storage_type = function() {\n+      ExtensionType__storage_type(self)\n+    },\n+\n+    storage_id = function() {\n+      self$storage_type()$id\n+    },\n+\n+    extension_name = function() {\n+      ExtensionType__extension_name(self)\n+    },\n+\n+    Serialize = function() {\n+      ExtensionType__Serialize(self)\n+    },\n+\n+    MakeArray = function(data) {\n+      assert_is(data, \"ArrayData\")\n+      ExtensionType__MakeArray(self, data)\n+    },\n+\n+    WrapArray = function(array) {\n+      assert_is(array, \"Array\")\n+      self$MakeArray(array$data())\n+    },\n+\n\nReview comment:\n       I made up the \"dot prefix means protected method\" thing here...I don't know if there is a convention for \"protected\"-style methods in R6 but would be happy to use it if it exists.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T12:28:40.812+0000",
                    "updated": "2022-03-21T12:28:40.812+0000",
                    "started": "2022-03-21T12:28:40.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745013",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r831050623\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n\nReview comment:\n       I actually have no idea what `#' @include arrow-package.R` is doing (it was copy/pasted from the DataType documentation). Do you know what it does?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T12:29:56.568+0000",
                    "updated": "2022-03-21T12:29:56.568+0000",
                    "started": "2022-03-21T12:29:56.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745014",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r831053629\n\n\n\n##########\nFile path: r/src/extension.cpp\n##########\n@@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <thread>\n+\n+#include <arrow/array.h>\n+#include <arrow/extension_type.h>\n+#include <arrow/type.h>\n+\n+// A wrapper around arrow::ExtensionType that allows R to register extension\n+// types whose Deserialize, ExtensionEquals, and Serialize methods are\n+// in meanintfully handled at the R level. At the C++ level, the type is\n+// already serialized to minimize calls to R from C++.\n+//\n+// Using a std::shared_ptr<> to wrap a cpp11::sexp type is unusual, but we\n+// need it here to avoid calling the copy constructor from another thread,\n+// since this might call into the R API. If we don't do this, we get crashes\n+// when reading a multi-file Dataset.\n+class RExtensionType : public arrow::ExtensionType {\n+ public:\n+  RExtensionType(const std::shared_ptr<arrow::DataType> storage_type,\n+                 std::string extension_name, std::string extension_metadata,\n+                 std::shared_ptr<cpp11::environment> r6_class,\n+                 std::thread::id creation_thread)\n+      : arrow::ExtensionType(storage_type),\n+        extension_name_(extension_name),\n+        extension_metadata_(extension_metadata),\n+        r6_class_(r6_class),\n+        creation_thread_(creation_thread) {}\n+\n+  std::string extension_name() const { return extension_name_; }\n+\n+  bool ExtensionEquals(const arrow::ExtensionType& other) const;\n+\n+  std::shared_ptr<arrow::Array> MakeArray(std::shared_ptr<arrow::ArrayData> data) const;\n+\n+  arrow::Result<std::shared_ptr<arrow::DataType>> Deserialize(\n+      std::shared_ptr<arrow::DataType> storage_type,\n+      const std::string& serialized_data) const;\n+\n+  std::string Serialize() const { return extension_metadata_; }\n+\n+  std::string ToString() const;\n+\n+  std::unique_ptr<RExtensionType> Clone() const;\n+\n+  cpp11::environment r6_class() const { return *r6_class_; }\n+\n+  cpp11::environment r6_instance(std::shared_ptr<arrow::DataType> storage_type,\n+                                 const std::string& serialized_data) const;\n+\n+  cpp11::environment r6_instance() const {\n+    return r6_instance(storage_type(), Serialize());\n+  }\n+\n+ private:\n+  std::string extension_name_;\n+  std::string extension_metadata_;\n+  std::string cached_to_string_;\n+  std::shared_ptr<cpp11::environment> r6_class_;\n+  std::thread::id creation_thread_;\n+\n+  arrow::Status assert_r_thread() const {\n+    if (std::this_thread::get_id() == creation_thread_) {\n+      return arrow::Status::OK();\n+    } else {\n+      return arrow::Status::ExecutionError(\"RExtensionType <\", extension_name_,\n+                                           \"> attempted to call into R \",\n+                                           \"from a non-R thread\");\n+    }\n+  }\n+};\n+\n+bool RExtensionType::ExtensionEquals(const arrow::ExtensionType& other) const {\n+  // Avoid materializing the R6 instance if at all possible, since this is slow\n+  // and in some cases not possible due to threading\n+  if (other.extension_name() != extension_name()) {\n+    return false;\n+  }\n+\n+  if (other.Serialize() == Serialize()) {\n+    return true;\n+  }\n+\n+  // With any ambiguity, we need to materialize the R6 instance and call its\n+  // ExtensionEquals method. We can't do this on the non-R thread.\n+  arrow::Status is_r_thread = assert_r_thread();\n+  if (!assert_r_thread().ok()) {\n+    throw std::runtime_error(is_r_thread.message());\n+  }\n\nReview comment:\n       This is another threading concern...the data types can't be checked for equality if the serialized data is not identical and the comparison occurs on another thread. I think this might happen when reading a multi-file dataset if some of the files were written differently.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T12:33:41.412+0000",
                    "updated": "2022-03-21T12:33:41.412+0000",
                    "started": "2022-03-21T12:33:41.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745017",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r831463758\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n\nReview comment:\n       It changes the collation order to make sure that this file is marked as being after arrow-package.R. \r\n   \r\n   IME, I've always put them up at the top of this file (since they are only file level...), but it looks like we have places elsewhere where we add them in the function roxygen chunks like this, so we should probably follow that style?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T19:19:11.447+0000",
                    "updated": "2022-03-21T19:19:11.447+0000",
                    "started": "2022-03-21T19:19:11.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745384",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r831470356\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n+#'\n+#' @usage NULL\n+#' @format NULL\n+#' @docType class\n+#'\n+#' @section Methods:\n+#'\n+#' The `ExtensionArray` class inherits from `Array`, but also provides\n+#' access to the underlying storage of the extension.\n+#'\n+#' - `$storage()`: Returns the underlying [Array] used to store\n+#'   values.\n+#'\n+#' The `ExtensionArray` is not intended to be subclassed for extension\n+#' types.\n+#'\n+#' @rdname ExtensionArray\n+#' @name ExtensionArray\n+ExtensionArray <- R6Class(\"ExtensionArray\",\n+  inherit = Array,\n+  public = list(\n+    storage = function() {\n+      ExtensionArray__storage(self)\n+    },\n+\n+    as_vector = function() {\n+      self$type$.array_as_vector(self)\n+    }\n+  )\n+)\n+\n+ExtensionArray$create <- function(x, type) {\n+  assert_is(type, \"ExtensionType\")\n+  if (inheritx(x, \"ExtensionArray\") && type$Equals(x$type)) {\n\nReview comment:\n       ```suggestion\r\n     if (inherits(x, \"ExtensionArray\") && type$Equals(x$type)) {\r\n   ```\r\n   \r\n   This looks like a typo? Though I'm surprised it got through \u2014 though maybe there aren't tests for creating the extension array itself?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T19:27:52.006+0000",
                    "updated": "2022-03-21T19:27:52.006+0000",
                    "started": "2022-03-21T19:27:52.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745387",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1074365289\n\n\n   This is very exciting. Like I mentioned earlier, I wanted to try this out locally to see what this looks like. The example is a little contrived (and actually AFAIU, not totally accurate depending on the time of year!)\r\n   \r\n   Is it expected that roundtripping without the {vctrs} class wouldn't work? (Or did I do something wrong here?\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   # Is this the minimal structure to create a custom class like this?\r\n   KoreanAge <- R6::R6Class(\r\n     \"KoreanAge\", \r\n     inherit = ExtensionType,\r\n     public = list(\r\n       .array_as_vector = function(extension_array) {\r\n         extension_array$storage()$as_vector() + 1\r\n       }\r\n     )\r\n   )\r\n   \r\n   KoreanAge <- new_extension_type(\r\n     int32(),\r\n     \"KoreanAge\",\r\n     charToRaw(\"Korean Age, but stored as the western age value\"),\r\n     type_class = KoreanAge\r\n   )\r\n   \r\n   arr <- new_extension_array(c(0, 1, 2), KoreanAge)\r\n   \r\n   # What we expect (storage + 1)\r\n   as.vector(arr)\r\n   #> [1] 1 2 3\r\n   \r\n   # But roundtripping doesn't seem to work?\r\n   tf <- tempfile()\r\n   write_feather(arrow_table(col = arr), tf)\r\n   \r\n   tab <- read_feather(tf, as_data_frame = FALSE)\r\n   \r\n   type(tab$col)\r\n   #> Int32\r\n   #> int32\r\n   \r\n   as.vector(tab$col)\r\n   #> [1] 0 1 2\r\n   ```\r\n   \r\n   Also, should we export `ExtensionArray`? It doesn't look like it is, but we do have `Array` etc. exported. The docs additions are really great + descriptive. But I do wonder if an example (or two) would be nice, even if they were pretty trivial extension type like this (or some of the vctrs examples with percentages and the like).\r\n   \r\n   Do we have a follow on for what to do about printing the array? You'll see here you print the underlying storage type, which might be fine, but that has confused some folks before.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T20:10:43.414+0000",
                    "updated": "2022-03-21T20:10:43.414+0000",
                    "started": "2022-03-21T20:10:43.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745410",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r832101209\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n+#'\n+#' @usage NULL\n+#' @format NULL\n+#' @docType class\n+#'\n+#' @section Methods:\n+#'\n+#' The `ExtensionArray` class inherits from `Array`, but also provides\n+#' access to the underlying storage of the extension.\n+#'\n+#' - `$storage()`: Returns the underlying [Array] used to store\n+#'   values.\n+#'\n+#' The `ExtensionArray` is not intended to be subclassed for extension\n+#' types.\n+#'\n+#' @rdname ExtensionArray\n+#' @name ExtensionArray\n+ExtensionArray <- R6Class(\"ExtensionArray\",\n+  inherit = Array,\n+  public = list(\n+    storage = function() {\n+      ExtensionArray__storage(self)\n+    },\n+\n+    as_vector = function() {\n+      self$type$.array_as_vector(self)\n+    }\n+  )\n+)\n+\n+ExtensionArray$create <- function(x, type) {\n+  assert_is(type, \"ExtensionType\")\n+  if (inheritx(x, \"ExtensionArray\") && type$Equals(x$type)) {\n\nReview comment:\n       Good catch! (Now fixed and tested!)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T12:13:40.471+0000",
                    "updated": "2022-03-22T12:13:40.471+0000",
                    "started": "2022-03-22T12:13:40.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745773",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075121124\n\n\n   The key step that was missing for the roundtrip was `register_extension_type()`, which is needed so that Arrow C++ knows not to discard the extension metadata when it encounters the type! (see details).\r\n   \r\n   I should probably export `ExtensionArray` and use `ExtensionArray$create()` rather than `new_extension_array()` since it's more arrow-ish to do that. Maybe `ExtensionType$create()` instead of `new_extension_type()` is where extension type creation should go, too.\r\n   \r\n   Printing is a good point...definitely confusing in the case of an extension type!\r\n   \r\n   <details>\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   KoreanAge <- R6::R6Class(\r\n     \"KoreanAge\", \r\n     inherit = ExtensionType,\r\n     public = list(\r\n       .array_as_vector = function(extension_array) {\r\n         extension_array$storage()$as_vector() + 1\r\n       }\r\n     )\r\n   )\r\n   \r\n   # constructor helpers\r\n   korean_age <- function() {\r\n     new_extension_type(\r\n       int32(),\r\n       \"KoreanAge\",\r\n       charToRaw(\"Korean Age, but stored as the western age value\"),\r\n       type_class = KoreanAge\r\n     )\r\n   }\r\n   \r\n   korean_age_array <- function(age_korean) {\r\n     new_extension_array(age_korean - 1, korean_age())\r\n   }\r\n   \r\n   (arr <- korean_age_array(1:3))\r\n   #> ExtensionArray\r\n   #> <KoreanAge <Korean Age, but stored as the western age value>>\r\n   #> [\r\n   #>   0,\r\n   #>   1,\r\n   #>   2\r\n   #> ]\r\n   as.vector(arr)\r\n   #> [1] 1 2 3\r\n   \r\n   # you need to register the type for Arrow C++ to keep the extension type\r\n   # slash metadata when it encounters it at the C++ level (import from C\r\n   # and reading files)\r\n   register_extension_type(korean_age())\r\n   \r\n   tf <- tempfile()\r\n   write_feather(arrow_table(col = arr), tf)\r\n   \r\n   tab <- read_feather(tf, as_data_frame = FALSE)\r\n   \r\n   type(tab$col)\r\n   #> KoreanAge\r\n   #> KoreanAge <Korean Age, but stored as the western age value>\r\n   \r\n   as.vector(tab$col)\r\n   #> [1] 0 1 2\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T12:34:17.037+0000",
                    "updated": "2022-03-22T12:34:17.037+0000",
                    "started": "2022-03-22T12:34:17.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745784",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#discussion_r832121328\n\n\n\n##########\nFile path: r/R/extension.R\n##########\n@@ -0,0 +1,437 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include arrow-package.R\n+#' @title class arrow::ExtensionArray\n\nReview comment:\n       At the top of the file makes sense to me so I'll do it that way!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T12:35:53.823+0000",
                    "updated": "2022-03-22T12:35:53.823+0000",
                    "started": "2022-03-22T12:35:53.823+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745785",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075158797\n\n\n   Aaaah, yeah I totally missed `register_extension_type()` oops!\r\n   \r\n   Though weirdly(?) the `as.vector()` here is still wrong, it should be `1 2 3` (since the ->R conversion on this Extension type should have 1 added to it)\r\n   \r\n   ```\r\n   # you need to register the type for Arrow C++ to keep the extension type\r\n   # slash metadata when it encounters it at the C++ level (import from C\r\n   # and reading files)\r\n   register_extension_type(korean_age())\r\n   \r\n   tf <- tempfile()\r\n   write_feather(arrow_table(col = arr), tf)\r\n   \r\n   tab <- read_feather(tf, as_data_frame = FALSE)\r\n   \r\n   type(tab$col)\r\n   #> KoreanAge\r\n   #> KoreanAge <Korean Age, but stored as the western age value>\r\n   \r\n   as.vector(tab$col)\r\n   #> [1] 0 1 2\r\n   ```\r\n   \r\n   > I should probably export ExtensionArray and use ExtensionArray$create() rather than new_extension_array() since it's more arrow-ish to do that. \r\n   \r\n   In other places we've exposed both, which I think isn't bad here (it's slightly more API we manage, but having the R6 stuff exposed makes it easier to extend, and having the `foo_bar_baz` looks nicer | is a bit more friendly to users|doesn't force someone to learn all the R6 if what they want or need is available there)...\r\n   \r\n   > Maybe ExtensionType$create() instead of new_extension_type() is where extension type creation should go, too.\r\n   \r\n   Hmm, if we think it's ok to do the `new_extension_type()` inside of `ExtensionType$create()` I would agree that having a second step like that is unnecessary. Though with the proper docs having the R6 way of establishing these need to be slightly more verbose and you need to manage other things is inline with our other implementations of things like that (e.g. creating one's own filesystem, etc.)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T13:08:15.725+0000",
                    "updated": "2022-03-22T13:08:15.725+0000",
                    "started": "2022-03-22T13:08:15.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745811",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075190581\n\n\n   Ah yes, you *clearly* should have remembered to implement `KoreanAge$.chunked_array_as_vector()` (...I'll implement a better default method for that one...)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T13:37:57.071+0000",
                    "updated": "2022-03-22T13:37:57.071+0000",
                    "started": "2022-03-22T13:37:57.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745828",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075211801\n\n\n   > Printing is a good point...definitely confusing in the case of an extension type!\r\n   \r\n   I think we have to punt on the printing...there isn't a way to customize how other Array objects are printed (it all goes through `ChunkedArray::ToString()`/`Array::ToString()` at the C++ level and that is very specifically a `PrettyPrint()` C++ thing. We have some tools available in R to improve the printing of all ArrowTabular/ChunkedArray/Arrays, and maybe a PR with that as its scope would be more appropriate.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T13:56:00.886+0000",
                    "updated": "2022-03-22T13:56:00.886+0000",
                    "started": "2022-03-22T13:56:00.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745838",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075362907\n\n\n   I think so! This example is probably better than the example I have in there right now because the serializing/deserializing of the metadata is a big part of the picture and the current documentation example only implements the array-to-r conversion. Check to make sure it's what you meant though!\r\n   \r\n   I didn't implement this quite in the same way as the Python one...I think in Python the workflow (and correct me if I'm wrong) is along the lines of\r\n   \r\n   - Create a `ExtensionTypeSubclass(with, parameters, like, this)` instance\r\n   - C++ calls the `__arrow_ext_serialize__` method of the Python instance when the serialized metadata is needed\r\n   \r\n   In R it's totally bananas to call from C++ into R and we can't do it safely most of the time. So instead I wrote it like:\r\n   \r\n   - Create the extension metadata before either the R or C++ instance is created\r\n   - Create a C++ instance of `RExtensionType()` that contains the definitive copy of the serialized extension metadata\r\n   - Create the ExtensionTypeSubclass R6 instance and then call the R6 instance's `.Deserialize()` method to populate data fields.\r\n   \r\n   It isn't all that straightforward to do (the way I've implemented it in R) and I'm not sure I *like* how it's implemented (but I'm also not sure how to make it better).\r\n   \r\n   <details>\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   QuantizedType <- R6::R6Class(\r\n     \"QuantizedType\", \r\n     inherit = ExtensionType,\r\n     public = list(\r\n       center = function() private$.center,\r\n       scale = function() private$.scale,\r\n       \r\n       .array_as_vector = function(extension_array) {\r\n         as.vector(extension_array$storage() / private$.scale + private$.center)\r\n       },\r\n       \r\n       .Deserialize = function(storage_type, extension_name, extension_metadata) {\r\n         parsed <- jsonlite::fromJSON(self$extension_metadata_utf8())\r\n         private$.center <- as.double(parsed$center)\r\n         private$.scale <- as.double(parsed$scale)\r\n       }\r\n     ),\r\n     private = list(\r\n       .center = NULL,\r\n       .scale = NULL\r\n     )\r\n   )\r\n   \r\n   quantized <- function(center = 0, scale = 1, storage_type = int32()) {\r\n     new_extension_type(\r\n       storage_type = storage_type,\r\n       extension_name = \"arrow.example.quantized\",\r\n       extension_metadata = jsonlite::toJSON(\r\n         list(\r\n           center = jsonlite::unbox(as.double(center)),\r\n           scale = jsonlite::unbox(as.double(scale))\r\n         )\r\n       ),\r\n       type_class = QuantizedType\r\n     )\r\n   }\r\n   \r\n   quantized_array <- function(x, center = 0, scale = 1, \r\n                               storage_type = int32()) {\r\n     type <- quantized(center, scale, storage_type)\r\n     new_extension_array(\r\n       Array$create((x - center) * scale, type = storage_type),\r\n       type\r\n     )\r\n   }\r\n   \r\n   reregister_extension_type(quantized())\r\n   \r\n   (vals <- runif(5, min = 19, max = 21))\r\n   #> [1] 19.33526 19.47467 19.14288 20.39798 19.04523\r\n   \r\n   (array <- quantized_array(\r\n     vals,\r\n     center = 20,\r\n     scale = 2 ^ 15 - 1,\r\n     storage_type = int16())\r\n   )\r\n   #> ExtensionArray\r\n   #> <QuantizedType <{\"center\":20,\"scale\":32767}>>\r\n   #> [\r\n   #>   -21781,\r\n   #>   -17213,\r\n   #>   -28085,\r\n   #>   13040,\r\n   #>   -31284\r\n   #> ]\r\n   \r\n   array$type$center()\r\n   #> [1] 20\r\n   array$type$scale()\r\n   #> [1] 32767\r\n   \r\n   as.vector(array)\r\n   #> [1] 19.33528 19.47468 19.14289 20.39796 19.04526\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T16:34:04.825+0000",
                    "updated": "2022-03-22T16:34:04.825+0000",
                    "started": "2022-03-22T16:34:04.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745922",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/745999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075451977\n\n\n   I haven't dug too deeply yet, but the `QuantizedType` example is _fantastic_. I really like that _ think it shows off what/how this is capable of doing in a way that the previous examples (both mine and the ones in the test) didn't quite fully get to\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T18:04:19.568+0000",
                    "updated": "2022-03-22T18:04:19.568+0000",
                    "started": "2022-03-22T18:04:19.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745999",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/746020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075482290\n\n\n   I like it too! I like that it isn't R specific, that it needs parameterization, and that transforming it back into an R vector needs a calculation. I didn't do any explaining in the docs about why quantized types are cool...I've used them in raster GIS stuff because they enable really efficient storage (in exchange for some precision loss).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T18:32:35.735+0000",
                    "updated": "2022-03-22T18:32:35.735+0000",
                    "started": "2022-03-22T18:32:35.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746020",
                    "issueId": "13425015"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/worklog/746021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #12467:\nURL: https://github.com/apache/arrow/pull/12467#issuecomment-1075489604\n\n\n   > I think so! This example is probably better\r\n   \r\n   That example indeed nicely shows that it is possible. \r\n   I suppose one thing that confused me is that `new_extension_type(..)` rather creates a new *instance* of a given type, and not a new type itself (and thus this allows you to create instances of a given extension type with different metadata).\r\n   \r\n   > It isn't all that straightforward to do (the way I've implemented it in R) and I'm not sure I like how it's implemented (but I'm also not sure how to make it better).\r\n   \r\n   I think the fact that you already determine the serialized metadata upfront in R is fine / nice (the fact that in Python this is C++ calling back into python is kind of a complication, as the metadata could be known at the point when instantiating the python extension type instance).  \r\n   One thing I was wondering: the reason you can't define a `.Serialize` method on the QuantizedType that can hold this logic to create the serialized metadata (instead of doing that inside `new_extension_type( ..., extension_metadata=... )`), is that this class instance is only created after the underlying C++ extension type, for which you already need the serialized metadata? It's not possible to first initialize the QuantizedType object, and let that call Serialize to then create the underlying C++ object? (disclaimer: I know nothing about R classes :))\r\n   \r\n    \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T18:35:43.374+0000",
                    "updated": "2022-03-22T18:35:43.374+0000",
                    "started": "2022-03-22T18:35:43.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746021",
                    "issueId": "13425015"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@58486bec[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c7047f2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55b5fc09[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5bf47e9a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5501d6e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54708d49[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e5f767a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5627cd85[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d4abf7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5d00615b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8b92027[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@601a8f50[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 08 15:52:20 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-08T15:52:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15471/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-01-26T18:56:24.000+0000",
        "updated": "2022-04-09T10:31:00.000+0000",
        "timeoriginalestimate": null,
        "description": "In Python there is support for extension types that consists of a registration step that defines functions to handle metadata serialization and deserialization. In R, any extension name or metadata at the top level is currently obliterated on import. To implement geometry reading and writing to Parquet, IPC, and/or Feather, we will need to at the very least have the extension name and metadata preserved (in R), and at best provide a registration step to customize the behaviour of the resulting Array/DataType.\r\n\r\nReprex for R:\r\n\r\n{code:R}\r\n# remotes::install_github(\"paleolimbot/narrow\")\r\nlibrary(narrow)\r\n\r\ncarray <- as_narrow_array(1:5)\r\n\r\ncarray$schema$metadata[[\"ARROW:extension:name\"]] <- \"extension name!\"\r\ncarray$schema$metadata[[\"ARROW:extension:metadata\"]] <- \"bananas\"\r\ncarray$schema$metadata[[\"something else\"]] <- \"more bananas\"\r\n\r\narray <- from_narrow_array(carray, arrow::Array)\r\ncarray2 <- as_narrow_array(array)\r\n\r\ncarray2$schema$metadata[[\"ARROW:extension:name\"]]\r\n#> NULL\r\ncarray2$schema$metadata[[\"ARROW:extension:metadata\"]]\r\n#> NULL\r\ncarray2$schema$metadata[[\"something else\"]]\r\n#> NULL\r\n{code}\r\n\r\n\r\nThere is some discussion of that as a solution to ARROW-14378, including an example of how pandas implements the 'interval' extension type (example contributed by [~jorisvandenbossche]).\r\n\r\nFor the Interval example, there are some different parts living in different places:\r\n\r\n- The Arrow Extension Type definition for pandas' interval type: https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/arrays/_arrow_utils.py#L88-L136\r\n- The __from_arrow__ implementation (doing the conversion to arrow): https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/arrays/interval.py#L1405-L1455\r\n- The __from_arrow__ implementation (conversion arrow -> pandas): https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/dtypes/dtypes.py#L1227-L1255",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] ExtensionType support in R",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17486679",
                    "id": "17486679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "A related issue that came up in geoarrow is that it isn't possible to restore field-level metadata (which we can use to make sure things like the coordinate reference system stay with the column when it goes through the compute engine). It looks like this is specifically ignored here:\r\n\r\nhttps://github.com/apache/arrow/blob/master/r/R/field.R#L60",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-02-03T19:42:11.907+0000",
                    "updated": "2022-02-03T19:42:11.907+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17486785",
                    "id": "17486785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Is the field level metadata being lost at the moment?  Extension type metadata should persist through the compute engine (some what tangential discussion here: https://issues.apache.org/jira/browse/ARROW-15297)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-02-04T02:15:30.780+0000",
                    "updated": "2022-02-04T02:15:30.780+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17487102",
                    "id": "17487102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "The compute engine end is all good! I was trying to put field-level metadata through the C API where Arrow didn't expect it (apparently metadata only persists if you wrap an Array in in a RecordBatch). This might be different if trying to import an ExtenionArray (which we haven't implemented yet).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-02-04T14:32:51.878+0000",
                    "updated": "2022-02-04T14:32:51.878+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17487156",
                    "id": "17487156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "I don't know if it is exactly relevant here, but a few notes:\r\n\r\n- In the C++ implementation, the field-level metadata (where the extension name and metadata is stored in serialized (IPC / C Data Interface schema) form) lives in the {{Field}} class. So an Array object itself cannot hold this metadata in C++. Thus, if you recreate an array from importing it from the C Data Interface, it is \"expected\" that the metadata is gone. And that's also the reason that if the array is part of a RecordBatch (which has a schema, with fields, potentially with metadata), that this metadata is preserved (in the schema of the RecordBatch)\r\n- The \"registration\" of extension types enables that, eg while deserializing an IPC schema message, if we encounter extension type metadata,  we (meaning the C++ implementation) create an ExtensionArray with ExtensionType (and dropping the field metadata). If the name of the extension type is _not_ registered, we keep the actual storage array/type and preserve the metadata in the field.  \r\n- As far as I know, ExtensionArray / ExtensionType is not yet exposed in the R bindings? I suppose that means you basically always get the storage array/type (I don't know what would happen if you actually have an extension type in a C++ RecordBatch and then accessing that from R, but I suppose this is quite difficult to achieve right now, since there are no extension types registered by default)\r\n- The fact that R doesn't preserve field-level metadata in the schema seems like a separate issue? (I mean not needing full extension types support in R to fix it, but of course relevant here because of the fact that extension types are not yet supported in R and thus falls back to keeping this information in field metadata)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-02-04T16:21:36.223+0000",
                    "updated": "2022-02-04T16:21:36.223+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17487247",
                    "id": "17487247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Thanks...super relevant! I'm definitely not familiar with the details here.\r\n\r\nIn the process of playing with this, I found that R does preserve the field-level metadata when handled as part of a RecordBatch just as you noted. The comment I made above was a line where I noticed that a user can't specify metadata for a field (but importing via the C API works fine).\r\n\r\nImplementing the ExtensionArray/ExtensionType and the registration mechanism is what I hope to do with this ticket!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-02-04T18:56:43.485+0000",
                    "updated": "2022-02-04T18:56:43.485+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425015/comment/17519666",
                    "id": "17519666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 12467\n[https://github.com/apache/arrow/pull/12467]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-08T15:52:20.715+0000",
                    "updated": "2022-04-08T15:52:20.715+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yzjs:",
        "customfield_12314139": null
    }
}