{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13407798",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798",
    "key": "ARROW-14421",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12629265",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629265",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13417725",
                    "key": "ARROW-15112",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417725",
                    "fields": {
                        "summary": "[C++][FlightRPC][Integration][Java] Implement Flight RPC integration tests",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12629266",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629266",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13419022",
                    "key": "ARROW-15187",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419022",
                    "fields": {
                        "summary": "[Java][FlightRPC] Fix pom.xml for new flight-sql modules",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12629267",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629267",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13419247",
                    "key": "ARROW-15198",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13419247",
                    "fields": {
                        "summary": "[C++][FlightRPC] Fix unity build error in Flight SQL",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12629268",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629268",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13381560",
                    "key": "ARROW-12922",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381560",
                    "fields": {
                        "summary": "[Java][FlightSQL] Create stubbed APIs for Flight SQL",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kylep",
            "name": "kylep",
            "key": "kylep",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Kyle Porter",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rafaeltelles",
            "name": "rafaeltelles",
            "key": "rafaeltelles",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Rafael Telles",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rafaeltelles",
            "name": "rafaeltelles",
            "key": "rafaeltelles",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Rafael Telles",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 121800,
            "total": 121800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 121800,
            "total": 121800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14421/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 203,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/668546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kylepbit commented on pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#issuecomment-948816253\n\n\n   @lidavidm - was just about to ping you on this but see that you already noticed it. Note that the C++ Server is missing a small bit of functionality but the client is there, so we should be in good shape to be near a vote.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-21T17:04:01.813+0000",
                    "updated": "2021-10-21T17:04:01.813+0000",
                    "started": "2021-10-21T17:04:01.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "668546",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/668551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#issuecomment-948836038\n\n\n   https://issues.apache.org/jira/browse/ARROW-14421\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-21T17:16:45.121+0000",
                    "updated": "2021-10-21T17:16:45.121+0000",
                    "started": "2021-10-21T17:16:45.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "668551",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/668552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#issuecomment-948837995\n\n\n   @lidavidm , just saw the linter pointed some code style issues, already fixed them\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-21T17:18:01.514+0000",
                    "updated": "2021-10-21T17:18:01.514+0000",
                    "started": "2021-10-21T17:18:01.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "668552",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/668608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r733879318\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\nReview comment:\n       This looks unused here.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n\nReview comment:\n       There's no new gRPC definitions, right? We don't need to generate gRPC sources (and we don't need to depend on grpc_cpp_plugin above)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n\nReview comment:\n       Prefer `Result<int64_t>` over `Status` with out parameter for new code. (The Flight code predates the introduction of `Result`.)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n+\n+  /// \\brief Retrieve the parameter schema from the query.\n+  /// \\param schema   The parameter schema from the query.\n+  /// \\return         Status.\n+  Status GetParameterSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Retrieve the ResultSet schema from the query.\n+  /// \\param schema   The ResultSet schema from the query.\n+  /// \\return         Status.\n+  Status GetResultSetSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Set a RecordBatch that contains the parameters that will be bind.\n+  /// \\param parameter_binding_   The parameters that will be bind.\n+  /// \\return                     Status.\n+  Status SetParameters(std::shared_ptr<RecordBatch> parameter_binding);\n+\n+  /// \\brief Closes the prepared statement.\n+  /// \\param[in] options  RPC-layer hints for this call.\n+  /// \\return Status.\n+  Status Close();\n+\n+  /// \\brief Checks if the prepared statement is closed.\n+  /// \\return The state of the prepared statement.\n+  bool IsClosed() const;\n+};\n+\n+/// \\brief Flight client with Flight SQL semantics.\n+template <class T = arrow::flight::FlightClient>\n+class FlightSqlClientT {\n+ public:\n+  explicit FlightSqlClientT(std::unique_ptr<T>& client);\n\nReview comment:\n       This should just be `std::unique_ptr<T>` if the intent is to take ownership of the client.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client_test.cc\n##########\n@@ -0,0 +1,572 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/types.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#include <utility>\n+\n+namespace pb = arrow::flight::protocol;\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+using internal::FlightSqlClientT;\n+\n+class FlightClientMock {\n+ public:\n+  MOCK_METHOD(Status, GetFlightInfo,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               std::unique_ptr<FlightInfo>*));\n+  MOCK_METHOD(Status, DoPut,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               const std::shared_ptr<Schema>& schema,\n+               std::unique_ptr<FlightStreamWriter>*,\n+               std::unique_ptr<FlightMetadataReader>*));\n+  MOCK_METHOD(Status, DoAction,\n+              (const FlightCallOptions& options, const Action& action,\n+               std::unique_ptr<ResultStream>* results));\n+};\n+\n+class FlightMetadataReaderMock : public FlightMetadataReader {\n+ public:\n+  std::shared_ptr<Buffer>* buffer;\n+\n+  explicit FlightMetadataReaderMock(std::shared_ptr<Buffer>* buffer) {\n+    this->buffer = buffer;\n+  }\n+\n+  Status ReadMetadata(std::shared_ptr<Buffer>* out) override {\n+    *out = *buffer;\n+    return Status::OK();\n+  }\n+};\n+\n+class FlightStreamWriterMock : public FlightStreamWriter {\n+ public:\n+  FlightStreamWriterMock() = default;\n+\n+  Status DoneWriting() override { return Status::OK(); }\n+\n+  Status WriteMetadata(std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema,\n+               const ipc::IpcWriteOptions& options) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema) override {\n+    return MetadataRecordBatchWriter::Begin(schema);\n+  }\n+\n+  ipc::WriteStats stats() const override { return ipc::WriteStats(); }\n+\n+  Status WriteWithMetadata(const RecordBatch& batch,\n+                           std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n+\n+  Status WriteRecordBatch(const RecordBatch& batch) override { return Status::OK(); }\n+};\n+\n+FlightDescriptor getDescriptor(google::protobuf::Message& command) {\n+  google::protobuf::Any any;\n+  any.PackFrom(command);\n+\n+  const std::string& string = any.SerializeAsString();\n+  return FlightDescriptor::Command(string);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetCatalogs) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n+\n+  pb::sql::CommandGetCatalogs command;\n+  FlightDescriptor descriptor = getDescriptor(command);\n+\n+  std::unique_ptr<FlightInfo> flight_info;\n+  EXPECT_CALL(*client_mock, GetFlightInfo(Ref(call_options), descriptor, &flight_info));\n+\n+  (void)sqlClient.GetCatalogs(call_options, &flight_info);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetSchemas) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n\nReview comment:\n       meta-comment: a test fixture to do this common setup would clean up these tests.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client_test.cc\n##########\n@@ -0,0 +1,572 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/types.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#include <utility>\n+\n+namespace pb = arrow::flight::protocol;\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+using internal::FlightSqlClientT;\n+\n+class FlightClientMock {\n+ public:\n+  MOCK_METHOD(Status, GetFlightInfo,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               std::unique_ptr<FlightInfo>*));\n+  MOCK_METHOD(Status, DoPut,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               const std::shared_ptr<Schema>& schema,\n+               std::unique_ptr<FlightStreamWriter>*,\n+               std::unique_ptr<FlightMetadataReader>*));\n+  MOCK_METHOD(Status, DoAction,\n+              (const FlightCallOptions& options, const Action& action,\n+               std::unique_ptr<ResultStream>* results));\n+};\n+\n+class FlightMetadataReaderMock : public FlightMetadataReader {\n+ public:\n+  std::shared_ptr<Buffer>* buffer;\n+\n+  explicit FlightMetadataReaderMock(std::shared_ptr<Buffer>* buffer) {\n+    this->buffer = buffer;\n+  }\n+\n+  Status ReadMetadata(std::shared_ptr<Buffer>* out) override {\n+    *out = *buffer;\n+    return Status::OK();\n+  }\n+};\n+\n+class FlightStreamWriterMock : public FlightStreamWriter {\n+ public:\n+  FlightStreamWriterMock() = default;\n+\n+  Status DoneWriting() override { return Status::OK(); }\n+\n+  Status WriteMetadata(std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema,\n+               const ipc::IpcWriteOptions& options) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema) override {\n+    return MetadataRecordBatchWriter::Begin(schema);\n+  }\n+\n+  ipc::WriteStats stats() const override { return ipc::WriteStats(); }\n+\n+  Status WriteWithMetadata(const RecordBatch& batch,\n+                           std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n+\n+  Status WriteRecordBatch(const RecordBatch& batch) override { return Status::OK(); }\n+};\n+\n+FlightDescriptor getDescriptor(google::protobuf::Message& command) {\n+  google::protobuf::Any any;\n+  any.PackFrom(command);\n+\n+  const std::string& string = any.SerializeAsString();\n+  return FlightDescriptor::Command(string);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetCatalogs) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n+\n+  pb::sql::CommandGetCatalogs command;\n+  FlightDescriptor descriptor = getDescriptor(command);\n+\n+  std::unique_ptr<FlightInfo> flight_info;\n+  EXPECT_CALL(*client_mock, GetFlightInfo(Ref(call_options), descriptor, &flight_info));\n+\n+  (void)sqlClient.GetCatalogs(call_options, &flight_info);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetSchemas) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n+\n+  std::string schema_filter_pattern = \"schema_filter_pattern\";\n+  std::string catalog = \"catalog\";\n+\n+  pb::sql::CommandGetSchemas command;\n+  command.set_catalog(catalog);\n+  command.set_schema_filter_pattern(schema_filter_pattern);\n+  FlightDescriptor descriptor = getDescriptor(command);\n+\n+  std::unique_ptr<FlightInfo> flight_info;\n+  EXPECT_CALL(*client_mock, GetFlightInfo(Ref(call_options), descriptor, &flight_info));\n+\n+  (void)sqlClient.GetSchemas(call_options, &catalog, &schema_filter_pattern,\n\nReview comment:\n       why not ASSERT_OK here?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Is the templating here just to support mocking the client?\r\n   \r\n   It's a little unfortunate, since the templating makes the API confusing + prevents us from being able to move definitions into a .cc file. I also think we shouldn't expose the Protobuf types publically everywhere. (The field is private, but the header still gets included\u2026being able to pImpl this class would help.)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+               STATIC_LINK_LIBS\n+               ${ARROW_FLIGHT_SQL_TEST_LINK_LIBS}\n+               GTest::gtest\n+               GTest::gmock\n+               LABELS\n+               \"arrow_flight_sql\")\n+\n+add_executable(flight_sql_test_app test_app_cli.cc\n\nReview comment:\n       I think we should guard these definitions behind ARROW_BUILD_TESTS or ARROW_BUILD_EXAMPLES or similar, so that we don't require everyone to have SQLite3 installed. \n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server.h\n##########\n@@ -0,0 +1,404 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Interfaces to use for defining Flight RPC servers. API should be considered\n+// experimental for now\n+\n+#pragma once\n+\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/server.h>\n+#include <google/protobuf/any.pb.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+class FlightSqlServerBase : public FlightServerBase {\n+ public:\n+  Status GetFlightInfo(const ServerCallContext& context, const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override;\n+\n+  Status DoGet(const ServerCallContext& context, const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* stream) override;\n+\n+  Status DoPut(const ServerCallContext& context,\n+               std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override;\n+\n+  const ActionType FLIGHT_SQL_CREATE_PREPARED_STATEMENT =\n+      ActionType{.type = \"CreatePreparedStatement\",\n+                 .description =\n+                     \"Creates a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionCreatePreparedStatementRequest\\n\"\n+                     \"Response Message: ActionCreatePreparedStatementResult\"};\n+  const ActionType FLIGHT_SQL_CLOSE_PREPARED_STATEMENT =\n+      ActionType{.type = \"ClosePreparedStatement\",\n+                 .description =\n+                     \"Closes a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionClosePreparedStatementRequest\\n\"\n+                     \"Response Message: N/A\"};\n+\n+  Status ListActions(const ServerCallContext& context,\n+                     std::vector<ActionType>* actions) override;\n+\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override;\n+\n+  /// \\brief Gets a FlightInfo for executing a SQL query.\n+  /// \\param[in] command      The CommandStatementQuery object containing the SQL\n+  ///                         statement.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoStatement(const pb::sql::CommandStatementQuery& command,\n+                                        const ServerCallContext& context,\n+                                        const FlightDescriptor& descriptor,\n+                                        std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the query results.\n+  /// \\param[in] command      The TicketStatementQuery containing the statement handle.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] result      The FlightDataStream containing the results.\n+  /// \\return                 Status.\n+  virtual Status DoGetStatement(const pb::sql::TicketStatementQuery& command,\n+                                const ServerCallContext& context,\n+                                std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo for executing an already created prepared statement.\n+  /// \\param[in] command      The CommandPreparedStatementQuery object containing the\n+  ///                         prepared statement handle.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoPreparedStatement(\n+      const pb::sql::CommandPreparedStatementQuery& command,\n+      const ServerCallContext& context, const FlightDescriptor& descriptor,\n+      std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the prepared statement query results.\n+  /// \\param[in] command      The CommandPreparedStatementQuery object containing the\n+  ///                         prepared statement handle.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] result      The FlightDataStream containing the results.\n+  /// \\return                 Status.\n+  virtual Status DoGetPreparedStatement(\n+      const pb::sql::CommandPreparedStatementQuery& command,\n+      const ServerCallContext& context, std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo for listing catalogs.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoCatalogs(const ServerCallContext& context,\n+                                       const FlightDescriptor& descriptor,\n+                                       std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the list of catalogs.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[out] result  An interface for sending data back to the client.\n+  /// \\return             Status.\n+  virtual Status DoGetCatalogs(const ServerCallContext& context,\n+                               std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo for retrieving other information (See SqlInfo).\n+  /// \\param[in] command      The CommandGetSqlInfo object containing the list of SqlInfo\n+  ///                         to be returned.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoSqlInfo(const pb::sql::CommandGetSqlInfo& command,\n+                                      const ServerCallContext& context,\n+                                      const FlightDescriptor& descriptor,\n+                                      std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the list of SqlInfo results.\n+  /// \\param[in] command    The CommandGetSqlInfo object containing the list of SqlInfo\n+  ///                       to be returned.\n+  /// \\param[in] context    Per-call context.\n+  /// \\param[out] result    The FlightDataStream containing the results.\n+  /// \\return               Status.\n+  virtual Status DoGetSqlInfo(const pb::sql::CommandGetSqlInfo& command,\n+                              const ServerCallContext& context,\n+                              std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo for listing schemas.\n+  /// \\param[in] command      The CommandGetSchemas object which may contain filters for\n+  ///                         catalog and schema name.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoSchemas(const pb::sql::CommandGetSchemas& command,\n+                                      const ServerCallContext& context,\n+                                      const FlightDescriptor& descriptor,\n+                                      std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the list of schemas.\n+  /// \\param[in] command   The CommandGetSchemas object which may contain filters for\n+  ///                      catalog and schema name.\n+  /// \\param[in] context   Per-call context.\n+  /// \\param[out] result   The FlightDataStream containing the results.\n+  /// \\return              Status.\n+  virtual Status DoGetSchemas(const pb::sql::CommandGetSchemas& command,\n+                              const ServerCallContext& context,\n+                              std::unique_ptr<FlightDataStream>* result);\n+\n+  ///\\brief Gets a FlightInfo for listing tables.\n+  /// \\param[in] command      The CommandGetTables object which may contain filters for\n+  ///                         catalog, schema and table names.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoTables(const pb::sql::CommandGetTables& command,\n+                                     const ServerCallContext& context,\n+                                     const FlightDescriptor& descriptor,\n+                                     std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the list of tables.\n+  /// \\param[in] command   The CommandGetTables object which may contain filters for\n+  ///                      catalog, schema and table names.\n+  /// \\param[in] context   Per-call context.\n+  /// \\param[out] result   The FlightDataStream containing the results.\n+  /// \\return              Status.\n+  virtual Status DoGetTables(const pb::sql::CommandGetTables& command,\n+                             const ServerCallContext& context,\n+                             std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo to extract information about the table types.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoTableTypes(const ServerCallContext& context,\n+                                         const FlightDescriptor& descriptor,\n+                                         std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the data related to the table types.\n+  /// \\param[in] context   Per-call context.\n+  /// \\param[out] result   The FlightDataStream containing the results.\n+  /// \\return               Status.\n+  virtual Status DoGetTableTypes(const ServerCallContext& context,\n+                                 std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo to extract information about primary and foreign keys.\n+  /// \\param[in] command      The CommandGetPrimaryKeys object with necessary information\n+  ///                         to execute the request.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoPrimaryKeys(const pb::sql::CommandGetPrimaryKeys& command,\n+                                          const ServerCallContext& context,\n+                                          const FlightDescriptor& descriptor,\n+                                          std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the data related to the primary and\n+  /// foreign\n+  ///        keys.\n+  /// \\param[in] command  The CommandGetPrimaryKeys object with necessary information\n+  ///                     to execute the request.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[out] result  The FlightDataStream containing the results.\n+  /// \\return             Status.\n+  virtual Status DoGetPrimaryKeys(const pb::sql::CommandGetPrimaryKeys& command,\n+                                  const ServerCallContext& context,\n+                                  std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo to extract information about foreign and primary keys.\n+  /// \\param[in] command      The CommandGetExportedKeys object with necessary information\n+  ///                         to execute the request.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoExportedKeys(const pb::sql::CommandGetExportedKeys& command,\n+                                           const ServerCallContext& context,\n+                                           const FlightDescriptor& descriptor,\n+                                           std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the data related to the foreign and\n+  /// primary\n+  ///        keys.\n+  /// \\param[in] command  The CommandGetExportedKeys object with necessary information\n+  ///                     to execute the request.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[out] result  The FlightDataStream containing the results.\n+  /// \\return             Status.\n+  virtual Status DoGetExportedKeys(const pb::sql::CommandGetExportedKeys& command,\n+                                   const ServerCallContext& context,\n+                                   std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo to extract information about foreign and primary keys.\n+  /// \\param[in] command      The CommandGetImportedKeys object with necessary information\n+  ///                         to execute the request.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoImportedKeys(const pb::sql::CommandGetImportedKeys& command,\n+                                           const ServerCallContext& context,\n+                                           const FlightDescriptor& descriptor,\n+                                           std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the data related to the foreign and\n+  ///        primary keys.\n+  /// \\param[in] command  The CommandGetImportedKeys object with necessary information\n+  ///                     to execute the request.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[out] result  The FlightDataStream containing the results.\n+  /// \\return             Status.\n+  virtual Status DoGetImportedKeys(const pb::sql::CommandGetImportedKeys& command,\n+                                   const ServerCallContext& context,\n+                                   std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Gets a FlightInfo to extract information about foreign and primary keys.\n+  /// \\param[in] command      The CommandGetCrossReference object with necessary\n+  /// information\n+  ///                         to execute the request.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the\n+  ///                         dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoCrossReference(\n+      const pb::sql::CommandGetCrossReference& command, const ServerCallContext& context,\n+      const FlightDescriptor& descriptor, std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Gets a FlightDataStream containing the data related to the foreign and\n+  ///        primary keys.\n+  /// \\param[in] command  The CommandGetCrossReference object with necessary information\n+  ///                     to execute the request.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[out] result  The FlightDataStream containing the results.\n+  /// \\return             Status.\n+  virtual Status DoGetCrossReference(const pb::sql::CommandGetCrossReference& command,\n+                                     const ServerCallContext& context,\n+                                     std::unique_ptr<FlightDataStream>* result);\n+\n+  /// \\brief Executes an update SQL statement.\n+  /// \\param[in] command  The CommandStatementUpdate object containing the SQL statement.\n+  /// \\param[in] context  The call context.\n+  /// \\param[in] reader   a sequence of uploaded record batches.\n+  /// \\param[in] writer   send metadata back to the client.\n+  /// \\return             Status.\n+  virtual Status DoPutCommandStatementUpdate(\n+      const pb::sql::CommandStatementUpdate& command, const ServerCallContext& context,\n+      std::unique_ptr<FlightMessageReader>& reader,\n+      std::unique_ptr<FlightMetadataWriter>& writer);\n+\n+  /// \\brief Create a prepared statement from given SQL statement.\n+  /// \\param[in] request  The ActionCreatePreparedStatementRequest object containing the\n+  ///                     SQL statement.\n+  /// \\param[in] context  The call context.\n+  /// \\param[out] result  ResultStream containing a ActionCreatePreparedStatementResult.\n+  virtual Status CreatePreparedStatement(\n+      const pb::sql::ActionCreatePreparedStatementRequest& request,\n+      const ServerCallContext& context, std::unique_ptr<ResultStream>* result);\n+\n+  /// \\brief Closes a prepared statement.\n+  /// \\param[in] request  The ActionClosePreparedStatementRequest object containing the\n+  ///                     prepared statement handle.\n+  /// \\param[in] context  The call context.\n+  /// \\param[out] result  Empty ResultStream.\n+  virtual Status ClosePreparedStatement(\n+      const pb::sql::ActionClosePreparedStatementRequest& request,\n+      const ServerCallContext& context, std::unique_ptr<ResultStream>* result);\n+\n+  /// \\brief Binds parameters to given prepared statement.\n+  /// \\param[in] command  The CommandPreparedStatementQuery object containing the\n+  ///                     prepared statement handle.\n+  /// \\param[in] context  The call context.\n+  /// \\param[in] reader   A sequence of uploaded record batches.\n+  /// \\param[in] writer   Send metadata back to the client.\n+  virtual Status DoPutPreparedStatementQuery(\n+      const pb::sql::CommandPreparedStatementQuery& command,\n+      const ServerCallContext& context, std::unique_ptr<FlightMessageReader>& reader,\n+      std::unique_ptr<FlightMetadataWriter>& writer);\n+\n+  /// \\brief Executes an update SQL prepared statement.\n+  /// \\param[in] command  The CommandPreparedStatementUpdate object containing the\n+  ///                     prepared statement handle.\n+  /// \\param[in] context  The call context.\n+  /// \\param[in] reader   a sequence of uploaded record batches.\n+  /// \\param[in] writer   send metadata back to the client.\n+  /// \\return             Status.\n+  virtual Status DoPutPreparedStatementUpdate(\n+      const pb::sql::CommandPreparedStatementUpdate& command,\n+      const ServerCallContext& context, std::unique_ptr<FlightMessageReader>& reader,\n+      std::unique_ptr<FlightMetadataWriter>& writer);\n+};\n+\n+/// \\brief Auxiliary class containing all Schemas used on Flight SQL.\n+class SqlSchema {\n\nReview comment:\n       This should probably still be declared ARROW_EXPORT.\r\n   \r\n   Though, given this is C++, we could just make all of these top-level functions.\r\n   \n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME; \\\n+  {                                                     \\\n+    arrow::TYPE_CLASS##Builder builder;                 \\\n+    auto data = unparen DATA;                           \\\n+    for (const auto& item : data) {                     \\\n+      ASSERT_OK(builder.Append(item));                  \\\n+    }                                                   \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));           \\\n+  }\n+\n+#define DECLARE_BINARY_ARRAY(ARRAY_NAME, DATA, LENGTH) \\\n+  std::shared_ptr<arrow::BinaryArray> ARRAY_NAME;      \\\n+  {                                                    \\\n+    arrow::Binary##Builder builder;                    \\\n+    auto data = unparen DATA;                          \\\n+    for (const auto& item : data) {                    \\\n+      ASSERT_OK(builder.Append(item, LENGTH));         \\\n+    }                                                  \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));          \\\n+  }\n+\n+#define DECLARE_NULL_ARRAY(ARRAY_NAME, TYPE_CLASS, LENGTH) \\\n\nReview comment:\n       There's MakeArrayOfNull for this use case too.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server.h\n##########\n@@ -0,0 +1,404 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Interfaces to use for defining Flight RPC servers. API should be considered\n+// experimental for now\n+\n+#pragma once\n+\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/server.h>\n+#include <google/protobuf/any.pb.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+class FlightSqlServerBase : public FlightServerBase {\n+ public:\n+  Status GetFlightInfo(const ServerCallContext& context, const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override;\n+\n+  Status DoGet(const ServerCallContext& context, const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* stream) override;\n+\n+  Status DoPut(const ServerCallContext& context,\n+               std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override;\n+\n+  const ActionType FLIGHT_SQL_CREATE_PREPARED_STATEMENT =\n+      ActionType{.type = \"CreatePreparedStatement\",\n+                 .description =\n+                     \"Creates a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionCreatePreparedStatementRequest\\n\"\n+                     \"Response Message: ActionCreatePreparedStatementResult\"};\n+  const ActionType FLIGHT_SQL_CLOSE_PREPARED_STATEMENT =\n+      ActionType{.type = \"ClosePreparedStatement\",\n+                 .description =\n+                     \"Closes a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionClosePreparedStatementRequest\\n\"\n+                     \"Response Message: N/A\"};\n+\n+  Status ListActions(const ServerCallContext& context,\n+                     std::vector<ActionType>* actions) override;\n+\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override;\n+\n+  /// \\brief Gets a FlightInfo for executing a SQL query.\n+  /// \\param[in] command      The CommandStatementQuery object containing the SQL\n+  ///                         statement.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoStatement(const pb::sql::CommandStatementQuery& command,\n\nReview comment:\n       I don't think we've talked about whether to wrap the Protobufs before or not, now that I think about it. The Java PR passes them through to the server, as does this PR. While Flight itself wraps its Protobufs, I would say it's not too bad here given FlightSql is defined in terms of Protobuf. But it might be good to wrap these regardless to avoid leaking Protobuf into consumers\u2026\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n\nReview comment:\n       I think you'll appreciate the ArrayFromJSON and ArrayFromVector helpers here. \r\n   \r\n   https://github.com/apache/arrow/blob/721aa019aa0cb3b6a15aa358a53f39e2c5c541ae/cpp/src/arrow/testing/gtest_util.h#L318-L322\r\n   \r\n   https://github.com/apache/arrow/blob/721aa019aa0cb3b6a15aa358a53f39e2c5c541ae/cpp/src/arrow/testing/gtest_util.h#L350-L355\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+               STATIC_LINK_LIBS\n+               ${ARROW_FLIGHT_SQL_TEST_LINK_LIBS}\n+               GTest::gtest\n+               GTest::gmock\n\nReview comment:\n       Are these not already in ARROW_TEST_LINK_LIBS?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n\nReview comment:\n       nit, but most Arrow headers use `#pragma once` (non-standard) over the `#ifndef` pattern.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n+  FlightStreamChunk chunk;\n+  while (true) {\n+    RETURN_NOT_OK(reader->Next(&chunk));\n+    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n+    if (record_batch == nullptr) break;\n+\n+    const int64_t num_rows = record_batch->num_rows();\n+    const int& num_columns = record_batch->num_columns();\n+\n+    for (int i = 0; i < num_rows; ++i) {\n+      for (int c = 0; c < num_columns; ++c) {\n+        const std::shared_ptr<Array>& column = record_batch->column(c);\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n+\n+        auto& holder = reinterpret_cast<DenseUnionScalar&>(*scalar).value;\n+\n+        switch (holder->type->id()) {\n+          case Type::INT64: {\n+            int64_t value = reinterpret_cast<Int64Scalar&>(*holder).value;\n+            sqlite3_bind_int64(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::FLOAT: {\n+            double value = reinterpret_cast<FloatScalar&>(*holder).value;\n+            sqlite3_bind_double(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::STRING: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<StringScalar&>(*holder).value;\n+            const std::string string = buffer->ToString();\n+            const char* value = string.c_str();\n+            sqlite3_bind_text(stmt, c + 1, value, static_cast<int>(strlen(value)),\n+                              SQLITE_TRANSIENT);\n+            break;\n+          }\n+          case Type::BINARY: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<BinaryScalar&>(*holder).value;\n+            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n+                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n+            break;\n+          }\n+          default:\n+            return Status::Invalid(\"Received unsupported data type: \",\n+                                   holder->type->ToString());\n+        }\n+      }\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+SQLiteFlightSqlServer::SQLiteFlightSqlServer() {\n+  db_ = NULLPTR;\n+  if (sqlite3_open(\":memory:\", &db_)) {\n+    sqlite3_close(db_);\n+    throw std::runtime_error(std::string(\"Can't open database: \") + sqlite3_errmsg(db_));\n\nReview comment:\n       nit: generally we don't use exceptions, complex initialization like this either happens with a combo of private constructor + public static factory method or with an Init() method on the object.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n+  FlightStreamChunk chunk;\n+  while (true) {\n+    RETURN_NOT_OK(reader->Next(&chunk));\n+    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n+    if (record_batch == nullptr) break;\n+\n+    const int64_t num_rows = record_batch->num_rows();\n+    const int& num_columns = record_batch->num_columns();\n+\n+    for (int i = 0; i < num_rows; ++i) {\n+      for (int c = 0; c < num_columns; ++c) {\n+        const std::shared_ptr<Array>& column = record_batch->column(c);\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n+\n+        auto& holder = reinterpret_cast<DenseUnionScalar&>(*scalar).value;\n\nReview comment:\n       static_cast<const DenseUnionScalar&>?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n\nReview comment:\n       nit: just take FlightMessageReader* over a reference to a unique_ptr (in general, Arrow avoids non-const references)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n+\n+  /// \\brief Retrieve the parameter schema from the query.\n+  /// \\param schema   The parameter schema from the query.\n+  /// \\return         Status.\n+  Status GetParameterSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Retrieve the ResultSet schema from the query.\n+  /// \\param schema   The ResultSet schema from the query.\n+  /// \\return         Status.\n+  Status GetResultSetSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Set a RecordBatch that contains the parameters that will be bind.\n+  /// \\param parameter_binding_   The parameters that will be bind.\n+  /// \\return                     Status.\n+  Status SetParameters(std::shared_ptr<RecordBatch> parameter_binding);\n+\n+  /// \\brief Closes the prepared statement.\n+  /// \\param[in] options  RPC-layer hints for this call.\n+  /// \\return Status.\n+  Status Close();\n+\n+  /// \\brief Checks if the prepared statement is closed.\n+  /// \\return The state of the prepared statement.\n+  bool IsClosed() const;\n+};\n+\n+/// \\brief Flight client with Flight SQL semantics.\n+template <class T = arrow::flight::FlightClient>\n+class FlightSqlClientT {\n+ public:\n+  explicit FlightSqlClientT(std::unique_ptr<T>& client);\n+\n+  ~FlightSqlClientT();\n+\n+  /// \\brief Execute a query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset\n+  /// \\return Status.\n+  Status Execute(const FlightCallOptions& options, const std::string& query,\n+                 std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Execute an update query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] rows        The quantity of rows affected by the operation.\n+  /// \\return Status.\n+  Status ExecuteUpdate(const FlightCallOptions& options, const std::string& query,\n+                       int64_t* rows) const;\n+\n+  /// \\brief Request a list of catalogs.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset.\n+  /// \\return Status.\n+  Status GetCatalogs(const FlightCallOptions& options,\n+                     std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Request a list of schemas.\n+  /// \\param[in] options                RPC-layer hints for this call.\n+  /// \\param[in] catalog                The catalog.\n+  /// \\param[in] schema_filter_pattern  The schema filter pattern.\n+  /// \\param[out] flight_info           The FlightInfo describing where to access the\n+  ///                                   dataset.\n+  /// \\return Status.\n+  Status GetSchemas(const FlightCallOptions& options, const std::string* catalog,\n+                    const std::string* schema_filter_pattern,\n+                    std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Given a flight ticket and schema, request to be sent the\n+  /// stream. Returns record batch stream reader\n+  /// \\param[in] options Per-RPC options\n+  /// \\param[in] ticket The flight ticket to use\n+  /// \\param[out] stream the returned RecordBatchReader\n+  /// \\return Status\n+  Status DoGet(const FlightCallOptions& options, const Ticket& ticket,\n+               std::unique_ptr<FlightStreamReader>* stream) const;\n\nReview comment:\n       These methods aren't const normally; why are they const now?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client_impl.h\n##########\n@@ -0,0 +1,463 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/buffer.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/io/memory.h>\n+#include <arrow/ipc/reader.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <google/protobuf/any.pb.h>\n+#include <google/protobuf/message_lite.h>\n+\n+#include <utility>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T>\n+FlightSqlClientT<T>::FlightSqlClientT(std::unique_ptr<T>& client) {\n+  this->client = std::move(client);\n+}\n+\n+template <class T>\n+PreparedStatementT<T>::PreparedStatementT(\n+    T* client_, const std::string& query,\n+    pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result_,\n+    const FlightCallOptions& options_)\n+    : client(client_),\n+      prepared_statement_result(std::move(prepared_statement_result_)),\n+      options(options_) {\n+  is_closed = false;\n+}\n+\n+template <class T>\n+FlightSqlClientT<T>::~FlightSqlClientT() = default;\n+\n+template <class T>\n+PreparedStatementT<T>::~PreparedStatementT<T>() {\n+  Close();\n+}\n+\n+inline FlightDescriptor GetFlightDescriptorForCommand(\n+    const google::protobuf::Message& command) {\n+  google::protobuf::Any any;\n+  any.PackFrom(command);\n+\n+  const std::string& string = any.SerializeAsString();\n+  return FlightDescriptor::Command(string);\n+}\n+\n+template <class T>\n+Status GetFlightInfoForCommand(const std::unique_ptr<T>& client,\n+                               const FlightCallOptions& options,\n+                               std::unique_ptr<FlightInfo>* flight_info,\n+                               const google::protobuf::Message& command) {\n+  const FlightDescriptor& descriptor = GetFlightDescriptorForCommand(command);\n+\n+  return client->GetFlightInfo(options, descriptor, flight_info);\n+}\n+\n+template <class T>\n+Status FlightSqlClientT<T>::Execute(const FlightCallOptions& options,\n+                                    const std::string& query,\n+                                    std::unique_ptr<FlightInfo>* flight_info) const {\n+  pb::sql::CommandStatementQuery command;\n+  command.set_query(query);\n+\n+  return GetFlightInfoForCommand(client, options, flight_info, command);\n+}\n+\n+template <class T>\n+Status FlightSqlClientT<T>::ExecuteUpdate(const FlightCallOptions& options,\n+                                          const std::string& query, int64_t* rows) const {\n+  pb::sql::CommandStatementUpdate command;\n+  command.set_query(query);\n+\n+  const FlightDescriptor& descriptor = GetFlightDescriptorForCommand(command);\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightMetadataReader> reader;\n+\n+  ARROW_RETURN_NOT_OK(client->DoPut(options, descriptor, NULLPTR, &writer, &reader));\n+\n+  std::shared_ptr<Buffer> metadata;\n+\n+  const Status& status = reader->ReadMetadata(&metadata);\n+\n+  pb::sql::DoPutUpdateResult doPutUpdateResult;\n+\n+  Buffer* pBuffer = metadata.get();\n+\n+  const std::string& string = pBuffer->ToString();\n+\n+  doPutUpdateResult.ParseFrom<google::protobuf::MessageLite::kParse>(string);\n\nReview comment:\n       Is Protobuf not able to parse from a string_view or pointer+length?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       It seems odd that the test has to be separately linked to the generated Protobuf sources.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n\nReview comment:\n       nit: call_options isn't a parameter here\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n\nReview comment:\n       I worry this can lead to dangling references; might it be better to hold a shared_ptr here? Either of the Flight client (in which case we can just promote unique_ptr<FlightClient> to shared_ptr<FlightClient> internally in the FlightSqlClient), or of the FlightSql client (in which case it needs enable_shared_from_this)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n+\n+  /// \\brief Retrieve the parameter schema from the query.\n+  /// \\param schema   The parameter schema from the query.\n+  /// \\return         Status.\n+  Status GetParameterSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Retrieve the ResultSet schema from the query.\n+  /// \\param schema   The ResultSet schema from the query.\n+  /// \\return         Status.\n+  Status GetResultSetSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Set a RecordBatch that contains the parameters that will be bind.\n+  /// \\param parameter_binding_   The parameters that will be bind.\n+  /// \\return                     Status.\n+  Status SetParameters(std::shared_ptr<RecordBatch> parameter_binding);\n+\n+  /// \\brief Closes the prepared statement.\n+  /// \\param[in] options  RPC-layer hints for this call.\n+  /// \\return Status.\n+  Status Close();\n+\n+  /// \\brief Checks if the prepared statement is closed.\n+  /// \\return The state of the prepared statement.\n+  bool IsClosed() const;\n+};\n+\n+/// \\brief Flight client with Flight SQL semantics.\n+template <class T = arrow::flight::FlightClient>\n+class FlightSqlClientT {\n+ public:\n+  explicit FlightSqlClientT(std::unique_ptr<T>& client);\n+\n+  ~FlightSqlClientT();\n+\n+  /// \\brief Execute a query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset\n+  /// \\return Status.\n+  Status Execute(const FlightCallOptions& options, const std::string& query,\n+                 std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Execute an update query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] rows        The quantity of rows affected by the operation.\n+  /// \\return Status.\n+  Status ExecuteUpdate(const FlightCallOptions& options, const std::string& query,\n+                       int64_t* rows) const;\n+\n+  /// \\brief Request a list of catalogs.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset.\n+  /// \\return Status.\n+  Status GetCatalogs(const FlightCallOptions& options,\n+                     std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Request a list of schemas.\n+  /// \\param[in] options                RPC-layer hints for this call.\n+  /// \\param[in] catalog                The catalog.\n+  /// \\param[in] schema_filter_pattern  The schema filter pattern.\n+  /// \\param[out] flight_info           The FlightInfo describing where to access the\n+  ///                                   dataset.\n+  /// \\return Status.\n+  Status GetSchemas(const FlightCallOptions& options, const std::string* catalog,\n+                    const std::string* schema_filter_pattern,\n+                    std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Given a flight ticket and schema, request to be sent the\n+  /// stream. Returns record batch stream reader\n+  /// \\param[in] options Per-RPC options\n+  /// \\param[in] ticket The flight ticket to use\n+  /// \\param[out] stream the returned RecordBatchReader\n+  /// \\return Status\n+  Status DoGet(const FlightCallOptions& options, const Ticket& ticket,\n+               std::unique_ptr<FlightStreamReader>* stream) const;\n+\n+  /// \\brief Request a list of tables.\n+  /// \\param[in] options                  RPC-layer hints for this call.\n+  /// \\param[in] catalog                  The catalog.\n+  /// \\param[in] schema_filter_pattern    The schema filter pattern.\n+  /// \\param[in] table_filter_pattern     The table filter pattern.\n+  /// \\param[in] include_schema           True to include the schema upon return,\n+  ///                                     false to not include the schema.\n+  /// \\param[in] table_types              The table types to include.\n+  /// \\param[out] flight_info             The FlightInfo describing where to access the\n+  ///                                     dataset.\n+  /// \\return Status.\n+  Status GetTables(const FlightCallOptions& options, const std::string* catalog,\n\nReview comment:\n       These should be `const std::string&`.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.cpp\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/ipc/writer.h>\n+#include <arrow/record_batch.h>\n+#include <sqlite3.h>\n+\n+#include <sstream>\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<Schema> SqliteTablesWithSchemaBatchReader::schema() const {\n+  return SqlSchema::GetTablesSchemaWithIncludedSchema();\n+}\n+\n+Status SqliteTablesWithSchemaBatchReader::ReadNext(std::shared_ptr<RecordBatch>* batch) {\n+  std::stringstream schema_query;\n+\n+  schema_query\n+      << \"SELECT table_name, name, type, [notnull] FROM pragma_table_info(table_name)\"\n+      << \"JOIN(\" << main_query_ << \") order by table_name\";\n+\n+  std::shared_ptr<example::SqliteStatement> schema_statement;\n+  ARROW_RETURN_NOT_OK(\n+      example::SqliteStatement::Create(db_, schema_query.str(), &schema_statement));\n+\n+  std::shared_ptr<RecordBatch> first_batch;\n+\n+  ARROW_RETURN_NOT_OK(reader_->ReadNext(&first_batch));\n+\n+  if (!first_batch) {\n+    *batch = NULLPTR;\n+    return Status::OK();\n+  }\n+\n+  const std::shared_ptr<Array> table_name_array =\n+      first_batch->GetColumnByName(\"table_name\");\n+\n+  BinaryBuilder schema_builder;\n+\n+  auto* string_array = reinterpret_cast<StringArray*>(table_name_array.get());\n+\n+  std::vector<std::shared_ptr<Field>> column_fields;\n+  for (int i = 0; i < table_name_array->length(); i++) {\n+    const std::string& table_name = string_array->GetString(i);\n+\n+    while (sqlite3_step(schema_statement->GetSqlite3Stmt()) == SQLITE_ROW) {\n+      std::string sqlite_table_name = std::string(reinterpret_cast<const char*>(\n+          sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 0)));\n+      if (sqlite_table_name == table_name) {\n+        const char* column_name = reinterpret_cast<const char*>(\n+            sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 1));\n+        const char* column_type = reinterpret_cast<const char*>(\n+            sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 2));\n+        int nullable = sqlite3_column_int(schema_statement->GetSqlite3Stmt(), 3);\n+\n+        column_fields.push_back(\n+            arrow::field(column_name, GetArrowType(column_type), nullable == 0, NULL));\n+      }\n+    }\n+    const arrow::Result<std::shared_ptr<Buffer>>& value =\n+        ipc::SerializeSchema(*arrow::schema(column_fields));\n\nReview comment:\n       ARROW_ASSIGN_OR_RAISE is probably what you want here\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server.h\n##########\n@@ -0,0 +1,404 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Interfaces to use for defining Flight RPC servers. API should be considered\n+// experimental for now\n+\n+#pragma once\n+\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/server.h>\n+#include <google/protobuf/any.pb.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+class FlightSqlServerBase : public FlightServerBase {\n+ public:\n+  Status GetFlightInfo(const ServerCallContext& context, const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override;\n+\n+  Status DoGet(const ServerCallContext& context, const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* stream) override;\n+\n+  Status DoPut(const ServerCallContext& context,\n+               std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override;\n+\n+  const ActionType FLIGHT_SQL_CREATE_PREPARED_STATEMENT =\n+      ActionType{.type = \"CreatePreparedStatement\",\n\nReview comment:\n       Huh, do all our compilers support this? Would be nice if CI pans out.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/test_app_cli.cc\n##########\n@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/io/memory.h>\n+#include <arrow/pretty_print.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <gflags/gflags.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <iostream>\n+#include <memory>\n+\n+using arrow::Result;\n+using arrow::Schema;\n+using arrow::Status;\n+using arrow::flight::ClientAuthHandler;\n+using arrow::flight::FlightCallOptions;\n+using arrow::flight::FlightClient;\n+using arrow::flight::FlightDescriptor;\n+using arrow::flight::FlightEndpoint;\n+using arrow::flight::FlightInfo;\n+using arrow::flight::FlightStreamChunk;\n+using arrow::flight::FlightStreamReader;\n+using arrow::flight::Location;\n+using arrow::flight::Ticket;\n+using arrow::flight::sql::FlightSqlClient;\n+\n+DEFINE_string(host, \"localhost\", \"Host to connect to\");\n+DEFINE_int32(port, 32010, \"Port to connect to\");\n+DEFINE_string(username, \"\", \"Username\");\n+DEFINE_string(password, \"\", \"Password\");\n+\n+DEFINE_string(command, \"\", \"Method to run\");\n+DEFINE_string(query, \"\", \"Query\");\n+DEFINE_string(catalog, \"\", \"Catalog\");\n+DEFINE_string(schema, \"\", \"Schema\");\n+DEFINE_string(table, \"\", \"Table\");\n+\n+Status PrintResultsForEndpoint(const FlightSqlClient& client,\n+                               const FlightCallOptions& call_options,\n+                               const FlightEndpoint& endpoint) {\n+  std::unique_ptr<FlightStreamReader> stream;\n+  ARROW_RETURN_NOT_OK(client.DoGet(call_options, endpoint.ticket, &stream));\n+\n+  const arrow::Result<std::shared_ptr<Schema>>& schema = stream->GetSchema();\n+  ARROW_RETURN_NOT_OK(schema);\n+\n+  std::cout << \"Schema:\" << std::endl;\n+  std::cout << schema->get()->ToString() << std::endl << std::endl;\n+\n+  std::cout << \"Results:\" << std::endl;\n+\n+  FlightStreamChunk chunk;\n+  int64_t num_rows = 0;\n+\n+  while (true) {\n+    ARROW_RETURN_NOT_OK(stream->Next(&chunk));\n+    if (!(chunk.data != nullptr)) {\n+      break;\n+    }\n+    std::cout << chunk.data->ToString() << std::endl;\n+    num_rows += chunk.data->num_rows();\n+  }\n+\n+  std::cout << \"Total: \" << num_rows << std::endl;\n+\n+  return Status::OK();\n+}\n+\n+Status PrintResults(FlightSqlClient& client, const FlightCallOptions& call_options,\n+                    const std::unique_ptr<FlightInfo>& info) {\n+  const std::vector<FlightEndpoint>& endpoints = info->endpoints();\n+\n+  for (size_t i = 0; i < endpoints.size(); i++) {\n+    std::cout << \"Results from endpoint \" << i + 1 << \" of \" << endpoints.size()\n+              << std::endl;\n+    ARROW_RETURN_NOT_OK(PrintResultsForEndpoint(client, call_options, endpoints[i]));\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status RunMain() {\n+  std::unique_ptr<FlightClient> client;\n+  Location location;\n+  ARROW_RETURN_NOT_OK(Location::ForGrpcTcp(fLS::FLAGS_host, fLI::FLAGS_port, &location));\n+  ARROW_RETURN_NOT_OK(FlightClient::Connect(location, &client));\n+\n+  FlightCallOptions call_options;\n+\n+  if (!fLS::FLAGS_username.empty() || !fLS::FLAGS_password.empty()) {\n+    Result<std::pair<std::string, std::string>> bearer_result =\n+        client->AuthenticateBasicToken({}, fLS::FLAGS_username, fLS::FLAGS_password);\n+    ARROW_RETURN_NOT_OK(bearer_result);\n+\n+    call_options.headers.push_back(bearer_result.ValueOrDie());\n+  }\n+\n+  FlightSqlClient sqlClient(client);\n+\n+  if (fLS::FLAGS_command == \"ExecuteUpdate\") {\n+    int64_t rows;\n+    ARROW_RETURN_NOT_OK(sqlClient.ExecuteUpdate(call_options, fLS::FLAGS_query, &rows));\n+\n+    std::cout << \"Result: \" << rows << std::endl;\n+\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<FlightInfo> info;\n+\n+  if (fLS::FLAGS_command == \"Execute\") {\n\nReview comment:\n       Where do these fLS/fLI namespaces come from?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n+  FlightStreamChunk chunk;\n+  while (true) {\n+    RETURN_NOT_OK(reader->Next(&chunk));\n+    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n+    if (record_batch == nullptr) break;\n+\n+    const int64_t num_rows = record_batch->num_rows();\n+    const int& num_columns = record_batch->num_columns();\n+\n+    for (int i = 0; i < num_rows; ++i) {\n+      for (int c = 0; c < num_columns; ++c) {\n+        const std::shared_ptr<Array>& column = record_batch->column(c);\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n+\n+        auto& holder = reinterpret_cast<DenseUnionScalar&>(*scalar).value;\n+\n+        switch (holder->type->id()) {\n+          case Type::INT64: {\n+            int64_t value = reinterpret_cast<Int64Scalar&>(*holder).value;\n+            sqlite3_bind_int64(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::FLOAT: {\n+            double value = reinterpret_cast<FloatScalar&>(*holder).value;\n+            sqlite3_bind_double(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::STRING: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<StringScalar&>(*holder).value;\n+            const std::string string = buffer->ToString();\n+            const char* value = string.c_str();\n+            sqlite3_bind_text(stmt, c + 1, value, static_cast<int>(strlen(value)),\n+                              SQLITE_TRANSIENT);\n+            break;\n+          }\n+          case Type::BINARY: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<BinaryScalar&>(*holder).value;\n+            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n+                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n+            break;\n+          }\n+          default:\n+            return Status::Invalid(\"Received unsupported data type: \",\n+                                   holder->type->ToString());\n+        }\n+      }\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+SQLiteFlightSqlServer::SQLiteFlightSqlServer() {\n+  db_ = NULLPTR;\n+  if (sqlite3_open(\":memory:\", &db_)) {\n+    sqlite3_close(db_);\n+    throw std::runtime_error(std::string(\"Can't open database: \") + sqlite3_errmsg(db_));\n+  }\n+\n+  ExecuteSql(R\"(\n+CREATE TABLE foreignTable (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  foreignName varchar(100),\n+  value int);\n+\n+CREATE TABLE intTable (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  keyName varchar(100),\n+  value int,\n+  foreignId int references foreignTable(id));\n+\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyOne', 1);\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyTwo', 0);\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyThree', -1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('one', 1, 1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('zero', 0, 1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('negative one', -1, 1);\n+  )\");\n+}\n+\n+SQLiteFlightSqlServer::~SQLiteFlightSqlServer() { sqlite3_close(db_); }\n+\n+void SQLiteFlightSqlServer::ExecuteSql(const std::string& sql) {\n+  char* zErrMsg = NULLPTR;\n+  int rc = sqlite3_exec(db_, sql.c_str(), NULLPTR, NULLPTR, &zErrMsg);\n+  if (rc != SQLITE_OK) {\n+    fprintf(stderr, \"SQL error: %s\\n\", zErrMsg);\n+    sqlite3_free(zErrMsg);\n+  }\n+}\n+\n+Status DoGetSQLiteQuery(sqlite3* db, const std::string& query,\n+                        const std::shared_ptr<Schema>& schema,\n+                        std::unique_ptr<FlightDataStream>* result) {\n+  std::shared_ptr<SqliteStatement> statement;\n+  ARROW_RETURN_NOT_OK(SqliteStatement::Create(db, query, &statement));\n+\n+  std::shared_ptr<SqliteStatementBatchReader> reader;\n+  ARROW_RETURN_NOT_OK(SqliteStatementBatchReader::Create(statement, schema, &reader));\n+\n+  *result = std::unique_ptr<FlightDataStream>(new RecordBatchStream(reader));\n+\n+  return Status::OK();\n+}\n+\n+Status GetFlightInfoForCommand(const FlightDescriptor& descriptor,\n+                               std::unique_ptr<FlightInfo>* info,\n+                               const google::protobuf::Message& command,\n+                               const std::shared_ptr<Schema>& schema) {\n+  google::protobuf::Any ticketParsed;\n\nReview comment:\n       nit: `ticket_parsed`\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n+\n+  /// \\brief Retrieve the parameter schema from the query.\n+  /// \\param schema   The parameter schema from the query.\n+  /// \\return         Status.\n+  Status GetParameterSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Retrieve the ResultSet schema from the query.\n+  /// \\param schema   The ResultSet schema from the query.\n+  /// \\return         Status.\n+  Status GetResultSetSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Set a RecordBatch that contains the parameters that will be bind.\n+  /// \\param parameter_binding_   The parameters that will be bind.\n+  /// \\return                     Status.\n+  Status SetParameters(std::shared_ptr<RecordBatch> parameter_binding);\n+\n+  /// \\brief Closes the prepared statement.\n+  /// \\param[in] options  RPC-layer hints for this call.\n+  /// \\return Status.\n+  Status Close();\n+\n+  /// \\brief Checks if the prepared statement is closed.\n+  /// \\return The state of the prepared statement.\n+  bool IsClosed() const;\n+};\n+\n+/// \\brief Flight client with Flight SQL semantics.\n+template <class T = arrow::flight::FlightClient>\n+class FlightSqlClientT {\n+ public:\n+  explicit FlightSqlClientT(std::unique_ptr<T>& client);\n+\n+  ~FlightSqlClientT();\n+\n+  /// \\brief Execute a query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset\n+  /// \\return Status.\n+  Status Execute(const FlightCallOptions& options, const std::string& query,\n+                 std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Execute an update query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] rows        The quantity of rows affected by the operation.\n+  /// \\return Status.\n+  Status ExecuteUpdate(const FlightCallOptions& options, const std::string& query,\n+                       int64_t* rows) const;\n+\n+  /// \\brief Request a list of catalogs.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset.\n+  /// \\return Status.\n+  Status GetCatalogs(const FlightCallOptions& options,\n+                     std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Request a list of schemas.\n+  /// \\param[in] options                RPC-layer hints for this call.\n+  /// \\param[in] catalog                The catalog.\n+  /// \\param[in] schema_filter_pattern  The schema filter pattern.\n+  /// \\param[out] flight_info           The FlightInfo describing where to access the\n+  ///                                   dataset.\n+  /// \\return Status.\n+  Status GetSchemas(const FlightCallOptions& options, const std::string* catalog,\n+                    const std::string* schema_filter_pattern,\n+                    std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Given a flight ticket and schema, request to be sent the\n+  /// stream. Returns record batch stream reader\n+  /// \\param[in] options Per-RPC options\n+  /// \\param[in] ticket The flight ticket to use\n+  /// \\param[out] stream the returned RecordBatchReader\n+  /// \\return Status\n+  Status DoGet(const FlightCallOptions& options, const Ticket& ticket,\n+               std::unique_ptr<FlightStreamReader>* stream) const;\n+\n+  /// \\brief Request a list of tables.\n+  /// \\param[in] options                  RPC-layer hints for this call.\n+  /// \\param[in] catalog                  The catalog.\n+  /// \\param[in] schema_filter_pattern    The schema filter pattern.\n+  /// \\param[in] table_filter_pattern     The table filter pattern.\n+  /// \\param[in] include_schema           True to include the schema upon return,\n+  ///                                     false to not include the schema.\n+  /// \\param[in] table_types              The table types to include.\n+  /// \\param[out] flight_info             The FlightInfo describing where to access the\n+  ///                                     dataset.\n+  /// \\return Status.\n+  Status GetTables(const FlightCallOptions& options, const std::string* catalog,\n\nReview comment:\n       Ah, these are for optional arguments. Is there any downside to treating empty string as not present? (I suppose our Protobuf differentiates between the two now.)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       (The analogous files are omitted for Flight since they get #included into another file, but that doesn't apply here.)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client_test.cc\n##########\n@@ -0,0 +1,572 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/types.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#include <utility>\n+\n+namespace pb = arrow::flight::protocol;\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+using internal::FlightSqlClientT;\n+\n+class FlightClientMock {\n+ public:\n+  MOCK_METHOD(Status, GetFlightInfo,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               std::unique_ptr<FlightInfo>*));\n+  MOCK_METHOD(Status, DoPut,\n+              (const FlightCallOptions&, const FlightDescriptor&,\n+               const std::shared_ptr<Schema>& schema,\n+               std::unique_ptr<FlightStreamWriter>*,\n+               std::unique_ptr<FlightMetadataReader>*));\n+  MOCK_METHOD(Status, DoAction,\n+              (const FlightCallOptions& options, const Action& action,\n+               std::unique_ptr<ResultStream>* results));\n+};\n+\n+class FlightMetadataReaderMock : public FlightMetadataReader {\n+ public:\n+  std::shared_ptr<Buffer>* buffer;\n+\n+  explicit FlightMetadataReaderMock(std::shared_ptr<Buffer>* buffer) {\n+    this->buffer = buffer;\n+  }\n+\n+  Status ReadMetadata(std::shared_ptr<Buffer>* out) override {\n+    *out = *buffer;\n+    return Status::OK();\n+  }\n+};\n+\n+class FlightStreamWriterMock : public FlightStreamWriter {\n+ public:\n+  FlightStreamWriterMock() = default;\n+\n+  Status DoneWriting() override { return Status::OK(); }\n+\n+  Status WriteMetadata(std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema,\n+               const ipc::IpcWriteOptions& options) override {\n+    return Status::OK();\n+  }\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema) override {\n+    return MetadataRecordBatchWriter::Begin(schema);\n+  }\n+\n+  ipc::WriteStats stats() const override { return ipc::WriteStats(); }\n+\n+  Status WriteWithMetadata(const RecordBatch& batch,\n+                           std::shared_ptr<Buffer> app_metadata) override {\n+    return Status::OK();\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n+\n+  Status WriteRecordBatch(const RecordBatch& batch) override { return Status::OK(); }\n+};\n+\n+FlightDescriptor getDescriptor(google::protobuf::Message& command) {\n+  google::protobuf::Any any;\n+  any.PackFrom(command);\n+\n+  const std::string& string = any.SerializeAsString();\n+  return FlightDescriptor::Command(string);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetCatalogs) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n+\n+  pb::sql::CommandGetCatalogs command;\n+  FlightDescriptor descriptor = getDescriptor(command);\n+\n+  std::unique_ptr<FlightInfo> flight_info;\n+  EXPECT_CALL(*client_mock, GetFlightInfo(Ref(call_options), descriptor, &flight_info));\n+\n+  (void)sqlClient.GetCatalogs(call_options, &flight_info);\n+}\n+\n+TEST(TestFlightSqlClient, TestGetSchemas) {\n+  auto* client_mock = new FlightClientMock();\n+  std::unique_ptr<FlightClientMock> client_mock_ptr(client_mock);\n+  FlightSqlClientT<FlightClientMock> sqlClient(client_mock_ptr);\n+  FlightCallOptions call_options;\n+\n+  std::string schema_filter_pattern = \"schema_filter_pattern\";\n+  std::string catalog = \"catalog\";\n+\n+  pb::sql::CommandGetSchemas command;\n+  command.set_catalog(catalog);\n+  command.set_schema_filter_pattern(schema_filter_pattern);\n+  FlightDescriptor descriptor = getDescriptor(command);\n+\n+  std::unique_ptr<FlightInfo> flight_info;\n+  EXPECT_CALL(*client_mock, GetFlightInfo(Ref(call_options), descriptor, &flight_info));\n+\n+  (void)sqlClient.GetSchemas(call_options, &catalog, &schema_filter_pattern,\n\nReview comment:\n       (Also I think we have ARROW_UNUSED for this)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.cpp\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/ipc/writer.h>\n+#include <arrow/record_batch.h>\n+#include <sqlite3.h>\n+\n+#include <sstream>\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<Schema> SqliteTablesWithSchemaBatchReader::schema() const {\n+  return SqlSchema::GetTablesSchemaWithIncludedSchema();\n+}\n+\n+Status SqliteTablesWithSchemaBatchReader::ReadNext(std::shared_ptr<RecordBatch>* batch) {\n+  std::stringstream schema_query;\n+\n+  schema_query\n+      << \"SELECT table_name, name, type, [notnull] FROM pragma_table_info(table_name)\"\n+      << \"JOIN(\" << main_query_ << \") order by table_name\";\n+\n+  std::shared_ptr<example::SqliteStatement> schema_statement;\n+  ARROW_RETURN_NOT_OK(\n+      example::SqliteStatement::Create(db_, schema_query.str(), &schema_statement));\n+\n+  std::shared_ptr<RecordBatch> first_batch;\n+\n+  ARROW_RETURN_NOT_OK(reader_->ReadNext(&first_batch));\n+\n+  if (!first_batch) {\n+    *batch = NULLPTR;\n+    return Status::OK();\n+  }\n+\n+  const std::shared_ptr<Array> table_name_array =\n+      first_batch->GetColumnByName(\"table_name\");\n+\n+  BinaryBuilder schema_builder;\n+\n+  auto* string_array = reinterpret_cast<StringArray*>(table_name_array.get());\n+\n+  std::vector<std::shared_ptr<Field>> column_fields;\n+  for (int i = 0; i < table_name_array->length(); i++) {\n+    const std::string& table_name = string_array->GetString(i);\n+\n+    while (sqlite3_step(schema_statement->GetSqlite3Stmt()) == SQLITE_ROW) {\n+      std::string sqlite_table_name = std::string(reinterpret_cast<const char*>(\n+          sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 0)));\n+      if (sqlite_table_name == table_name) {\n+        const char* column_name = reinterpret_cast<const char*>(\n+            sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 1));\n+        const char* column_type = reinterpret_cast<const char*>(\n+            sqlite3_column_text(schema_statement->GetSqlite3Stmt(), 2));\n+        int nullable = sqlite3_column_int(schema_statement->GetSqlite3Stmt(), 3);\n+\n+        column_fields.push_back(\n+            arrow::field(column_name, GetArrowType(column_type), nullable == 0, NULL));\n+      }\n+    }\n+    const arrow::Result<std::shared_ptr<Buffer>>& value =\n+        ipc::SerializeSchema(*arrow::schema(column_fields));\n+    column_fields.clear();\n+    ARROW_RETURN_NOT_OK(\n+        schema_builder.Append(value.ValueOrDie()->data(), value.ValueOrDie()->size()));\n+  }\n+\n+  std::shared_ptr<Array> schema_array;\n+  ARROW_RETURN_NOT_OK(schema_builder.Finish(&schema_array));\n+\n+  auto result = first_batch->AddColumn(4, \"table_schema\", schema_array);\n+\n+  ARROW_ASSIGN_OR_RAISE(*batch, result);\n\nReview comment:\n       Also you can do something like `ARROW_ASSIGN_OR_RAISE(*batch, first_batch->AddColumn(...));`\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server.h\n##########\n@@ -0,0 +1,404 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Interfaces to use for defining Flight RPC servers. API should be considered\n+// experimental for now\n+\n+#pragma once\n+\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/server.h>\n+#include <google/protobuf/any.pb.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+class FlightSqlServerBase : public FlightServerBase {\n+ public:\n+  Status GetFlightInfo(const ServerCallContext& context, const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override;\n+\n+  Status DoGet(const ServerCallContext& context, const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* stream) override;\n+\n+  Status DoPut(const ServerCallContext& context,\n+               std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override;\n+\n+  const ActionType FLIGHT_SQL_CREATE_PREPARED_STATEMENT =\n+      ActionType{.type = \"CreatePreparedStatement\",\n+                 .description =\n+                     \"Creates a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionCreatePreparedStatementRequest\\n\"\n+                     \"Response Message: ActionCreatePreparedStatementResult\"};\n+  const ActionType FLIGHT_SQL_CLOSE_PREPARED_STATEMENT =\n+      ActionType{.type = \"ClosePreparedStatement\",\n+                 .description =\n+                     \"Closes a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionClosePreparedStatementRequest\\n\"\n+                     \"Response Message: N/A\"};\n+\n+  Status ListActions(const ServerCallContext& context,\n+                     std::vector<ActionType>* actions) override;\n+\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override;\n+\n+  /// \\brief Gets a FlightInfo for executing a SQL query.\n+  /// \\param[in] command      The CommandStatementQuery object containing the SQL\n+  ///                         statement.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoStatement(const pb::sql::CommandStatementQuery& command,\n\nReview comment:\n       I guess I'm +0 on this for now.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n\nReview comment:\n       And ditto below. (Sorry for the churn.)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n\nReview comment:\n       There's a TableFromJSON as well.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME; \\\n+  {                                                     \\\n+    arrow::TYPE_CLASS##Builder builder;                 \\\n+    auto data = unparen DATA;                           \\\n+    for (const auto& item : data) {                     \\\n+      ASSERT_OK(builder.Append(item));                  \\\n+    }                                                   \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));           \\\n+  }\n+\n+#define DECLARE_BINARY_ARRAY(ARRAY_NAME, DATA, LENGTH) \\\n+  std::shared_ptr<arrow::BinaryArray> ARRAY_NAME;      \\\n+  {                                                    \\\n+    arrow::Binary##Builder builder;                    \\\n+    auto data = unparen DATA;                          \\\n+    for (const auto& item : data) {                    \\\n+      ASSERT_OK(builder.Append(item, LENGTH));         \\\n+    }                                                  \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));          \\\n+  }\n+\n+#define DECLARE_NULL_ARRAY(ARRAY_NAME, TYPE_CLASS, LENGTH) \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME;    \\\n+  {                                                        \\\n+    arrow::TYPE_CLASS##Builder builder;                    \\\n+    for (int i = 0; i < LENGTH; i++) {                     \\\n+      ASSERT_OK(builder.AppendNull());                     \\\n+    }                                                      \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));              \\\n+  }\n+\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+TestServer* server;\n+FlightSqlClient* sql_client;\n+\n+class TestFlightSqlServer : public ::testing::Environment {\n+ protected:\n+  void SetUp() override {\n+    server = new TestServer(\"flight_sql_test_server\");\n+    server->Start();\n+    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n\nReview comment:\n       Could we instead poll in a loop so that we don't always have to wait a full second?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n+  FlightStreamChunk chunk;\n+  while (true) {\n+    RETURN_NOT_OK(reader->Next(&chunk));\n+    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n+    if (record_batch == nullptr) break;\n+\n+    const int64_t num_rows = record_batch->num_rows();\n+    const int& num_columns = record_batch->num_columns();\n+\n+    for (int i = 0; i < num_rows; ++i) {\n+      for (int c = 0; c < num_columns; ++c) {\n+        const std::shared_ptr<Array>& column = record_batch->column(c);\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n+\n+        auto& holder = reinterpret_cast<DenseUnionScalar&>(*scalar).value;\n+\n+        switch (holder->type->id()) {\n+          case Type::INT64: {\n+            int64_t value = reinterpret_cast<Int64Scalar&>(*holder).value;\n+            sqlite3_bind_int64(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::FLOAT: {\n+            double value = reinterpret_cast<FloatScalar&>(*holder).value;\n+            sqlite3_bind_double(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::STRING: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<StringScalar&>(*holder).value;\n+            const std::string string = buffer->ToString();\n+            const char* value = string.c_str();\n+            sqlite3_bind_text(stmt, c + 1, value, static_cast<int>(strlen(value)),\n+                              SQLITE_TRANSIENT);\n+            break;\n+          }\n+          case Type::BINARY: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<BinaryScalar&>(*holder).value;\n+            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n+                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n+            break;\n+          }\n+          default:\n+            return Status::Invalid(\"Received unsupported data type: \",\n+                                   holder->type->ToString());\n+        }\n+      }\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+SQLiteFlightSqlServer::SQLiteFlightSqlServer() {\n+  db_ = NULLPTR;\n+  if (sqlite3_open(\":memory:\", &db_)) {\n+    sqlite3_close(db_);\n+    throw std::runtime_error(std::string(\"Can't open database: \") + sqlite3_errmsg(db_));\n+  }\n+\n+  ExecuteSql(R\"(\n+CREATE TABLE foreignTable (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  foreignName varchar(100),\n+  value int);\n+\n+CREATE TABLE intTable (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  keyName varchar(100),\n+  value int,\n+  foreignId int references foreignTable(id));\n+\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyOne', 1);\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyTwo', 0);\n+INSERT INTO foreignTable (foreignName, value) VALUES ('keyThree', -1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('one', 1, 1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('zero', 0, 1);\n+INSERT INTO intTable (keyName, value, foreignId) VALUES ('negative one', -1, 1);\n+  )\");\n+}\n+\n+SQLiteFlightSqlServer::~SQLiteFlightSqlServer() { sqlite3_close(db_); }\n+\n+void SQLiteFlightSqlServer::ExecuteSql(const std::string& sql) {\n+  char* zErrMsg = NULLPTR;\n+  int rc = sqlite3_exec(db_, sql.c_str(), NULLPTR, NULLPTR, &zErrMsg);\n+  if (rc != SQLITE_OK) {\n+    fprintf(stderr, \"SQL error: %s\\n\", zErrMsg);\n+    sqlite3_free(zErrMsg);\n+  }\n\nReview comment:\n       A couple things:\r\n   - `z_err_msg` or just `err_msg` to fit the naming scheme?\r\n   - NULLPTR is only required in header files, for what it's worth.\r\n   - Why not return the error as a Status?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME; \\\n+  {                                                     \\\n+    arrow::TYPE_CLASS##Builder builder;                 \\\n+    auto data = unparen DATA;                           \\\n+    for (const auto& item : data) {                     \\\n+      ASSERT_OK(builder.Append(item));                  \\\n+    }                                                   \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));           \\\n+  }\n+\n+#define DECLARE_BINARY_ARRAY(ARRAY_NAME, DATA, LENGTH) \\\n+  std::shared_ptr<arrow::BinaryArray> ARRAY_NAME;      \\\n+  {                                                    \\\n+    arrow::Binary##Builder builder;                    \\\n+    auto data = unparen DATA;                          \\\n+    for (const auto& item : data) {                    \\\n+      ASSERT_OK(builder.Append(item, LENGTH));         \\\n+    }                                                  \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));          \\\n+  }\n+\n+#define DECLARE_NULL_ARRAY(ARRAY_NAME, TYPE_CLASS, LENGTH) \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME;    \\\n+  {                                                        \\\n+    arrow::TYPE_CLASS##Builder builder;                    \\\n+    for (int i = 0; i < LENGTH; i++) {                     \\\n+      ASSERT_OK(builder.AppendNull());                     \\\n+    }                                                      \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));              \\\n+  }\n+\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+TestServer* server;\n+FlightSqlClient* sql_client;\n+\n+class TestFlightSqlServer : public ::testing::Environment {\n+ protected:\n+  void SetUp() override {\n+    server = new TestServer(\"flight_sql_test_server\");\n+    server->Start();\n+    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n+    ASSERT_TRUE(server->IsRunning());\n+\n+    std::stringstream ss;\n+    ss << \"grpc://localhost:\" << server->port();\n+    std::string uri = ss.str();\n+\n+    std::unique_ptr<FlightClient> client;\n+    Location location;\n+    ASSERT_OK(Location::Parse(uri, &location));\n+    ASSERT_OK(FlightClient::Connect(location, &client));\n+\n+    sql_client = new FlightSqlClient(client);\n+  }\n+\n+  void TearDown() override {\n+    server->Stop();\n+\n+    free(server);\n+    free(sql_client);\n\nReview comment:\n       delete?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_server.cc\n##########\n@@ -0,0 +1,710 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_server.h\"\n+\n+#include <sqlite3.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/uuid/uuid.hpp>\n+#include <boost/uuid/uuid_io.hpp>\n+#include <sstream>\n+\n+#include \"arrow/api.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\"\n+#include \"arrow/flight/flight-sql/server.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<DataType> GetArrowType(const char* sqlite_type) {\n+  if (sqlite_type == NULLPTR) {\n+    // SQLite may not know the column type yet.\n+    return null();\n+  }\n+\n+  if (boost::iequals(sqlite_type, \"int\") || boost::iequals(sqlite_type, \"integer\")) {\n+    return int64();\n+  } else if (boost::iequals(sqlite_type, \"REAL\")) {\n+    return float64();\n+  } else if (boost::iequals(sqlite_type, \"BLOB\")) {\n+    return binary();\n+  } else if (boost::iequals(sqlite_type, \"TEXT\") ||\n+             boost::istarts_with(sqlite_type, \"char\") ||\n+             boost::istarts_with(sqlite_type, \"varchar\")) {\n+    return utf8();\n+  } else {\n+    return null();\n+  }\n+}\n+\n+std::string PrepareQueryForGetTables(const pb::sql::CommandGetTables& command) {\n+  std::stringstream table_query;\n+\n+  table_query << \"SELECT null as catalog_name, null as schema_name, name as \"\n+                 \"table_name, type as table_type FROM sqlite_master where 1=1\";\n+\n+  if (command.has_catalog()) {\n+    table_query << \" and catalog_name='\" << command.catalog() << \"'\";\n+  }\n+\n+  if (command.has_schema_filter_pattern()) {\n+    table_query << \" and schema_name LIKE '\" << command.schema_filter_pattern() << \"'\";\n+  }\n+\n+  if (command.has_table_name_filter_pattern()) {\n+    table_query << \" and table_name LIKE '\" << command.table_name_filter_pattern() << \"'\";\n+  }\n+\n+  if (!command.table_types().empty()) {\n+    google::protobuf::RepeatedPtrField<std::string> types = command.table_types();\n+\n+    table_query << \" and table_type IN (\";\n+    int size = types.size();\n+    for (int i = 0; i < size; i++) {\n+      table_query << \"'\" << types.at(i) << \"'\";\n+      if (size - 1 != i) {\n+        table_query << \",\";\n+      }\n+    }\n+\n+    table_query << \")\";\n+  }\n+\n+  table_query << \" order by table_name\";\n+  return table_query.str();\n+}\n+\n+Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt,\n+                                      std::unique_ptr<FlightMessageReader>& reader) {\n+  FlightStreamChunk chunk;\n+  while (true) {\n+    RETURN_NOT_OK(reader->Next(&chunk));\n+    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n+    if (record_batch == nullptr) break;\n+\n+    const int64_t num_rows = record_batch->num_rows();\n+    const int& num_columns = record_batch->num_columns();\n+\n+    for (int i = 0; i < num_rows; ++i) {\n+      for (int c = 0; c < num_columns; ++c) {\n+        const std::shared_ptr<Array>& column = record_batch->column(c);\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n+\n+        auto& holder = reinterpret_cast<DenseUnionScalar&>(*scalar).value;\n+\n+        switch (holder->type->id()) {\n+          case Type::INT64: {\n+            int64_t value = reinterpret_cast<Int64Scalar&>(*holder).value;\n+            sqlite3_bind_int64(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::FLOAT: {\n+            double value = reinterpret_cast<FloatScalar&>(*holder).value;\n+            sqlite3_bind_double(stmt, c + 1, value);\n+            break;\n+          }\n+          case Type::STRING: {\n+            std::shared_ptr<Buffer> buffer =\n+                reinterpret_cast<StringScalar&>(*holder).value;\n+            const std::string string = buffer->ToString();\n+            const char* value = string.c_str();\n+            sqlite3_bind_text(stmt, c + 1, value, static_cast<int>(strlen(value)),\n\nReview comment:\n       You should be able to use buffer->data() and buffer->size() (with some casting) instead of allocating a new string.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_statement.h\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <sqlite3.h>\n+\n+#include \"arrow/api.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+class SqliteStatement {\n+ public:\n+  /// \\brief Creates a SQLite3 statement.\n+  /// \\param[in] db        SQLite3 database instance.\n+  /// \\param[in] sql       SQL statement.\n+  /// \\param[out] result   The resulting SqliteStatement.\n+  /// \\return              Status.\n+  static Status Create(sqlite3* db, const std::string& sql,\n+                       std::shared_ptr<SqliteStatement>* result);\n\nReview comment:\n       This, too, might be better as `Result<std::shared_ptr<SqliteStatement>>` (and ditto below)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.cpp\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       nit: this file has extension cpp, should have extension cc\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/test_app_cli.cc\n##########\n@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/io/memory.h>\n+#include <arrow/pretty_print.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <gflags/gflags.h>\n+\n+#include <boost/algorithm/string.hpp>\n+#include <iostream>\n+#include <memory>\n+\n+using arrow::Result;\n+using arrow::Schema;\n+using arrow::Status;\n+using arrow::flight::ClientAuthHandler;\n+using arrow::flight::FlightCallOptions;\n+using arrow::flight::FlightClient;\n+using arrow::flight::FlightDescriptor;\n+using arrow::flight::FlightEndpoint;\n+using arrow::flight::FlightInfo;\n+using arrow::flight::FlightStreamChunk;\n+using arrow::flight::FlightStreamReader;\n+using arrow::flight::Location;\n+using arrow::flight::Ticket;\n+using arrow::flight::sql::FlightSqlClient;\n+\n+DEFINE_string(host, \"localhost\", \"Host to connect to\");\n+DEFINE_int32(port, 32010, \"Port to connect to\");\n+DEFINE_string(username, \"\", \"Username\");\n+DEFINE_string(password, \"\", \"Password\");\n+\n+DEFINE_string(command, \"\", \"Method to run\");\n+DEFINE_string(query, \"\", \"Query\");\n+DEFINE_string(catalog, \"\", \"Catalog\");\n+DEFINE_string(schema, \"\", \"Schema\");\n+DEFINE_string(table, \"\", \"Table\");\n+\n+Status PrintResultsForEndpoint(const FlightSqlClient& client,\n+                               const FlightCallOptions& call_options,\n+                               const FlightEndpoint& endpoint) {\n+  std::unique_ptr<FlightStreamReader> stream;\n+  ARROW_RETURN_NOT_OK(client.DoGet(call_options, endpoint.ticket, &stream));\n+\n+  const arrow::Result<std::shared_ptr<Schema>>& schema = stream->GetSchema();\n+  ARROW_RETURN_NOT_OK(schema);\n+\n+  std::cout << \"Schema:\" << std::endl;\n+  std::cout << schema->get()->ToString() << std::endl << std::endl;\n+\n+  std::cout << \"Results:\" << std::endl;\n+\n+  FlightStreamChunk chunk;\n+  int64_t num_rows = 0;\n+\n+  while (true) {\n+    ARROW_RETURN_NOT_OK(stream->Next(&chunk));\n+    if (!(chunk.data != nullptr)) {\n+      break;\n+    }\n+    std::cout << chunk.data->ToString() << std::endl;\n+    num_rows += chunk.data->num_rows();\n+  }\n+\n+  std::cout << \"Total: \" << num_rows << std::endl;\n+\n+  return Status::OK();\n+}\n+\n+Status PrintResults(FlightSqlClient& client, const FlightCallOptions& call_options,\n+                    const std::unique_ptr<FlightInfo>& info) {\n+  const std::vector<FlightEndpoint>& endpoints = info->endpoints();\n+\n+  for (size_t i = 0; i < endpoints.size(); i++) {\n+    std::cout << \"Results from endpoint \" << i + 1 << \" of \" << endpoints.size()\n+              << std::endl;\n+    ARROW_RETURN_NOT_OK(PrintResultsForEndpoint(client, call_options, endpoints[i]));\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status RunMain() {\n+  std::unique_ptr<FlightClient> client;\n+  Location location;\n+  ARROW_RETURN_NOT_OK(Location::ForGrpcTcp(fLS::FLAGS_host, fLI::FLAGS_port, &location));\n+  ARROW_RETURN_NOT_OK(FlightClient::Connect(location, &client));\n+\n+  FlightCallOptions call_options;\n+\n+  if (!fLS::FLAGS_username.empty() || !fLS::FLAGS_password.empty()) {\n+    Result<std::pair<std::string, std::string>> bearer_result =\n+        client->AuthenticateBasicToken({}, fLS::FLAGS_username, fLS::FLAGS_password);\n+    ARROW_RETURN_NOT_OK(bearer_result);\n+\n+    call_options.headers.push_back(bearer_result.ValueOrDie());\n+  }\n+\n+  FlightSqlClient sqlClient(client);\n+\n+  if (fLS::FLAGS_command == \"ExecuteUpdate\") {\n+    int64_t rows;\n+    ARROW_RETURN_NOT_OK(sqlClient.ExecuteUpdate(call_options, fLS::FLAGS_query, &rows));\n+\n+    std::cout << \"Result: \" << rows << std::endl;\n+\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<FlightInfo> info;\n+\n+  if (fLS::FLAGS_command == \"Execute\") {\n\nReview comment:\n       I guess it comes from gflags - but FLAGS_command by itself should be usable?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_tables_schema_batch_reader.h\n##########\n@@ -0,0 +1,60 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_SQLITE_TABLES_SCHEMA_BATCH_READER_H\n+#define ARROW_SQLITE_TABLES_SCHEMA_BATCH_READER_H\n+\n+#include <arrow/record_batch.h>\n+#include <sqlite3.h>\n+\n+#include <sstream>\n+#include <utility>\n+\n+#include \"arrow/flight/flight-sql/example/sqlite_statement.h\"\n+#include \"arrow/flight/flight-sql/example/sqlite_statement_batch_reader.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+class SqliteTablesWithSchemaBatchReader : public RecordBatchReader {\n+ private:\n+  std::shared_ptr<example::SqliteStatementBatchReader> reader_;\n+  std::string main_query_;\n+  sqlite3* db_;\n+\n+ public:\n+  /// Constructor for SqliteTablesWithSchemaBatchReader class\n+  /// \\param reader an shared_ptr from a SqliteStatementBatchReader.\n+  /// \\param db_    a pointer to the sqlite3 db.\n+  SqliteTablesWithSchemaBatchReader(\n+      std::shared_ptr<example::SqliteStatementBatchReader> reader,\n+      std::string& main_query, sqlite3* db)\n\nReview comment:\n       nit: const std::string&\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client_impl.h\n##########\n@@ -0,0 +1,463 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/buffer.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/io/memory.h>\n+#include <arrow/ipc/reader.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <google/protobuf/any.pb.h>\n+#include <google/protobuf/message_lite.h>\n+\n+#include <utility>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T>\n+FlightSqlClientT<T>::FlightSqlClientT(std::unique_ptr<T>& client) {\n+  this->client = std::move(client);\n+}\n+\n+template <class T>\n+PreparedStatementT<T>::PreparedStatementT(\n+    T* client_, const std::string& query,\n+    pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result_,\n+    const FlightCallOptions& options_)\n+    : client(client_),\n+      prepared_statement_result(std::move(prepared_statement_result_)),\n+      options(options_) {\n+  is_closed = false;\n+}\n+\n+template <class T>\n+FlightSqlClientT<T>::~FlightSqlClientT() = default;\n+\n+template <class T>\n+PreparedStatementT<T>::~PreparedStatementT<T>() {\n+  Close();\n+}\n+\n+inline FlightDescriptor GetFlightDescriptorForCommand(\n+    const google::protobuf::Message& command) {\n+  google::protobuf::Any any;\n+  any.PackFrom(command);\n+\n+  const std::string& string = any.SerializeAsString();\n+  return FlightDescriptor::Command(string);\n+}\n+\n+template <class T>\n+Status GetFlightInfoForCommand(const std::unique_ptr<T>& client,\n+                               const FlightCallOptions& options,\n+                               std::unique_ptr<FlightInfo>* flight_info,\n+                               const google::protobuf::Message& command) {\n+  const FlightDescriptor& descriptor = GetFlightDescriptorForCommand(command);\n+\n+  return client->GetFlightInfo(options, descriptor, flight_info);\n+}\n+\n+template <class T>\n+Status FlightSqlClientT<T>::Execute(const FlightCallOptions& options,\n+                                    const std::string& query,\n+                                    std::unique_ptr<FlightInfo>* flight_info) const {\n+  pb::sql::CommandStatementQuery command;\n+  command.set_query(query);\n+\n+  return GetFlightInfoForCommand(client, options, flight_info, command);\n+}\n+\n+template <class T>\n+Status FlightSqlClientT<T>::ExecuteUpdate(const FlightCallOptions& options,\n+                                          const std::string& query, int64_t* rows) const {\n+  pb::sql::CommandStatementUpdate command;\n+  command.set_query(query);\n+\n+  const FlightDescriptor& descriptor = GetFlightDescriptorForCommand(command);\n+\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  std::unique_ptr<FlightMetadataReader> reader;\n+\n+  ARROW_RETURN_NOT_OK(client->DoPut(options, descriptor, NULLPTR, &writer, &reader));\n+\n+  std::shared_ptr<Buffer> metadata;\n+\n+  const Status& status = reader->ReadMetadata(&metadata);\n+\n+  pb::sql::DoPutUpdateResult doPutUpdateResult;\n+\n+  Buffer* pBuffer = metadata.get();\n+\n+  const std::string& string = pBuffer->ToString();\n+\n+  doPutUpdateResult.ParseFrom<google::protobuf::MessageLite::kParse>(string);\n\nReview comment:\n       Also IIRC Protobuf can throw exceptions in parsing/returns a boolean success flag that we should handle\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Or another way, if you want to preserve the GMock usage below, would be to have pImpls/abstract base classes in this header, then a `client_internal.h` that can be included from the .cc files to implement the pImpl/abstract base class and be used in the tests.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/example/sqlite_statement.h\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <sqlite3.h>\n+\n+#include \"arrow/api.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+class SqliteStatement {\n+ public:\n+  /// \\brief Creates a SQLite3 statement.\n+  /// \\param[in] db        SQLite3 database instance.\n+  /// \\param[in] sql       SQL statement.\n+  /// \\param[out] result   The resulting SqliteStatement.\n+  /// \\return              Status.\n+  static Status Create(sqlite3* db, const std::string& sql,\n+                       std::shared_ptr<SqliteStatement>* result);\n+\n+  ~SqliteStatement();\n+\n+  /// \\brief Creates an Arrow Schema based on the results of this statement.\n+  /// \\param[out] schema   The resulting Schema.\n+  /// \\return              Status.\n+  Status GetSchema(std::shared_ptr<Schema>* schema) const;\n+\n+  /// \\brief Steps on underlying sqlite3_stmt.\n+  /// \\param[out] rc   The resulting return code from SQLite.\n+  /// \\return          Status.\n+  Status Step(int* rc);\n+\n+  /// \\brief Reset the state of the sqlite3_stmt.\n+  /// \\param[out] rc   The resulting return code from SQLite.\n+  /// \\return          Status.\n+  Status Reset(int* rc);\n+\n+  /// \\brief Returns the underlying sqlite3_stmt.\n+  sqlite3_stmt* GetSqlite3Stmt();\n\nReview comment:\n       `sqlite3_stmt* sqlite_statement() const;`?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       Shouldn't this go in ARROW_FLIGHT_SQL_SRCS above?\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       It might better to extract a FlightClientInterface in flight/client.h.\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       (Also, if we do stick with this pattern, `FooImpl<T>` is more consistent with the rest of the codebase than `FooT<T>`)\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server_test.cc\n##########\n@@ -0,0 +1,653 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/flight/api.h>\n+#include <arrow/flight/flight-sql/api.h>\n+#include <arrow/flight/flight-sql/example/sqlite_server.h>\n+#include <arrow/flight/flight-sql/server.h>\n+#include <arrow/flight/test_util.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/testing/gtest_util.h>\n+#include <gmock/gmock.h>\n+#include <google/protobuf/any.pb.h>\n+#include <gtest/gtest.h>\n+\n+#define unparen(...) __VA_ARGS__\n+#define DECLARE_ARRAY(ARRAY_NAME, TYPE_CLASS, DATA)     \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME; \\\n+  {                                                     \\\n+    arrow::TYPE_CLASS##Builder builder;                 \\\n+    auto data = unparen DATA;                           \\\n+    for (const auto& item : data) {                     \\\n+      ASSERT_OK(builder.Append(item));                  \\\n+    }                                                   \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));           \\\n+  }\n+\n+#define DECLARE_BINARY_ARRAY(ARRAY_NAME, DATA, LENGTH) \\\n+  std::shared_ptr<arrow::BinaryArray> ARRAY_NAME;      \\\n+  {                                                    \\\n+    arrow::Binary##Builder builder;                    \\\n+    auto data = unparen DATA;                          \\\n+    for (const auto& item : data) {                    \\\n+      ASSERT_OK(builder.Append(item, LENGTH));         \\\n+    }                                                  \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));          \\\n+  }\n+\n+#define DECLARE_NULL_ARRAY(ARRAY_NAME, TYPE_CLASS, LENGTH) \\\n+  std::shared_ptr<arrow::TYPE_CLASS##Array> ARRAY_NAME;    \\\n+  {                                                        \\\n+    arrow::TYPE_CLASS##Builder builder;                    \\\n+    for (int i = 0; i < LENGTH; i++) {                     \\\n+      ASSERT_OK(builder.AppendNull());                     \\\n+    }                                                      \\\n+    ASSERT_OK(builder.Finish(&(ARRAY_NAME)));              \\\n+  }\n+\n+using ::testing::_;\n+using ::testing::Ref;\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+TestServer* server;\n+FlightSqlClient* sql_client;\n+\n+class TestFlightSqlServer : public ::testing::Environment {\n+ protected:\n+  void SetUp() override {\n+    server = new TestServer(\"flight_sql_test_server\");\n+    server->Start();\n+    std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n\nReview comment:\n       Though - what's stopping us from just starting the server in process?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-21T19:07:37.980+0000",
                    "updated": "2021-10-21T19:07:37.980+0000",
                    "started": "2021-10-21T19:07:37.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "668608",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734722860\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       A very strange bug occurred when we tried to link them together and also when we tried following the same approach as Flight (through `protocol_internal.cc`), my understanding of what went wrong is this:\r\n   \r\n   The problem was that as Arrow Flight implicitly static-links Protobuf (when compiling protocol_internal.cc), Arrow Flight SQL was linking it too by the same means and this ended up causing a one definition rule violation on an internal symbol of protobuf (google::protobuf::internal::GetEmptyStringAlreadyInited())\r\n   \r\n   Other person reported the exactly same issue here: https://github.com/protocolbuffers/protobuf/issues/6031\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T17:25:46.272+0000",
                    "updated": "2021-10-22T17:25:46.272+0000",
                    "started": "2021-10-22T17:25:46.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669048",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734722860\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       A very strange bug occurred when we tried to link them together and also when we tried following the same approach as Flight (through `protocol_internal.cc`), the protobuf objects were not behaving correctly when a message had multiple string fields, my understanding of what went wrong is this:\r\n   \r\n   The problem was that as Arrow Flight implicitly static-links Protobuf (when compiling protocol_internal.cc), Arrow Flight SQL was linking it too by the same means and this ended up causing a one definition rule violation on an internal symbol of protobuf (google::protobuf::internal::GetEmptyStringAlreadyInited())\r\n   \r\n   Other person reported the exactly same issue here: https://github.com/protocolbuffers/protobuf/issues/6031\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T17:26:50.939+0000",
                    "updated": "2021-10-22T17:26:50.939+0000",
                    "started": "2021-10-22T17:26:50.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669049",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734733045\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       Hmm, unfortunate. Arrow can build against both static and dynamic protobuf. Looking at it, even when dynamically linking to Protobuf, the problematic `GetEmptyStringAlreadyInited` symbol mentioned in that issue still appears in libarrow_flight.so. \r\n   \r\n   One way would be to fold FlightSQL into libarrow_flight.so/libarrow_flight.a, that way there is no need to have two separate libraries that can both link Protobuf. (I wonder how you are supposed to be able to build multiple things relying on Protobuf though\u2026)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T17:42:47.342+0000",
                    "updated": "2021-10-22T17:42:47.342+0000",
                    "started": "2021-10-22T17:42:47.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669055",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734742855\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Yes, that was templated to support putting a mock client in for tests.\r\n   \r\n   If I'm reading this right, the suggestion would be to have:\r\n   - client.h methods just be declarations and take in a FlightClientImpl*\r\n   - create a client_internal.h that defines what FlightClientImpl can do.\r\n   - Provide two .cc's that implement FlightClientImpl, one with the logic for a real FlightClient and one for a mock FlightClient.\r\n   - Provide a .cc for FlightSqlClient that invokes the FlightClientImpl.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T17:58:54.850+0000",
                    "updated": "2021-10-22T17:58:54.850+0000",
                    "started": "2021-10-22T17:58:54.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669059",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734742855\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Yes, that was templated to support putting a mock client in for tests.\r\n   \r\n   If I'm reading this right, the suggestion would be to have:\r\n   - client.h methods just be declarations and take in a FlightClientImpl*\r\n   - create a client_internal.h that defines what FlightClientImpl can do.\r\n   - Provide two .cc's that implement FlightClientImpl, one with the logic for a real FlightClient and one for a mock FlightClient. The .cc used will depend on if building for release or for tests.\r\n   - Provide a .cc for FlightSqlClient that invokes the FlightClientImpl.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T17:59:18.224+0000",
                    "updated": "2021-10-22T17:59:18.224+0000",
                    "started": "2021-10-22T17:59:18.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669060",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734742855\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Yes, that was templated to support putting a mock client in for tests.\r\n   \r\n   If I'm reading this right, the suggestion would be to have:\r\n   - client.h methods just be declarations and take in a FlightClientImpl*\r\n   - create a client_internal.h that defines what FlightClientImpl can do.\r\n   - Provide two .cc's that implement FlightClientImpl, one with the logic for a real FlightClient and one for a mock FlightClient. The .cc used will depend on if building for release or for tests.\r\n   - Provide a .cc for FlightSqlClient that invokes the FlightClientImpl.\r\n   \r\n   This should lets us abstract the implementation details for FlightSqlClient while avoiding virtual functions for performance.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:00:21.583+0000",
                    "updated": "2021-10-22T18:00:21.583+0000",
                    "started": "2021-10-22T18:00:21.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669061",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734742855\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       Yes, that was templated to support putting a mock client in for tests.\r\n   \r\n   If I'm reading this right, the suggestion would be to have:\r\n   - client.h methods just be declarations and take in a FlightClientImpl*\r\n   - create a client_internal.h that defines what FlightClientImpl can do.\r\n   - Provide two .cc's that implement FlightClientImpl, one with the logic for a real FlightClient and one for a mock FlightClient. The .cc used will depend on if building for release or for tests.\r\n   - Provide a .cc for FlightSqlClient that invokes the FlightClientImpl.\r\n   \r\n   This should let us abstract the implementation details for FlightSqlClient while avoiding virtual functions for performance.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:00:34.908+0000",
                    "updated": "2021-10-22T18:00:34.908+0000",
                    "started": "2021-10-22T18:00:34.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669062",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734745096\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       You could also have this structure, I think:\r\n   - client.h has an abstract base class and a function `MakePreparedStatement()`\r\n   - client_internal.h has:\r\n   \r\n       ```cpp\r\n   template <class T>\r\n   class PreparedStatementImpl : public PreparedStatement {\r\n   // ...current impl...\r\n   };\r\n       ```\r\n   - In tests, include client_internal.h and instantiate `PreparedStatementImpl<MockClient>`\r\n   - In client.cc, include client_internal.h and instantiate `PreparedStatementImpl<FlightClient>` to implement `MakePreparedStatement`\r\n   \r\n   (maybe a MakePreparedStatementImpl also needs to be templated and in client_internal.h) \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:02:39.463+0000",
                    "updated": "2021-10-22T18:02:39.463+0000",
                    "started": "2021-10-22T18:02:39.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669063",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734745096\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n\nReview comment:\n       You could also have this structure, I think:\r\n   - client.h has an abstract base class and a function `MakePreparedStatement()`\r\n   - client_internal.h has:\r\n   \r\n       ```cpp\r\n       template <class T>\r\n       class PreparedStatementImpl : public PreparedStatement {\r\n       // ...current impl...\r\n       };\r\n       ```\r\n   - In tests, include client_internal.h and instantiate `PreparedStatementImpl<MockClient>`\r\n   - In client.cc, include client_internal.h and instantiate `PreparedStatementImpl<FlightClient>` to implement `MakePreparedStatement`\r\n   \r\n   (maybe a MakePreparedStatementImpl also needs to be templated and in client_internal.h) \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:03:02.856+0000",
                    "updated": "2021-10-22T18:03:02.856+0000",
                    "started": "2021-10-22T18:03:02.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669064",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734762969\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       @lidavidm , that would be to load FlightSQL protobuf on Flight's `protocol_internal.cc`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:32:38.692+0000",
                    "updated": "2021-10-22T18:32:38.692+0000",
                    "started": "2021-10-22T18:32:38.692+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669077",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734765778\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       Yes, or really, just link all the FlightSQL sources into libarrow_flight.\r\n   \r\n   Note that the FlightSQL protobuf sources need not be #included like protocol_internal.cc does - that's only done because we need to override things. In this case, they can just be specified in CMake like all the other sources.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T18:37:09.271+0000",
                    "updated": "2021-10-22T18:37:09.271+0000",
                    "started": "2021-10-22T18:37:09.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669079",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r734798223\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/client.h\n##########\n@@ -0,0 +1,260 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_FLIGHT_SQL_CLIENT_H\n+#define ARROW_FLIGHT_SQL_CLIENT_H\n+\n+#include <arrow/flight/Flight.pb.h>\n+#include <arrow/flight/client.h>\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/types.h>\n+#include <arrow/status.h>\n+#include <google/protobuf/message.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace internal {\n+\n+template <class T = arrow::flight::FlightClient>\n+class ARROW_EXPORT PreparedStatementT {\n+  pb::sql::ActionCreatePreparedStatementResult prepared_statement_result;\n+  std::shared_ptr<RecordBatch> parameter_binding;\n+  FlightCallOptions options;\n+  bool is_closed;\n+  T* client;\n+\n+ public:\n+  /// \\brief Constructor for the PreparedStatement class.\n+  /// \\param[in] client   A raw pointer to FlightClient.\n+  /// \\param[in] query      The query that will be executed.\n+  PreparedStatementT(\n+      T* client, const std::string& query,\n+      pb::sql::ActionCreatePreparedStatementResult& prepared_statement_result,\n+      const FlightCallOptions& options);\n+\n+  /// \\brief Default destructor for the PreparedStatement class.\n+  /// The destructor will call the Close method from the class in order,\n+  /// to send a request to close the PreparedStatement.\n+  ~PreparedStatementT();\n+\n+  /// \\brief Executes the prepared statement query on the server.\n+  /// \\param[in] call_options RPC-layer hints for this call.\n+  /// \\param[out] info        A FlightInfo object representing the stream(s) to fetch.\n+  /// \\return Status.\n+  Status Execute(std::unique_ptr<FlightInfo>* info);\n+\n+  /// \\brief Executes the prepared statement update query on the server.\n+  /// \\param rows[out] The number of rows affected.\n+  /// \\return Status.\n+  Status ExecuteUpdate(int64_t* rows);\n+\n+  /// \\brief Retrieve the parameter schema from the query.\n+  /// \\param schema   The parameter schema from the query.\n+  /// \\return         Status.\n+  Status GetParameterSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Retrieve the ResultSet schema from the query.\n+  /// \\param schema   The ResultSet schema from the query.\n+  /// \\return         Status.\n+  Status GetResultSetSchema(std::shared_ptr<Schema>* schema);\n+\n+  /// \\brief Set a RecordBatch that contains the parameters that will be bind.\n+  /// \\param parameter_binding_   The parameters that will be bind.\n+  /// \\return                     Status.\n+  Status SetParameters(std::shared_ptr<RecordBatch> parameter_binding);\n+\n+  /// \\brief Closes the prepared statement.\n+  /// \\param[in] options  RPC-layer hints for this call.\n+  /// \\return Status.\n+  Status Close();\n+\n+  /// \\brief Checks if the prepared statement is closed.\n+  /// \\return The state of the prepared statement.\n+  bool IsClosed() const;\n+};\n+\n+/// \\brief Flight client with Flight SQL semantics.\n+template <class T = arrow::flight::FlightClient>\n+class FlightSqlClientT {\n+ public:\n+  explicit FlightSqlClientT(std::unique_ptr<T>& client);\n+\n+  ~FlightSqlClientT();\n+\n+  /// \\brief Execute a query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset\n+  /// \\return Status.\n+  Status Execute(const FlightCallOptions& options, const std::string& query,\n+                 std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Execute an update query on the server.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[in] query        The query to be executed in the UTF-8 format.\n+  /// \\param[out] rows        The quantity of rows affected by the operation.\n+  /// \\return Status.\n+  Status ExecuteUpdate(const FlightCallOptions& options, const std::string& query,\n+                       int64_t* rows) const;\n+\n+  /// \\brief Request a list of catalogs.\n+  /// \\param[in] options      RPC-layer hints for this call.\n+  /// \\param[out] flight_info The FlightInfo describing where to access the dataset.\n+  /// \\return Status.\n+  Status GetCatalogs(const FlightCallOptions& options,\n+                     std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Request a list of schemas.\n+  /// \\param[in] options                RPC-layer hints for this call.\n+  /// \\param[in] catalog                The catalog.\n+  /// \\param[in] schema_filter_pattern  The schema filter pattern.\n+  /// \\param[out] flight_info           The FlightInfo describing where to access the\n+  ///                                   dataset.\n+  /// \\return Status.\n+  Status GetSchemas(const FlightCallOptions& options, const std::string* catalog,\n+                    const std::string* schema_filter_pattern,\n+                    std::unique_ptr<FlightInfo>* flight_info) const;\n+\n+  /// \\brief Given a flight ticket and schema, request to be sent the\n+  /// stream. Returns record batch stream reader\n+  /// \\param[in] options Per-RPC options\n+  /// \\param[in] ticket The flight ticket to use\n+  /// \\param[out] stream the returned RecordBatchReader\n+  /// \\return Status\n+  Status DoGet(const FlightCallOptions& options, const Ticket& ticket,\n+               std::unique_ptr<FlightStreamReader>* stream) const;\n+\n+  /// \\brief Request a list of tables.\n+  /// \\param[in] options                  RPC-layer hints for this call.\n+  /// \\param[in] catalog                  The catalog.\n+  /// \\param[in] schema_filter_pattern    The schema filter pattern.\n+  /// \\param[in] table_filter_pattern     The table filter pattern.\n+  /// \\param[in] include_schema           True to include the schema upon return,\n+  ///                                     false to not include the schema.\n+  /// \\param[in] table_types              The table types to include.\n+  /// \\param[out] flight_info             The FlightInfo describing where to access the\n+  ///                                     dataset.\n+  /// \\return Status.\n+  Status GetTables(const FlightCallOptions& options, const std::string* catalog,\n\nReview comment:\n       Yes, null and empty are treated differently on JDBC, so we wanted to differentiate them on Flight SQL too\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-22T19:35:58.929+0000",
                    "updated": "2021-10-22T19:35:58.929+0000",
                    "started": "2021-10-22T19:35:58.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669097",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r735789452\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       Hi @lidavidm , I tried folding FlightSql into libarrow_flight, but it didn't work... I tried these two approaches:\r\n   \r\n   1 - include FlightSql on protocol_internal:\r\n   ```diff\r\n     #include \"arrow/flight/Flight.grpc.pb.cc\"  // NOLINT\r\n     #include \"arrow/flight/Flight.pb.cc\"       // NOLINT\r\n   + #include \"arrow/flight/FlightSql.pb.cc\"    // NOLINT\r\n   ```\r\n   This doesn't compile due to redefinition errors:\r\n   ```\r\n   error: redefinition of 'const google::protobuf::internal::MigrationSchema schemas []'\r\n   ```\r\n   \r\n   2 - include FlightSql generated sources on CMakeLists:\r\n   ```diff\r\n     set(ARROW_FLIGHT_SRCS\r\n         client.cc\r\n         client_cookie_middleware.cc\r\n         client_header_internal.cc\r\n         internal.cc\r\n         protocol_internal.cc\r\n   +     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\r\n         serialization_internal.cc\r\n         server.cc\r\n         server_auth.cc\r\n         types.cc)\r\n   ```\r\n   \r\n   This compiles, but causes the same error as before (duplicate protobuf Symbol `GetEmptyStringAlreadyInited`)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-25T16:55:28.303+0000",
                    "updated": "2021-10-25T16:55:28.303+0000",
                    "started": "2021-10-25T16:55:28.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669654",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r735804753\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       Just to be clear, was this merging only the generated Protobuf into libarrow_flight, or all the new files? I think it needs to be the latter.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-25T17:16:10.228+0000",
                    "updated": "2021-10-25T17:16:10.228+0000",
                    "started": "2021-10-25T17:16:10.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669659",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r735806121\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/CMakeLists.txt\n##########\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+add_custom_target(arrow_flight_sql)\n+\n+arrow_install_all_headers(\"arrow/flight/flight-sql\")\n+\n+set(FLIGHT_SQL_PROTO_PATH \"${ARROW_SOURCE_DIR}/../format\")\n+set(FLIGHT_SQL_PROTO ${ARROW_SOURCE_DIR}/../format/FlightSql.proto)\n+\n+set(FLIGHT_SQL_GENERATED_PROTO_FILES \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n+                                     \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.h\")\n+\n+set(PROTO_DEPENDS ${FLIGHT_SQL_PROTO} ${ARROW_PROTOBUF_LIBPROTOBUF} gRPC::grpc_cpp_plugin)\n+\n+add_custom_command(OUTPUT ${FLIGHT_SQL_GENERATED_PROTO_FILES}\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--cpp_out=${CMAKE_CURRENT_BINARY_DIR}\" \"${FLIGHT_SQL_PROTO}\"\n+                   DEPENDS ${PROTO_DEPENDS} ARGS\n+                   COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_SQL_PROTO_PATH}\"\n+                           \"--grpc_out=${CMAKE_CURRENT_BINARY_DIR}\"\n+                           \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                           \"${FLIGHT_SQL_PROTO}\")\n+\n+set_source_files_properties(${FLIGHT_SQL_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+\n+add_custom_target(flight_sql_grpc_gen ALL DEPENDS ${FLIGHT_SQL_GENERATED_PROTO_FILES})\n+\n+# <KLUDGE> -Werror / /WX cause try_compile to fail because there seems to be no\n+# way to pass -isystem $GRPC_INCLUDE_DIR instead of -I$GRPC_INCLUDE_DIR\n+set(CMAKE_CXX_FLAGS_BACKUP \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"/WX\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+string(REPLACE \"-Werror \" \" \" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+\n+set(ARROW_FLIGHT_SQL_SRCS server.cc)\n+\n+add_arrow_lib(arrow_flight_sql\n+              CMAKE_PACKAGE_NAME\n+              ArrowFlightSql\n+              PKG_CONFIG_NAME\n+              arrow-flight-sql\n+              OUTPUTS\n+              ARROW_FLIGHT_SQL_LIBRARIES\n+              SOURCES\n+              ${ARROW_FLIGHT_SQL_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:arrow/flight/flight-sql/pch.h>\"\n+              DEPENDENCIES\n+              flight_sql_grpc_gen\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in cpp/arrow/CMakeLists.txt\n+              SHARED_LINK_LIBS\n+              arrow_flight_shared\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              arrow_flight_static\n+              ${ARROW_FLIGHT_SQL_LINK_LIBS})\n+\n+if(ARROW_TEST_LINKAGE STREQUAL \"static\")\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS\n+      arrow_flight_sql_static arrow_flight_testing_static\n+      ${ARROW_FLIGHT_STATIC_LINK_LIBS} ${ARROW_TEST_LINK_LIBS})\n+else()\n+  set(ARROW_FLIGHT_SQL_TEST_LINK_LIBS arrow_flight_sql_shared arrow_flight_testing_shared\n+                                      ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n+add_arrow_test(flight_sql_test\n+               SOURCES\n+               client_test.cc\n+               server_test.cc\n+               \"${CMAKE_CURRENT_BINARY_DIR}/FlightSql.pb.cc\"\n\nReview comment:\n       In particular, as it stands it looks like we have to compile the generated sources into the test executable - so what does that mean for future library users? Will they have to generate and compile the sources into their own executables too? (It seems so, given the example CLI and server.) I don't think we can ship something like that - so we need to figure out the root issue. I'll try to take a look at this today as well.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-25T17:17:51.915+0000",
                    "updated": "2021-10-25T17:17:51.915+0000",
                    "started": "2021-10-25T17:17:51.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669662",
                    "issueId": "13407798"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/worklog/669663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rafael-telles commented on a change in pull request #11507:\nURL: https://github.com/apache/arrow/pull/11507#discussion_r735810150\n\n\n\n##########\nFile path: cpp/src/arrow/flight/flight-sql/server.h\n##########\n@@ -0,0 +1,404 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Interfaces to use for defining Flight RPC servers. API should be considered\n+// experimental for now\n+\n+#pragma once\n+\n+#include <arrow/flight/flight-sql/FlightSql.pb.h>\n+#include <arrow/flight/server.h>\n+#include <google/protobuf/any.pb.h>\n+\n+namespace pb = arrow::flight::protocol;\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+\n+class FlightSqlServerBase : public FlightServerBase {\n+ public:\n+  Status GetFlightInfo(const ServerCallContext& context, const FlightDescriptor& request,\n+                       std::unique_ptr<FlightInfo>* info) override;\n+\n+  Status DoGet(const ServerCallContext& context, const Ticket& request,\n+               std::unique_ptr<FlightDataStream>* stream) override;\n+\n+  Status DoPut(const ServerCallContext& context,\n+               std::unique_ptr<FlightMessageReader> reader,\n+               std::unique_ptr<FlightMetadataWriter> writer) override;\n+\n+  const ActionType FLIGHT_SQL_CREATE_PREPARED_STATEMENT =\n+      ActionType{.type = \"CreatePreparedStatement\",\n+                 .description =\n+                     \"Creates a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionCreatePreparedStatementRequest\\n\"\n+                     \"Response Message: ActionCreatePreparedStatementResult\"};\n+  const ActionType FLIGHT_SQL_CLOSE_PREPARED_STATEMENT =\n+      ActionType{.type = \"ClosePreparedStatement\",\n+                 .description =\n+                     \"Closes a reusable prepared statement resource on the server.\\n\"\n+                     \"Request Message: ActionClosePreparedStatementRequest\\n\"\n+                     \"Response Message: N/A\"};\n+\n+  Status ListActions(const ServerCallContext& context,\n+                     std::vector<ActionType>* actions) override;\n+\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override;\n+\n+  /// \\brief Gets a FlightInfo for executing a SQL query.\n+  /// \\param[in] command      The CommandStatementQuery object containing the SQL\n+  ///                         statement.\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\param[out] info        The FlightInfo describing where to access the dataset.\n+  /// \\return                 Status.\n+  virtual Status GetFlightInfoStatement(const pb::sql::CommandStatementQuery& command,\n\nReview comment:\n       @lidavidm , I think we could wrap by using simple structs, like:\r\n   \r\n   ```c++\r\n   using CommandStatementQuery = struct CommandStatementQuery {\r\n     std::string query;\r\n   };\r\n   ```\r\n   \r\n   And construct them right before delegating to the specialized methods like `GetFlightInfoStatement`. What do you think?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-25T17:23:20.438+0000",
                    "updated": "2021-10-25T17:23:20.438+0000",
                    "started": "2021-10-25T17:23:20.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "669663",
                    "issueId": "13407798"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 121800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3d0230d0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7413b3a3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@617b167c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@81c2f5b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50fb50b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4a15f04[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d50611a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@54dff71c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e2b73d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@507c5e6f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e9abdcb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@45d6d013[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 121800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 23 19:18:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-23T19:18:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14421/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-10-21T16:20:16.000+0000",
        "updated": "2021-12-23T21:41:24.000+0000",
        "timeoriginalestimate": null,
        "description": "This task is to implement the Flight SQL for C++, as it was done for Java on ARROW-12922.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "33h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 121800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][FlightRPC] Implement Flight SQL for C++",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/pull/11507",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407798/comment/17464758",
                    "id": "17464758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12013\n[https://github.com/apache/arrow/pull/12013]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-23T19:18:30.028+0000",
                    "updated": "2021-12-23T19:18:30.028+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0w22o:",
        "customfield_12314139": null
    }
}