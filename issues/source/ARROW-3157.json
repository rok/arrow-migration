{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13182509",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509",
    "key": "ARROW-3157",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "usability"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3157/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-15T20:15:18.018+0000",
                    "updated": "2018-09-15T20:15:18.018+0000",
                    "started": "2018-09-15T20:15:18.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144620",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566#issuecomment-421627838\n \n \n   cc @pcmoritz @pitrou @xhochy \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-15T20:15:21.422+0000",
                    "updated": "2018-09-15T20:15:21.422+0000",
                    "started": "2018-09-15T20:15:21.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144621",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566#issuecomment-421628057\n \n \n   I wonder also if we should change the inline ctor for `Buffer` to be `const void* data` instead of `const uint8_t* data`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-15T20:16:49.736+0000",
                    "updated": "2018-09-15T20:16:49.736+0000",
                    "started": "2018-09-15T20:16:49.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144622",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on issue #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566#issuecomment-421628057\n \n \n   I wonder also if we should change the inline ctor for `Buffer` to be `const void* data` instead of `const uint8_t* data`. A counter-argument is that this might cause people to have bugs by forgetting to multiple the length by the `sizeof(T)` when casting from another pointer type\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-15T20:17:52.954+0000",
                    "updated": "2018-09-15T20:17:52.954+0000",
                    "started": "2018-09-15T20:17:52.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144623",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566#issuecomment-422000648\n \n \n   > A counter-argument is that this might cause people to have bugs by forgetting to multiple the length by the sizeof(T) when casting from another pointer type\r\n   \r\n   Yes... So instead perhaps a `Wrap` specialization that accepts `const void*`? (I suppose the current one doesn't, because of the `sizeof` call)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T12:46:37.514+0000",
                    "updated": "2018-09-17T12:46:37.514+0000",
                    "started": "2018-09-17T12:46:37.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144815",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566#issuecomment-422077210\n \n \n   > Yes... So instead perhaps a Wrap specialization that accepts const void*? (I suppose the current one doesn't, because of the sizeof call)\r\n   \r\n   That would probably be the way. I'll defer on adding it until it's deemed useful enough to have\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T16:12:56.683+0000",
                    "updated": "2018-09-17T16:12:56.683+0000",
                    "started": "2018-09-17T16:12:56.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144898",
                    "issueId": "13182509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/worklog/144900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2566: ARROW-3157: [C++] Add Buffer::Wrap, MutableBuffer::Wrap convenience methods for wrapping typed memory, std::vector<T>\nURL: https://github.com/apache/arrow/pull/2566\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/apidoc/tutorials/tensor_to_py.md b/cpp/apidoc/tutorials/tensor_to_py.md\nindex e7a74166a7..0be973a4f3 100644\n--- a/cpp/apidoc/tutorials/tensor_to_py.md\n+++ b/cpp/apidoc/tutorials/tensor_to_py.md\n@@ -60,12 +60,9 @@ for (int64_t i = 0; i < input_length; ++i) {\n   input[i] = 2.0;\n }\n \n-// Cast float array to bytes array\n-const uint8_t* bytes_array = reinterpret_cast<const uint8_t*>(input.data());\n-\n // Create Arrow Tensor Object, no copy made!\n // {input_length} is the shape of the tensor\n-auto value_buffer = std::make_shared<Buffer>(bytes_array, sizeof(float) * input_length);\n+auto value_buffer = Buffer::Wrap<float>(input);\n Tensor t(float32(), value_buffer, {input_length});\n ```\n \ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex 257c7592ae..af814e4e88 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -368,7 +368,7 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n   endif()\n \n   if (ARG_LABELS)\n-    set(ARG_LABELS \"unittest;${ARG_LABELS}\")\n+    set(ARG_LABELS \"${ARG_LABELS}\")\n   else()\n     set(ARG_LABELS unittest)\n   endif()\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex 5f002a58df..bec5a99947 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -313,9 +313,7 @@ class TestPrimitiveBuilder : public TestBuilder {\n \n   void Check(const std::unique_ptr<BuilderType>& builder, bool nullable) {\n     int64_t size = builder->length();\n-\n-    auto ex_data = std::make_shared<Buffer>(reinterpret_cast<uint8_t*>(draws_.data()),\n-                                            size * sizeof(T));\n+    auto ex_data = Buffer::Wrap(draws_.data(), size);\n \n     std::shared_ptr<Buffer> ex_null_bitmap;\n     int64_t ex_null_count = 0;\n@@ -1006,8 +1004,8 @@ class TestStringArray : public ::testing::Test {\n \n   void MakeArray() {\n     length_ = static_cast<int64_t>(offsets_.size()) - 1;\n-    value_buf_ = GetBufferFromVector(chars_);\n-    offsets_buf_ = GetBufferFromVector(offsets_);\n+    value_buf_ = Buffer::Wrap(chars_);\n+    offsets_buf_ = Buffer::Wrap(offsets_);\n     ASSERT_OK(BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &null_bitmap_));\n     null_count_ = CountNulls(valid_bytes_);\n \n@@ -1071,7 +1069,7 @@ TEST_F(TestStringArray, TestGetString) {\n \n TEST_F(TestStringArray, TestEmptyStringComparison) {\n   offsets_ = {0, 0, 0, 0, 0, 0};\n-  offsets_buf_ = GetBufferFromVector(offsets_);\n+  offsets_buf_ = Buffer::Wrap(offsets_);\n   length_ = static_cast<int64_t>(offsets_.size() - 1);\n \n   auto strings_a = std::make_shared<StringArray>(length_, offsets_buf_, nullptr,\n@@ -1318,8 +1316,8 @@ class TestBinaryArray : public ::testing::Test {\n \n   void MakeArray() {\n     length_ = static_cast<int64_t>(offsets_.size() - 1);\n-    value_buf_ = GetBufferFromVector(chars_);\n-    offsets_buf_ = GetBufferFromVector(offsets_);\n+    value_buf_ = Buffer::Wrap(chars_);\n+    offsets_buf_ = Buffer::Wrap(offsets_);\n \n     ASSERT_OK(BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &null_bitmap_));\n     null_count_ = CountNulls(valid_bytes_);\ndiff --git a/cpp/src/arrow/buffer-test.cc b/cpp/src/arrow/buffer-test.cc\nindex 368a9cb013..b66425019a 100644\n--- a/cpp/src/arrow/buffer-test.cc\n+++ b/cpp/src/arrow/buffer-test.cc\n@@ -132,6 +132,15 @@ TEST(TestBuffer, SliceBuffer) {\n   ASSERT_EQ(2, buf.use_count());\n }\n \n+TEST(TestMutableBuffer, Wrap) {\n+  std::vector<int32_t> values = {1, 2, 3};\n+\n+  auto buf = MutableBuffer::Wrap(values.data(), values.size());\n+  reinterpret_cast<int32_t*>(buf->mutable_data())[1] = 4;\n+\n+  ASSERT_EQ(4, values[1]);\n+}\n+\n TEST(TestBuffer, SliceMutableBuffer) {\n   std::string data_str = \"some data to slice\";\n   auto data = reinterpret_cast<const uint8_t*>(data_str.c_str());\ndiff --git a/cpp/src/arrow/buffer.h b/cpp/src/arrow/buffer.h\nindex 99beb2343b..8f170c92d3 100644\n--- a/cpp/src/arrow/buffer.h\n+++ b/cpp/src/arrow/buffer.h\n@@ -24,6 +24,7 @@\n #include <memory>\n #include <string>\n #include <type_traits>\n+#include <vector>\n \n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n@@ -123,6 +124,28 @@ class ARROW_EXPORT Buffer {\n   /// using the default memory pool\n   static Status FromString(const std::string& data, std::shared_ptr<Buffer>* out);\n \n+  /// \\brief Create buffer referencing typed memory with some length without\n+  /// copying\n+  /// \\param[in] data the typed memory as C array\n+  /// \\param[in] length the number of values in the array\n+  /// \\return a new shared_ptr<Buffer>\n+  template <typename T, typename SizeType = int64_t>\n+  static std::shared_ptr<Buffer> Wrap(const T* data, SizeType length) {\n+    return std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(data),\n+                                    static_cast<int64_t>(sizeof(T) * length));\n+  }\n+\n+  /// \\brief Create buffer referencing std::vector with some length without\n+  /// copying\n+  /// \\param[in] data the vector to be referenced. If this vector is changed,\n+  /// the buffer may become invalid\n+  /// \\return a new shared_ptr<Buffer>\n+  template <typename T>\n+  static std::shared_ptr<Buffer> Wrap(const std::vector<T>& data) {\n+    return std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(data.data()),\n+                                    static_cast<int64_t>(sizeof(T) * data.size()));\n+  }  // namespace arrow\n+\n   int64_t capacity() const { return capacity_; }\n   const uint8_t* data() const { return data_; }\n \n@@ -185,6 +208,16 @@ class ARROW_EXPORT MutableBuffer : public Buffer {\n   MutableBuffer(const std::shared_ptr<Buffer>& parent, const int64_t offset,\n                 const int64_t size);\n \n+  /// \\brief Create buffer referencing typed memory with some length\n+  /// \\param[in] data the typed memory as C array\n+  /// \\param[in] length the number of values in the array\n+  /// \\return a new shared_ptr<Buffer>\n+  template <typename T, typename SizeType = int64_t>\n+  static std::shared_ptr<Buffer> Wrap(T* data, SizeType length) {\n+    return std::make_shared<MutableBuffer>(reinterpret_cast<uint8_t*>(data),\n+                                           static_cast<int64_t>(sizeof(T) * length));\n+  }\n+\n  protected:\n   MutableBuffer() : Buffer(NULLPTR, 0) {}\n };\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex 233f8a6dd0..056fb031b7 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -198,8 +198,7 @@ TEST_F(TestCast, OverflowInNullSlot) {\n   shared_ptr<Array> expected;\n   ArrayFromVector<Int16Type, int16_t>(int16(), is_valid, e11, &expected);\n \n-  auto buf = std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(v11.data()),\n-                                      static_cast<int64_t>(v11.size()));\n+  auto buf = Buffer::Wrap(v11.data(), v11.size());\n   Int32Array tmp11(5, buf, expected->null_bitmap(), -1);\n \n   CheckPass(tmp11, *expected, int16(), options);\n@@ -972,10 +971,8 @@ TEST_F(TestCast, DictToNonDictNoNulls) {\n   // Explicitly construct with nullptr for the null_bitmap_data\n   std::vector<int32_t> i1 = {1, 0, 1};\n   std::vector<int32_t> i2 = {2, 1, 0, 1};\n-  auto c1 = std::make_shared<NumericArray<Int32Type>>(\n-      3, arrow::GetBufferFromVector<int32_t>(i1));\n-  auto c2 = std::make_shared<NumericArray<Int32Type>>(\n-      4, arrow::GetBufferFromVector<int32_t>(i2));\n+  auto c1 = std::make_shared<NumericArray<Int32Type>>(3, Buffer::Wrap(i1));\n+  auto c2 = std::make_shared<NumericArray<Int32Type>>(4, Buffer::Wrap(i2));\n \n   ArrayVector dict_arrays = {std::make_shared<DictionaryArray>(dict_type, c1),\n                              std::make_shared<DictionaryArray>(dict_type, c2)};\ndiff --git a/cpp/src/arrow/ipc/ipc-json-test.cc b/cpp/src/arrow/ipc/ipc-json-test.cc\nindex 549a93c8c1..26d396dc06 100644\n--- a/cpp/src/arrow/ipc/ipc-json-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-json-test.cc\n@@ -184,7 +184,7 @@ TEST(TestJsonArrayWriter, NestedTypes) {\n \n   std::shared_ptr<Buffer> list_bitmap;\n   ASSERT_OK(GetBitmapFromVector(list_is_valid, &list_bitmap));\n-  std::shared_ptr<Buffer> offsets_buffer = GetBufferFromVector(offsets);\n+  std::shared_ptr<Buffer> offsets_buffer = Buffer::Wrap(offsets);\n \n   ListArray list_array(list(value_type), 5, offsets_buffer, values_array, list_bitmap, 1);\n \n@@ -345,8 +345,7 @@ TEST(TestJsonFileReadWrite, MinimalFormatExample) {\n }\n )example\";\n \n-  auto buffer = std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(example),\n-                                         strlen(example));\n+  auto buffer = Buffer::Wrap(example, strlen(example));\n \n   std::unique_ptr<JsonReader> reader;\n   ASSERT_OK(JsonReader::Open(buffer, &reader));\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex 37127cb8e6..3154d574a1 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -749,7 +749,7 @@ TEST_F(TestTensorRoundTrip, BasicRoundtrip) {\n   std::vector<int64_t> values;\n   randint(size, 0, 100, &values);\n \n-  auto data = GetBufferFromVector(values);\n+  auto data = Buffer::Wrap(values);\n \n   Tensor t0(int64(), data, shape, strides, dim_names);\n   Tensor tzero(int64(), data, {}, {}, {});\n@@ -770,7 +770,7 @@ TEST_F(TestTensorRoundTrip, NonContiguous) {\n   std::vector<int64_t> values;\n   randint(24, 0, 100, &values);\n \n-  auto data = GetBufferFromVector(values);\n+  auto data = Buffer::Wrap(values);\n   Tensor tensor(int64(), data, {4, 3}, {48, 16});\n \n   CheckTensorRoundTrip(tensor);\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex dfc1ab5dcb..1a50a078c0 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -115,12 +115,6 @@ void random_real(int64_t n, uint32_t seed, T min_value, T max_value,\n   std::generate(out->begin(), out->end(), [&d, &gen] { return static_cast<U>(d(gen)); });\n }\n \n-template <typename T>\n-std::shared_ptr<Buffer> GetBufferFromVector(const std::vector<T>& values) {\n-  return std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(values.data()),\n-                                  values.size() * sizeof(T));\n-}\n-\n template <typename T>\n inline Status CopyBufferFromVector(const std::vector<T>& values, MemoryPool* pool,\n                                    std::shared_ptr<Buffer>* result) {\ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex f73117955e..8a37dc7522 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -37,7 +37,7 @@ function(ADD_PARQUET_TEST REL_TEST_NAME)\n   ADD_ARROW_TEST(${REL_TEST_NAME}\n     STATIC_LINK_LIBS ${PARQUET_TEST_LINK_LIBS}\n     PREFIX \"parquet\"\n-    LABELS \"parquet\")\n+    LABELS \"unittest;parquet\")\n endfunction()\n \n # ----------------------------------------------------------------------\ndiff --git a/cpp/src/parquet/file-deserialize-test.cc b/cpp/src/parquet/file-deserialize-test.cc\nindex fb95534ae2..b766eedf55 100644\n--- a/cpp/src/parquet/file-deserialize-test.cc\n+++ b/cpp/src/parquet/file-deserialize-test.cc\n@@ -262,22 +262,19 @@ class TestParquetFileReader : public ::testing::Test {\n TEST_F(TestParquetFileReader, InvalidHeader) {\n   const char* bad_header = \"PAR2\";\n \n-  auto buffer = std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(bad_header),\n-                                         strlen(bad_header));\n+  auto buffer = Buffer::Wrap(bad_header, strlen(bad_header));\n   ASSERT_NO_FATAL_FAILURE(AssertInvalidFileThrows(buffer));\n }\n \n TEST_F(TestParquetFileReader, InvalidFooter) {\n   // File is smaller than FOOTER_SIZE\n   const char* bad_file = \"PAR1PAR\";\n-  auto buffer = std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(bad_file),\n-                                         strlen(bad_file));\n+  auto buffer = Buffer::Wrap(bad_file, strlen(bad_file));\n   ASSERT_NO_FATAL_FAILURE(AssertInvalidFileThrows(buffer));\n \n   // Magic number incorrect\n   const char* bad_file2 = \"PAR1PAR2\";\n-  buffer = std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(bad_file2),\n-                                    strlen(bad_file2));\n+  buffer = Buffer::Wrap(bad_file2, strlen(bad_file2));\n   ASSERT_NO_FATAL_FAILURE(AssertInvalidFileThrows(buffer));\n }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T16:13:51.089+0000",
                    "updated": "2018-09-17T16:13:51.089+0000",
                    "started": "2018-09-17T16:13:51.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144900",
                    "issueId": "13182509"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d596837[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2de81648[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1810c5a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@75a7cabb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40561fe2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e92313f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6031eeb7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2b080218[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b51b194[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@34256808[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b8e7c6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@307dbdc6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 17 16:13:41 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-17T16:13:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3157/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-09-01T22:07:10.000+0000",
        "updated": "2018-09-17T16:13:51.000+0000",
        "timeoriginalestimate": null,
        "description": "While looking into [https://github.com/apache/arrow/pull/2481,]\u00a0I noticed this pattern:\r\n{code:java}\r\nconst uint8_t* bytes_array = reinterpret_cast<const uint8_t*>(input);\r\nauto buffer = std::make_shared<Buffer>(bytes_array, sizeof(float)*input_length);{code}\r\nIt's not the end of the world but\u00a0seems\u00a0a little verbose to me. It would be great to have something like this:\r\n{code:java}\r\nauto buffer = MakeBuffer<float>(input, input_length);{code}\r\nI couldn't find it, does it already exist somewhere? Any thoughts on the API? Potentially specializations to make a buffer out of a std::vector<T> would also be helpful.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve buffer creation for typed data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/comment/16601593",
                    "id": "16601593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "How about something like this\r\n\r\n{code}\r\ntemplate <typename T, typename SizeT>\r\nstatic std::shared_ptr<Buffer> Wrap(const T* data, SizeT length) {\r\n  return std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(data),\r\n                                  static_cast<int64_t>(length) * sizeof(SizeT));\r\n}\r\n{code}\r\n\r\nSo we would write\r\n\r\n{code}\r\nauto buf = Buffer::Wrap(data, size);\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-02T18:07:13.550+0000",
                    "updated": "2018-09-02T18:07:34.693+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182509/comment/16617751",
                    "id": "16617751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2566\n[https://github.com/apache/arrow/pull/2566]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-17T16:13:41.321+0000",
                    "updated": "2018-09-17T16:13:41.321+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xnlr:",
        "customfield_12314139": null
    }
}