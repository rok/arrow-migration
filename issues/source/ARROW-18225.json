{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13494257",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257",
    "key": "ARROW-18225",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fchareyron",
            "name": "fchareyron",
            "key": "JIRAUSER297828",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Fran\u00e7ois Chareyron",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fchareyron",
            "name": "fchareyron",
            "key": "JIRAUSER297828",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Fran\u00e7ois Chareyron",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18225/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/822743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #14574:\nURL: https://github.com/apache/arrow/pull/14574\n\n   WIP\r\n   \r\n   Will fix [ARROW-18225](https://issues.apache.org/jira/browse/ARROW-18225)\n\n\n",
                    "created": "2022-11-02T15:08:42.381+0000",
                    "updated": "2022-11-02T15:08:42.381+0000",
                    "started": "2022-11-02T15:08:42.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822743",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/822759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#issuecomment-1300723803\n\n   The generic utility to get matching kwargs _might_ be useful for other keywords, but for this specific case I think it is fine to explicitly add `filesystem` as a keyword to `write_metadata` (we also recently added that to `read_metadata`)\n\n\n",
                    "created": "2022-11-02T15:45:10.461+0000",
                    "updated": "2022-11-02T15:45:10.461+0000",
                    "started": "2022-11-02T15:45:10.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822759",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/822802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#issuecomment-1301018082\n\n   https://issues.apache.org/jira/browse/ARROW-18225\n\n\n",
                    "created": "2022-11-02T17:56:28.808+0000",
                    "updated": "2022-11-02T17:56:28.808+0000",
                    "started": "2022-11-02T17:56:28.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822802",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1016812065\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3430,10 +3430,14 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=kwargs.get(\"filesystem\"))\n\nReview Comment:\n   I think we can still explicitly add a filesystem keyword to the `write_metadata` signature instead through kwargs; that makes it more discoverable for the user (and then also document it in the docstring), and is consistent with other functions in this module that support this keyword.\n\n\n\n",
                    "created": "2022-11-08T15:50:01.589+0000",
                    "updated": "2022-11-08T15:50:01.589+0000",
                    "started": "2022-11-08T15:50:01.589+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824256",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1017416364\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3430,10 +3430,14 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=kwargs.get(\"filesystem\"))\n\nReview Comment:\n   Oi, I misinterpreted this one. Updated now. :) https://github.com/apache/arrow/pull/14574/commits/e120e9ada309d83df674be22e2106e8e056cab44 \n\n\n\n",
                    "created": "2022-11-09T04:27:58.315+0000",
                    "updated": "2022-11-09T04:27:58.315+0000",
                    "started": "2022-11-09T04:27:58.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824415",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1017705626\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3424,16 +3426,20 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        if filesystem is not None and not hasattr(where, \"write\"):\n\nReview Comment:\n   ```suggestion\r\n           if filesystem is not None:\r\n   ```\r\n   \r\n   I would think we already ran into an error with `ParquetWriter` / `read_metadata` if the user would pass a filesystem in combination with a file-like object.\n\n\n\n##########\npython/pyarrow/tests/parquet/test_dataset.py:\n##########\n@@ -1300,6 +1301,32 @@ def _test_write_to_dataset_with_partitions(base_path,\n     tm.assert_frame_equal(output_df, input_df)\n \n \n+def test_write_metadata_with_without_filesystem(tempdir):\n\nReview Comment:\n   A `write_metadata` specific test is in `parquet/test_metadata.py`, so maybe move this there?\n\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3424,16 +3426,20 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        if filesystem is not None and not hasattr(where, \"write\"):\n\nReview Comment:\n   But so actually, `read_metadata` does this by calling `filesystem, where = _resolve_filesystem_and_path(where, filesystem)`\r\n   \r\n   We should probably do that here as well, so that the capabilities are consistent. For example that also supports writing to a URI string (you can test this with a local filesystem using `Path.as_uri()` to get a files:// URI)\n\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3392,6 +3392,8 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     where : string or pyarrow.NativeFile\n     metadata_collector : list\n         where to collect metadata information.\n+    filesystem : FileSystem, default None\n+        If passed, will be used in subsequent calls accepting a filesystem.\n\nReview Comment:\n   That it is being passed to subsequent calls is a bit of an implementation detail, I would say. ParquetWriter has this:\r\n   \r\n   ```\r\n   filesystem : FileSystem, default None\r\n       If nothing passed, will be inferred from `where` if path-like, else\r\n       `where` is already a file-like object so no filesystem is needed.\r\n   ```\r\n   \r\n   so maybe let's copy that?\n\n\n\n",
                    "created": "2022-11-09T09:57:59.415+0000",
                    "updated": "2022-11-09T09:57:59.415+0000",
                    "started": "2022-11-09T09:57:59.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824489",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1017803009\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3424,16 +3426,20 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        if filesystem is not None and not hasattr(where, \"write\"):\n\nReview Comment:\n   That's a lot better. :+1: \n\n\n\n",
                    "created": "2022-11-09T11:16:17.277+0000",
                    "updated": "2022-11-09T11:16:17.277+0000",
                    "started": "2022-11-09T11:16:17.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824518",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1018100867\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,15 +3427,17 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n+        if filesystem is not None:\n+            filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n\nReview Comment:\n   Shouldn't this go up higher, if you want to support inferring the filesystem from the path? (Even if those other function also do the inference, it seems like it would be nice if the inference was only performed once.\n\n\n\n",
                    "created": "2022-11-09T15:39:11.123+0000",
                    "updated": "2022-11-09T15:39:11.123+0000",
                    "started": "2022-11-09T15:39:11.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824641",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1018163232\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,15 +3427,17 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n+        if filesystem is not None:\n+            filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n\nReview Comment:\n   That's would indeed be cleaner, I think (it can go to the first line of the function). \r\n   @milesgranger can you add a test using a URI? That should also cover this new ability (see my suggestion at https://github.com/apache/arrow/pull/14574#discussion_r1017707397, you can create a `meta3` and pass `meta3.as_uri()` as path)\n\n\n\n",
                    "created": "2022-11-09T16:30:29.196+0000",
                    "updated": "2022-11-09T16:30:29.196+0000",
                    "started": "2022-11-09T16:30:29.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824655",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/824956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1019245324\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,13 +3427,15 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n         metadata.write_metadata_file(where)\n\nReview Comment:\n   Removing the `if filesystem is not None` at the top of this function then resolved the previous error for the file URI when `write_metadata_file` was not able to open file \"file:///...\".  But suppose here, you're right. For that point, I've added back that condition and updated the test. I can go about adding the s3 variant as well.\n\n\n\n",
                    "created": "2022-11-10T15:00:04.916+0000",
                    "updated": "2022-11-10T15:00:04.916+0000",
                    "started": "2022-11-10T15:00:04.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "824956",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1019977209\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   ```suggestion\r\n           if filesystem is not None:\r\n               with filesystem.open_output_stream(where) as dest:\r\n                   metadata.write_metadata_file(dest)\r\n           else:\r\n               metadata.write_metadata_file(where)\r\n   ```\r\n   \r\n   Just a nit, but to see the diff, this is just as many lines of code, and even less characters, while trying to be less \"smart\" (and IMO easier to read)\n\n\n\n",
                    "created": "2022-11-11T08:14:10.424+0000",
                    "updated": "2022-11-11T08:14:10.424+0000",
                    "started": "2022-11-11T08:14:10.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825188",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1019985446\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   Actually, one more thing that I realize now: with using `_resolve_filesystem_and_path`, the only case when `filesystem` will still be `None`, is when `where` is a file-like object. But in that case, I am not sure the code to handle `metadata_collector` would work anyway? (like writing, reading and writing again to the same file like object, will that work?) It might be good to test that, so we either have coverage for it (if it works), or either we can simplify the above code (since we can assume `filesystem` to be always None)\n\n\n\n",
                    "created": "2022-11-11T08:25:26.211+0000",
                    "updated": "2022-11-11T08:25:26.211+0000",
                    "started": "2022-11-11T08:25:26.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825192",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1020254060\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   > Just a nit, but to see the diff, this is just as many lines of code, and even less characters, while trying to be less \"smart\" (and IMO easier to read)\r\n   \r\n   Ya, I sort of agree, but saw read_meta used that pattern and thought maybe that was preferred. \n\n\n\n",
                    "created": "2022-11-11T14:13:09.869+0000",
                    "updated": "2022-11-11T14:13:09.869+0000",
                    "started": "2022-11-11T14:13:09.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825332",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1020254060\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   > Just a nit, but to see the diff, this is just as many lines of code, and even less characters, while trying to be less \"smart\" (and IMO easier to read)\r\n   \r\n   Ya, I sort of agree, but saw read_metadata used that pattern and thought maybe that was preferred. \n\n\n\n",
                    "created": "2022-11-11T14:14:14.895+0000",
                    "updated": "2022-11-11T14:14:14.895+0000",
                    "started": "2022-11-11T14:14:14.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825333",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1020278846\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   Didn't work out of the box with file-like, but some small modifications for setting cursor back after reading before re-writing seems to work okay. https://github.com/apache/arrow/pull/14574/commits/54dd6415189ae8fe475e8965f949130b904065d1\n\n\n\n",
                    "created": "2022-11-11T14:42:32.923+0000",
                    "updated": "2022-11-11T14:42:32.923+0000",
                    "started": "2022-11-11T14:42:32.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825348",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1020254060\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,16 +3427,22 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n-        metadata.write_metadata_file(where)\n+        file_ctx = nullcontext()\n+        if filesystem is not None:\n+            file_ctx = where = filesystem.open_output_stream(where)\n+        with file_ctx:\n+            metadata.write_metadata_file(where)\n\nReview Comment:\n   > Just a nit, but to see the diff, this is just as many lines of code, and even less characters, while trying to be less \"smart\" (and IMO easier to read)\r\n   \r\n   Ya, I sort of agree, but saw read_metadata used that pattern and thought maybe that was preferred.  Dropped the commit.\n\n\n\n",
                    "created": "2022-11-11T14:43:37.969+0000",
                    "updated": "2022-11-11T14:43:37.969+0000",
                    "started": "2022-11-11T14:43:37.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825350",
                    "issueId": "13494257"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/worklog/825663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14574:\nURL: https://github.com/apache/arrow/pull/14574#discussion_r1021200067\n\n\n##########\npython/pyarrow/parquet/core.py:\n##########\n@@ -3423,13 +3427,15 @@ def write_metadata(schema, where, metadata_collector=None, **kwargs):\n     ...     table.schema, 'dataset_metadata/_metadata',\n     ...     metadata_collector=metadata_collector)\n     \"\"\"\n-    writer = ParquetWriter(where, schema, **kwargs)\n+    filesystem, where = _resolve_filesystem_and_path(where, filesystem)\n+\n+    writer = ParquetWriter(where, schema, filesystem, **kwargs)\n     writer.close()\n \n     if metadata_collector is not None:\n         # ParquetWriter doesn't expose the metadata until it's written. Write\n         # it and read it again.\n-        metadata = read_metadata(where)\n+        metadata = read_metadata(where, filesystem=filesystem)\n         for m in metadata_collector:\n             metadata.append_row_groups(m)\n         metadata.write_metadata_file(where)\n\nReview Comment:\n   Not sure if https://github.com/apache/arrow/pull/14574/commits/b8b9ceacd7adb020ee7c82426c4109c121f33769 is what you had it mind, let me know should anything be adjusted there. :) \n\n\n\n",
                    "created": "2022-11-14T08:31:00.023+0000",
                    "updated": "2022-11-14T08:31:00.023+0000",
                    "started": "2022-11-14T08:31:00.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825663",
                    "issueId": "13494257"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23e2d501[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@213b9062[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ed29ab8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6317a180[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@144678f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5768876f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5de5c060[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@32071fd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@248628a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@374690a7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44d3b0ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@44fc8e11[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 02 15:42:44 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18225/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-11-02T07:58:37.000+0000",
        "updated": "2022-11-14T08:31:00.000+0000",
        "timeoriginalestimate": null,
        "description": "When using {{write_metadata}}, {{kwargs}} can be used to pass a FileSystem to a ParquetWriter. However, those {{kwargs}} are not passed to {{read_metadata}}\u00a0later on despite the function accepting a filesystem argument.\r\n\r\nThis creates an error when trying to write metadata on a S3FileSystem for example.\r\n{code:python}\r\ndef write_metadata(schema, where, metadata_collector=None, **kwargs):\r\n    writer = ParquetWriter(where, schema, **kwargs)\r\n    writer.close()\r\n\r\n\u00a0 \u00a0 if metadata_collector is not None:\r\n        metadata = read_metadata(where) # kwargs should be passed here\r\n        for m in metadata_collector:\r\n            metadata.append_row_groups(m)\r\n        metadata.write_metadata_file(where) # kwargs should be passed here\r\n{code}\r\n{code:python}\r\ndef read_metadata(where, memory_map=False, decryption_properties=None,\r\n                  filesystem=None):\r\n    ...{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] write_metadata does not fully use **kwargs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/comment/17627760",
                    "id": "17627760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "body": "As a clarification, [metadata.write_metadata_file | https://github.com/apache/arrow/blob/80ec8298dfa7d0027df64630332f60d60aad082b/python/pyarrow/_parquet.pyx#L801] is only accepting a single ``where`` argument. What parts of the kwargs were you hoping to pass onto this method?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "created": "2022-11-02T14:56:31.862+0000",
                    "updated": "2022-11-02T14:56:31.862+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/comment/17627768",
                    "id": "17627768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fchareyron",
                        "name": "fchareyron",
                        "key": "JIRAUSER297828",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Fran\u00e7ois Chareyron",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for your answer. I was hoping to pass the filesystem to use.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fchareyron",
                        "name": "fchareyron",
                        "key": "JIRAUSER297828",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Fran\u00e7ois Chareyron",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-11-02T15:02:41.142+0000",
                    "updated": "2022-11-02T15:02:41.142+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/comment/17627769",
                    "id": "17627769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "body": "Is that needed though? That method doesn't want a filesystem, just ``where``, which is already being supplied. I would have expected only the ``read_metadata`` needing filesystem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "created": "2022-11-02T15:06:09.454+0000",
                    "updated": "2022-11-02T15:06:09.454+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13494257/comment/17627799",
                    "id": "17627799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "body": "nvm, think I see the issue there. ``where`` in this case would be an s3 path. Not the local or file-like obj that method (write_metadata_file) wants.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
                        "name": "milesgranger",
                        "key": "JIRAUSER293894",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Miles Granger",
                        "active": true,
                        "timeZone": "Europe/Oslo"
                    },
                    "created": "2022-11-02T15:42:44.924+0000",
                    "updated": "2022-11-02T15:42:44.924+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z1aq8g:",
        "customfield_12314139": null
    }
}