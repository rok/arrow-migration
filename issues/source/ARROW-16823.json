{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13449783",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783",
    "key": "ARROW-16823",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12641891",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641891",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13440081",
                    "key": "ARROW-16211",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440081",
                    "fields": {
                        "summary": "[C++][Python] Unregister compute functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                            "description": "This issue is being actively worked on at the moment by the assignee.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                            "name": "In Progress",
                            "id": "3",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                                "id": 4,
                                "key": "indeterminate",
                                "colorName": "yellow",
                                "name": "In Progress"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12641890",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641890",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13446857",
                    "key": "ARROW-16657",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446857",
                    "fields": {
                        "summary": "[C++] Support nesting of extension-id-registries",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12641889",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641889",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13447175",
                    "key": "ARROW-16677",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447175",
                    "fields": {
                        "summary": "[C++] Support nesting of function registries",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 54600,
            "total": 54600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 54600,
            "total": 54600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16823/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 91,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw opened a new pull request, #13375:\nURL: https://github.com/apache/arrow/pull/13375\n\n   See https://issues.apache.org/jira/browse/ARROW-16823\n\n\n",
                    "created": "2022-06-13T12:02:09.976+0000",
                    "updated": "2022-06-13T12:02:09.976+0000",
                    "started": "2022-06-13T12:02:09.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780792",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#issuecomment-1153829207\n\n   https://issues.apache.org/jira/browse/ARROW-16823\n\n\n",
                    "created": "2022-06-13T12:02:33.947+0000",
                    "updated": "2022-06-13T12:02:33.947+0000",
                    "started": "2022-06-13T12:02:33.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780793",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#issuecomment-1153837157\n\n   @rtpsw I did skim through the PR, interesting!. \r\n   What is required to get a functional test case to evaluate registering a UDF? I went through the JIRA, but it is not clear what is meant by \r\n   > registering a function (with an Id) external to the plan\r\n   \n\n\n",
                    "created": "2022-06-13T12:11:17.997+0000",
                    "updated": "2022-06-13T12:11:17.997+0000",
                    "started": "2022-06-13T12:11:17.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780795",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#issuecomment-1153940711\n\n   > @rtpsw I did skim through the PR, interesting!. What is required to get a functional test case to evaluate registering a UDF? I went through the JIRA, but it is not clear what is meant by\r\n   > \r\n   > > registering a function (with an Id) external to the plan\r\n   \r\n   You're right, this isn't trivial. The issue is that `Id` is defined with two members of type `util::string_view`, which point to strings that must be held elsewhere while the plan is in scope. This is satisfied for an `Id` that has these fields pointing to strings parsed from the Substrait plan itself. However, if a user registers a function with an `Id` whose field values are external to the plan, then the strings they point to should be held while the plan is in scope, so it makes sense to keep the strings on the plan; this is what `AddExternalSymbol` is meant for.\r\n   \r\n   I intend to add test cases a bit later. This PR is an extraction from a larger project project I'm working on for end-to-end (Ibis/Ibis-Substrait/PyArrow) support for Python-UDFs.\n\n\n",
                    "created": "2022-06-13T13:50:20.097+0000",
                    "updated": "2022-06-13T13:50:20.097+0000",
                    "started": "2022-06-13T13:50:20.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780829",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r895853513\n\n\n##########\ncpp/src/arrow/engine/substrait/plan_internal.cc:\n##########\n@@ -92,6 +92,9 @@ Status AddExtensionSetToPlan(const ExtensionSet& ext_set, substrait::Plan* plan)\n \n Result<ExtensionSet> GetExtensionSetFromPlan(const substrait::Plan& plan,\n                                              const ExtensionIdRegistry* registry) {\n\nReview Comment:\n   Maybe, \r\n   ```suggestion\r\n   Result<ExtensionSet> GetExtensionSetFromPlan(const substrait::Plan& plan,\r\n                                                const ExtensionIdRegistry* registry = default_extension_id_registry()) {\r\n   ```\r\n   \r\n   Is there a specific reason why we have to explicitly assign if `NULLPTR`? \n\n\n\n",
                    "created": "2022-06-13T15:24:23.465+0000",
                    "updated": "2022-06-13T15:24:23.465+0000",
                    "started": "2022-06-13T15:24:23.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780863",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r895867777\n\n\n##########\ncpp/src/arrow/engine/substrait/plan_internal.cc:\n##########\n@@ -92,6 +92,9 @@ Status AddExtensionSetToPlan(const ExtensionSet& ext_set, substrait::Plan* plan)\n \n Result<ExtensionSet> GetExtensionSetFromPlan(const substrait::Plan& plan,\n                                              const ExtensionIdRegistry* registry) {\n\nReview Comment:\n   I'll need to check it out, but I think the code-safety issue discussed in [ARROW-16811](https://issues.apache.org/jira/browse/ARROW-16811) could apply here, i.e., a developer calling this function may let the argument default instead of exposing it to the user.\n\n\n\n",
                    "created": "2022-06-13T15:37:44.269+0000",
                    "updated": "2022-06-13T15:37:44.269+0000",
                    "started": "2022-06-13T15:37:44.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780870",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r895922931\n\n\n##########\ncpp/src/arrow/engine/substrait/plan_internal.cc:\n##########\n@@ -92,6 +92,9 @@ Status AddExtensionSetToPlan(const ExtensionSet& ext_set, substrait::Plan* plan)\n \n Result<ExtensionSet> GetExtensionSetFromPlan(const substrait::Plan& plan,\n                                              const ExtensionIdRegistry* registry) {\n\nReview Comment:\n   Ah! I see your point. Mine was just a suggestion. Let's do what is best. Thanks for pointing that out. \n\n\n\n",
                    "created": "2022-06-13T16:36:39.384+0000",
                    "updated": "2022-06-13T16:36:39.384+0000",
                    "started": "2022-06-13T16:36:39.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780882",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r895930793\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.cc:\n##########\n@@ -58,12 +58,53 @@ Result<compute::Declaration> DeserializeRelation(const Buffer& buf,\n   return FromProto(rel, ext_set);\n }\n \n-Result<std::vector<compute::Declaration>> DeserializePlans(\n-    const Buffer& buf, const ConsumerFactory& consumer_factory,\n+using DeclarationFactory = std::function<compute::Declaration(\n+    compute::Declaration, std::vector<std::string> names)>;\n+\n+static DeclarationFactory MakeConsumingSinkDeclarationFactory(\n+    const ConsumerFactory& consumer_factory) {\n+  return [&consumer_factory](compute::Declaration input, std::vector<std::string> names) {\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::ConsumingSinkNodeOptions>(\n+            compute::ConsumingSinkNodeOptions{consumer_factory(), std::move(names)});\n+    return compute::Declaration::Sequence(\n+        {std::move(input), {\"consuming_sink\", options}});\n+  };\n+}\n+\n+static compute::Declaration ProjectByNamesDeclaration(compute::Declaration input,\n+                                                      std::vector<std::string> names) {\n+  int names_size = static_cast<int>(names.size());\n+  if (names_size == 0) {\n+    return input;\n+  }\n+  std::vector<compute::Expression> expressions;\n+  for (int i = 0; i < names_size; i++) {\n+    expressions.push_back(compute::field_ref(FieldRef(i)));\n+  }\n+  return compute::Declaration::Sequence(\n+      {std::move(input),\n+       {\"project\",\n+        compute::ProjectNodeOptions{std::move(expressions), std::move(names)}}});\n+}\n\nReview Comment:\n   Could this be a util function? It seems it doesn't have dependencies for Substrait. WDYT?\n\n\n\n",
                    "created": "2022-06-13T16:45:49.241+0000",
                    "updated": "2022-06-13T16:45:49.241+0000",
                    "started": "2022-06-13T16:45:49.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780892",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/780936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896138388\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.cc:\n##########\n@@ -58,12 +58,53 @@ Result<compute::Declaration> DeserializeRelation(const Buffer& buf,\n   return FromProto(rel, ext_set);\n }\n \n-Result<std::vector<compute::Declaration>> DeserializePlans(\n-    const Buffer& buf, const ConsumerFactory& consumer_factory,\n+using DeclarationFactory = std::function<compute::Declaration(\n+    compute::Declaration, std::vector<std::string> names)>;\n+\n+static DeclarationFactory MakeConsumingSinkDeclarationFactory(\n+    const ConsumerFactory& consumer_factory) {\n+  return [&consumer_factory](compute::Declaration input, std::vector<std::string> names) {\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::ConsumingSinkNodeOptions>(\n+            compute::ConsumingSinkNodeOptions{consumer_factory(), std::move(names)});\n+    return compute::Declaration::Sequence(\n+        {std::move(input), {\"consuming_sink\", options}});\n+  };\n+}\n+\n+static compute::Declaration ProjectByNamesDeclaration(compute::Declaration input,\n+                                                      std::vector<std::string> names) {\n+  int names_size = static_cast<int>(names.size());\n+  if (names_size == 0) {\n+    return input;\n+  }\n+  std::vector<compute::Expression> expressions;\n+  for (int i = 0; i < names_size; i++) {\n+    expressions.push_back(compute::field_ref(FieldRef(i)));\n+  }\n+  return compute::Declaration::Sequence(\n+      {std::move(input),\n+       {\"project\",\n+        compute::ProjectNodeOptions{std::move(expressions), std::move(names)}}});\n+}\n\nReview Comment:\n   In principle, there should be a benefit for exposing a function that offsets the complexity it adds. What would this benefit be? It's not clear to me right now where this function would be used besides here, so my guess is it would be better to defer until such a use comes up.\n\n\n\n",
                    "created": "2022-06-13T21:10:15.270+0000",
                    "updated": "2022-06-13T21:10:15.270+0000",
                    "started": "2022-06-13T21:10:15.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780936",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#issuecomment-1155071043\n\n   @vibhatha, I think this PR is ready for review. Are you the one to review it? \n\n\n",
                    "created": "2022-06-14T11:41:08.891+0000",
                    "updated": "2022-06-14T11:41:08.891+0000",
                    "started": "2022-06-14T11:41:08.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781113",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#issuecomment-1155084458\n\n   > @vibhatha, I think this PR is ready for review. Are you the one to review it?\r\n   \r\n   @rtpsw I was reading it now. But I won't be a major reviewer. I will be closely reading and co-review certain parts. \r\n   \r\n   cc @westonpace @lidavidm could you please take a look. \n\n\n",
                    "created": "2022-06-14T11:55:24.933+0000",
                    "updated": "2022-06-14T11:55:24.933+0000",
                    "started": "2022-06-14T11:55:24.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781119",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781124",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896730323\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.cc:\n##########\n@@ -58,12 +58,53 @@ Result<compute::Declaration> DeserializeRelation(const Buffer& buf,\n   return FromProto(rel, ext_set);\n }\n \n-Result<std::vector<compute::Declaration>> DeserializePlans(\n-    const Buffer& buf, const ConsumerFactory& consumer_factory,\n+using DeclarationFactory = std::function<compute::Declaration(\n+    compute::Declaration, std::vector<std::string> names)>;\n+\n+static DeclarationFactory MakeConsumingSinkDeclarationFactory(\n+    const ConsumerFactory& consumer_factory) {\n+  return [&consumer_factory](compute::Declaration input, std::vector<std::string> names) {\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::ConsumingSinkNodeOptions>(\n+            compute::ConsumingSinkNodeOptions{consumer_factory(), std::move(names)});\n+    return compute::Declaration::Sequence(\n+        {std::move(input), {\"consuming_sink\", options}});\n+  };\n+}\n+\n+static compute::Declaration ProjectByNamesDeclaration(compute::Declaration input,\n+                                                      std::vector<std::string> names) {\n+  int names_size = static_cast<int>(names.size());\n+  if (names_size == 0) {\n+    return input;\n+  }\n+  std::vector<compute::Expression> expressions;\n+  for (int i = 0; i < names_size; i++) {\n+    expressions.push_back(compute::field_ref(FieldRef(i)));\n+  }\n+  return compute::Declaration::Sequence(\n+      {std::move(input),\n+       {\"project\",\n+        compute::ProjectNodeOptions{std::move(expressions), std::move(names)}}});\n+}\n\nReview Comment:\n   Okay, may be we can put then in anonymous namespace?\n\n\n\n",
                    "created": "2022-06-14T12:03:40.213+0000",
                    "updated": "2022-06-14T12:03:40.213+0000",
                    "started": "2022-06-14T12:03:40.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781124",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896730323\n\n\n##########\ncpp/src/arrow/engine/substrait/serde.cc:\n##########\n@@ -58,12 +58,53 @@ Result<compute::Declaration> DeserializeRelation(const Buffer& buf,\n   return FromProto(rel, ext_set);\n }\n \n-Result<std::vector<compute::Declaration>> DeserializePlans(\n-    const Buffer& buf, const ConsumerFactory& consumer_factory,\n+using DeclarationFactory = std::function<compute::Declaration(\n+    compute::Declaration, std::vector<std::string> names)>;\n+\n+static DeclarationFactory MakeConsumingSinkDeclarationFactory(\n+    const ConsumerFactory& consumer_factory) {\n+  return [&consumer_factory](compute::Declaration input, std::vector<std::string> names) {\n+    std::shared_ptr<compute::ExecNodeOptions> options =\n+        std::make_shared<compute::ConsumingSinkNodeOptions>(\n+            compute::ConsumingSinkNodeOptions{consumer_factory(), std::move(names)});\n+    return compute::Declaration::Sequence(\n+        {std::move(input), {\"consuming_sink\", options}});\n+  };\n+}\n+\n+static compute::Declaration ProjectByNamesDeclaration(compute::Declaration input,\n+                                                      std::vector<std::string> names) {\n+  int names_size = static_cast<int>(names.size());\n+  if (names_size == 0) {\n+    return input;\n+  }\n+  std::vector<compute::Expression> expressions;\n+  for (int i = 0; i < names_size; i++) {\n+    expressions.push_back(compute::field_ref(FieldRef(i)));\n+  }\n+  return compute::Declaration::Sequence(\n+      {std::move(input),\n+       {\"project\",\n+        compute::ProjectNodeOptions{std::move(expressions), std::move(names)}}});\n+}\n\nReview Comment:\n   Okay, may be we can put this in anonymous namespace?\n\n\n\n",
                    "created": "2022-06-14T12:03:55.278+0000",
                    "updated": "2022-06-14T12:03:55.278+0000",
                    "started": "2022-06-14T12:03:55.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781125",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896732126\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n+  }\n \n-    const std::string& name = function->name();\n-    auto it = name_to_function_.find(name);\n-    if (it != name_to_function_.end() && !allow_overwrite) {\n-      return Status::KeyError(\"Already have a function registered with name: \", name);\n+  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n     }\n-    name_to_function_[name] = std::move(function);\n-    return Status::OK();\n+    return DoAddFunction(function, allow_overwrite, /*add=*/true);\n+  }\n+\n+  Status CanAddAlias(const std::string& target_name, const std::string& source_name) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/false);\n   }\n \n   Status AddAlias(const std::string& target_name, const std::string& source_name) {\n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n\nReview Comment:\n   Do we need to mention this in a comment? since it is just two fields.\n\n\n\n",
                    "created": "2022-06-14T12:05:45.465+0000",
                    "updated": "2022-06-14T12:05:45.465+0000",
                    "started": "2022-06-14T12:05:45.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781127",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896732396\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n+  }\n \n-    const std::string& name = function->name();\n-    auto it = name_to_function_.find(name);\n-    if (it != name_to_function_.end() && !allow_overwrite) {\n-      return Status::KeyError(\"Already have a function registered with name: \", name);\n+  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n     }\n-    name_to_function_[name] = std::move(function);\n-    return Status::OK();\n+    return DoAddFunction(function, allow_overwrite, /*add=*/true);\n+  }\n+\n+  Status CanAddAlias(const std::string& target_name, const std::string& source_name) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n\nReview Comment:\n   Do we need to mention this in a comment? \n\n\n\n",
                    "created": "2022-06-14T12:06:05.412+0000",
                    "updated": "2022-06-14T12:06:05.412+0000",
                    "started": "2022-06-14T12:06:05.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781128",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896732675\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n\nReview Comment:\n   Do we need to mention this in a comment?\n\n\n\n",
                    "created": "2022-06-14T12:06:25.407+0000",
                    "updated": "2022-06-14T12:06:25.407+0000",
                    "started": "2022-06-14T12:06:25.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781129",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896732718\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n+  }\n \n-    const std::string& name = function->name();\n-    auto it = name_to_function_.find(name);\n-    if (it != name_to_function_.end() && !allow_overwrite) {\n-      return Status::KeyError(\"Already have a function registered with name: \", name);\n+  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n     }\n-    name_to_function_[name] = std::move(function);\n-    return Status::OK();\n+    return DoAddFunction(function, allow_overwrite, /*add=*/true);\n+  }\n+\n+  Status CanAddAlias(const std::string& target_name, const std::string& source_name) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/false);\n   }\n \n   Status AddAlias(const std::string& target_name, const std::string& source_name) {\n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n\nReview Comment:\n   Our general style is to annotate literal parameters.\n\n\n\n",
                    "created": "2022-06-14T12:06:27.439+0000",
                    "updated": "2022-06-14T12:06:27.439+0000",
                    "started": "2022-06-14T12:06:27.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781130",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896733517\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n+  }\n \n-    const std::string& name = function->name();\n-    auto it = name_to_function_.find(name);\n-    if (it != name_to_function_.end() && !allow_overwrite) {\n-      return Status::KeyError(\"Already have a function registered with name: \", name);\n+  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n     }\n-    name_to_function_[name] = std::move(function);\n-    return Status::OK();\n+    return DoAddFunction(function, allow_overwrite, /*add=*/true);\n+  }\n+\n+  Status CanAddAlias(const std::string& target_name, const std::string& source_name) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/false);\n   }\n \n   Status AddAlias(const std::string& target_name, const std::string& source_name) {\n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/true);\n+  }\n \n-    auto it = name_to_function_.find(source_name);\n-    if (it == name_to_function_.end()) {\n-      return Status::KeyError(\"No function registered with name: \", source_name);\n+  Status CanAddFunctionOptionsType(const FunctionOptionsType* options_type,\n+                                   bool allow_overwrite = false) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionOptionsType(options_type, allow_overwrite));\n     }\n-    name_to_function_[target_name] = it->second;\n-    return Status::OK();\n+    return DoAddFunctionOptionsType(options_type, allow_overwrite, /*add=*/false);\n\nReview Comment:\n   Comment needed?\n\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -34,59 +34,72 @@ namespace compute {\n \n class FunctionRegistry::FunctionRegistryImpl {\n  public:\n-  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n-#ifndef NDEBUG\n-    // This validates docstrings extensively, so don't waste time on it\n-    // in release builds.\n-    RETURN_NOT_OK(function->Validate());\n-#endif\n+  explicit FunctionRegistryImpl(FunctionRegistryImpl* parent = NULLPTR)\n+      : parent_(parent) {}\n+  ~FunctionRegistryImpl() {}\n \n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+  Status CanAddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n+    }\n+    return DoAddFunction(function, allow_overwrite, /*add=*/false);\n+  }\n \n-    const std::string& name = function->name();\n-    auto it = name_to_function_.find(name);\n-    if (it != name_to_function_.end() && !allow_overwrite) {\n-      return Status::KeyError(\"Already have a function registered with name: \", name);\n+  Status AddFunction(std::shared_ptr<Function> function, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunction(function, allow_overwrite));\n     }\n-    name_to_function_[name] = std::move(function);\n-    return Status::OK();\n+    return DoAddFunction(function, allow_overwrite, /*add=*/true);\n+  }\n+\n+  Status CanAddAlias(const std::string& target_name, const std::string& source_name) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/false);\n   }\n \n   Status AddAlias(const std::string& target_name, const std::string& source_name) {\n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(target_name,\n+                                                /*allow_overwrite=*/false));\n+    }\n+    return DoAddAlias(target_name, source_name, /*add=*/true);\n+  }\n \n-    auto it = name_to_function_.find(source_name);\n-    if (it == name_to_function_.end()) {\n-      return Status::KeyError(\"No function registered with name: \", source_name);\n+  Status CanAddFunctionOptionsType(const FunctionOptionsType* options_type,\n+                                   bool allow_overwrite = false) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionOptionsType(options_type, allow_overwrite));\n     }\n-    name_to_function_[target_name] = it->second;\n-    return Status::OK();\n+    return DoAddFunctionOptionsType(options_type, allow_overwrite, /*add=*/false);\n   }\n \n   Status AddFunctionOptionsType(const FunctionOptionsType* options_type,\n                                 bool allow_overwrite = false) {\n-    std::lock_guard<std::mutex> mutation_guard(lock_);\n-\n-    const std::string name = options_type->type_name();\n-    auto it = name_to_options_type_.find(name);\n-    if (it != name_to_options_type_.end() && !allow_overwrite) {\n-      return Status::KeyError(\n-          \"Already have a function options type registered with name: \", name);\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionOptionsType(options_type, allow_overwrite));\n     }\n-    name_to_options_type_[name] = options_type;\n-    return Status::OK();\n+    return DoAddFunctionOptionsType(options_type, allow_overwrite, /*add=*/true);\n\nReview Comment:\n   Comment needed?\n\n\n\n",
                    "created": "2022-06-14T12:07:20.446+0000",
                    "updated": "2022-06-14T12:07:20.446+0000",
                    "started": "2022-06-14T12:07:20.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781131",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896736948\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -98,14 +111,96 @@ class FunctionRegistry::FunctionRegistryImpl {\n       const std::string& name) const {\n     auto it = name_to_options_type_.find(name);\n     if (it == name_to_options_type_.end()) {\n+      if (parent_ != NULLPTR) {\n+        return parent_->GetFunctionOptionsType(name);\n+      }\n       return Status::KeyError(\"No function options type registered with name: \", name);\n     }\n     return it->second;\n   }\n \n-  int num_functions() const { return static_cast<int>(name_to_function_.size()); }\n+  int num_functions() const {\n+    return (parent_ == NULLPTR ? 0 : parent_->num_functions()) +\n+           static_cast<int>(name_to_function_.size());\n+  }\n \n  private:\n+  // must not acquire mutex\n+  Status CanAddFunctionName(const std::string& name, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(name, allow_overwrite));\n+    }\n+    if (!allow_overwrite) {\n+      auto it = name_to_function_.find(name);\n+      if (it != name_to_function_.end()) {\n+        return Status::KeyError(\"Already have a function registered with name: \", name);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  // must not acquire mutex\n+  Status CanAddOptionsTypeName(const std::string& name, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddOptionsTypeName(name, allow_overwrite));\n+    }\n+    if (!allow_overwrite) {\n+      auto it = name_to_options_type_.find(name);\n+      if (it != name_to_options_type_.end()) {\n+        return Status::KeyError(\n+            \"Already have a function options type registered with name: \", name);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoAddFunction(std::shared_ptr<Function> function, bool allow_overwrite,\n+                       bool add) {\n+#ifndef NDEBUG\n+    // This validates docstrings extensively, so don't waste time on it\n+    // in release builds.\n+    RETURN_NOT_OK(function->Validate());\n+#endif\n+\n+    std::lock_guard<std::mutex> mutation_guard(lock_);\n+\n+    const std::string& name = function->name();\n+    RETURN_NOT_OK(CanAddFunctionName(name, allow_overwrite));\n+    if (add) {\n+      name_to_function_[name] = std::move(function);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoAddAlias(const std::string& target_name, const std::string& source_name,\n+                    bool add) {\n+    // source name must exist in this registry or the parent\n+    // check outside mutex, in case GetFunction leads to mutex acquisition\n+    ARROW_ASSIGN_OR_RAISE(auto func, GetFunction(source_name));\n+\n+    std::lock_guard<std::mutex> mutation_guard(lock_);\n+\n+    // target name must be available in this registry and the parent\n+    RETURN_NOT_OK(CanAddFunctionName(target_name, /*allow_overwrite=*/false));\n\nReview Comment:\n   do we need to mention `/*allow_overwrite=*` here?\n\n\n\n",
                    "created": "2022-06-14T12:11:05.766+0000",
                    "updated": "2022-06-14T12:11:05.766+0000",
                    "started": "2022-06-14T12:11:05.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781133",
                    "issueId": "13449783"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/worklog/781135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13375:\nURL: https://github.com/apache/arrow/pull/13375#discussion_r896736948\n\n\n##########\ncpp/src/arrow/compute/registry.cc:\n##########\n@@ -98,14 +111,96 @@ class FunctionRegistry::FunctionRegistryImpl {\n       const std::string& name) const {\n     auto it = name_to_options_type_.find(name);\n     if (it == name_to_options_type_.end()) {\n+      if (parent_ != NULLPTR) {\n+        return parent_->GetFunctionOptionsType(name);\n+      }\n       return Status::KeyError(\"No function options type registered with name: \", name);\n     }\n     return it->second;\n   }\n \n-  int num_functions() const { return static_cast<int>(name_to_function_.size()); }\n+  int num_functions() const {\n+    return (parent_ == NULLPTR ? 0 : parent_->num_functions()) +\n+           static_cast<int>(name_to_function_.size());\n+  }\n \n  private:\n+  // must not acquire mutex\n+  Status CanAddFunctionName(const std::string& name, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddFunctionName(name, allow_overwrite));\n+    }\n+    if (!allow_overwrite) {\n+      auto it = name_to_function_.find(name);\n+      if (it != name_to_function_.end()) {\n+        return Status::KeyError(\"Already have a function registered with name: \", name);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  // must not acquire mutex\n+  Status CanAddOptionsTypeName(const std::string& name, bool allow_overwrite) {\n+    if (parent_ != NULLPTR) {\n+      RETURN_NOT_OK(parent_->CanAddOptionsTypeName(name, allow_overwrite));\n+    }\n+    if (!allow_overwrite) {\n+      auto it = name_to_options_type_.find(name);\n+      if (it != name_to_options_type_.end()) {\n+        return Status::KeyError(\n+            \"Already have a function options type registered with name: \", name);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoAddFunction(std::shared_ptr<Function> function, bool allow_overwrite,\n+                       bool add) {\n+#ifndef NDEBUG\n+    // This validates docstrings extensively, so don't waste time on it\n+    // in release builds.\n+    RETURN_NOT_OK(function->Validate());\n+#endif\n+\n+    std::lock_guard<std::mutex> mutation_guard(lock_);\n+\n+    const std::string& name = function->name();\n+    RETURN_NOT_OK(CanAddFunctionName(name, allow_overwrite));\n+    if (add) {\n+      name_to_function_[name] = std::move(function);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status DoAddAlias(const std::string& target_name, const std::string& source_name,\n+                    bool add) {\n+    // source name must exist in this registry or the parent\n+    // check outside mutex, in case GetFunction leads to mutex acquisition\n+    ARROW_ASSIGN_OR_RAISE(auto func, GetFunction(source_name));\n+\n+    std::lock_guard<std::mutex> mutation_guard(lock_);\n+\n+    // target name must be available in this registry and the parent\n+    RETURN_NOT_OK(CanAddFunctionName(target_name, /*allow_overwrite=*/false));\n\nReview Comment:\n   do we need to mention `/*allow_overwrite=*/` here?\n\n\n\n",
                    "created": "2022-06-14T12:11:20.738+0000",
                    "updated": "2022-06-14T12:11:20.738+0000",
                    "started": "2022-06-14T12:11:20.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781135",
                    "issueId": "13449783"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 54600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6efd1387[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f57aac0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c1b0142[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2eb8abab[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b028f24[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3c3f9a7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5706f98c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3c88f534[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@430c362e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f1ef129[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f34a9df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@44eeca58[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 54600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 30 22:47:21 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-30T22:47:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16823/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-13T11:11:35.000+0000",
        "updated": "2022-06-30T22:47:21.000+0000",
        "timeoriginalestimate": null,
        "description": "The enhancements include support for:\r\n * user-provided extension-id-registries and function-registries (for scoped registries)\r\n * registering a function (with an Id) external to the plan\r\n * a dataset-write-sink (for convenience and multiple outputting)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "15h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 54600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Arrow Substrait enhancements for UDF",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/comment/17554780",
                    "id": "17554780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Some design rationale:\r\n * The scoped (or nested) registries are intended for temporary registration of functions. A typical use case for this is execution of a Substrait plan that includes UDFs (TBD). The UDFs get registered using a scoped extension-id-registry and a scoped function-registry, which are used during plan deserialization and execution, and thereafter can be dropped without ever affecting the default/global registries. This can even be done for multiple plans in parallel, each using separate scoped registries.\r\n * The registration of external functions is intended for UDFs provided outside of the Substrait plan they are used in. This is one way to plug in UDFs. Another way is by embedding UDFs within the plan (TBD).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-15T20:17:18.194+0000",
                    "updated": "2022-06-15T20:17:18.194+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/comment/17554833",
                    "id": "17554833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think this is in general a good idea. But I have a few questions to genaralize the usage. Looking into this discussion, I think for general usage of UDFs we could also keep a temporary registry which is in the scope of the application and it get destroyed when the application ends it's life. So it is external to the global function registry (GFR). But we didn't design the initial version of UDFs to support this. Keeping this aside, for Substrait users the proposed idea is to keep a separate registry to hold the registered functions and let the application lifetime decide it's destruction. So this would always be independent from the temporary registry we design for UDF (assuming we are going to).\r\n\r\nThinking about a simple example to reflect the usage. Let's say there is a user who is writing an application with 3 stages. The first stage finishes and independent of that, the 2nd stage continues, but the results from stage 1 and stage 2 are required for stage3. The user defines a set of custom functions and get them registered in the proposed manner. Now this is in the temporary function registry called TF1. The first stage concludes. In the second stage, the user wants to consume a substrait plan and pre-process some data. Here we have the TF2 which has it's own functions, plus it requires some of the functions required in TF1. But if we made TF2 such that it is nested as suggested, we don't need to re-register we can re-use the prioir. And in the third stage we can use the results from both stages and conclude our work. Visually GFR->TF1, GFR->TF2 or GFR->TF1->TF2 right? What if TF1 destroyed, that means TF2 get detached from the GFR, are we going to correct that relationship when we remove TF1. Are we planning to handle this or is this irrelevant? Please correct me if I am wrong. I guess a simple design doc would come in handy if we are not grasping the major aspects how the temporary registry would be used.\r\n\r\nConsidering the practical usage, I assume what should happen is, when I ask for function `f1` to be called, it should scan through the global, then go level by level on the scoped and retrieve the function once located. Is this right? For Python UDF users or R UDF users, do we have to do anything special where we expose the FunctionRegistry (I guess we don't have to, but curious). I would assume the temporary registry idea is powerful to give more control to the application developer to control what is done with functions. If it is exposed they can efficiently manage it rather than we manage it for them internally. I could be wrong, but please evaluate this statement.\r\n\r\nIn addition, I have this general question, depending on the usage, should we keep a separate temporary function registry for Substrait UDF users, plain UDF users (directly using Arrow), in future there could be similar cases where we need to support. It could be a third-party library which has a different flavour of requirements. So should we create temporaries for each such case or just create single temporary to be used in all cases (won't be practical, but curious). I assume scoped registries would be the solution to support such events.\u00a0\r\n\r\nDiving a little deep into the parallel case, we are going to have separate scoped registry for each instance. I would say that is efficient for communication and there is no sync issues. May be the intended use is multiple plans with non-overlapping functions? I assume for multi-node multi-core setting we won't be keeping duplicated memory in each node. In the optimized way, I would assume to minimize communications we can keep function copies across each process if required by other plans. Here we are saving execution time. But in case these registries grow too big (Could this allocate a huge memory if we store 1000 UDFs?), we could have a shared-memory model. This is out of scope, but just curious about the parallel setting.\r\n\r\nAppreciate your thoughts on this. cc [~rtpsw]\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-16T00:22:17.564+0000",
                    "updated": "2022-06-16T00:22:17.564+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/comment/17554982",
                    "id": "17554982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~vibhatha], before I address your points, I think it would help that I write my view of how nested registries would be used, in general and in the context of UDFs.\r\n\r\nIn general, a nested registry is created and passed to a new scope which is free to modify it without affecting its parent registries. This can be thought of as passing-by-value, as long as parent registries remain constant while the new scope is alive, and indeed this is the recommended way of using nested registries. With this way of use, registry nesting has the following desirable properties:\r\n # Value-semantics: modification are restricted to the passed \"value\".\r\n # Recursive: repeated nesting works as expected.\r\n # Thread-safety: a nested registry can be safely passed to a thread.\r\n\r\nIn the context of UDFs, a nested registry is created for temporarily registering UDFs for the lifetime of a separate scope in which they will be used. In a typical use case, this scope is for deserialization and execution of a Substrait plan. In this use case, one creates nested (function and extension-id) registries and uses them to deserialize a Substrait plan, register UDFs for this plan, and execute the plan, then drops the nested registries.\r\n\r\nIt is no accident that the above properties make nested registries powerful enough to cleanly support much more complex future use cases. I envision modular Substrait plans:\r\n * a Substrait plan can be shared (from author to its users)\r\n * shared Substrait plans can be gathered in libraries/modules\r\n * a Substrait plan can include invocations of other shared Substrait plans\r\n\r\nand that they will become important for boosting user productivity with Arrow.\r\n\r\nWhile this is my long-term vision, the current issue is about preparation for upcoming end-to-end Ibis/Ibis-Substrait/PyArrow support for Python-UDFs that I'm currently working on.\r\n\r\nNow to your points.\r\n\r\n> I think for general usage of UDFs we could also keep a temporary registry which is in the scope of the application and it get destroyed when the application ends it's life.\r\n\r\nA single registry for UDF would go against the design goal of modularity. It would require support for unregistration, which is error-prone. See also the discussion in ARROW-16211.\r\n\r\n> Thinking about a simple example to reflect the usage.\r\n\r\nThis is actually an example more complex than the single-Substrait-plan-with-UDFs one that I described above.\r\n\r\n> Visually GFR->TF1, GFR->TF2 or GFR->TF1->TF2 right?\r\n\r\nI think the right organization for your example is that each nested registry has the global one as its parent. Each of the 3 stages has its own set of UDFs to register.\r\n\r\n> What if TF1 destroyed, that means TF2 get detached from the GFR, are we going to correct that relationship when we remove TF1. Are we planning to handle this or is this irrelevant?\r\n\r\nWhen following the recommended way of using nested registries that I described above, even in a case of repeated nesting like GFR->TF1->TF2, it is incorrect to even modify, let alone drop, TF1 while TF2 is alive.\r\n\r\n> Considering the practical usage, I assume what should happen is, when I ask for function `f1` to be called, it should scan through the global, then go level by level on the scoped and retrieve the function once located. Is this right?\r\n\r\nIt's the other way around. In the case of GFR->TF1->TF2, the function is first looked up in TF2, then in TF1, and finally in GFR. This way, modification to TF2 take precedence, which is what one expects from value-semantics.\r\n\r\n> \u00a0For Python UDF users or R UDF users, do we have to do anything special where we expose the FunctionRegistry (I guess we don't have to, but curious)...\r\n\r\nEventually, the end-user should typically just invoke a single function to execute a Substrait plan. If the Substrait plan has UDFs, their registration into fresh nested registries will be automated (I have this locally worked out for Python-UDFs, and presumably R-UDFs should work out similarly). The facilities we discuss here are for developers and should eventually be encapsulated from the end-user.\r\n\r\n> In addition, I have this general question, depending on the usage, should we keep a separate temporary function registry for Substrait UDF users, plain UDF users (directly using Arrow), in future there could be similar cases where we need to support...\r\n\r\nAs described above, the recommended way is to create nested registries for a scope, not for a class-of-use (like Substrait-UDF-use and plain-UDF-use).\r\n\r\n> Diving a little deep into the parallel case, we are going to have separate scoped registry for each instance. I would say that is efficient for communication and there is no sync issues. May be the intended use is multiple plans with non-overlapping functions? ...\r\n\r\nA thread is a separate scope, and if it needs to modify registries then it will be passed fresh nested registries (or create them by itself first thing) that it can freely modify. For example, this need arises when there are multiple threads, each processing a Substrait plan with its own UDFs. The parent registries will be kept constant while the threads are working. Since the parent registries are reused, so does their memory, hence the extra registration memory cost is only due to the UDFs registered in the nested registries. Even in a case with 1000 threads, it is still possible to minimize the extra memory required, e.g., when all threads share nested registries that were set up once before they start using them in a read-only manner.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-16T09:20:11.345+0000",
                    "updated": "2022-06-16T09:26:06.337+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13449783/comment/17561202",
                    "id": "17561202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13375\n[https://github.com/apache/arrow/pull/13375]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-30T22:47:21.994+0000",
                    "updated": "2022-06-30T22:47:21.994+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z136q8:",
        "customfield_12314139": null
    }
}