{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13355731",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731",
    "key": "ARROW-11446",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11446/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 49,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/544897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-770392610\n\n\n   https://issues.apache.org/jira/browse/ARROW-11446\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T14:41:13.783+0000",
                    "updated": "2021-01-31T14:41:13.783+0000",
                    "started": "2021-01-31T14:41:13.783+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544897",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/544917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-770408614\n\n\n   This is ready for a first take.\r\n   \r\n   Some notes:\r\n   \r\n   * This changes the UDF's API: they should now handle `ColumnarValue`, not `ArrayRef`.\r\n   * whenever possible, I used generics instead of macros. I have been reasoning about code more easily with generics because they set the traits explicitly and are therefore IMO easier to use.\r\n   * I had to add a new trait to bridge `ScalarValue` and `ArrowPrimitiveType`\r\n   * I had to implement the `TryFrom` for the timestampNanoseconds.\r\n   * I have not added test coverage to the scalar cases of our existing functions. Longer term, I think we should develop a generic to handle this without having to test the two cases. I tried to do something like this, but I still had to copy-paste some code between generics, unfortunately.\r\n   \r\n   Sorry for the long PR, but I did not find an easy way to split it up (besides #9378, which this PR is built on top of).\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T16:29:00.366+0000",
                    "updated": "2021-01-31T16:29:00.366+0000",
                    "started": "2021-01-31T16:29:00.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544917",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/544979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-770464465\n\n\n   > @jorgecarleitao -- I agree with @Dandandan -- think `date_trunc(scalar, array)` and `date_trun(scalar, scalar) are the really important cases. I have no use case for `date_trunc(array, array)`\r\n   \r\n   Having been trying to implement a lot of the Postgres logic recently they all logically support the use of arrays for each of the parameters (i.e. `date_trunc(array, array)`) I have no idea how common the use of this functionality really is - and I suspect it is low - but if we are building the API for Postgres compatibility it would be good to solve.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T22:42:47.612+0000",
                    "updated": "2021-01-31T22:42:47.612+0000",
                    "started": "2021-01-31T22:42:47.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544979",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] removed a comment on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-770268175\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   Could you open an issue for this pull request on JIRA?\n   https://issues.apache.org/jira/browse/ARROW\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T09:58:24.633+0000",
                    "updated": "2021-02-01T09:58:24.633+0000",
                    "started": "2021-02-01T09:58:24.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545224",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771186423\n\n\n   > Having been trying to implement a lot of the Postgres logic recently they all logically support the use of arrays for each of the parameters (i.e. date_trunc(array, array)) I have no idea how common the use of this functionality really is - and I suspect it is low - but if we are building the API for Postgres compatibility it would be good to solve.\r\n   \r\n   This is a good point @seddonm1 - I am just starting to look at this pR, but I wonder if we could do something like have a default implementation for `func(scalar, scalar)`, `func(scalar, array)`, and `func(array, scalar)` that are implemented in terms of the `func(array, array)`\r\n   \r\n   that way we would only have to supply `func(array, array)` and the scalar input case could be handled on a case by case basis. I'll try and commend inline if I see how that might be done\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T21:56:47.974+0000",
                    "updated": "2021-02-01T21:56:47.974+0000",
                    "started": "2021-02-01T21:56:47.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545624",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771190985\n\n\n   @alamb here is a proof-of-concept for the regexp_replace Postgres function which has been built to support the possibility of passing in different function parameters for each row. If it were possible to tell whether the value was a Scalar or Array there would be major optimisation opportunities. I did some basic memoization of the Regex objects but that would not be as necessary if we knew Scalar v Array.\r\n   \r\n   https://github.com/apache/arrow/pull/9243/files#diff-abe8768fe7124198cca7a84ad7b2c678b3cc8e5de3d1bc867d498536a2fdddc7R542\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T22:05:09.744+0000",
                    "updated": "2021-02-01T22:05:09.744+0000",
                    "started": "2021-02-01T22:05:09.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545634",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568168403\n\n\n\n##########\nFile path: rust/datafusion/examples/simple_udf.rs\n##########\n@@ -54,50 +58,76 @@ fn create_context() -> Result<ExecutionContext> {\n     Ok(ctx)\n }\n \n+// a small utility function to compute pow(base, exponent)\n+fn maybe_pow(base: &Option<f64>, exponent: &Option<f64>) -> Option<f64> {\n+    match (base, exponent) {\n+        // in arrow, any value can be null.\n+        // Here we decide to make our UDF to return null when either base or exponent is null.\n+        (Some(base), Some(exponent)) => Some(base.powf(*exponent)),\n+        _ => None,\n+    }\n+}\n+\n+fn pow_array(base: &dyn Array, exponent: &dyn Array) -> Result<ArrayRef> {\n+    // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n+    let base = base\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+    let exponent = exponent\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+\n+    // this is guaranteed by DataFusion. We place it just to make it obvious.\n+    assert_eq!(exponent.len(), base.len());\n+\n+    // 2. perform the computation\n+    let array = base\n+        .iter()\n+        .zip(exponent.iter())\n+        .map(|(base, exponent)| maybe_pow(&base, &exponent))\n+        .collect::<Float64Array>();\n+\n+    // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n\nReview comment:\n       ```suggestion\r\n       // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1] and the base < 0 because that panics!)\r\n   ```\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       I may be missing it -- but this function only seems to be invoked once with the same set of type arguments -- does it need to be generic? Or more broadly, can we hoist this seemingly repeated `handle` pattern somewhere it can be  reused (and reduce the cognitive load on people writing new functions?)\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n\nReview comment:\n       I think adding an example of using this pattern for implementing UDfs might be really helpful\n\n##########\nFile path: rust/arrow/src/conversions.rs\n##########\n@@ -0,0 +1,127 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       this module might be more specifically named `datetime_conversions.rs`\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -17,27 +17,100 @@\n \n //! String expressions\n \n-use crate::error::{DataFusionError, Result};\n-use arrow::array::{\n-    Array, ArrayRef, GenericStringArray, StringArray, StringBuilder,\n-    StringOffsetSizeTrait,\n+use std::sync::Arc;\n+\n+use crate::{\n+    error::{DataFusionError, Result},\n+    scalar::ScalarValue,\n+};\n+use arrow::{\n+    array::{Array, GenericStringArray, StringArray, StringOffsetSizeTrait},\n+    datatypes::DataType,\n };\n \n-macro_rules! downcast_vec {\n-    ($ARGS:expr, $ARRAY_TYPE:ident) => {{\n-        $ARGS\n-            .iter()\n-            .map(|e| match e.as_any().downcast_ref::<$ARRAY_TYPE>() {\n-                Some(array) => Ok(array),\n-                _ => Err(DataFusionError::Internal(\"failed to downcast\".to_string())),\n-            })\n-    }};\n+use super::ColumnarValue;\n+\n+pub(crate) fn unary_string_function<'a, T, O, F, R>(\n\nReview comment:\n       this function is effectively applying a `str->str` function `op` to all values in `args`? Some comments might be helpful\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T22:29:41.761+0000",
                    "updated": "2021-02-01T22:29:41.761+0000",
                    "started": "2021-02-01T22:29:41.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545661",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771381944\n\n\n   Hi @alamb , thanks a lot for your review and comments. I generally agree that this makes it more difficult to write a UDF and a function implementation in general.\r\n   \r\n   I like that idea. I have now pushed a commit with it. I will now address the remaining ones.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T05:50:12.210+0000",
                    "updated": "2021-02-02T05:50:12.210+0000",
                    "started": "2021-02-02T05:50:12.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545801",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568342573\n\n\n\n##########\nFile path: rust/arrow/src/conversions.rs\n##########\n@@ -0,0 +1,127 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       It was renamed on a different PR to `temporal_conversions`. I rebased this PR so that we no longer have these changes.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T06:02:44.418+0000",
                    "updated": "2021-02-02T06:02:44.418+0000",
                    "started": "2021-02-02T06:02:44.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545810",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568343902\n\n\n\n##########\nFile path: rust/datafusion/examples/simple_udf.rs\n##########\n@@ -54,50 +58,76 @@ fn create_context() -> Result<ExecutionContext> {\n     Ok(ctx)\n }\n \n+// a small utility function to compute pow(base, exponent)\n+fn maybe_pow(base: &Option<f64>, exponent: &Option<f64>) -> Option<f64> {\n+    match (base, exponent) {\n+        // in arrow, any value can be null.\n+        // Here we decide to make our UDF to return null when either base or exponent is null.\n+        (Some(base), Some(exponent)) => Some(base.powf(*exponent)),\n+        _ => None,\n+    }\n+}\n+\n+fn pow_array(base: &dyn Array, exponent: &dyn Array) -> Result<ArrayRef> {\n+    // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n+    let base = base\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+    let exponent = exponent\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+\n+    // this is guaranteed by DataFusion. We place it just to make it obvious.\n+    assert_eq!(exponent.len(), base.len());\n+\n+    // 2. perform the computation\n+    let array = base\n+        .iter()\n+        .zip(exponent.iter())\n+        .map(|(base, exponent)| maybe_pow(&base, &exponent))\n+        .collect::<Float64Array>();\n+\n+    // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n\nReview comment:\n       This represents an open interval: `0 <= exponent < 1` because `(x)^1 = x` for all x (including negative ones).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T06:06:51.653+0000",
                    "updated": "2021-02-02T06:06:51.653+0000",
                    "started": "2021-02-02T06:06:51.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545812",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568348305\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In crypto_expressions we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`.\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T06:19:38.980+0000",
                    "updated": "2021-02-02T06:19:38.980+0000",
                    "started": "2021-02-02T06:19:38.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545818",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568348305\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In `crypto_expressions` we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`. All of this was already written, I just expanded it for the two variants (scalar and vector).\r\n   \r\n   Note that `crypto_expressions::handle` and `crypto_expressions::md5` are very similar, but their return types are different: `unary_binary_function` receives a `GenericStringArray`, but returns a `BinaryArray`. This is because `MD5`'s signature is `string -> string`, while `sha` is `string -> binary`.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T06:27:58.097+0000",
                    "updated": "2021-02-02T06:27:58.097+0000",
                    "started": "2021-02-02T06:27:58.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545821",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568348305\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In `crypto_expressions` we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`. All of this was already written, I just expanded it for the two variants (scalar and vector).\r\n   \r\n   Note that `crypto_expressions::handle` and `crypto_expressions::md5` are very similar, but their return types are different: `handle` receives a `GenericStringArray`, but returns a `BinaryArray`. This is because `MD5`'s signature is `string -> string`, while `sha` is `string -> binary`.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T06:28:23.967+0000",
                    "updated": "2021-02-02T06:28:23.967+0000",
                    "started": "2021-02-02T06:28:23.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545822",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771427446\n\n\n   Ok, I have addressed the comments.\r\n   \r\n   The API change to UDFs is that people need to call `make_scalar_function` on their existing UDFs, as seen in diff of the example.\r\n   \r\n   Out of curiosity, did anyone run the benchmarks? I do not have a machine suitable for that, but I am obviously curious :)\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T07:25:07.382+0000",
                    "updated": "2021-02-02T07:25:07.382+0000",
                    "started": "2021-02-02T07:25:07.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545837",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568532324\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       makes sense -- thank you for the explination\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       makes sense -- thank you for the explanation\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T11:35:39.915+0000",
                    "updated": "2021-02-02T11:35:39.915+0000",
                    "started": "2021-02-02T11:35:39.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545983",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/545989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568535264\n\n\n\n##########\nFile path: rust/datafusion/examples/simple_udf.rs\n##########\n@@ -58,77 +54,54 @@ fn create_context() -> Result<ExecutionContext> {\n     Ok(ctx)\n }\n \n-// a small utility function to compute pow(base, exponent)\n-fn maybe_pow(base: &Option<f64>, exponent: &Option<f64>) -> Option<f64> {\n-    match (base, exponent) {\n-        // in arrow, any value can be null.\n-        // Here we decide to make our UDF to return null when either base or exponent is null.\n-        (Some(base), Some(exponent)) => Some(base.powf(*exponent)),\n-        _ => None,\n-    }\n-}\n-\n-fn pow_array(base: &dyn Array, exponent: &dyn Array) -> Result<ArrayRef> {\n-    // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n-    let base = base\n-        .as_any()\n-        .downcast_ref::<Float64Array>()\n-        .expect(\"cast failed\");\n-    let exponent = exponent\n-        .as_any()\n-        .downcast_ref::<Float64Array>()\n-        .expect(\"cast failed\");\n-\n-    // this is guaranteed by DataFusion. We place it just to make it obvious.\n-    assert_eq!(exponent.len(), base.len());\n-\n-    // 2. perform the computation\n-    let array = base\n-        .iter()\n-        .zip(exponent.iter())\n-        .map(|(base, exponent)| maybe_pow(&base, &exponent))\n-        .collect::<Float64Array>();\n-\n-    // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n-    // `Arc` because arrays are immutable, thread-safe, trait objects.\n-    Ok(Arc::new(array))\n-}\n-\n /// In this example we will declare a single-type, single return type UDF that exponentiates f64, a^b\n #[tokio::main]\n async fn main() -> Result<()> {\n     let mut ctx = create_context()?;\n \n     // First, declare the actual implementation of the calculation\n-    let pow: ScalarFunctionImplementation = Arc::new(|args: &[ColumnarValue]| {\n-        // in DataFusion, all `args` and output are `ColumnarValue`, an enum of either a scalar or a dynamically-typed array.\n-        // we can cater for both, or document that the UDF only supports some variants.\n-        // here we will assume that al\n+    let pow = |args: &[ArrayRef]| {\n+        // in DataFusion, all `args` and output are dynamically-typed arrays, which means that we need to:\n         // 1. cast the values to the type we want\n         // 2. perform the computation for every element in the array (using a loop or SIMD) and construct the result\n \n         // this is guaranteed by DataFusion based on the function's signature.\n         assert_eq!(args.len(), 2);\n \n-        let (base, exponent) = (&args[0], &args[1]);\n-\n-        let result = match (base, exponent) {\n-            (\n-                ColumnarValue::Scalar(ScalarValue::Float64(base)),\n-                ColumnarValue::Scalar(ScalarValue::Float64(exponent)),\n-            ) => ColumnarValue::Scalar(ScalarValue::Float64(maybe_pow(base, exponent))),\n-            (ColumnarValue::Array(base), ColumnarValue::Array(exponent)) => {\n-                let array = pow_array(base.as_ref(), exponent.as_ref())?;\n-                ColumnarValue::Array(array)\n-            }\n-            _ => {\n-                return Err(DataFusionError::Execution(\n-                    \"This UDF only supports f64\".to_string(),\n-                ))\n-            }\n-        };\n-        Ok(result)\n-    });\n+        // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n+        let base = &args[0]\n+            .as_any()\n+            .downcast_ref::<Float64Array>()\n+            .expect(\"cast failed\");\n+        let exponent = &args[1]\n+            .as_any()\n+            .downcast_ref::<Float64Array>()\n+            .expect(\"cast failed\");\n+\n+        // this is guaranteed by DataFusion. We place it just to make it obvious.\n+        assert_eq!(exponent.len(), base.len());\n+\n+        // 2. perform the computation\n+        let array = base\n+            .iter()\n+            .zip(exponent.iter())\n+            .map(|(base, exponent)| {\n+                match (base, exponent) {\n+                    // in arrow, any value can be null.\n+                    // Here we decide to make our UDF to return null when either base or exponent is null.\n+                    (Some(base), Some(exponent)) => Some(base.powf(exponent)),\n+                    _ => None,\n+                }\n+            })\n+            .collect::<Float64Array>();\n+\n+        // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n+        // `Arc` because arrays are immutable, thread-safe, trait objects.\n+        Ok(Arc::new(array) as ArrayRef)\n+    };\n+    // the function above expects an `ArrayRef`, but DataFusion may pass a scalar to a UDF.\n+    // thus, we use `make_scalar_function` to decorare the closure so that it can handle both Arrays and Scalar values.\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/examples/simple_udf.rs\n##########\n@@ -54,50 +58,76 @@ fn create_context() -> Result<ExecutionContext> {\n     Ok(ctx)\n }\n \n+// a small utility function to compute pow(base, exponent)\n+fn maybe_pow(base: &Option<f64>, exponent: &Option<f64>) -> Option<f64> {\n+    match (base, exponent) {\n+        // in arrow, any value can be null.\n+        // Here we decide to make our UDF to return null when either base or exponent is null.\n+        (Some(base), Some(exponent)) => Some(base.powf(*exponent)),\n+        _ => None,\n+    }\n+}\n+\n+fn pow_array(base: &dyn Array, exponent: &dyn Array) -> Result<ArrayRef> {\n+    // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n+    let base = base\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+    let exponent = exponent\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+\n+    // this is guaranteed by DataFusion. We place it just to make it obvious.\n+    assert_eq!(exponent.len(), base.len());\n+\n+    // 2. perform the computation\n+    let array = base\n+        .iter()\n+        .zip(exponent.iter())\n+        .map(|(base, exponent)| maybe_pow(&base, &exponent))\n+        .collect::<Float64Array>();\n+\n+    // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n\nReview comment:\n       cool -- sorry I guess I am used to seeing an open interval  using a `)` --so in this case something like `[0, 1)` to represent `0 <= exponent < 1` (e.g. [here](https://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T11:41:52.849+0000",
                    "updated": "2021-02-02T11:41:52.849+0000",
                    "started": "2021-02-02T11:41:52.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545989",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/546197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771887859\n\n\n   @jorgecarleitao what kind of benchmarks are you interested in? AFAIK, most benchmarks are not very depending on this, I expect it being mostly impactfully in cases where the projection itself is a lot of the time, but most benchmarks are spending most of the time on joins/aggregates.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T18:52:55.785+0000",
                    "updated": "2021-02-02T18:52:55.785+0000",
                    "started": "2021-02-02T18:52:55.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546197",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/546442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#discussion_r568342573\n\n\n\n##########\nFile path: rust/arrow/src/conversions.rs\n##########\n@@ -0,0 +1,127 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       It was renamed on a different PR to `temporal_conversions`. I rebased this PR so that we no longer have these changes.\n\n##########\nFile path: rust/datafusion/examples/simple_udf.rs\n##########\n@@ -54,50 +58,76 @@ fn create_context() -> Result<ExecutionContext> {\n     Ok(ctx)\n }\n \n+// a small utility function to compute pow(base, exponent)\n+fn maybe_pow(base: &Option<f64>, exponent: &Option<f64>) -> Option<f64> {\n+    match (base, exponent) {\n+        // in arrow, any value can be null.\n+        // Here we decide to make our UDF to return null when either base or exponent is null.\n+        (Some(base), Some(exponent)) => Some(base.powf(*exponent)),\n+        _ => None,\n+    }\n+}\n+\n+fn pow_array(base: &dyn Array, exponent: &dyn Array) -> Result<ArrayRef> {\n+    // 1. cast both arguments to f64. These casts MUST be aligned with the signature or this function panics!\n+    let base = base\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+    let exponent = exponent\n+        .as_any()\n+        .downcast_ref::<Float64Array>()\n+        .expect(\"cast failed\");\n+\n+    // this is guaranteed by DataFusion. We place it just to make it obvious.\n+    assert_eq!(exponent.len(), base.len());\n+\n+    // 2. perform the computation\n+    let array = base\n+        .iter()\n+        .zip(exponent.iter())\n+        .map(|(base, exponent)| maybe_pow(&base, &exponent))\n+        .collect::<Float64Array>();\n+\n+    // `Ok` because no error occurred during the calculation (we should add one if exponent was [0, 1[ and the base < 0 because that panics!)\n\nReview comment:\n       This represents an open interval: `0 <= exponent < 1` because `(x)^1 = x` for all x (including negative ones).\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In crypto_expressions we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`.\r\n   \r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In `crypto_expressions` we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`. All of this was already written, I just expanded it for the two variants (scalar and vector).\r\n   \r\n   Note that `crypto_expressions::handle` and `crypto_expressions::md5` are very similar, but their return types are different: `unary_binary_function` receives a `GenericStringArray`, but returns a `BinaryArray`. This is because `MD5`'s signature is `string -> string`, while `sha` is `string -> binary`.\r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -167,152 +175,166 @@ fn naive_datetime_to_timestamp(s: &str, datetime: NaiveDateTime) -> Result<i64>\n     }\n }\n \n-/// convert an array of strings into `Timestamp(Nanosecond, None)`\n-pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n-    let num_rows = args[0].len();\n-    let string_args =\n-        &args[0]\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .ok_or_else(|| {\n-                DataFusionError::Internal(\n-                    \"could not cast to_timestamp input to StringArray\".to_string(),\n-                )\n-            })?;\n-\n-    let result = (0..num_rows)\n-        .map(|i| {\n-            if string_args.is_null(i) {\n-                // NB: Since we use the same null bitset as the input,\n-                // the output for this value will be ignored, but we\n-                // need some value in the array we are building.\n-                Ok(0)\n-            } else {\n-                string_to_timestamp_nanos(string_args.value(i))\n+pub(crate) fn unary_string_to_primitive_function<'a, T, O, F>(\n+    args: &[&'a dyn Array],\n+    op: F,\n+    name: &str,\n+) -> Result<PrimitiveArray<O>>\n+where\n+    O: ArrowPrimitiveType,\n+    T: StringOffsetSizeTrait,\n+    F: Fn(&'a str) -> Result<O::Native>,\n+{\n+    if args.len() != 1 {\n+        return Err(DataFusionError::Internal(format!(\n+            \"{:?} args were supplied but {} takes exactly one argument\",\n+            args.len(),\n+            name,\n+        )));\n+    }\n+\n+    let array = args[0]\n+        .as_any()\n+        .downcast_ref::<GenericStringArray<T>>()\n+        .unwrap();\n+\n+    // first map is the iterator, second is for the `Option<_>`\n+    array.iter().map(|x| x.map(|x| op(x)).transpose()).collect()\n+}\n+\n+fn handle<'a, O, F, S>(\n\nReview comment:\n       The pattern depends on the input and output of the function. I.e. when input is `&str`, then `Utf8/LargeUtf8`. When output is a `Native`, then the output is `PrimitiveArray<O::Native>`. In general this construct depends on the what the user is trying to achieve (wrt to input and output types).\r\n   \r\n   I placed this here because it allows to decouple the pattern (of handling Scalar and Array) from the implementation of the logic (`string_to_timestamp_nanos` in this case).\r\n   \r\n   In `crypto_expressions` we have a similar pattern, but in this case the function is `&str -> AsRef<[u8]>`, which allowed to write all cripto `sha` in a succinct manner. However, in that case, the output type is always `Binary` instead of `LargeBinary` for `LargeStringArray`, because the hashes are always smaller than `i32::MAX`. All of this was already written, I just expanded it for the two variants (scalar and vector).\r\n   \r\n   Note that `crypto_expressions::handle` and `crypto_expressions::md5` are very similar, but their return types are different: `handle` receives a `GenericStringArray`, but returns a `BinaryArray`. This is because `MD5`'s signature is `string -> string`, while `sha` is `string -> binary`.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:05:25.965+0000",
                    "updated": "2021-02-03T01:05:25.965+0000",
                    "started": "2021-02-03T01:05:25.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546442",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/546463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771381944\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:07:33.987+0000",
                    "updated": "2021-02-03T01:07:33.987+0000",
                    "started": "2021-02-03T01:07:33.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546463",
                    "issueId": "13355731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/worklog/546517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9376:\nURL: https://github.com/apache/arrow/pull/9376#issuecomment-771887859\n\n\n   @jorgecarleitao what kind of benchmarks are you interested in? AFAIK, most benchmarks are not very depending on this, I expect it being mostly impactfully in cases where the projection itself is a lot of the time, but most benchmarks are spending most of the time on joins/aggregates.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:13:15.121+0000",
                    "updated": "2021-02-03T01:13:15.121+0000",
                    "started": "2021-02-03T01:13:15.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546517",
                    "issueId": "13355731"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 29400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5a22c05d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fd35ea7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@757f81a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@50fccfcf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48ba3ec5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d7b6d1a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64808b9d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5234b275[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4be1e2e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7dc4553b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d78f57d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6a285bbd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 29400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 14 10:58:56 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-14T10:58:56.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11446/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-31T14:40:32.000+0000",
        "updated": "2021-02-14T10:59:00.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 29400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[DataFusion] Support scalars in builtin functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355731/comment/17284397",
                    "id": "17284397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9376\n[https://github.com/apache/arrow/pull/9376]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-14T10:58:56.818+0000",
                    "updated": "2021-02-14T10:58:56.818+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0n6kw:",
        "customfield_12314139": null
    }
}