{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13407991",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991",
    "key": "ARROW-14445",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
            "name": "aocsa",
            "key": "aocsa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
            },
            "displayName": "Alexander Ocsa",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
            "name": "aocsa",
            "key": "aocsa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
            },
            "displayName": "Alexander Ocsa",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14445/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/693175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa opened a new pull request #11912:\nURL: https://github.com/apache/arrow/pull/11912\n\n\n   Issue https://issues.apache.org/jira/browse/ARROW-14330  will require the use of  memory resource  manager.  This  manager  will be used to decide when to spill to disk.  \r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T11:43:02.580+0000",
                    "updated": "2021-12-09T11:43:02.580+0000",
                    "started": "2021-12-09T11:43:02.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693175",
                    "issueId": "13407991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/693182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11912:\nURL: https://github.com/apache/arrow/pull/11912#issuecomment-989781260\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T11:51:00.543+0000",
                    "updated": "2021-12-09T11:51:00.543+0000",
                    "started": "2021-12-09T11:51:00.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693182",
                    "issueId": "13407991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/697698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11912:\nURL: https://github.com/apache/arrow/pull/11912#discussion_r771058164\n\n\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.cc\n##########\n@@ -0,0 +1,155 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/memory_resources.h\"\n+\n+#include <array>\n+#include <memory>\n+#include <mutex>\n+#include <random>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#ifdef __APPLE__\n+#include <sys/sysctl.h>\n+#include <sys/types.h>\n+#endif\n+\n+#ifdef __linux__\n+#include <sys/statvfs.h>\n+#include <sys/sysinfo.h>\n+#endif\n+\n+// Windows APIs\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+std::string MemoryLevelName(MemoryLevel memory_level) {\n+  static const char* MemoryLevelNames[] = {ARROW_STRINGIFY(MemoryLevel::kDiskLevel),\n+                                           ARROW_STRINGIFY(MemoryLevel::kCpuLevel),\n+                                           ARROW_STRINGIFY(MemoryLevel::kGpuLevel)};\n+\n+  return MemoryLevelNames[static_cast<int>(memory_level)];\n+}\n+\n+std::string MemoryResource::ToString() const { return MemoryLevelName(memory_level_); }\n+\n+MemoryResources::~MemoryResources() {}\n+\n+std::unique_ptr<MemoryResources> MemoryResources::Make() {\n+  return std::unique_ptr<MemoryResources>(new MemoryResources());\n+}\n+\n+Status MemoryResources::AddMemoryResource(std::shared_ptr<MemoryResource> resource) {\n+  auto level = static_cast<size_t>(resource->memory_level());\n+  if (stats_[level] != nullptr) {\n+    return Status::KeyError(\"Already have a resource type registered with name: \",\n+                            resource->ToString());\n+  }\n+  stats_[level] = std::move(resource);\n+  return Status::OK();\n+}\n+\n+size_t MemoryResources::size() const { return stats_.size(); }\n+\n+Result<MemoryResource*> MemoryResources::memory_resource(MemoryLevel memory_level) const {\n+  auto level = static_cast<size_t>(memory_level);\n+  if (stats_[level] == nullptr) {\n+    return Status::KeyError(\"No memory resource registered with level: \",\n+                            MemoryLevelName(memory_level));\n+  }\n+  return stats_[level].get();\n+}\n+\n+std::vector<MemoryResource*> MemoryResources::memory_resources() const {\n+  std::vector<MemoryResource*> arr;\n+  for (auto&& resource : stats_) {\n+    if (resource != nullptr) {\n+      arr.push_back(resource.get());\n+    }\n+  }\n+  return arr;\n+}\n+\n+namespace {\n+\n+size_t GetTotalMemorySize() {\n+#ifdef __APPLE__\n+  int mib[2];\n+  size_t physical_memory;\n+  size_t length;\n+  // Get the Physical memory size\n+  mib[0] = CTL_HW;\n+  mib[1] = HW_MEMSIZE;\n+  length = sizeof(size_t);\n+  sysctl(mib, 2, &physical_memory, &length, NULL, 0);\n+  return physical_memory;\n+#elif defined(_WIN32)\n+  MEMORYSTATUSEX status;\n+  status.dwLength = sizeof(status);\n+  GlobalMemoryStatusEx(&status);\n+  return status.ullTotalPhys;\n+#else  // Linux\n+  struct sysinfo si;\n+  sysinfo(&si);\n+  return (size_t)si.freeram;\n+#endif\n+}\n+\n+struct CPUMemoryResource : public MemoryResource {\n+  explicit CPUMemoryResource(arrow::MemoryPool* pool, float memory_limit_threshold = 0.75)\n+      : MemoryResource(MemoryLevel::kCpuLevel), pool_(pool) {\n+    total_memory_size_ = GetTotalMemorySize();\n+    memory_limit_ =\n+        static_cast<int64_t>(std::round(memory_limit_threshold * total_memory_size_));\n+  }\n+\n+  int64_t memory_used() override { return pool_->bytes_allocated(); }\n+\n+  int64_t memory_limit() override { return memory_limit_; }\n+\n+ private:\n+  arrow::MemoryPool* pool_;\n+  int64_t memory_limit_;\n+  int64_t total_memory_size_;\n+};\n+\n+static std::unique_ptr<MemoryResources> CreateBuiltInMemoryResources(MemoryPool* pool) {\n+  auto resources = MemoryResources::Make();\n+\n+  // CPU MemoryLevel\n+  auto cpu_level = std::make_shared<CPUMemoryResource>(pool);\n+  DCHECK_OK(resources->AddMemoryResource(std::move(cpu_level)));\n+\n+  // Disk MemoryLevel ...\n+\n+  return resources;\n+}\n+\n+}  // namespace\n+\n+MemoryResources* GetMemoryResources(MemoryPool* pool) {\n+  static auto resources = CreateBuiltInMemoryResources(pool);\n+  return resources.get();\n+}\n\nReview comment:\n       In the other places where we have this \"process-wide default\" we use a singleton pattern.  Do we need a process-wide default here?  If so, should we use the singleton pattern?\r\n   \r\n   If we don't want a process-wide default then what is the difference between this method and `MemoryResources::Make`?\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.h\n##########\n@@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <iterator>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+struct ExecBatch;\n+\n+enum class MemoryLevel : int { kGpuLevel, kCpuLevel, kDiskLevel, kNumLevels };\n+\n+class ARROW_EXPORT MemoryResource {\n\nReview comment:\n       The name `MemoryResource` seems a little off to me since \"disk\" isn't really \"memory\".  Can we name it a `StorageResource` or something like that?\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.h\n##########\n@@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <iterator>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+struct ExecBatch;\n+\n+enum class MemoryLevel : int { kGpuLevel, kCpuLevel, kDiskLevel, kNumLevels };\n\nReview comment:\n       `kGpuLevel` and `kDiskLevel` are not used anywhere.  Also, at the moment, I think `kGpuLevel` is going to provide more confusion than explanation.  Can we leave it out until we are using the GPU somewhere?  I think leaving `kDiskLevel` in is ok, but maybe add a comment with a TODO to a follow-up PR.  Something like \"Limit the max size of temporary spillover storage\".\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.h\n##########\n@@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <iterator>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+struct ExecBatch;\n+\n+enum class MemoryLevel : int { kGpuLevel, kCpuLevel, kDiskLevel, kNumLevels };\n+\n+class ARROW_EXPORT MemoryResource {\n+ public:\n+  explicit MemoryResource(MemoryLevel memory_level) : memory_level_(memory_level) {}\n+\n+  virtual ~MemoryResource() = default;\n+\n+  MemoryLevel memory_level() const { return memory_level_; }\n+\n+  std::string ToString() const;\n+\n+  virtual int64_t memory_limit() = 0;\n+\n+  virtual int64_t memory_used() = 0;\n+\n+ private:\n+  MemoryLevel memory_level_;\n+};\n+\n+class ARROW_EXPORT MemoryResources {\n+ public:\n+  ~MemoryResources();\n+\n+  static std::unique_ptr<MemoryResources> Make();\n+\n+  Status AddMemoryResource(std::shared_ptr<MemoryResource> resource);\n+\n+  size_t size() const;\n+\n+  Result<MemoryResource*> memory_resource(MemoryLevel level) const;\n\nReview comment:\n       Rather than expose the underlying `MemoryResource` could we just move `memory_used()` and `memory_limit()` to this class?  Then `MemoryResource` can be an implementation detail.\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.h\n##########\n@@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <iterator>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+struct ExecBatch;\n+\n+enum class MemoryLevel : int { kGpuLevel, kCpuLevel, kDiskLevel, kNumLevels };\n+\n+class ARROW_EXPORT MemoryResource {\n+ public:\n+  explicit MemoryResource(MemoryLevel memory_level) : memory_level_(memory_level) {}\n+\n+  virtual ~MemoryResource() = default;\n+\n+  MemoryLevel memory_level() const { return memory_level_; }\n+\n+  std::string ToString() const;\n+\n+  virtual int64_t memory_limit() = 0;\n+\n+  virtual int64_t memory_used() = 0;\n+\n+ private:\n+  MemoryLevel memory_level_;\n+};\n+\n+class ARROW_EXPORT MemoryResources {\n+ public:\n+  ~MemoryResources();\n+\n+  static std::unique_ptr<MemoryResources> Make();\n+\n+  Status AddMemoryResource(std::shared_ptr<MemoryResource> resource);\n+\n+  size_t size() const;\n+\n+  Result<MemoryResource*> memory_resource(MemoryLevel level) const;\n+\n+  std::vector<MemoryResource*> memory_resources() const;\n\nReview comment:\n       How do you envision this method being used?\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -277,6 +277,26 @@ struct OrderBySinkNode final : public SinkNode {\n   void InputReceived(ExecNode* input, ExecBatch batch) override {\n     DCHECK_EQ(input, inputs_[0]);\n \n+    auto resources = plan()->exec_context()->memory_resources();\n+    auto resource = resources->memory_resource(MemoryLevel::kCpuLevel);\n+    if (ErrorIfNotOk(resource.status())) {\n+      StopProducing();\n+      if (input_counter_.Cancel()) {\n+        finished_.MarkFinished(resource.status());\n+      }\n+      return;\n+    }\n+\n+    auto memory_resource = resource.ValueUnsafe();\n+    auto memory_used = memory_resource->memory_used();\n+    if (memory_used >= memory_resource->memory_limit()) {\n+      StopProducing();\n+      if (input_counter_.Cancel()) {\n+        finished_.MarkFinished(Status::Invalid(\"Not enough memory resources\"));\n+      }\n+      return;\n+    }\n\nReview comment:\n       This seems like a lot of code that could potentially get repeated in a lot of places.  I suppose eventually this kind of logic will be moving into a scheduler?\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.h\n##########\n@@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <array>\n+#include <iterator>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+struct ExecBatch;\n+\n+enum class MemoryLevel : int { kGpuLevel, kCpuLevel, kDiskLevel, kNumLevels };\n+\n+class ARROW_EXPORT MemoryResource {\n+ public:\n+  explicit MemoryResource(MemoryLevel memory_level) : memory_level_(memory_level) {}\n+\n+  virtual ~MemoryResource() = default;\n+\n+  MemoryLevel memory_level() const { return memory_level_; }\n+\n+  std::string ToString() const;\n+\n+  virtual int64_t memory_limit() = 0;\n+\n+  virtual int64_t memory_used() = 0;\n+\n+ private:\n+  MemoryLevel memory_level_;\n+};\n+\n+class ARROW_EXPORT MemoryResources {\n+ public:\n+  ~MemoryResources();\n+\n+  static std::unique_ptr<MemoryResources> Make();\n+\n+  Status AddMemoryResource(std::shared_ptr<MemoryResource> resource);\n\nReview comment:\n       Can `MemoryResources` be immutable?  Perhaps we can pass in a vector of `MemoryResource` at construction time.  Is there a valid use case for modifying it after construction?\n\n##########\nFile path: cpp/src/arrow/compute/memory_resources.cc\n##########\n@@ -0,0 +1,155 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/memory_resources.h\"\n+\n+#include <array>\n+#include <memory>\n+#include <mutex>\n+#include <random>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#ifdef __APPLE__\n+#include <sys/sysctl.h>\n+#include <sys/types.h>\n+#endif\n+\n+#ifdef __linux__\n+#include <sys/statvfs.h>\n+#include <sys/sysinfo.h>\n+#endif\n+\n+// Windows APIs\n+#include \"arrow/util/windows_compatibility.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+std::string MemoryLevelName(MemoryLevel memory_level) {\n+  static const char* MemoryLevelNames[] = {ARROW_STRINGIFY(MemoryLevel::kDiskLevel),\n+                                           ARROW_STRINGIFY(MemoryLevel::kCpuLevel),\n+                                           ARROW_STRINGIFY(MemoryLevel::kGpuLevel)};\n+\n+  return MemoryLevelNames[static_cast<int>(memory_level)];\n+}\n+\n+std::string MemoryResource::ToString() const { return MemoryLevelName(memory_level_); }\n+\n+MemoryResources::~MemoryResources() {}\n+\n+std::unique_ptr<MemoryResources> MemoryResources::Make() {\n+  return std::unique_ptr<MemoryResources>(new MemoryResources());\n+}\n+\n+Status MemoryResources::AddMemoryResource(std::shared_ptr<MemoryResource> resource) {\n+  auto level = static_cast<size_t>(resource->memory_level());\n+  if (stats_[level] != nullptr) {\n+    return Status::KeyError(\"Already have a resource type registered with name: \",\n+                            resource->ToString());\n+  }\n+  stats_[level] = std::move(resource);\n+  return Status::OK();\n+}\n+\n+size_t MemoryResources::size() const { return stats_.size(); }\n+\n+Result<MemoryResource*> MemoryResources::memory_resource(MemoryLevel memory_level) const {\n+  auto level = static_cast<size_t>(memory_level);\n+  if (stats_[level] == nullptr) {\n+    return Status::KeyError(\"No memory resource registered with level: \",\n+                            MemoryLevelName(memory_level));\n+  }\n+  return stats_[level].get();\n+}\n+\n+std::vector<MemoryResource*> MemoryResources::memory_resources() const {\n+  std::vector<MemoryResource*> arr;\n+  for (auto&& resource : stats_) {\n+    if (resource != nullptr) {\n+      arr.push_back(resource.get());\n+    }\n+  }\n+  return arr;\n+}\n+\n+namespace {\n+\n+size_t GetTotalMemorySize() {\n\nReview comment:\n       Can you add a comment explaining what is being returned here?  Does this number include swap for example?  Or is it based on physical RAM.  Are there any caveats to be aware of?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T02:37:41.924+0000",
                    "updated": "2021-12-17T02:37:41.924+0000",
                    "started": "2021-12-17T02:37:41.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697698",
                    "issueId": "13407991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/760295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on PR #11912:\nURL: https://github.com/apache/arrow/pull/11912#issuecomment-1105620416\n\n   ping @aocsa \n\n\n",
                    "created": "2022-04-21T18:36:36.397+0000",
                    "updated": "2022-04-21T18:36:36.397+0000",
                    "started": "2022-04-21T18:36:36.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760295",
                    "issueId": "13407991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/761029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on PR #11912:\nURL: https://github.com/apache/arrow/pull/11912#issuecomment-1106782584\n\n   > ping @aocsa\r\n   \r\n   I am not involved in this task anymore, I will close this PR as the requirements for spilling changed a lot since last year. \n\n\n",
                    "created": "2022-04-22T19:05:31.072+0000",
                    "updated": "2022-04-22T19:05:31.072+0000",
                    "started": "2022-04-22T19:05:31.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761029",
                    "issueId": "13407991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/worklog/761030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa closed pull request #11912: ARROW-14445: [C++]  Memory resources management\nURL: https://github.com/apache/arrow/pull/11912\n\n\n",
                    "created": "2022-04-22T19:05:32.950+0000",
                    "updated": "2022-04-22T19:05:32.950+0000",
                    "started": "2022-04-22T19:05:32.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761030",
                    "issueId": "13407991"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@28132916[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@699bdd2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1aef39e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@51d37041[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f23f059[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6bd2962f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8119a97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@420aa2ac[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32db238c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4d47b816[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4986560b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5e0e8255[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 17 12:34:55 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14445/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-10-22T17:49:40.000+0000",
        "updated": "2022-07-15T15:16:12.000+0000",
        "timeoriginalestimate": null,
        "description": "Issue https://issues.apache.org/jira/browse/ARROW-14330 \u00a0will require the use of\u00a0 memory resource\u00a0 manager.\u00a0 This\u00a0 manager\u00a0 will be used to decide when to spill to disk.\u00a0\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement memory management for DataHolder",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407991/comment/17477172",
                    "id": "17477172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponing to 8.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2022-01-17T12:34:55.785+0000",
                    "updated": "2022-01-17T12:34:55.785+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0w39k:",
        "customfield_12314139": null
    }
}