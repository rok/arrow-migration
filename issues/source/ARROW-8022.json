{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13290145",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145",
    "key": "ARROW-8022",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8022/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 50,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/636977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896991786\n\n\n   https://issues.apache.org/jira/browse/ARROW-8022\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T16:57:40.503+0000",
                    "updated": "2021-08-11T16:57:40.503+0000",
                    "started": "2021-08-11T16:57:40.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636977",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/636978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896991956\n\n\n   Some operations are not yet implemented: `erase`, `insert`...\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T16:57:54.316+0000",
                    "updated": "2021-08-11T16:57:54.316+0000",
                    "started": "2021-08-11T16:57:54.316+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636978",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/636980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896993214\n\n\n   @ursabot please benchmark\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T16:59:41.875+0000",
                    "updated": "2021-08-11T16:59:41.875+0000",
                    "started": "2021-08-11T16:59:41.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636980",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/636981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896993742\n\n\n   Benchmark runs are scheduled for baseline = e5449273eba95bacc9f9cb9c5e95038993e292e1 and contender = eef6764ec58c823c98ad1df9072039c7e04f9c4e. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3869e2ce850b454dba5112c5208deb7e...f02b6c1a44234090a3673e5b3c3a36e2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7b56cfa97ff34f4e8df2762b413104e3...07a722a0520247428de841d543c9b8fe/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/80122ed8241a45b0a5efc397f2ab1698...368b305754bd4eec9f62889c81d98876/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T17:00:27.188+0000",
                    "updated": "2021-08-11T17:00:27.188+0000",
                    "started": "2021-08-11T17:00:27.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636981",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/636986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896993742\n\n\n   Benchmark runs are scheduled for baseline = e5449273eba95bacc9f9cb9c5e95038993e292e1 and contender = eef6764ec58c823c98ad1df9072039c7e04f9c4e. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3869e2ce850b454dba5112c5208deb7e...f02b6c1a44234090a3673e5b3c3a36e2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7b56cfa97ff34f4e8df2762b413104e3...07a722a0520247428de841d543c9b8fe/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/80122ed8241a45b0a5efc397f2ab1698...368b305754bd4eec9f62889c81d98876/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T17:11:12.168+0000",
                    "updated": "2021-08-11T17:11:12.168+0000",
                    "started": "2021-08-11T17:11:12.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636986",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896993742\n\n\n   Benchmark runs are scheduled for baseline = e5449273eba95bacc9f9cb9c5e95038993e292e1 and contender = eef6764ec58c823c98ad1df9072039c7e04f9c4e. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3869e2ce850b454dba5112c5208deb7e...f02b6c1a44234090a3673e5b3c3a36e2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7b56cfa97ff34f4e8df2762b413104e3...07a722a0520247428de841d543c9b8fe/)\n   [Finished :arrow_down:0.77% :arrow_up:0.38%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/80122ed8241a45b0a5efc397f2ab1698...368b305754bd4eec9f62889c81d98876/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T18:40:37.115+0000",
                    "updated": "2021-08-11T18:40:37.115+0000",
                    "started": "2021-08-11T18:40:37.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637060",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#issuecomment-896993742\n\n\n   Benchmark runs are scheduled for baseline = e5449273eba95bacc9f9cb9c5e95038993e292e1 and contender = eef6764ec58c823c98ad1df9072039c7e04f9c4e. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3869e2ce850b454dba5112c5208deb7e...f02b6c1a44234090a3673e5b3c3a36e2/)\n   [Failed :arrow_down:0.78% :arrow_up:0.78%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/7b56cfa97ff34f4e8df2762b413104e3...07a722a0520247428de841d543c9b8fe/)\n   [Finished :arrow_down:0.77% :arrow_up:0.38%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/80122ed8241a45b0a5efc397f2ab1698...368b305754bd4eec9f62889c81d98876/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T18:44:34.126+0000",
                    "updated": "2021-08-11T18:44:34.126+0000",
                    "started": "2021-08-11T18:44:34.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637064",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687694889\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n\nReview comment:\n       Could we avoid inheritance here?\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       This uses 24 bytes in addition to the static elements. I think it'd be worthwhile to compress this further. Here's a sketch which uses a minimum of 16 bytes (for example, `SmallVector<int32_t, 3>` would be only 16 bytes)\r\n   \r\n   ```c++\r\n   template <typename T, size_t N>\r\n   struct LittleEndianState {\r\n     using Storage = StaticVectorMixin<T>;\r\n     using storage_type = typename Storage::storage_type;\r\n   \r\n     struct DynamicState {\r\n       // low bit will be zero for alignment\r\n       T* data_;\r\n       uint32_t size_, capacity_;\r\n     };\r\n   \r\n     struct SmallState {\r\n       // low bit will be one for discrimination\r\n       uint8_t shifted_size_;\r\n       storage_type storage_[N];\r\n   \r\n       size_t size() const { return shifted_size_ >> 1; }\r\n     };\r\n   \r\n     union {\r\n       // low bit will be set if small\r\n       uint8_t discriminant_;\r\n       DynamicState dynamic_;\r\n       SmallState small_;\r\n     };\r\n   \r\n     bool is_small() const { return discriminant_ & 1; }\r\n   \r\n     size_t size() const {\r\n       return is_small() ? small_.size() >> 1 : dynamic_.size_;\r\n     }\r\n   };\r\n   \r\n   template <typename T, size_t N>\r\n   struct BigEndianState {\r\n     using Storage = StaticVectorMixin<T>;\r\n     using storage_type = typename Storage::storage_type;\r\n   \r\n     struct DynamicState {\r\n       // high bit will be zero for discrimination\r\n       uint32_t size_, capacity_;\r\n       T* data_;\r\n     };\r\n   \r\n     struct SmallState {\r\n       // high bit will be one for discrimination\r\n       uint8_t shifted_size_;\r\n       storage_type storage_[N];\r\n   \r\n       size_t size() const { return shifted_size_ & 0b0111'1111; }\r\n     };\r\n   \r\n     union {\r\n       // high bit will be set if small\r\n       uint8_t discriminant_;\r\n       DynamicState dynamic_;\r\n       SmallState small_;\r\n     };\r\n   \r\n     bool is_small() const { return discriminant_ & 0b1000'0000; }\r\n   \r\n     size_t size() const {\r\n       return is_small() ? small_.size() >> 1 : dynamic_.size_;\r\n     }\r\n   };\r\n   \r\n   template <typename T, size_t N>\r\n   struct SmallVector {\r\n   #ifdef BIGENDIAN\r\n     using State = BigEndianState<T, N>;\r\n   #else\r\n     using State = LittleEndianState<T, N>;\r\n   #endif\r\n     State state_;\r\n   \r\n     using Storage = StaticVectorMixin<T>;\r\n     using storage_type = typename Storage::storage_type;\r\n   \r\n     T* data() {\r\n       return state_.is_small() ? Storage::ptr_at(state_.small_.storage_, 0)\r\n                                : state_.dynamic_.data_;\r\n     }\r\n   \r\n     ~SmallVector() {\r\n       if (state_.is_small()) {\r\n         Storage::destroy_storage(state_.small_.storage_, state_.small_.size());\r\n       } else {\r\n         delete[] state_.dynamic_.data_;\r\n       }\r\n     }\r\n   \r\n     // ...\r\n   };\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n\nReview comment:\n       I'm not sure this is worthwhile; `std::iterator_traits` is already specialized for `int*` and `const int*` so I think you could just `using iterator = int*; using const_iterator = const int*;` below\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T13:57:12.637+0000",
                    "updated": "2021-08-12T13:57:12.637+0000",
                    "started": "2021-08-12T13:57:12.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637351",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687744497\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n\nReview comment:\n       Wow, this is very couple if it works! Will check on CI.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:04:38.945+0000",
                    "updated": "2021-08-12T14:04:38.945+0000",
                    "started": "2021-08-12T14:04:38.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637353",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687744890\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n\nReview comment:\n       How do you suggest to avoid it? We can use composition but it will only add some indirection boilerplate.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:05:03.482+0000",
                    "updated": "2021-08-12T14:05:03.482+0000",
                    "started": "2021-08-12T14:05:03.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637354",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687746795\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       We can, but we must balance processing time against memory footprint as well. The main point of small vectors is to avoid dynamic allocations. But I don't think we'll have many of them in existence at any given point, so trying to save a few bytes doesn't sound worthwhile.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:07:21.200+0000",
                    "updated": "2021-08-12T14:07:21.200+0000",
                    "started": "2021-08-12T14:07:21.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637355",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687744497\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n\nReview comment:\n       Wow, this is very cool if it works! Will check on CI.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:07:34.357+0000",
                    "updated": "2021-08-12T14:07:34.357+0000",
                    "started": "2021-08-12T14:07:34.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637356",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687753177\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       I have the opposite intuition; I think it would frequently be handy to have potentially large numbers of them and stay efficient. For example, [the subtree pruning algorithm](https://github.com/bkietz/arrow/blob/31bc1825ac1dc8c4c02869f0c1dda10d3b20f805/cpp/src/arrow/compute/exec/subtree_internal.h#L58-L70) \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:14:10.328+0000",
                    "updated": "2021-08-12T14:14:10.328+0000",
                    "started": "2021-08-12T14:14:10.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637358",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687754767\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       How large is large in this context?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:15:42.947+0000",
                    "updated": "2021-08-12T14:15:42.947+0000",
                    "started": "2021-08-12T14:15:42.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637359",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687755685\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n\nReview comment:\n       I prefer some indirection boilerplate to inheritance in this case; I made a sketch of what that'd look like in the comment below.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:16:36.297+0000",
                    "updated": "2021-08-12T14:16:36.297+0000",
                    "started": "2021-08-12T14:16:36.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637360",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687778868\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       thousands to millions\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T14:39:32.045+0000",
                    "updated": "2021-08-12T14:39:32.045+0000",
                    "started": "2021-08-12T14:39:32.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637368",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687812121\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       You may want to prototype another small vector implementation and benchmark both in this use case. I'm not extremely convinced lowering the footprint will necessarily make things faster, but those things are of course extremely difficult to predict.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T15:05:01.596+0000",
                    "updated": "2021-08-12T15:05:01.596+0000",
                    "started": "2021-08-12T15:05:01.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637374",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r687827961\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       If you want to further compress the state, you can even have the following representation:\r\n   ```c++\r\n   struct Static {\r\n     uint8_t shifted_size_;\r\n     storage_type storage_[N];\r\n   };\r\n   struct DynamicStorage {\r\n     size_t size_;\r\n     size_t capacity_;\r\n     storage_type storage_[];\r\n   };\r\n   struct Dynamic {\r\n     DynamicStorage* dynamic_;\r\n   };\r\n   union {\r\n     uint8_t tag_;\r\n     Static static_;\r\n     Dynamic dynamic_;\r\n   };\r\n   \r\n   bool is_static() const {\r\n     return bool(tag & 1);\r\n   }\r\n   size_t size() const {\r\n     return is_static() ? (static_->shifted_size_ >> 1) : (dynamic_->dynamic_->size_);\r\n   }\r\n   size_t capacity() const {\r\n     return is_static() ? N : (dynamic_->dynamic_->capacity_);\r\n   }\r\n   storage_type* storage_ptr() {\r\n     return is_static() ? static_->storage_ : dynamic_->dynamic_->storage_;\r\n   }\r\n   ```\r\n   \r\n   but then you have to deal with all the joys of avoiding UB with pointer casts and union access...\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-12T15:17:07.270+0000",
                    "updated": "2021-08-12T15:17:07.270+0000",
                    "started": "2021-08-12T15:17:07.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637376",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/637886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r688771710\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  void destroy() {}\n+};\n+\n+template <typename T, size_t N>\n+class StaticVectorBaseStorage<T, N, true> : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+\n+  ~StaticVectorBaseStorage() noexcept { destroy(); }\n+\n+  void destroy() noexcept { this->destroy_storage(static_data_, size_); }\n+};\n+\n+template <typename T, size_t N, bool D = !std::is_trivially_destructible<T>::value>\n+class StaticVectorBase : public StaticVectorBaseStorage<T, N, D> {\n+ protected:\n+  using Base = StaticVectorBaseStorage<T, N, D>;\n+  using typename Base::storage_type;\n+\n+  using Base::size_;\n+  using Base::static_data_;\n+\n+  StaticVectorBase() noexcept = default;\n+\n+  storage_type* data_ptr() { return static_data_; }\n+\n+  constexpr const storage_type* const_data_ptr() const { return static_data_; }\n+\n+  void bump_size(size_t addend) {\n+    assert(size_ + addend <= N);\n+    size_ += addend;\n+  }\n+\n+  void reduce_size(size_t reduce_by) {\n+    assert(reduce_by <= size_);\n+    size_ -= reduce_by;\n+  }\n+\n+  void move_from(StaticVectorBase&& other) noexcept {\n+    size_ = other.size_;\n+    this->move_storage(other.static_data_, static_data_, size_);\n+    other.size_ = 0;\n+  }\n+\n+ public:\n+  constexpr size_t capacity() const { return N; }\n+\n+  constexpr size_t max_size() const { return N; }\n+\n+  void reserve(size_t n) {}\n+\n+  void clear() {\n+    this->destroy_storage(static_data_, size_);\n+    size_ = 0;\n+  }\n+};\n+\n+template <typename T, size_t N>\n+class SmallVectorBase : public StaticVectorMixin<T> {\n+ protected:\n+  using typename StaticVectorMixin<T>::storage_type;\n+\n+  storage_type static_data_[N];\n+  size_t size_ = 0;\n+  storage_type* data_ = static_data_;\n+  size_t dynamic_capacity_ = 0;\n\nReview comment:\n       The way you have written it currently is the way LLVM's SmallVector works. In light of that I don't have the confidence to stand by my intuition for now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-13T20:45:26.307+0000",
                    "updated": "2021-08-13T20:45:26.307+0000",
                    "started": "2021-08-13T20:45:26.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "637886",
                    "issueId": "13290145"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/worklog/638103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10915:\nURL: https://github.com/apache/arrow/pull/10915#discussion_r689432861\n\n\n\n##########\nFile path: cpp/src/arrow/util/small_vector.h\n##########\n@@ -0,0 +1,509 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstddef>\n+#include <initializer_list>\n+#include <limits>\n+#include <new>\n+#include <type_traits>\n+#include <utility>\n+\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+#if __cplusplus >= 201703L\n+using std::launder;\n+#else\n+// TODO factor out from result.h\n+\n+// template <class T>\n+// constexpr T* launder(T* p) noexcept {\n+//   return p;\n+// }\n+#endif\n+\n+template <typename ValueType, typename PointerType, typename ReferenceType>\n+class VectorIterator {\n+ public:\n+  using value_type = ValueType;\n+  using pointer = PointerType;\n+  using reference = ReferenceType;\n+  using difference_type = ptrdiff_t;\n+  using iterator_category = std::random_access_iterator_tag;\n+\n+  // Some algorithms need to default-construct an iterator\n+  constexpr VectorIterator() noexcept = default;\n+\n+  constexpr explicit VectorIterator(pointer ptr) noexcept : ptr_(ptr) {}\n+\n+  // Value access\n+  constexpr reference operator*() const { return *ptr_; }\n+\n+  constexpr reference operator[](difference_type n) const { return ptr_[n]; }\n+\n+  // Forward / backward\n+  VectorIterator& operator++() {\n+    ++ptr_;\n+    return *this;\n+  }\n+  VectorIterator& operator--() {\n+    --ptr_;\n+    return *this;\n+  }\n+  VectorIterator operator++(int) {\n+    VectorIterator tmp(*this);\n+    ++ptr_;\n+    return tmp;\n+  }\n+  VectorIterator operator--(int) {\n+    VectorIterator tmp(*this);\n+    --ptr_;\n+    return tmp;\n+  }\n+\n+  // Arithmetic\n+  constexpr difference_type operator-(const VectorIterator& other) const {\n+    return ptr_ - other.ptr_;\n+  }\n+  constexpr VectorIterator operator+(difference_type n) const {\n+    return VectorIterator(ptr_ + n);\n+  }\n+  constexpr VectorIterator operator-(difference_type n) const {\n+    return VectorIterator(ptr_ - n);\n+  }\n+  VectorIterator& operator+=(difference_type n) {\n+    ptr_ += n;\n+    return *this;\n+  }\n+  VectorIterator& operator-=(difference_type n) {\n+    ptr_ -= n;\n+    return *this;\n+  }\n+\n+  // Comparisons\n+  constexpr bool operator==(const VectorIterator& other) const {\n+    return ptr_ == other.ptr_;\n+  }\n+  constexpr bool operator!=(const VectorIterator& other) const {\n+    return ptr_ != other.ptr_;\n+  }\n+  constexpr bool operator<(const VectorIterator& other) const {\n+    return ptr_ < other.ptr_;\n+  }\n+  constexpr bool operator>(const VectorIterator& other) const {\n+    return ptr_ > other.ptr_;\n+  }\n+  constexpr bool operator<=(const VectorIterator& other) const {\n+    return ptr_ <= other.ptr_;\n+  }\n+  constexpr bool operator>=(const VectorIterator& other) const {\n+    return ptr_ >= other.ptr_;\n+  }\n+\n+ private:\n+  pointer ptr_ = NULLPTR;\n+};\n+\n+template <typename T>\n+class StaticVectorMixin {\n+ protected:\n+  // properly aligned uninitialized storage for N T's\n+  using storage_type = typename std::aligned_storage<sizeof(T), alignof(T)>::type;\n+\n+  static T* ptr_at(storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<T*>(&p[i]));\n+  }\n+\n+  static const T* ptr_at(const storage_type* p, size_t i) {\n+    return launder(reinterpret_cast<const T*>(&p[i]));\n+  }\n+\n+  static void move_storage(storage_type* src, storage_type* dest, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      T* src_item = ptr_at(src, i);\n+      T* dest_item = ptr_at(dest, i);\n+      new (dest_item) T(std::move(*src_item));\n+      src_item->~T();\n+    }\n+  }\n+\n+  static void destroy_storage(storage_type* p, size_t n) {\n+    for (size_t i = 0; i < n; ++i) {\n+      ptr_at(p, i)->~T();\n+    }\n+  }\n+};\n+\n+template <typename T, size_t N, bool NonTrivialDestructor>\n+class StaticVectorBaseStorage : public StaticVectorMixin<T> {\n\nReview comment:\n       Do you still want me to try composition?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T10:52:50.839+0000",
                    "updated": "2021-08-16T10:52:50.839+0000",
                    "started": "2021-08-16T10:52:50.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638103",
                    "issueId": "13290145"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 30000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4d62c32e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f34136d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7af670ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@55f6bbb7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3615224f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@22b5fcb9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b8d0198[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@b46245d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14de6820[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@19030e36[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a815d4f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@205fe68e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 26 12:01:32 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-26T12:01:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8022/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-03-06T17:41:00.000+0000",
        "updated": "2021-08-26T12:01:42.000+0000",
        "timeoriginalestimate": null,
        "description": "{{small_vector<>}} is a C++ utility class which does not use heap allocation for small numbers of elements. [Folly|https://github.com/facebook/folly/blob/master/folly/docs/small_vector.md], [Boost|https://github.com/boostorg/container/blob/develop/include/boost/container/small_vector.hpp], [Abseil|https://github.com/abseil/abseil-cpp/blob/master/absl/container/inlined_vector.h], and [LLVM|https://llvm.org/doxygen/classllvm_1_1SmallVector.html] each provide one.\r\n\r\nIn many cases a vector usually has few elements but might have many. If we use std::vector we have to bother the allocator unless the vector is actually empty. My specific use case for this is field lookup by name: I expect that most schemas will have unique field names, but strictly speaking we support duplicate field names. It would be ideal not incur a performance penalty for 99.9% of field lookups which yield 0 or 1 fields just to accommodate the case where there may be multiple.\r\n\r\n\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Provide or Vendor a small_vector implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290145/comment/17405181",
                    "id": "17405181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10915\n[https://github.com/apache/arrow/pull/10915]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-26T12:01:32.551+0000",
                    "updated": "2021-08-26T12:01:32.551+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0c9fc:",
        "customfield_12314139": null
    }
}